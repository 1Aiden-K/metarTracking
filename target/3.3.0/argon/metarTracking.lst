
c:/Users/aiden/Desktop/IoT-Engineering/metarTracking/target/3.3.0/argon/metarTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000075c0  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bb5e0  000bb5e0  0000b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bb604  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e144  000bb608  0001e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004d0  2003e320  2003e320  0002e320  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bb7e4  000bb7e4  0002b7e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bb80c  000bb80c  0002b80c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014ea78  00000000  00000000  0002b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00016937  00000000  00000000  0017a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00041e44  00000000  00000000  00190bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003228  00000000  00000000  001d2a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b728  00000000  00000000  001d5c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040997  00000000  00000000  001e1353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004b38b  00000000  00000000  00221cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fdb5  00000000  00000000  0026d075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac58  00000000  00000000  003ace2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fb5d 	bl	b86f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fb7f 	bl	b8740 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e144 	.word	0x2003e144
   b404c:	000bb608 	.word	0x000bb608
   b4050:	2003e320 	.word	0x2003e320
   b4054:	2003e320 	.word	0x2003e320
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fafd 	bl	b6660 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bb5b4 	.word	0x000bb5b4
   b4080:	000bb5d8 	.word	0x000bb5d8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 be30 	b.w	b4ce8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fde9 	bl	b4c60 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 ba9d 	b.w	b65d0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bf9d 	b.w	b5fd4 <malloc>

000b409a <_Znaj>:
   b409a:	f001 bf9b 	b.w	b5fd4 <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f001 bfa1 	b.w	b5fe4 <free>

000b40a2 <_ZdaPv>:
   b40a2:	f001 bf9f 	b.w	b5fe4 <free>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f001 bf9d 	b.w	b5fe4 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>:
      /**
       *  @brief  Copy contents of @a s into this string.
       *  @param  __s  Source null-terminated string.
       */
      basic_string&
      operator=(const _CharT* __s)
   b40ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40bc:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b40be:	4608      	mov	r0, r1
   b40c0:	9103      	str	r1, [sp, #12]
   b40c2:	f004 fb7d 	bl	b87c0 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b40c6:	9b03      	ldr	r3, [sp, #12]
   b40c8:	9000      	str	r0, [sp, #0]
   b40ca:	6862      	ldr	r2, [r4, #4]
   b40cc:	2100      	movs	r1, #0
   b40ce:	4620      	mov	r0, r4
   b40d0:	f003 fb32 	bl	b7738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
      { return this->assign(__s); }
   b40d4:	b004      	add	sp, #16
   b40d6:	bd10      	pop	{r4, pc}

000b40d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>:
      operator=(basic_string&& __str)
   b40d8:	b570      	push	{r4, r5, r6, lr}
      { return _M_dataplus._M_p; }
   b40da:	460b      	mov	r3, r1
      operator=(basic_string&& __str)
   b40dc:	460c      	mov	r4, r1
      { return _M_dataplus._M_p; }
   b40de:	f853 1b08 	ldr.w	r1, [r3], #8
	if (__str._M_is_local())
   b40e2:	4299      	cmp	r1, r3
      operator=(basic_string&& __str)
   b40e4:	4605      	mov	r5, r0
      { return _M_dataplus._M_p; }
   b40e6:	6800      	ldr	r0, [r0, #0]
	if (__str._M_is_local())
   b40e8:	d10d      	bne.n	b4106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x2e>
      { return _M_string_length; }
   b40ea:	6862      	ldr	r2, [r4, #4]
	    if (__str.size())
   b40ec:	b10a      	cbz	r2, b40f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x1a>
	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
   b40ee:	f003 faa3 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      { return _M_string_length; }
   b40f2:	6863      	ldr	r3, [r4, #4]
      { __c1 = __c2; }
   b40f4:	682a      	ldr	r2, [r5, #0]
      { _M_string_length = __length; }
   b40f6:	606b      	str	r3, [r5, #4]
   b40f8:	2100      	movs	r1, #0
   b40fa:	54d1      	strb	r1, [r2, r3]
      { return _M_dataplus._M_p; }
   b40fc:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b40fe:	2300      	movs	r3, #0
   b4100:	6063      	str	r3, [r4, #4]
   b4102:	7013      	strb	r3, [r2, #0]
      }
   b4104:	bd70      	pop	{r4, r5, r6, pc}
      { _M_dataplus._M_p = __p; }
   b4106:	6029      	str	r1, [r5, #0]
      { return _M_string_length; }
   b4108:	6861      	ldr	r1, [r4, #4]
      { _M_string_length = __length; }
   b410a:	6069      	str	r1, [r5, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   b410c:	f105 0608 	add.w	r6, r5, #8
	    if (!_M_is_local())
   b4110:	42b0      	cmp	r0, r6
	    _M_capacity(__str._M_allocated_capacity);
   b4112:	68a1      	ldr	r1, [r4, #8]
		    __capacity = _M_allocated_capacity;
   b4114:	bf18      	it	ne
   b4116:	68aa      	ldrne	r2, [r5, #8]
      { _M_allocated_capacity = __capacity; }
   b4118:	60a9      	str	r1, [r5, #8]
	    pointer __data = nullptr;
   b411a:	bf08      	it	eq
   b411c:	2000      	moveq	r0, #0
	    if (__data)
   b411e:	b110      	cbz	r0, b4126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x4e>
      { _M_dataplus._M_p = __p; }
   b4120:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4122:	60a2      	str	r2, [r4, #8]
   b4124:	e7ea      	b.n	b40fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>
      { _M_dataplus._M_p = __p; }
   b4126:	6023      	str	r3, [r4, #0]
   b4128:	e7e8      	b.n	b40fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>
	...

000b412c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b412c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b412e:	f001 fd7d 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4132:	4b03      	ldr	r3, [pc, #12]	; (b4140 <_ZN10CloudClass7processEv+0x14>)
   b4134:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b4136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b413a:	f001 bf33 	b.w	b5fa4 <spark_process>
   b413e:	bf00      	nop
   b4140:	2003e740 	.word	0x2003e740

000b4144 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4144:	6803      	ldr	r3, [r0, #0]
   b4146:	b12b      	cbz	r3, b4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4148:	6842      	ldr	r2, [r0, #4]
   b414a:	4293      	cmp	r3, r2
   b414c:	d202      	bcs.n	b4154 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b414e:	4618      	mov	r0, r3
   b4150:	f004 ba5f 	b.w	b8612 <atoi>
   b4154:	2000      	movs	r0, #0
   b4156:	4770      	bx	lr

000b4158 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4158:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b415a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b415c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b415e:	b145      	cbz	r5, b4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4160:	6843      	ldr	r3, [r0, #4]
   b4162:	429d      	cmp	r5, r3
   b4164:	d205      	bcs.n	b4172 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4166:	4628      	mov	r0, r5
   b4168:	f004 fb2a 	bl	b87c0 <strlen>
   b416c:	3001      	adds	r0, #1
   b416e:	4405      	add	r5, r0
   b4170:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4172:	4620      	mov	r0, r4
   b4174:	bd38      	pop	{r3, r4, r5, pc}

000b4176 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4178:	4604      	mov	r4, r0
   b417a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b417c:	460d      	mov	r5, r1
   b417e:	b921      	cbnz	r1, b418a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4180:	6803      	ldr	r3, [r0, #0]
   b4182:	1c7a      	adds	r2, r7, #1
   b4184:	6042      	str	r2, [r0, #4]
   b4186:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add_raw(str, strlen(str)+1);
}
   b4188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add_raw(str, strlen(str)+1);
   b418a:	4608      	mov	r0, r1
   b418c:	f004 fb18 	bl	b87c0 <strlen>
    if (len + l > buff_size)
   b4190:	68a3      	ldr	r3, [r4, #8]
    add_raw(str, strlen(str)+1);
   b4192:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4194:	19f2      	adds	r2, r6, r7
   b4196:	429a      	cmp	r2, r3
   b4198:	d8f6      	bhi.n	b4188 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b419a:	6820      	ldr	r0, [r4, #0]
   b419c:	4632      	mov	r2, r6
   b419e:	4629      	mov	r1, r5
   b41a0:	4438      	add	r0, r7
   b41a2:	f004 faa5 	bl	b86f0 <memcpy>
    len += l;
   b41a6:	6860      	ldr	r0, [r4, #4]
   b41a8:	4430      	add	r0, r6
   b41aa:	6060      	str	r0, [r4, #4]
   b41ac:	e7ec      	b.n	b4188 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b41b0 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b41b0:	b538      	push	{r3, r4, r5, lr}
   b41b2:	4604      	mov	r4, r0
   b41b4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b41b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b41ba:	6825      	ldr	r5, [r4, #0]
   b41bc:	4a04      	ldr	r2, [pc, #16]	; (b41d0 <_ZN10BlynkParam3addEi+0x20>)
   b41be:	1a09      	subs	r1, r1, r0
   b41c0:	4428      	add	r0, r5
   b41c2:	f001 ff1f 	bl	b6004 <snprintf>
   b41c6:	6863      	ldr	r3, [r4, #4]
   b41c8:	3001      	adds	r0, #1
   b41ca:	4403      	add	r3, r0
   b41cc:	6063      	str	r3, [r4, #4]
    }
   b41ce:	bd38      	pop	{r3, r4, r5, pc}
   b41d0:	000ba778 	.word	0x000ba778

000b41d4 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b41d4:	b538      	push	{r3, r4, r5, lr}
   b41d6:	4604      	mov	r4, r0
   b41d8:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b41da:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b41de:	6825      	ldr	r5, [r4, #0]
   b41e0:	4a04      	ldr	r2, [pc, #16]	; (b41f4 <_ZN10BlynkParam3addEl+0x20>)
   b41e2:	1a09      	subs	r1, r1, r0
   b41e4:	4428      	add	r0, r5
   b41e6:	f001 ff0d 	bl	b6004 <snprintf>
   b41ea:	6863      	ldr	r3, [r4, #4]
   b41ec:	3001      	adds	r0, #1
   b41ee:	4403      	add	r3, r0
   b41f0:	6063      	str	r3, [r4, #4]
    }
   b41f2:	bd38      	pop	{r3, r4, r5, pc}
   b41f4:	000ba77b 	.word	0x000ba77b

000b41f8 <_ZN22BlynkTransportParticle14_connectToPortEt>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool _connectToPort(uint16_t p) {
   b41f8:	b5f0      	push	{r4, r5, r6, r7, lr}
        bool isConn = false;
        if (domain) {
   b41fa:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    bool _connectToPort(uint16_t p) {
   b41fe:	b087      	sub	sp, #28
   b4200:	4606      	mov	r6, r0
   b4202:	460f      	mov	r7, r1
        if (domain) {
   b4204:	f1bc 0f00 	cmp.w	ip, #0
   b4208:	d00c      	beq.n	b4224 <_ZN22BlynkTransportParticle14_connectToPortEt+0x2c>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', p);
            isConn = (1 == client.connect(domain, p));
   b420a:	460a      	mov	r2, r1
   b420c:	2300      	movs	r3, #0
   b420e:	4661      	mov	r1, ip
   b4210:	f002 fcb2 	bl	b6b78 <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            isConn = (1 == client.connect(addr, p));
        }
        actual_port = isConn ? p : 0;
   b4214:	2801      	cmp	r0, #1
            isConn = (1 == client.connect(domain, p));
   b4216:	bf16      	itet	ne
   b4218:	2000      	movne	r0, #0
   b421a:	2001      	moveq	r0, #1
        actual_port = isConn ? p : 0;
   b421c:	4607      	movne	r7, r0
   b421e:	8777      	strh	r7, [r6, #58]	; 0x3a
        return isConn;
    }
   b4220:	b007      	add	sp, #28
   b4222:	bdf0      	pop	{r4, r5, r6, r7, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4224:	4b07      	ldr	r3, [pc, #28]	; (b4244 <_ZN22BlynkTransportParticle14_connectToPortEt+0x4c>)
   b4226:	9300      	str	r3, [sp, #0]
   b4228:	f100 0520 	add.w	r5, r0, #32
   b422c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b422e:	ac01      	add	r4, sp, #4
   b4230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4232:	682b      	ldr	r3, [r5, #0]
   b4234:	7023      	strb	r3, [r4, #0]
            isConn = (1 == client.connect(addr, p));
   b4236:	463a      	mov	r2, r7
   b4238:	4663      	mov	r3, ip
   b423a:	4669      	mov	r1, sp
   b423c:	4630      	mov	r0, r6
   b423e:	f002 fd7b 	bl	b6d38 <_ZN9TCPClient7connectE9IPAddresstm>
   b4242:	e7e7      	b.n	b4214 <_ZN22BlynkTransportParticle14_connectToPortEt+0x1c>
   b4244:	000bade8 	.word	0x000bade8

000b4248 <BlynkWidgetWrite1>:

std::string metarCode;
std::string metarCodeReversed;

//this is a blynk slider because I would need to upgrade to get a text input
BLYNK_WRITE(V1) {
   b4248:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
   b424a:	6808      	ldr	r0, [r1, #0]
  //gets the airport code from the list
  airport = airports[param.asInt() - 1];
   b424c:	4c08      	ldr	r4, [pc, #32]	; (b4270 <BlynkWidgetWrite1+0x28>)
   b424e:	f004 f9e0 	bl	b8612 <atoi>
   b4252:	4908      	ldr	r1, [pc, #32]	; (b4274 <BlynkWidgetWrite1+0x2c>)
   b4254:	3801      	subs	r0, #1
   b4256:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b425a:	4620      	mov	r0, r4
   b425c:	f001 ffbb 	bl	b61d6 <_ZN6StringaSERKS_>
  //expects a single line of the airport 
  Serial.println(airport);
   b4260:	f002 fb1c 	bl	b689c <_Z16_fetch_usbserialv>
   b4264:	6821      	ldr	r1, [r4, #0]
}
   b4266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(airport);
   b426a:	f002 b828 	b.w	b62be <_ZN5Print7printlnEPKc>
   b426e:	bf00      	nop
   b4270:	2003e41c 	.word	0x2003e41c
   b4274:	2003e42c 	.word	0x2003e42c

000b4278 <_Z3LEDiii>:

//function for the rgb led
void LED(int r, int b, int g)
{
   b4278:	b538      	push	{r3, r4, r5, lr}
   b427a:	460d      	mov	r5, r1
  analogWrite(red, r);
   b427c:	4601      	mov	r1, r0
   b427e:	2013      	movs	r0, #19
{
   b4280:	4614      	mov	r4, r2
  analogWrite(red, r);
   b4282:	f003 f80f 	bl	b72a4 <_Z11analogWritetm>
  analogWrite(blue, b);
   b4286:	4629      	mov	r1, r5
   b4288:	2012      	movs	r0, #18
   b428a:	f003 f80b 	bl	b72a4 <_Z11analogWritetm>
  analogWrite(green, g);
   b428e:	4621      	mov	r1, r4
   b4290:	2011      	movs	r0, #17
}
   b4292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  analogWrite(green, g);
   b4296:	f003 b805 	b.w	b72a4 <_Z11analogWritetm>
	...

000b429c <_Z8callbackPcPhj>:

void callback(char *topic, byte *payload, unsigned int length)
{
   b429c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b429e:	ed2d 8b02 	vpush	{d8}
  char p[length + 1];
   b42a2:	f102 0308 	add.w	r3, r2, #8
   b42a6:	f023 0307 	bic.w	r3, r3, #7
{
   b42aa:	b089      	sub	sp, #36	; 0x24
   b42ac:	4614      	mov	r4, r2
   b42ae:	af00      	add	r7, sp, #0
  char p[length + 1];
   b42b0:	ebad 0d03 	sub.w	sp, sp, r3
  memcpy(p, payload, length);
   b42b4:	4668      	mov	r0, sp
  p[length] = NULL;
   b42b6:	2500      	movs	r5, #0
  memcpy(p, payload, length);
   b42b8:	f004 fa1a 	bl	b86f0 <memcpy>
  p[length] = NULL;
   b42bc:	f80d 5004 	strb.w	r5, [sp, r4]

  Serial.println("qwfAERDGMGFL");
   b42c0:	f002 faec 	bl	b689c <_Z16_fetch_usbserialv>
   b42c4:	49b6      	ldr	r1, [pc, #728]	; (b45a0 <_Z8callbackPcPhj+0x304>)
   b42c6:	f001 fffa 	bl	b62be <_ZN5Print7printlnEPKc>
	: allocator_type(__a), _M_p(__dat) { }
   b42ca:	f107 0310 	add.w	r3, r7, #16
	return __builtin_strlen(__s);
   b42ce:	4668      	mov	r0, sp
   b42d0:	60bb      	str	r3, [r7, #8]
   b42d2:	f004 fa75 	bl	b87c0 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b42d6:	280f      	cmp	r0, #15
  char p[length + 1];
   b42d8:	466e      	mov	r6, sp
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b42da:	eb0d 0400 	add.w	r4, sp, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b42de:	6078      	str	r0, [r7, #4]
	if (__dnew > size_type(_S_local_capacity))
   b42e0:	d908      	bls.n	b42f4 <_Z8callbackPcPhj+0x58>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b42e2:	462a      	mov	r2, r5
   b42e4:	1d39      	adds	r1, r7, #4
   b42e6:	f107 0008 	add.w	r0, r7, #8
   b42ea:	f003 f955 	bl	b7598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b42ee:	687b      	ldr	r3, [r7, #4]
      { _M_dataplus._M_p = __p; }
   b42f0:	60b8      	str	r0, [r7, #8]
      { _M_allocated_capacity = __capacity; }
   b42f2:	613b      	str	r3, [r7, #16]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b42f4:	4622      	mov	r2, r4
   b42f6:	68b8      	ldr	r0, [r7, #8]
	this->_M_assign(__str);
   b42f8:	4caa      	ldr	r4, [pc, #680]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b42fa:	4631      	mov	r1, r6
   b42fc:	f003 f9b4 	bl	b7668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4300:	687b      	ldr	r3, [r7, #4]
      { __c1 = __c2; }
   b4302:	68ba      	ldr	r2, [r7, #8]
      { _M_string_length = __length; }
   b4304:	60fb      	str	r3, [r7, #12]
   b4306:	2100      	movs	r1, #0
   b4308:	54d1      	strb	r1, [r2, r3]

  //takes the recieved code and reverses it
  metarCode = std::string(p);
   b430a:	48a7      	ldr	r0, [pc, #668]	; (b45a8 <_Z8callbackPcPhj+0x30c>)
   b430c:	f107 0108 	add.w	r1, r7, #8
   b4310:	f7ff fee2 	bl	b40d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
      { _M_dispose(); }
   b4314:	f107 0008 	add.w	r0, r7, #8
   b4318:	f003 f960 	bl	b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	this->_M_assign(__str);
   b431c:	49a2      	ldr	r1, [pc, #648]	; (b45a8 <_Z8callbackPcPhj+0x30c>)
   b431e:	4620      	mov	r0, r4
   b4320:	f003 f9a7 	bl	b7672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      { return iterator(_M_data() + this->size()); }
   b4324:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4328:	4413      	add	r3, r2
    _GLIBCXX20_CONSTEXPR
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      random_access_iterator_tag)
    {
      if (__first == __last)
   b432a:	429a      	cmp	r2, r3
   b432c:	d009      	beq.n	b4342 <_Z8callbackPcPhj+0xa6>
      // Bidirectional iterator requirements
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator--() _GLIBCXX_NOEXCEPT
      {
	--_M_current;
   b432e:	3b01      	subs	r3, #1
	return;
      --__last;
      while (__first < __last)
   b4330:	429a      	cmp	r2, r3
   b4332:	d206      	bcs.n	b4342 <_Z8callbackPcPhj+0xa6>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4334:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b4336:	7818      	ldrb	r0, [r3, #0]
   b4338:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b433c:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b4340:	e7f6      	b.n	b4330 <_Z8callbackPcPhj+0x94>
      { return _M_dataplus._M_p; }
   b4342:	4c99      	ldr	r4, [pc, #612]	; (b45a8 <_Z8callbackPcPhj+0x30c>)
  metarCodeReversed = metarCode;
  reverse(metarCodeReversed.begin(), metarCodeReversed.end());
  Serial.println(metarCode.c_str());
   b4344:	f002 faaa 	bl	b689c <_Z16_fetch_usbserialv>
   b4348:	6821      	ldr	r1, [r4, #0]
   b434a:	f001 ffb8 	bl	b62be <_ZN5Print7printlnEPKc>

  //uses the non reversed code to find the cloud type
  if (metarCode.find("SCT") != -1){
   b434e:	4997      	ldr	r1, [pc, #604]	; (b45ac <_Z8callbackPcPhj+0x310>)
   b4350:	2200      	movs	r2, #0
   b4352:	4620      	mov	r0, r4
   b4354:	f003 faa5 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4358:	3001      	adds	r0, #1
   b435a:	d034      	beq.n	b43c6 <_Z8callbackPcPhj+0x12a>
    cloudCatagory = "SCT";
   b435c:	4993      	ldr	r1, [pc, #588]	; (b45ac <_Z8callbackPcPhj+0x310>)
  }else if (metarCode.find("FEW") != -1){
    cloudCatagory = "FEW";
  }else if (metarCode.find("BKN") != -1){
    cloudCatagory = "BKN";
  }else if (metarCode.find("OVC") != -1){
    cloudCatagory = "OVC";
   b435e:	4894      	ldr	r0, [pc, #592]	; (b45b0 <_Z8callbackPcPhj+0x314>)
   b4360:	f7ff feab 	bl	b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
   b4364:	4c92      	ldr	r4, [pc, #584]	; (b45b0 <_Z8callbackPcPhj+0x314>)
  }
  
  Serial.println(cloudCatagory.c_str());
   b4366:	f002 fa99 	bl	b689c <_Z16_fetch_usbserialv>
   b436a:	6821      	ldr	r1, [r4, #0]
   b436c:	f001 ffa7 	bl	b62be <_ZN5Print7printlnEPKc>

  //finds the cloud height and stores it as an int
  cloudHeight = metarCode.substr((metarCode.find(cloudCatagory))+3, 3);
   b4370:	4621      	mov	r1, r4
   b4372:	2200      	movs	r2, #0
   b4374:	488c      	ldr	r0, [pc, #560]	; (b45a8 <_Z8callbackPcPhj+0x30c>)
   b4376:	4c8f      	ldr	r4, [pc, #572]	; (b45b4 <_Z8callbackPcPhj+0x318>)
   b4378:	f003 fa8d 	bl	b7896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
   b437c:	2303      	movs	r3, #3
   b437e:	18c2      	adds	r2, r0, r3
   b4380:	4989      	ldr	r1, [pc, #548]	; (b45a8 <_Z8callbackPcPhj+0x30c>)
   b4382:	f107 0008 	add.w	r0, r7, #8
   b4386:	f003 faf9 	bl	b797c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b438a:	f107 0108 	add.w	r1, r7, #8
   b438e:	4620      	mov	r0, r4
   b4390:	f7ff fea2 	bl	b40d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
      { _M_dispose(); }
   b4394:	f107 0008 	add.w	r0, r7, #8
   b4398:	f003 f920 	bl	b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  height = stoi(cloudHeight);
   b439c:	6825      	ldr	r5, [r4, #0]
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b439e:	f001 fe49 	bl	b6034 <__errno>
   b43a2:	6806      	ldr	r6, [r0, #0]
   b43a4:	f001 fe46 	bl	b6034 <__errno>
   b43a8:	2300      	movs	r3, #0
   b43aa:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b43ac:	220a      	movs	r2, #10
   b43ae:	f107 0108 	add.w	r1, r7, #8
   b43b2:	4628      	mov	r0, r5
   b43b4:	f005 f8e4 	bl	b9580 <strtol>

      if (__endptr == __str)
   b43b8:	68bb      	ldr	r3, [r7, #8]
   b43ba:	429d      	cmp	r5, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b43bc:	4604      	mov	r4, r0
      if (__endptr == __str)
   b43be:	d126      	bne.n	b440e <_Z8callbackPcPhj+0x172>
	std::__throw_invalid_argument(__name);
   b43c0:	487d      	ldr	r0, [pc, #500]	; (b45b8 <_Z8callbackPcPhj+0x31c>)
   b43c2:	f003 f819 	bl	b73f8 <_ZSt24__throw_invalid_argumentPKc>
  }else if (metarCode.find("SKC") != -1){
   b43c6:	497d      	ldr	r1, [pc, #500]	; (b45bc <_Z8callbackPcPhj+0x320>)
   b43c8:	2200      	movs	r2, #0
   b43ca:	4620      	mov	r0, r4
   b43cc:	f003 fa69 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b43d0:	3001      	adds	r0, #1
   b43d2:	d001      	beq.n	b43d8 <_Z8callbackPcPhj+0x13c>
    cloudCatagory = "SKC";
   b43d4:	4979      	ldr	r1, [pc, #484]	; (b45bc <_Z8callbackPcPhj+0x320>)
   b43d6:	e7c2      	b.n	b435e <_Z8callbackPcPhj+0xc2>
  }else if (metarCode.find("FEW") != -1){
   b43d8:	4979      	ldr	r1, [pc, #484]	; (b45c0 <_Z8callbackPcPhj+0x324>)
   b43da:	2200      	movs	r2, #0
   b43dc:	4620      	mov	r0, r4
   b43de:	f003 fa60 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b43e2:	3001      	adds	r0, #1
   b43e4:	d001      	beq.n	b43ea <_Z8callbackPcPhj+0x14e>
    cloudCatagory = "FEW";
   b43e6:	4976      	ldr	r1, [pc, #472]	; (b45c0 <_Z8callbackPcPhj+0x324>)
   b43e8:	e7b9      	b.n	b435e <_Z8callbackPcPhj+0xc2>
  }else if (metarCode.find("BKN") != -1){
   b43ea:	4976      	ldr	r1, [pc, #472]	; (b45c4 <_Z8callbackPcPhj+0x328>)
   b43ec:	2200      	movs	r2, #0
   b43ee:	4620      	mov	r0, r4
   b43f0:	f003 fa57 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b43f4:	3001      	adds	r0, #1
   b43f6:	d001      	beq.n	b43fc <_Z8callbackPcPhj+0x160>
    cloudCatagory = "BKN";
   b43f8:	4972      	ldr	r1, [pc, #456]	; (b45c4 <_Z8callbackPcPhj+0x328>)
   b43fa:	e7b0      	b.n	b435e <_Z8callbackPcPhj+0xc2>
  }else if (metarCode.find("OVC") != -1){
   b43fc:	4972      	ldr	r1, [pc, #456]	; (b45c8 <_Z8callbackPcPhj+0x32c>)
   b43fe:	2200      	movs	r2, #0
   b4400:	4620      	mov	r0, r4
   b4402:	f003 fa4e 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4406:	3001      	adds	r0, #1
   b4408:	d0ac      	beq.n	b4364 <_Z8callbackPcPhj+0xc8>
    cloudCatagory = "OVC";
   b440a:	496f      	ldr	r1, [pc, #444]	; (b45c8 <_Z8callbackPcPhj+0x32c>)
   b440c:	e7a7      	b.n	b435e <_Z8callbackPcPhj+0xc2>
      else if (errno == ERANGE
   b440e:	f001 fe11 	bl	b6034 <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b4412:	6803      	ldr	r3, [r0, #0]
   b4414:	2b22      	cmp	r3, #34	; 0x22
   b4416:	d102      	bne.n	b441e <_Z8callbackPcPhj+0x182>
	std::__throw_out_of_range(__name);
   b4418:	4867      	ldr	r0, [pc, #412]	; (b45b8 <_Z8callbackPcPhj+0x31c>)
   b441a:	f002 fff3 	bl	b7404 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b441e:	f001 fe09 	bl	b6034 <__errno>
   b4422:	6803      	ldr	r3, [r0, #0]
   b4424:	b913      	cbnz	r3, b442c <_Z8callbackPcPhj+0x190>
   b4426:	f001 fe05 	bl	b6034 <__errno>
   b442a:	6006      	str	r6, [r0, #0]
  height = stoi(cloudHeight);
   b442c:	4d67      	ldr	r5, [pc, #412]	; (b45cc <_Z8callbackPcPhj+0x330>)
   b442e:	602c      	str	r4, [r5, #0]

  Serial.println(height);
   b4430:	f002 fa34 	bl	b689c <_Z16_fetch_usbserialv>
   b4434:	682c      	ldr	r4, [r5, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4436:	2c00      	cmp	r4, #0
   b4438:	4606      	mov	r6, r0
   b443a:	da41      	bge.n	b44c0 <_Z8callbackPcPhj+0x224>
            t = print('-');
   b443c:	212d      	movs	r1, #45	; 0x2d
   b443e:	f001 ff2f 	bl	b62a0 <_ZN5Print5printEc>
            val = -n;
   b4442:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4444:	220a      	movs	r2, #10
   b4446:	4630      	mov	r0, r6
   b4448:	f001 ff43 	bl	b62d2 <_ZN5Print11printNumberEmh>
        n += println();
   b444c:	4630      	mov	r0, r6
   b444e:	f001 ff2a 	bl	b62a6 <_ZN5Print7printlnEv>

  //takes the reversed metar code to find the amount of stature miles (stores it reversed in a string)
  statureMiles = metarCodeReversed.substr(
  (metarCodeReversed.find("MS") + 2),
   b4452:	495f      	ldr	r1, [pc, #380]	; (b45d0 <_Z8callbackPcPhj+0x334>)
   b4454:	4853      	ldr	r0, [pc, #332]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b4456:	2200      	movs	r2, #0
   b4458:	f003 fa23 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
  (metarCodeReversed.find(" ",
   b445c:	495c      	ldr	r1, [pc, #368]	; (b45d0 <_Z8callbackPcPhj+0x334>)
  (metarCodeReversed.find("MS") + 2),
   b445e:	4606      	mov	r6, r0
  (metarCodeReversed.find(" ",
   b4460:	2200      	movs	r2, #0
   b4462:	4850      	ldr	r0, [pc, #320]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b4464:	f003 fa1d 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4468:	495a      	ldr	r1, [pc, #360]	; (b45d4 <_Z8callbackPcPhj+0x338>)
   b446a:	4602      	mov	r2, r0
   b446c:	484d      	ldr	r0, [pc, #308]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b446e:	f003 fa18 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b4472:	4957      	ldr	r1, [pc, #348]	; (b45d0 <_Z8callbackPcPhj+0x334>)
  (metarCodeReversed.find(" ",
   b4474:	4604      	mov	r4, r0
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b4476:	2200      	movs	r2, #0
   b4478:	484a      	ldr	r0, [pc, #296]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b447a:	f003 fa12 	bl	b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b447e:	3c02      	subs	r4, #2
   b4480:	1a23      	subs	r3, r4, r0
   b4482:	4c55      	ldr	r4, [pc, #340]	; (b45d8 <_Z8callbackPcPhj+0x33c>)
   b4484:	4947      	ldr	r1, [pc, #284]	; (b45a4 <_Z8callbackPcPhj+0x308>)
   b4486:	1cb2      	adds	r2, r6, #2
   b4488:	f107 0008 	add.w	r0, r7, #8
   b448c:	f003 fa76 	bl	b797c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b4490:	f107 0108 	add.w	r1, r7, #8
   b4494:	4620      	mov	r0, r4
   b4496:	f7ff fe1f 	bl	b40d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
   b449a:	f107 0008 	add.w	r0, r7, #8
   b449e:	f003 f89d 	bl	b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      { return iterator(_M_data() + this->size()); }
   b44a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   b44a6:	4413      	add	r3, r2
      if (__first == __last)
   b44a8:	4293      	cmp	r3, r2
   b44aa:	d00b      	beq.n	b44c4 <_Z8callbackPcPhj+0x228>
	--_M_current;
   b44ac:	3b01      	subs	r3, #1
      while (__first < __last)
   b44ae:	429a      	cmp	r2, r3
   b44b0:	d208      	bcs.n	b44c4 <_Z8callbackPcPhj+0x228>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b44b2:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b44b4:	7818      	ldrb	r0, [r3, #0]
   b44b6:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b44ba:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b44be:	e7f6      	b.n	b44ae <_Z8callbackPcPhj+0x212>
            val = n;
   b44c0:	4621      	mov	r1, r4
   b44c2:	e7bf      	b.n	b4444 <_Z8callbackPcPhj+0x1a8>

  //converts stature miles into the correct order and a float
  reverse(statureMiles.begin(),statureMiles.end());
  stature = atof(statureMiles.c_str());
   b44c4:	6820      	ldr	r0, [r4, #0]
   b44c6:	4c45      	ldr	r4, [pc, #276]	; (b45dc <_Z8callbackPcPhj+0x340>)
   b44c8:	f004 f8a0 	bl	b860c <atof>
   b44cc:	ec51 0b10 	vmov	r0, r1, d0
   b44d0:	f004 f828 	bl	b8524 <__aeabi_d2f>
   b44d4:	6020      	str	r0, [r4, #0]

  Serial.println(stature);
   b44d6:	f002 f9e1 	bl	b689c <_Z16_fetch_usbserialv>
   b44da:	ed94 0a00 	vldr	s0, [r4]
   b44de:	2102      	movs	r1, #2
   b44e0:	f001 ffe9 	bl	b64b6 <_ZN5Print7printlnEfi>

  //determing the status based on the regulations and setting the onboard RGB LED
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b44e4:	ed94 7a00 	vldr	s14, [r4]
   b44e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   b44ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b44f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b44f4:	d512      	bpl.n	b451c <_Z8callbackPcPhj+0x280>
    status = "LIFR";
   b44f6:	493a      	ldr	r1, [pc, #232]	; (b45e0 <_Z8callbackPcPhj+0x344>)
   b44f8:	483a      	ldr	r0, [pc, #232]	; (b45e4 <_Z8callbackPcPhj+0x348>)
   b44fa:	f7ff fdde 	bl	b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
    //LED(139, 139, 0); this would make it purple, which is what it should be, but i only have red,green, and blue right not
    LED(0,0,0);
   b44fe:	2200      	movs	r2, #0
   b4500:	4611      	mov	r1, r2
   b4502:	4610      	mov	r0, r2
   b4504:	f7ff feb8 	bl	b4278 <_Z3LEDiii>
    Serial.println("LIFR");
   b4508:	f002 f9c8 	bl	b689c <_Z16_fetch_usbserialv>
   b450c:	4934      	ldr	r1, [pc, #208]	; (b45e0 <_Z8callbackPcPhj+0x344>)
    /*Note: if this were to actually get used in an airport, I would not want to have 
    VFR be the else. It would be better to have LIFR be the default to not be at risk.
    This should be sufficient for a demonstration though.*/
    status = "VFR";
    LED(0,0,255);
    Serial.println("VFR");
   b450e:	f001 fed6 	bl	b62be <_ZN5Print7printlnEPKc>
  }

  
}
   b4512:	3724      	adds	r7, #36	; 0x24
   b4514:	46bd      	mov	sp, r7
   b4516:	ecbd 8b02 	vpop	{d8}
   b451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
   b451c:	492a      	ldr	r1, [pc, #168]	; (b45c8 <_Z8callbackPcPhj+0x32c>)
   b451e:	4824      	ldr	r0, [pc, #144]	; (b45b0 <_Z8callbackPcPhj+0x314>)
   b4520:	f003 f9ce 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4524:	b9c0      	cbnz	r0, b4558 <_Z8callbackPcPhj+0x2bc>
   b4526:	682b      	ldr	r3, [r5, #0]
   b4528:	2b04      	cmp	r3, #4
   b452a:	dde4      	ble.n	b44f6 <_Z8callbackPcPhj+0x25a>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b452c:	edd4 7a00 	vldr	s15, [r4]
   b4530:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
   b4534:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b453c:	d513      	bpl.n	b4566 <_Z8callbackPcPhj+0x2ca>
    status = "IFR";
   b453e:	492a      	ldr	r1, [pc, #168]	; (b45e8 <_Z8callbackPcPhj+0x34c>)
   b4540:	4828      	ldr	r0, [pc, #160]	; (b45e4 <_Z8callbackPcPhj+0x348>)
   b4542:	f7ff fdba 	bl	b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
    LED(255,0,0);
   b4546:	2200      	movs	r2, #0
   b4548:	4611      	mov	r1, r2
   b454a:	20ff      	movs	r0, #255	; 0xff
   b454c:	f7ff fe94 	bl	b4278 <_Z3LEDiii>
    Serial.println("IFR");
   b4550:	f002 f9a4 	bl	b689c <_Z16_fetch_usbserialv>
   b4554:	4924      	ldr	r1, [pc, #144]	; (b45e8 <_Z8callbackPcPhj+0x34c>)
   b4556:	e7da      	b.n	b450e <_Z8callbackPcPhj+0x272>
   b4558:	491a      	ldr	r1, [pc, #104]	; (b45c4 <_Z8callbackPcPhj+0x328>)
   b455a:	4815      	ldr	r0, [pc, #84]	; (b45b0 <_Z8callbackPcPhj+0x314>)
   b455c:	f003 f9b0 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4560:	2800      	cmp	r0, #0
   b4562:	d0e0      	beq.n	b4526 <_Z8callbackPcPhj+0x28a>
   b4564:	e7e2      	b.n	b452c <_Z8callbackPcPhj+0x290>
   b4566:	4918      	ldr	r1, [pc, #96]	; (b45c8 <_Z8callbackPcPhj+0x32c>)
   b4568:	4811      	ldr	r0, [pc, #68]	; (b45b0 <_Z8callbackPcPhj+0x314>)
   b456a:	f003 f9a9 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b456e:	2800      	cmp	r0, #0
   b4570:	d13e      	bne.n	b45f0 <_Z8callbackPcPhj+0x354>
   b4572:	682b      	ldr	r3, [r5, #0]
   b4574:	2b09      	cmp	r3, #9
   b4576:	dde2      	ble.n	b453e <_Z8callbackPcPhj+0x2a2>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4578:	edd4 7a00 	vldr	s15, [r4]
   b457c:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4584:	db3b      	blt.n	b45fe <_Z8callbackPcPhj+0x362>
    status = "MVFR";
   b4586:	4919      	ldr	r1, [pc, #100]	; (b45ec <_Z8callbackPcPhj+0x350>)
   b4588:	4816      	ldr	r0, [pc, #88]	; (b45e4 <_Z8callbackPcPhj+0x348>)
   b458a:	f7ff fd96 	bl	b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
    LED(0,255,0);
   b458e:	2200      	movs	r2, #0
   b4590:	21ff      	movs	r1, #255	; 0xff
   b4592:	4610      	mov	r0, r2
   b4594:	f7ff fe70 	bl	b4278 <_Z3LEDiii>
    Serial.println("MVFR");
   b4598:	f002 f980 	bl	b689c <_Z16_fetch_usbserialv>
   b459c:	4913      	ldr	r1, [pc, #76]	; (b45ec <_Z8callbackPcPhj+0x350>)
   b459e:	e7b6      	b.n	b450e <_Z8callbackPcPhj+0x272>
   b45a0:	000ba77f 	.word	0x000ba77f
   b45a4:	2003e398 	.word	0x2003e398
   b45a8:	2003e3c8 	.word	0x2003e3c8
   b45ac:	000ba78c 	.word	0x000ba78c
   b45b0:	2003e380 	.word	0x2003e380
   b45b4:	2003e350 	.word	0x2003e350
   b45b8:	000ba7a0 	.word	0x000ba7a0
   b45bc:	000ba790 	.word	0x000ba790
   b45c0:	000ba794 	.word	0x000ba794
   b45c4:	000ba798 	.word	0x000ba798
   b45c8:	000ba79c 	.word	0x000ba79c
   b45cc:	2003e6ac 	.word	0x2003e6ac
   b45d0:	000ba7a5 	.word	0x000ba7a5
   b45d4:	000bafff 	.word	0x000bafff
   b45d8:	2003e368 	.word	0x2003e368
   b45dc:	2003e6b4 	.word	0x2003e6b4
   b45e0:	000ba7a8 	.word	0x000ba7a8
   b45e4:	2003e3b0 	.word	0x2003e3b0
   b45e8:	000ba7a9 	.word	0x000ba7a9
   b45ec:	000ba7ad 	.word	0x000ba7ad
   b45f0:	4911      	ldr	r1, [pc, #68]	; (b4638 <_Z8callbackPcPhj+0x39c>)
   b45f2:	4812      	ldr	r0, [pc, #72]	; (b463c <_Z8callbackPcPhj+0x3a0>)
   b45f4:	f003 f964 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b45f8:	2800      	cmp	r0, #0
   b45fa:	d0ba      	beq.n	b4572 <_Z8callbackPcPhj+0x2d6>
   b45fc:	e7bc      	b.n	b4578 <_Z8callbackPcPhj+0x2dc>
   b45fe:	490e      	ldr	r1, [pc, #56]	; (b4638 <_Z8callbackPcPhj+0x39c>)
   b4600:	480e      	ldr	r0, [pc, #56]	; (b463c <_Z8callbackPcPhj+0x3a0>)
   b4602:	f003 f95d 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4606:	b978      	cbnz	r0, b4628 <_Z8callbackPcPhj+0x38c>
   b4608:	682b      	ldr	r3, [r5, #0]
   b460a:	2b09      	cmp	r3, #9
   b460c:	dcbb      	bgt.n	b4586 <_Z8callbackPcPhj+0x2ea>
    status = "VFR";
   b460e:	490c      	ldr	r1, [pc, #48]	; (b4640 <_Z8callbackPcPhj+0x3a4>)
   b4610:	480c      	ldr	r0, [pc, #48]	; (b4644 <_Z8callbackPcPhj+0x3a8>)
   b4612:	f7ff fd52 	bl	b40ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
    LED(0,0,255);
   b4616:	2100      	movs	r1, #0
   b4618:	4608      	mov	r0, r1
   b461a:	22ff      	movs	r2, #255	; 0xff
   b461c:	f7ff fe2c 	bl	b4278 <_Z3LEDiii>
    Serial.println("VFR");
   b4620:	f002 f93c 	bl	b689c <_Z16_fetch_usbserialv>
   b4624:	4906      	ldr	r1, [pc, #24]	; (b4640 <_Z8callbackPcPhj+0x3a4>)
   b4626:	e772      	b.n	b450e <_Z8callbackPcPhj+0x272>
   b4628:	4907      	ldr	r1, [pc, #28]	; (b4648 <_Z8callbackPcPhj+0x3ac>)
   b462a:	4804      	ldr	r0, [pc, #16]	; (b463c <_Z8callbackPcPhj+0x3a0>)
   b462c:	f003 f948 	bl	b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4630:	2800      	cmp	r0, #0
   b4632:	d0e9      	beq.n	b4608 <_Z8callbackPcPhj+0x36c>
   b4634:	e7eb      	b.n	b460e <_Z8callbackPcPhj+0x372>
   b4636:	bf00      	nop
   b4638:	000ba798 	.word	0x000ba798
   b463c:	2003e380 	.word	0x2003e380
   b4640:	000ba7ae 	.word	0x000ba7ae
   b4644:	2003e3b0 	.word	0x2003e3b0
   b4648:	000ba79c 	.word	0x000ba79c

000b464c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:

    uint16_t getNextMsgId();

private:

    void internalReconnect() {
   b464c:	b508      	push	{r3, lr}
        state = CONNECTING;
   b464e:	2300      	movs	r3, #0
   b4650:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

    uint16_t getActualPort() const {
        return actual_port;
    }

    void disconnect() { client.stop(); }
   b4654:	6900      	ldr	r0, [r0, #16]
   b4656:	f002 fc45 	bl	b6ee4 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b465a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b465e:	f001 ba6f 	b.w	b5b40 <BlynkNoOpCbk>
	...

000b4664 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4668:	eb01 0902 	add.w	r9, r1, r2
   b466c:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b466e:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4670:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4674:	4680      	mov	r8, r0
   b4676:	460d      	mov	r5, r1
   b4678:	4616      	mov	r6, r2
    if (it >= param.end())
   b467a:	f080 8092 	bcs.w	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b467e:	a805      	add	r0, sp, #20
   b4680:	880f      	ldrh	r7, [r1, #0]
   b4682:	f7ff fd69 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
   b4686:	6803      	ldr	r3, [r0, #0]
   b4688:	454b      	cmp	r3, r9
   b468a:	f080 808a 	bcs.w	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b468e:	a805      	add	r0, sp, #20
   b4690:	f7ff fd58 	bl	b4144 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4694:	f247 2376 	movw	r3, #29302	; 0x7276
   b4698:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b469a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b469c:	f000 80a9 	beq.w	b47f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b46a0:	d827      	bhi.n	b46f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b46a2:	f247 2361 	movw	r3, #29281	; 0x7261
   b46a6:	429f      	cmp	r7, r3
   b46a8:	d07e      	beq.n	b47a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b46aa:	f247 2364 	movw	r3, #29284	; 0x7264
   b46ae:	429f      	cmp	r7, r3
   b46b0:	d042      	beq.n	b4738 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b46b2:	f646 5370 	movw	r3, #28016	; 0x6d70
   b46b6:	429f      	cmp	r7, r3
   b46b8:	d128      	bne.n	b470c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b46ba:	4e63      	ldr	r6, [pc, #396]	; (b4848 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b46bc:	4f63      	ldr	r7, [pc, #396]	; (b484c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b46be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b4860 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b46c2:	9b05      	ldr	r3, [sp, #20]
   b46c4:	4599      	cmp	r9, r3
   b46c6:	d96c      	bls.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b46c8:	a805      	add	r0, sp, #20
   b46ca:	f7ff fd3b 	bl	b4144 <_ZNK10BlynkParam8iterator5asIntEv>
   b46ce:	b2c4      	uxtb	r4, r0
            ++it;
   b46d0:	a805      	add	r0, sp, #20
   b46d2:	f7ff fd41 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b46d6:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b46d8:	4631      	mov	r1, r6
   b46da:	4628      	mov	r0, r5
   b46dc:	f004 f866 	bl	b87ac <strcmp>
   b46e0:	4601      	mov	r1, r0
   b46e2:	b9e0      	cbnz	r0, b471e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b46e4:	4620      	mov	r0, r4
   b46e6:	f002 fd89 	bl	b71fc <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b46ea:	a805      	add	r0, sp, #20
   b46ec:	f7ff fd34 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b46f0:	e7e7      	b.n	b46c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b46f2:	f247 7364 	movw	r3, #30564	; 0x7764
   b46f6:	429f      	cmp	r7, r3
   b46f8:	d03f      	beq.n	b477a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b46fa:	f247 7376 	movw	r3, #30582	; 0x7776
   b46fe:	429f      	cmp	r7, r3
   b4700:	f000 8087 	beq.w	b4812 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b4704:	f247 7361 	movw	r3, #30561	; 0x7761
   b4708:	429f      	cmp	r7, r3
   b470a:	d05f      	beq.n	b47cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkReq req = { pin };
        callWriteHandler(req, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b470c:	2300      	movs	r3, #0
   b470e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4712:	2202      	movs	r2, #2
   b4714:	9200      	str	r2, [sp, #0]
   b4716:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
   b471a:	4619      	mov	r1, r3
   b471c:	e029      	b.n	b4772 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b471e:	4639      	mov	r1, r7
   b4720:	4628      	mov	r0, r5
   b4722:	f004 f843 	bl	b87ac <strcmp>
   b4726:	b128      	cbz	r0, b4734 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4728:	4641      	mov	r1, r8
   b472a:	4628      	mov	r0, r5
   b472c:	f004 f83e 	bl	b87ac <strcmp>
   b4730:	2800      	cmp	r0, #0
   b4732:	d1da      	bne.n	b46ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b4734:	2101      	movs	r1, #1
   b4736:	e7d5      	b.n	b46e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4738:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b473a:	4945      	ldr	r1, [pc, #276]	; (b4850 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b473c:	9307      	str	r3, [sp, #28]
   b473e:	a807      	add	r0, sp, #28
   b4740:	2310      	movs	r3, #16
   b4742:	2500      	movs	r5, #0
   b4744:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4748:	f7ff fd15 	bl	b4176 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b474c:	a807      	add	r0, sp, #28
   b474e:	4621      	mov	r1, r4
   b4750:	f7ff fd2e 	bl	b41b0 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4754:	4620      	mov	r0, r4
   b4756:	f002 fd7b 	bl	b7250 <digitalRead>
        rsp.add(analogRead(pin));
   b475a:	4601      	mov	r1, r0
   b475c:	a807      	add	r0, sp, #28
   b475e:	f7ff fd39 	bl	b41d4 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4762:	9b08      	ldr	r3, [sp, #32]
   b4764:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4768:	3b01      	subs	r3, #1
   b476a:	9300      	str	r3, [sp, #0]
   b476c:	9b07      	ldr	r3, [sp, #28]
   b476e:	462a      	mov	r2, r5
   b4770:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4772:	4640      	mov	r0, r8
   b4774:	f000 fb1c 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4778:	e013      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b477a:	a805      	add	r0, sp, #20
   b477c:	f7ff fcec 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
   b4780:	6803      	ldr	r3, [r0, #0]
   b4782:	4599      	cmp	r9, r3
   b4784:	d90d      	bls.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4786:	b2a4      	uxth	r4, r4
   b4788:	2101      	movs	r1, #1
   b478a:	4620      	mov	r0, r4
   b478c:	f002 fd36 	bl	b71fc <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4790:	a805      	add	r0, sp, #20
   b4792:	f7ff fcd7 	bl	b4144 <_ZNK10BlynkParam8iterator5asIntEv>
   b4796:	1e01      	subs	r1, r0, #0
   b4798:	bf18      	it	ne
   b479a:	2101      	movne	r1, #1
   b479c:	4620      	mov	r0, r4
   b479e:	f002 fd3e 	bl	b721e <digitalWrite>
    }
}
   b47a2:	b00f      	add	sp, #60	; 0x3c
   b47a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b47a8:	ab0a      	add	r3, sp, #40	; 0x28
   b47aa:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b47ac:	a807      	add	r0, sp, #28
   b47ae:	2310      	movs	r3, #16
   b47b0:	4928      	ldr	r1, [pc, #160]	; (b4854 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b47b2:	2500      	movs	r5, #0
   b47b4:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b47b8:	f7ff fcdd 	bl	b4176 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b47bc:	a807      	add	r0, sp, #28
   b47be:	4621      	mov	r1, r4
   b47c0:	f7ff fcf6 	bl	b41b0 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b47c4:	4620      	mov	r0, r4
   b47c6:	f002 fd56 	bl	b7276 <analogRead>
   b47ca:	e7c6      	b.n	b475a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b47cc:	a805      	add	r0, sp, #20
   b47ce:	f7ff fcc3 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
   b47d2:	6803      	ldr	r3, [r0, #0]
   b47d4:	4599      	cmp	r9, r3
   b47d6:	d9e4      	bls.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b47d8:	b2a4      	uxth	r4, r4
   b47da:	2101      	movs	r1, #1
   b47dc:	4620      	mov	r0, r4
   b47de:	f002 fd0d 	bl	b71fc <pinMode>
        analogWrite(pin, it.asInt());
   b47e2:	a805      	add	r0, sp, #20
   b47e4:	f7ff fcae 	bl	b4144 <_ZNK10BlynkParam8iterator5asIntEv>
   b47e8:	4601      	mov	r1, r0
   b47ea:	4620      	mov	r0, r4
   b47ec:	f002 fd5a 	bl	b72a4 <_Z11analogWritetm>
    } break;
   b47f0:	e7d7      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
        }
    }

    void callReadHandler(BlynkReq& req) {
        WidgetReadHandler handler = GetReadHandler(req.pin);
   b47f2:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   b47f4:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
   b47f8:	f001 f9a4 	bl	b5b44 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b47fc:	4603      	mov	r3, r0
            handler(req);
   b47fe:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4800:	b123      	cbz	r3, b480c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b4802:	4a15      	ldr	r2, [pc, #84]	; (b4858 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b4804:	4293      	cmp	r3, r2
   b4806:	d001      	beq.n	b480c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b4808:	4798      	blx	r3
   b480a:	e7ca      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b480c:	f001 f996 	bl	b5b3c <BlynkWidgetRead>
    } break;
   b4810:	e7c7      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b4812:	a805      	add	r0, sp, #20
   b4814:	f7ff fca0 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4818:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   b481a:	f8ad 401c 	strh.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b481e:	1b5d      	subs	r5, r3, r5
   b4820:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(req.pin);
   b4822:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4824:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4828:	950c      	str	r5, [sp, #48]	; 0x30
   b482a:	f001 f995 	bl	b5b58 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b482e:	4603      	mov	r3, r0
            handler(req, param);
   b4830:	a90a      	add	r1, sp, #40	; 0x28
   b4832:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4834:	b123      	cbz	r3, b4840 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b4836:	4a09      	ldr	r2, [pc, #36]	; (b485c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4838:	4293      	cmp	r3, r2
   b483a:	d001      	beq.n	b4840 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b483c:	4798      	blx	r3
   b483e:	e7b0      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b4840:	f001 f97d 	bl	b5b3e <BlynkWidgetWrite>
    } break;
   b4844:	e7ad      	b.n	b47a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4846:	bf00      	nop
   b4848:	000ba7b2 	.word	0x000ba7b2
   b484c:	000ba7b5 	.word	0x000ba7b5
   b4850:	000ba7bd 	.word	0x000ba7bd
   b4854:	000ba7c0 	.word	0x000ba7c0
   b4858:	000b5b3d 	.word	0x000b5b3d
   b485c:	000b5b3f 	.word	0x000b5b3f
   b4860:	000ba7b9 	.word	0x000ba7b9

000b4864 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4868:	b08c      	sub	sp, #48	; 0x30
   b486a:	af04      	add	r7, sp, #16
   b486c:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b486e:	2205      	movs	r2, #5
   b4870:	6900      	ldr	r0, [r0, #16]
   b4872:	1d39      	adds	r1, r7, #4
   b4874:	f001 fe43 	bl	b64fe <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4878:	b3a8      	cbz	r0, b48e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b487a:	2805      	cmp	r0, #5
   b487c:	d004      	beq.n	b4888 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b487e:	2000      	movs	r0, #0
}
   b4880:	3720      	adds	r7, #32
   b4882:	46bd      	mov	sp, r7
   b4884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4888:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b488c:	ba5b      	rev16	r3, r3
   b488e:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4890:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4894:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4898:	ba5b      	rev16	r3, r3
   b489a:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b489e:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b48a2:	2a00      	cmp	r2, #0
   b48a4:	d0eb      	beq.n	b487e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b48a6:	793b      	ldrb	r3, [r7, #4]
   b48a8:	bb3b      	cbnz	r3, b48fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x96>
        lastActivityIn = BlynkMillis();
   b48aa:	f001 f945 	bl	b5b38 <_Z11BlynkMillisv>
   b48ae:	4602      	mov	r2, r0
   b48b0:	61e0      	str	r0, [r4, #28]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b48b2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   b48b6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b48ba:	b9d0      	cbnz	r0, b48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
   b48bc:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b48c0:	2901      	cmp	r1, #1
   b48c2:	d116      	bne.n	b48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
            switch (hdr.length) {
   b48c4:	2b09      	cmp	r3, #9
   b48c6:	d010      	beq.n	b48ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b48c8:	2bc8      	cmp	r3, #200	; 0xc8
   b48ca:	d001      	beq.n	b48d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6c>
   b48cc:	2b04      	cmp	r3, #4
   b48ce:	d1d7      	bne.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b48d0:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b48d2:	6262      	str	r2, [r4, #36]	; 0x24
                this->sendInfo();
   b48d4:	4620      	mov	r0, r4
                state = CONNECTED;
   b48d6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
                this->sendInfo();
   b48da:	f000 fb67 	bl	b4fac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b48de:	f7ff fc25 	bl	b412c <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b48e2:	f001 f92d 	bl	b5b40 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b48e6:	2001      	movs	r0, #1
   b48e8:	e7ca      	b.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b48ea:	2303      	movs	r3, #3
   b48ec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                break;
   b48f0:	e7c6      	b.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b48f2:	1f58      	subs	r0, r3, #5
   b48f4:	bf18      	it	ne
   b48f6:	2001      	movne	r0, #1
   b48f8:	e7c2      	b.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b48fa:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b48fe:	d903      	bls.n	b4908 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
        internalReconnect();
   b4900:	4620      	mov	r0, r4
   b4902:	f7ff fea3 	bl	b464c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4906:	e7ee      	b.n	b48e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b4908:	f108 0308 	add.w	r3, r8, #8
   b490c:	466e      	mov	r6, sp
   b490e:	08db      	lsrs	r3, r3, #3
   b4910:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b4914:	469d      	mov	sp, r3
   b4916:	ad04      	add	r5, sp, #16
   b4918:	6920      	ldr	r0, [r4, #16]
   b491a:	4642      	mov	r2, r8
   b491c:	4629      	mov	r1, r5
   b491e:	f001 fdee 	bl	b64fe <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b4922:	4580      	cmp	r8, r0
   b4924:	f04f 0000 	mov.w	r0, #0
   b4928:	d141      	bne.n	b49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
    inputBuffer[hdr.length] = '\0';
   b492a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b492e:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4930:	f001 f902 	bl	b5b38 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4934:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4936:	61e0      	str	r0, [r4, #28]
    switch (hdr.type)
   b4938:	2b14      	cmp	r3, #20
   b493a:	d069      	beq.n	b4a10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b493c:	d809      	bhi.n	b4952 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b493e:	2b0f      	cmp	r3, #15
   b4940:	d066      	beq.n	b4a10 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b4942:	2b11      	cmp	r3, #17
   b4944:	d071      	beq.n	b4a2a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
   b4946:	2b06      	cmp	r3, #6
   b4948:	d016      	beq.n	b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
        internalReconnect();
   b494a:	4620      	mov	r0, r4
   b494c:	f7ff fe7e 	bl	b464c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4950:	e01d      	b.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
    switch (hdr.type)
   b4952:	2b29      	cmp	r3, #41	; 0x29
   b4954:	d01d      	beq.n	b4992 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   b4956:	2b37      	cmp	r3, #55	; 0x37
   b4958:	d019      	beq.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b495a:	2b1d      	cmp	r3, #29
   b495c:	d1f5      	bne.n	b494a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b495e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4962:	b94b      	cbnz	r3, b4978 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
            state = CONNECTED;
   b4964:	2301      	movs	r3, #1
   b4966:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
            this->sendInfo();
   b496a:	4620      	mov	r0, r4
   b496c:	f000 fb1e 	bl	b4fac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b4970:	f7ff fbdc 	bl	b412c <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b4974:	f001 f8e4 	bl	b5b40 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b4978:	2300      	movs	r3, #0
   b497a:	21c8      	movs	r1, #200	; 0xc8
   b497c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b4980:	9100      	str	r1, [sp, #0]
   b4982:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4986:	4619      	mov	r1, r3
   b4988:	4620      	mov	r0, r4
   b498a:	f000 fa11 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b498e:	2001      	movs	r0, #1
   b4990:	e00d      	b.n	b49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
        if (!redir_serv) {
   b4992:	69a3      	ldr	r3, [r4, #24]
   b4994:	b91b      	cbnz	r3, b499e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(64);
   b4996:	2040      	movs	r0, #64	; 0x40
   b4998:	f001 fb1c 	bl	b5fd4 <malloc>
   b499c:	61a0      	str	r0, [r4, #24]
        BlynkParam param(inputBuffer, hdr.length);
   b499e:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b49a2:	44a8      	add	r8, r5
        if (it >= param.end())
   b49a4:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b49a6:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b49aa:	d302      	bcc.n	b49b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14e>
            return false;
   b49ac:	2000      	movs	r0, #0
   b49ae:	46b5      	mov	sp, r6
   b49b0:	e766      	b.n	b4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b49b2:	4629      	mov	r1, r5
   b49b4:	2240      	movs	r2, #64	; 0x40
   b49b6:	69a0      	ldr	r0, [r4, #24]
   b49b8:	f003 ff1e 	bl	b87f8 <strncpy>
        redir_serv[63] = '\0';
   b49bc:	69a3      	ldr	r3, [r4, #24]
   b49be:	2500      	movs	r5, #0
   b49c0:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b49c4:	f107 0014 	add.w	r0, r7, #20
   b49c8:	f7ff fbc6 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
   b49cc:	6803      	ldr	r3, [r0, #0]
   b49ce:	4598      	cmp	r8, r3
   b49d0:	d91c      	bls.n	b4a0c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b49d2:	6978      	ldr	r0, [r7, #20]
   b49d4:	b120      	cbz	r0, b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   b49d6:	69bb      	ldr	r3, [r7, #24]
   b49d8:	4298      	cmp	r0, r3
   b49da:	d215      	bcs.n	b4a08 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b49dc:	f003 fe1d 	bl	b861a <atol>
            redir_port = it.asLong();
   b49e0:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b49e2:	6920      	ldr	r0, [r4, #16]
   b49e4:	f002 fa7e 	bl	b6ee4 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b49e8:	6923      	ldr	r3, [r4, #16]
   b49ea:	69a2      	ldr	r2, [r4, #24]
        domain = d;
   b49ec:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b49ee:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b49f0:	2300      	movs	r3, #0
   b49f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b49f6:	f001 f89f 	bl	b5b38 <_Z11BlynkMillisv>
   b49fa:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b49fe:	3808      	subs	r0, #8
   b4a00:	e9c4 0007 	strd	r0, r0, [r4, #28]
   b4a04:	6260      	str	r0, [r4, #36]	; 0x24
   b4a06:	e7c2      	b.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b4a08:	4628      	mov	r0, r5
   b4a0a:	e7e9      	b.n	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4a0c:	2550      	movs	r5, #80	; 0x50
   b4a0e:	e7e8      	b.n	b49e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17e>
        msgIdOutOverride = hdr.msg_id;
   b4a10:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4a12:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4a16:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4a1a:	8563      	strh	r3, [r4, #42]	; 0x2a
        this->processCmd(inputBuffer, hdr.length);
   b4a1c:	4629      	mov	r1, r5
   b4a1e:	4620      	mov	r0, r4
   b4a20:	f7ff fe20 	bl	b4664 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4a24:	2300      	movs	r3, #0
   b4a26:	8563      	strh	r3, [r4, #42]	; 0x2a
   b4a28:	e7b1      	b.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        BlynkReq req = { 0 };
   b4a2a:	2300      	movs	r3, #0
   b4a2c:	803b      	strh	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4a2e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4a32:	442b      	add	r3, r5
        if (it >= param.end())
   b4a34:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4a36:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4a3a:	d2a8      	bcs.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        ++it;
   b4a3c:	f107 000c 	add.w	r0, r7, #12
   b4a40:	f8d5 8000 	ldr.w	r8, [r5]
   b4a44:	f7ff fb88 	bl	b4158 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4a48:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4a4a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4a4e:	1b5d      	subs	r5, r3, r5
   b4a50:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b4a52:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4a56:	687b      	ldr	r3, [r7, #4]
   b4a58:	61fd      	str	r5, [r7, #28]
   b4a5a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4a5e:	8563      	strh	r3, [r4, #42]	; 0x2a
   b4a60:	4b2d      	ldr	r3, [pc, #180]	; (b4b18 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b4>)
   b4a62:	4598      	cmp	r8, r3
   b4a64:	d052      	beq.n	b4b0c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a8>
   b4a66:	d820      	bhi.n	b4aaa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x246>
   b4a68:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4a6c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4a70:	4413      	add	r3, r2
   b4a72:	4598      	cmp	r8, r3
   b4a74:	d032      	beq.n	b4adc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>
   b4a76:	d80f      	bhi.n	b4a98 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4a78:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b4a7c:	3b06      	subs	r3, #6
   b4a7e:	4598      	cmp	r8, r3
   b4a80:	d032      	beq.n	b4ae8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x284>
   b4a82:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4a86:	3303      	adds	r3, #3
   b4a88:	4598      	cmp	r8, r3
   b4a8a:	d1cb      	bne.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4a8c:	f107 0114 	add.w	r1, r7, #20
   b4a90:	4638      	mov	r0, r7
   b4a92:	f001 f854 	bl	b5b3e <BlynkWidgetWrite>
   b4a96:	e7c5      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4a98:	4b20      	ldr	r3, [pc, #128]	; (b4b1c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b4a9a:	4598      	cmp	r8, r3
   b4a9c:	d1c2      	bne.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4a9e:	f107 0114 	add.w	r1, r7, #20
   b4aa2:	4638      	mov	r0, r7
   b4aa4:	f001 f84b 	bl	b5b3e <BlynkWidgetWrite>
   b4aa8:	e7bc      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4aaa:	4b1d      	ldr	r3, [pc, #116]	; (b4b20 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4aac:	4598      	cmp	r8, r3
   b4aae:	d021      	beq.n	b4af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
   b4ab0:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4ab4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4ab8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b4abc:	4598      	cmp	r8, r3
   b4abe:	d01f      	beq.n	b4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29c>
   b4ac0:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4ac4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b4ac8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b4acc:	4598      	cmp	r8, r3
   b4ace:	d1a9      	bne.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4ad0:	f107 0114 	add.w	r1, r7, #20
   b4ad4:	4638      	mov	r0, r7
   b4ad6:	f001 f832 	bl	b5b3e <BlynkWidgetWrite>
   b4ada:	e7a3      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b4adc:	f107 0114 	add.w	r1, r7, #20
   b4ae0:	4638      	mov	r0, r7
   b4ae2:	f001 f82c 	bl	b5b3e <BlynkWidgetWrite>
   b4ae6:	e79d      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b4ae8:	f107 0114 	add.w	r1, r7, #20
   b4aec:	4638      	mov	r0, r7
   b4aee:	f001 f826 	bl	b5b3e <BlynkWidgetWrite>
   b4af2:	e797      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4af4:	f107 0114 	add.w	r1, r7, #20
   b4af8:	4638      	mov	r0, r7
   b4afa:	f001 f820 	bl	b5b3e <BlynkWidgetWrite>
   b4afe:	e791      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b4b00:	f107 0114 	add.w	r1, r7, #20
   b4b04:	4638      	mov	r0, r7
   b4b06:	f001 f81a 	bl	b5b3e <BlynkWidgetWrite>
   b4b0a:	e78b      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4b0c:	f107 0114 	add.w	r1, r7, #20
   b4b10:	4638      	mov	r0, r7
   b4b12:	f001 f814 	bl	b5b3e <BlynkWidgetWrite>
   b4b16:	e785      	b.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4b18:	00736676 	.word	0x00736676
   b4b1c:	00676264 	.word	0x00676264
   b4b20:	6e6f6361 	.word	0x6e6f6361

000b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4b24:	b570      	push	{r4, r5, r6, lr}
   b4b26:	4604      	mov	r4, r0
   b4b28:	b086      	sub	sp, #24
   b4b2a:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4b2c:	f7ff fafe 	bl	b412c <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4b30:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4b34:	2b02      	cmp	r3, #2
   b4b36:	d022      	beq.n	b4b7e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5a>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4b38:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (msgIdOutOverride || nesting > 2) {
   b4b3c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   b4b3e:	3301      	adds	r3, #1
   b4b40:	b2db      	uxtb	r3, r3
   b4b42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   b4b46:	b9aa      	cbnz	r2, b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b4b48:	2b02      	cmp	r3, #2
   b4b4a:	d813      	bhi.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4b4c:	6920      	ldr	r0, [r4, #16]
   b4b4e:	f002 f891 	bl	b6c74 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4b52:	b1b0      	cbz	r0, b4b82 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
        while (avail || conn.available() > 0) {
   b4b54:	b925      	cbnz	r5, b4b60 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x3c>
    int available() { return client.available(); }
   b4b56:	6920      	ldr	r0, [r4, #16]
   b4b58:	f002 f96a 	bl	b6e30 <_ZN9TCPClient9availableEv>
   b4b5c:	2800      	cmp	r0, #0
   b4b5e:	dd10      	ble.n	b4b82 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
            if (!processInput()) {
   b4b60:	4620      	mov	r0, r4
   b4b62:	f7ff fe7f 	bl	b4864 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4b66:	2800      	cmp	r0, #0
   b4b68:	d1f5      	bne.n	b4b56 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x32>
    void disconnect() { client.stop(); }
   b4b6a:	6920      	ldr	r0, [r4, #16]
   b4b6c:	f002 f9ba 	bl	b6ee4 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4b70:	f000 ffe6 	bl	b5b40 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4b74:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4b78:	3b01      	subs	r3, #1
   b4b7a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   b4b7e:	b006      	add	sp, #24
   b4b80:	bd70      	pop	{r4, r5, r6, pc}
    const millis_time_t t = BlynkMillis();
   b4b82:	f000 ffd9 	bl	b5b38 <_Z11BlynkMillisv>
   b4b86:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4b88:	6920      	ldr	r0, [r4, #16]
   b4b8a:	f002 f873 	bl	b6c74 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4b8e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   b4b92:	2e01      	cmp	r6, #1
   b4b94:	d124      	bne.n	b4be0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbc>
        if (!tconn) {
   b4b96:	b920      	cbnz	r0, b4ba2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x7e>
            lastHeartbeat = t;
   b4b98:	6265      	str	r5, [r4, #36]	; 0x24
            internalReconnect();
   b4b9a:	4620      	mov	r0, r4
   b4b9c:	f7ff fd56 	bl	b464c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4ba0:	e7e8      	b.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4ba2:	69e3      	ldr	r3, [r4, #28]
   b4ba4:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4ba8:	1aeb      	subs	r3, r5, r3
   b4baa:	4293      	cmp	r3, r2
   b4bac:	d8f5      	bhi.n	b4b9a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x76>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4bae:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4bb2:	4293      	cmp	r3, r2
   b4bb4:	d803      	bhi.n	b4bbe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x9a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4bb6:	6a23      	ldr	r3, [r4, #32]
   b4bb8:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4bba:	4293      	cmp	r3, r2
   b4bbc:	d9da      	bls.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4bc0:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4bc4:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4bc6:	4293      	cmp	r3, r2
   b4bc8:	d9d4      	bls.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            sendCmd(BLYNK_CMD_PING);
   b4bca:	2300      	movs	r3, #0
   b4bcc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4bd0:	9300      	str	r3, [sp, #0]
   b4bd2:	461a      	mov	r2, r3
   b4bd4:	2106      	movs	r1, #6
   b4bd6:	4620      	mov	r0, r4
   b4bd8:	f000 f8ea 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4bdc:	6265      	str	r5, [r4, #36]	; 0x24
                return false;
   b4bde:	e7c9      	b.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    } else if (state == CONNECTING) {
   b4be0:	2e00      	cmp	r6, #0
   b4be2:	d1c7      	bne.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b4be6:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4be8:	b148      	cbz	r0, b4bfe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xda>
   b4bea:	f241 7270 	movw	r2, #6000	; 0x1770
   b4bee:	4293      	cmp	r3, r2
   b4bf0:	d9c0      	bls.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    void disconnect() { client.stop(); }
   b4bf2:	6920      	ldr	r0, [r4, #16]
   b4bf4:	f002 f976 	bl	b6ee4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4bf8:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            return false;
   b4bfc:	e7ba      	b.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4bfe:	f241 3288 	movw	r2, #5000	; 0x1388
   b4c02:	4293      	cmp	r3, r2
   b4c04:	d9b6      	bls.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b4c06:	6920      	ldr	r0, [r4, #16]
   b4c08:	f002 f96c 	bl	b6ee4 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4c0c:	6926      	ldr	r6, [r4, #16]
        bool isConn = _connectToPort(port);
   b4c0e:	8f31      	ldrh	r1, [r6, #56]	; 0x38
   b4c10:	4630      	mov	r0, r6
   b4c12:	f7ff faf1 	bl	b41f8 <_ZN22BlynkTransportParticle14_connectToPortEt>
        if (!isConn) {
   b4c16:	b948      	cbnz	r0, b4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x108>
            if (port == 80) {
   b4c18:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   b4c1a:	2b50      	cmp	r3, #80	; 0x50
   b4c1c:	d11a      	bne.n	b4c54 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x130>
                isConn = _connectToPort(8080);
   b4c1e:	f641 7190 	movw	r1, #8080	; 0x1f90
                isConn = _connectToPort(80);
   b4c22:	4630      	mov	r0, r6
   b4c24:	f7ff fae8 	bl	b41f8 <_ZN22BlynkTransportParticle14_connectToPortEt>
   b4c28:	2800      	cmp	r0, #0
   b4c2a:	d0d7      	beq.n	b4bdc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4c2c:	6963      	ldr	r3, [r4, #20]
   b4c2e:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4c30:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4c32:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4c34:	8525      	strh	r5, [r4, #40]	; 0x28
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4c36:	f003 fdc3 	bl	b87c0 <strlen>
   b4c3a:	2200      	movs	r2, #0
   b4c3c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4c40:	9b05      	ldr	r3, [sp, #20]
   b4c42:	9000      	str	r0, [sp, #0]
   b4c44:	462a      	mov	r2, r5
   b4c46:	211d      	movs	r1, #29
   b4c48:	4620      	mov	r0, r4
   b4c4a:	f000 f8b1 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4c4e:	6a23      	ldr	r3, [r4, #32]
   b4c50:	6263      	str	r3, [r4, #36]	; 0x24
            return true;
   b4c52:	e78f      	b.n	b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            } else if (port == 8080) {
   b4c54:	f641 7290 	movw	r2, #8080	; 0x1f90
   b4c58:	4293      	cmp	r3, r2
   b4c5a:	d1bf      	bne.n	b4bdc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
                isConn = _connectToPort(80);
   b4c5c:	2150      	movs	r1, #80	; 0x50
   b4c5e:	e7e0      	b.n	b4c22 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>

000b4c60 <loop>:
  //connecting and subscribing to airport/request and airport/receive
  //client.connect(System.deviceID());
  //client.subscribe("airport/receive");
}

void loop() {
   b4c60:	b530      	push	{r4, r5, lr}
  Blynk.run();
   b4c62:	481a      	ldr	r0, [pc, #104]	; (b4ccc <loop+0x6c>)
void loop() {
   b4c64:	b085      	sub	sp, #20
  Blynk.run();
   b4c66:	2100      	movs	r1, #0
   b4c68:	f7ff ff5c 	bl	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

  if (client.isConnected())
   b4c6c:	4818      	ldr	r0, [pc, #96]	; (b4cd0 <loop+0x70>)
   b4c6e:	f000 fc3f 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b4c72:	b1d8      	cbz	r0, b4cac <loop+0x4c>
  {
    client.loop();
   b4c74:	4816      	ldr	r0, [pc, #88]	; (b4cd0 <loop+0x70>)
   b4c76:	f000 fe12 	bl	b589e <_ZN4MQTT4loopEv>
    client.connect(System.deviceID());
    client.subscribe("airport/receive");
  }

  //gets new metar code every 10 seconds
  if (moment + 10000 <= millis()){
   b4c7a:	4d16      	ldr	r5, [pc, #88]	; (b4cd4 <loop+0x74>)
   b4c7c:	682c      	ldr	r4, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c7e:	f000 ffd5 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
   b4c82:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
   b4c86:	3410      	adds	r4, #16
   b4c88:	4284      	cmp	r4, r0
   b4c8a:	d80d      	bhi.n	b4ca8 <loop+0x48>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4c8c:	4b12      	ldr	r3, [pc, #72]	; (b4cd8 <loop+0x78>)
    client.publish("airport/request", airport);
   b4c8e:	4913      	ldr	r1, [pc, #76]	; (b4cdc <loop+0x7c>)
   b4c90:	681a      	ldr	r2, [r3, #0]
   b4c92:	480f      	ldr	r0, [pc, #60]	; (b4cd0 <loop+0x70>)
   b4c94:	f000 fda7 	bl	b57e6 <_ZN4MQTT7publishEPKcS1_>
    Serial.println("connectedwer");
   b4c98:	f001 fe00 	bl	b689c <_Z16_fetch_usbserialv>
   b4c9c:	4910      	ldr	r1, [pc, #64]	; (b4ce0 <loop+0x80>)
   b4c9e:	f001 fb0e 	bl	b62be <_ZN5Print7printlnEPKc>
   b4ca2:	f000 ffc3 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
    moment = millis();
   b4ca6:	6028      	str	r0, [r5, #0]
  }
   b4ca8:	b005      	add	sp, #20
   b4caa:	bd30      	pop	{r4, r5, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4cac:	4668      	mov	r0, sp
   b4cae:	f001 f981 	bl	b5fb4 <spark_deviceID>
    client.connect(System.deviceID());
   b4cb2:	9900      	ldr	r1, [sp, #0]
   b4cb4:	4806      	ldr	r0, [pc, #24]	; (b4cd0 <loop+0x70>)
   b4cb6:	f000 fd0b 	bl	b56d0 <_ZN4MQTT7connectEPKc>
   b4cba:	4668      	mov	r0, sp
   b4cbc:	f001 fa2c 	bl	b6118 <_ZN6StringD1Ev>
    client.subscribe("airport/receive");
   b4cc0:	4908      	ldr	r1, [pc, #32]	; (b4ce4 <loop+0x84>)
   b4cc2:	4803      	ldr	r0, [pc, #12]	; (b4cd0 <loop+0x70>)
   b4cc4:	f000 ff33 	bl	b5b2e <_ZN4MQTT9subscribeEPKc>
   b4cc8:	e7d7      	b.n	b4c7a <loop+0x1a>
   b4cca:	bf00      	nop
   b4ccc:	2003e320 	.word	0x2003e320
   b4cd0:	2003e64c 	.word	0x2003e64c
   b4cd4:	2003e6b0 	.word	0x2003e6b0
   b4cd8:	2003e41c 	.word	0x2003e41c
   b4cdc:	000ba7d3 	.word	0x000ba7d3
   b4ce0:	000ba7e3 	.word	0x000ba7e3
   b4ce4:	000ba7c3 	.word	0x000ba7c3

000b4ce8 <setup>:
void setup() {
   b4ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
   b4cea:	f001 fdd7 	bl	b689c <_Z16_fetch_usbserialv>
   b4cee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4cf2:	f001 fdc7 	bl	b6884 <_ZN9USBSerial5beginEl>
  Serial.println("connected");
   b4cf6:	f001 fdd1 	bl	b689c <_Z16_fetch_usbserialv>
   b4cfa:	4928      	ldr	r1, [pc, #160]	; (b4d9c <setup+0xb4>)
        this->authkey = auth;
   b4cfc:	4c28      	ldr	r4, [pc, #160]	; (b4da0 <setup+0xb8>)
   b4cfe:	f001 fade 	bl	b62be <_ZN5Print7printlnEPKc>
  delay(5000); // Allow board to settle
   b4d02:	f241 3088 	movw	r0, #5000	; 0x1388
   b4d06:	f001 fc21 	bl	b654c <delay>
  Serial.println("dfhddu");
   b4d0a:	f001 fdc7 	bl	b689c <_Z16_fetch_usbserialv>
   b4d0e:	4925      	ldr	r1, [pc, #148]	; (b4da4 <setup+0xbc>)
   b4d10:	f001 fad5 	bl	b62be <_ZN5Print7printlnEPKc>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4d14:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4d18:	f000 ff0c 	bl	b5b34 <_Z10BlynkDelaym>
   b4d1c:	4b22      	ldr	r3, [pc, #136]	; (b4da8 <setup+0xc0>)
   b4d1e:	6163      	str	r3, [r4, #20]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4d20:	f000 ff0a 	bl	b5b38 <_Z11BlynkMillisv>
   b4d24:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b4d28:	6923      	ldr	r3, [r4, #16]
        domain = d;
   b4d2a:	4a20      	ldr	r2, [pc, #128]	; (b4dac <setup+0xc4>)
   b4d2c:	635a      	str	r2, [r3, #52]	; 0x34
   b4d2e:	3808      	subs	r0, #8
   b4d30:	e9c4 0007 	strd	r0, r0, [r4, #28]
        port = p;
   b4d34:	2250      	movs	r2, #80	; 0x50
   b4d36:	6260      	str	r0, [r4, #36]	; 0x24
   b4d38:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b4d3a:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b4d3c:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4d40:	6920      	ldr	r0, [r4, #16]
   b4d42:	f002 f8cf 	bl	b6ee4 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4d46:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
        millis_time_t started = BlynkMillis();
   b4d4a:	f000 fef5 	bl	b5b38 <_Z11BlynkMillisv>
   b4d4e:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b4d50:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4d54:	2b01      	cmp	r3, #1
   b4d56:	d00d      	beq.n	b4d74 <setup+0x8c>
               (BlynkMillis() - started < timeout))
   b4d58:	f000 feee 	bl	b5b38 <_Z11BlynkMillisv>
   b4d5c:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b4d5e:	42b8      	cmp	r0, r7
   b4d60:	d804      	bhi.n	b4d6c <setup+0x84>
            run();
   b4d62:	2100      	movs	r1, #0
   b4d64:	4620      	mov	r0, r4
   b4d66:	f7ff fedd 	bl	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4d6a:	e7f1      	b.n	b4d50 <setup+0x68>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b4d6c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4d70:	2b01      	cmp	r3, #1
   b4d72:	d1e5      	bne.n	b4d40 <setup+0x58>
  pinMode(red,OUTPUT);
   b4d74:	2101      	movs	r1, #1
   b4d76:	2013      	movs	r0, #19
   b4d78:	f002 fa40 	bl	b71fc <pinMode>
  pinMode(blue,OUTPUT);
   b4d7c:	2101      	movs	r1, #1
   b4d7e:	2012      	movs	r0, #18
   b4d80:	f002 fa3c 	bl	b71fc <pinMode>
  pinMode(green,OUTPUT);
   b4d84:	2101      	movs	r1, #1
   b4d86:	2011      	movs	r0, #17
   b4d88:	f002 fa38 	bl	b71fc <pinMode>
  LED(0,0,0);//just setting the LED off
   b4d8c:	2200      	movs	r2, #0
}
   b4d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LED(0,0,0);//just setting the LED off
   b4d92:	4611      	mov	r1, r2
   b4d94:	4610      	mov	r0, r2
   b4d96:	f7ff ba6f 	b.w	b4278 <_Z3LEDiii>
   b4d9a:	bf00      	nop
   b4d9c:	000ba7f0 	.word	0x000ba7f0
   b4da0:	2003e320 	.word	0x2003e320
   b4da4:	000ba7fa 	.word	0x000ba7fa
   b4da8:	000ba801 	.word	0x000ba801
   b4dac:	000ba822 	.word	0x000ba822

000b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4db4:	b091      	sub	sp, #68	; 0x44
   b4db6:	af04      	add	r7, sp, #16
   b4db8:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4dba:	6900      	ldr	r0, [r0, #16]
   b4dbc:	6dbd      	ldr	r5, [r7, #88]	; 0x58
   b4dbe:	4689      	mov	r9, r1
   b4dc0:	4616      	mov	r6, r2
   b4dc2:	469a      	mov	sl, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4dc4:	46eb      	mov	fp, sp
   b4dc6:	f001 ff55 	bl	b6c74 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4dca:	2800      	cmp	r0, #0
   b4dcc:	f000 80b5 	beq.w	b4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b4dd0:	f1b9 0f1d 	cmp.w	r9, #29
   b4dd4:	d804      	bhi.n	b4de0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b4dd6:	4b71      	ldr	r3, [pc, #452]	; (b4f9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ec>)
   b4dd8:	fa23 f309 	lsr.w	r3, r3, r9
   b4ddc:	07db      	lsls	r3, r3, #31
   b4dde:	d420      	bmi.n	b4e22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
   b4de0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4de4:	2b01      	cmp	r3, #1
   b4de6:	f040 80a8 	bne.w	b4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    if (cmd >= BLYNK_CMD_BRIDGE && cmd <= BLYNK_CMD_HARDWARE) {
   b4dea:	f1a9 030f 	sub.w	r3, r9, #15
   b4dee:	2b05      	cmp	r3, #5
   b4df0:	d817      	bhi.n	b4e22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4df2:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   b4df6:	4293      	cmp	r3, r2
   b4df8:	bf38      	it	cc
   b4dfa:	4613      	movcc	r3, r2
   b4dfc:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4e00:	f000 fe9a 	bl	b5b38 <_Z11BlynkMillisv>
   b4e04:	eba8 0000 	sub.w	r0, r8, r0
        if (wait_time >= 0) {
   b4e08:	2800      	cmp	r0, #0
   b4e0a:	f2c0 809b 	blt.w	b4f44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x194>
                run();
   b4e0e:	2100      	movs	r1, #0
   b4e10:	4620      	mov	r0, r4
   b4e12:	f7ff fe87 	bl	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4e16:	f000 fe8f 	bl	b5b38 <_Z11BlynkMillisv>
   b4e1a:	eba8 0000 	sub.w	r0, r8, r0
            while (wait_time >= 0) {
   b4e1e:	2800      	cmp	r0, #0
   b4e20:	daf5      	bge.n	b4e0e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x5e>
protected:
    void processCmd(const void* buff, size_t len);
    void sendInfo();

    void sendPendingGroup() {
        if (GROUP_PENDING == groupState) {
   b4e22:	7823      	ldrb	r3, [r4, #0]
   b4e24:	2b01      	cmp	r3, #1
   b4e26:	d12d      	bne.n	b4e84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd4>
            // Set groupState here as sendCmd is recursive
            groupState = GROUP_STARTED;
   b4e28:	2302      	movs	r3, #2
   b4e2a:	7023      	strb	r3, [r4, #0]
            if (groupTs) {
   b4e2c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4e30:	4313      	orrs	r3, r2
   b4e32:	f107 0018 	add.w	r0, r7, #24
   b4e36:	f04f 0800 	mov.w	r8, #0
   b4e3a:	f000 808c 	beq.w	b4f56 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1a6>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e3e:	2318      	movs	r3, #24
   b4e40:	e9c7 0803 	strd	r0, r8, [r7, #12]
                char mem[24];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("t");
   b4e44:	4956      	ldr	r1, [pc, #344]	; (b4fa0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f0>)
   b4e46:	617b      	str	r3, [r7, #20]
   b4e48:	f107 000c 	add.w	r0, r7, #12
   b4e4c:	f7ff f993 	bl	b4176 <_ZN10BlynkParam3addEPKc>
    }

    inline
    void BlynkParam::add(unsigned long long value)
    {
        len += snprintf(buff+len, buff_size-len, "%llu", value)+1;
   b4e50:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
   b4e54:	ed94 7b02 	vldr	d7, [r4, #8]
   b4e58:	68f8      	ldr	r0, [r7, #12]
   b4e5a:	4a52      	ldr	r2, [pc, #328]	; (b4fa4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f4>)
   b4e5c:	1ac9      	subs	r1, r1, r3
   b4e5e:	4418      	add	r0, r3
   b4e60:	ed8d 7b00 	vstr	d7, [sp]
   b4e64:	f001 f8ce 	bl	b6004 <snprintf>
   b4e68:	693b      	ldr	r3, [r7, #16]
   b4e6a:	3001      	adds	r0, #1
   b4e6c:	4418      	add	r0, r3
   b4e6e:	6138      	str	r0, [r7, #16]
                cmd.add(groupTs);
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4e70:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4e74:	3801      	subs	r0, #1
   b4e76:	9000      	str	r0, [sp, #0]
   b4e78:	68fb      	ldr	r3, [r7, #12]
            } else {
                char mem[4];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("b");
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4e7a:	4642      	mov	r2, r8
   b4e7c:	2115      	movs	r1, #21
   b4e7e:	4620      	mov	r0, r4
   b4e80:	f7ff ff96 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    if (0 == id) {
   b4e84:	b946      	cbnz	r6, b4e98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4e86:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
   b4e88:	b936      	cbnz	r6, b4e98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4e8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   b4e8c:	3301      	adds	r3, #1
   b4e8e:	b29b      	uxth	r3, r3
   b4e90:	2b00      	cmp	r3, #0
   b4e92:	d070      	beq.n	b4f76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c6>
        msgIdOut = 1;
   b4e94:	8523      	strh	r3, [r4, #40]	; 0x28
    return msgIdOut;
   b4e96:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4e98:	f1ba 0f00 	cmp.w	sl, #0
   b4e9c:	d06d      	beq.n	b4f7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ca>
   b4e9e:	f105 0805 	add.w	r8, r5, #5
                               (data2 ? length2 : 0);
   b4ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4ea4:	2b00      	cmp	r3, #0
   b4ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4ea8:	bf08      	it	eq
   b4eaa:	2300      	moveq	r3, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4eac:	4498      	add	r8, r3
    uint8_t buff[full_length];
   b4eae:	f108 0307 	add.w	r3, r8, #7
   b4eb2:	f023 0307 	bic.w	r3, r3, #7
   b4eb6:	ebad 0d03 	sub.w	sp, sp, r3
   b4eba:	ab04      	add	r3, sp, #16
   b4ebc:	607b      	str	r3, [r7, #4]
    hdr->length = htons(length+length2);
   b4ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    hdr->type = cmd;
   b4ec0:	f88d 9010 	strb.w	r9, [sp, #16]
    hdr->length = htons(length+length2);
   b4ec4:	18ea      	adds	r2, r5, r3
   b4ec6:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4eca:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4ecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->msg_id = htons(id);
   b4ed0:	f8ad 6011 	strh.w	r6, [sp, #17]
    hdr->length = htons(length+length2);
   b4ed4:	f8ad 3013 	strh.w	r3, [sp, #19]
    if (data && length) {
   b4ed8:	f1ba 0f00 	cmp.w	sl, #0
   b4edc:	d050      	beq.n	b4f80 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
   b4ede:	2d00      	cmp	r5, #0
   b4ee0:	d04e      	beq.n	b4f80 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
        memcpy(buff + pos, data, length);
   b4ee2:	462a      	mov	r2, r5
   b4ee4:	4651      	mov	r1, sl
   b4ee6:	f10d 0015 	add.w	r0, sp, #21
   b4eea:	f003 fc01 	bl	b86f0 <memcpy>
        pos += length;
   b4eee:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4ef2:	b13b      	cbz	r3, b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
   b4ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4ef6:	b12b      	cbz	r3, b4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        memcpy(buff + pos, data2, length2);
   b4ef8:	461a      	mov	r2, r3
   b4efa:	687b      	ldr	r3, [r7, #4]
   b4efc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   b4efe:	4418      	add	r0, r3
   b4f00:	f003 fbf6 	bl	b86f0 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4f04:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4f06:	4545      	cmp	r5, r8
   b4f08:	d23e      	bcs.n	b4f88 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d8>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4f0a:	eba8 0205 	sub.w	r2, r8, r5
        return client.write((const uint8_t*)buf, len);
   b4f0e:	687b      	ldr	r3, [r7, #4]
   b4f10:	6920      	ldr	r0, [r4, #16]
   b4f12:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4f16:	bf28      	it	cs
   b4f18:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4f1c:	1959      	adds	r1, r3, r5
   b4f1e:	f001 fd80 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
   b4f22:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4f24:	2000      	movs	r0, #0
   b4f26:	f000 fe05 	bl	b5b34 <_Z10BlynkDelaym>
        if (w == 0) {
   b4f2a:	bb5e      	cbnz	r6, b4f84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d4>
    void disconnect() { client.stop(); }
   b4f2c:	6920      	ldr	r0, [r4, #16]
   b4f2e:	f001 ffd9 	bl	b6ee4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4f32:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            BlynkOnDisconnected();
   b4f36:	f000 fe03 	bl	b5b40 <BlynkNoOpCbk>
}
   b4f3a:	3734      	adds	r7, #52	; 0x34
   b4f3c:	46dd      	mov	sp, fp
   b4f3e:	46bd      	mov	sp, r7
   b4f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (nesting == 0) {
   b4f44:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   b4f48:	2900      	cmp	r1, #0
   b4f4a:	f47f af6a 	bne.w	b4e22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
            run();
   b4f4e:	4620      	mov	r0, r4
   b4f50:	f7ff fde8 	bl	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4f54:	e765      	b.n	b4e22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4f56:	f107 030c 	add.w	r3, r7, #12
   b4f5a:	e9c7 3806 	strd	r3, r8, [r7, #24]
                cmd.add("b");
   b4f5e:	4912      	ldr	r1, [pc, #72]	; (b4fa8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f8>)
   b4f60:	2304      	movs	r3, #4
   b4f62:	623b      	str	r3, [r7, #32]
   b4f64:	f7ff f907 	bl	b4176 <_ZN10BlynkParam3addEPKc>
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4f68:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4f6c:	69fb      	ldr	r3, [r7, #28]
   b4f6e:	3b01      	subs	r3, #1
   b4f70:	9300      	str	r3, [sp, #0]
   b4f72:	69bb      	ldr	r3, [r7, #24]
   b4f74:	e781      	b.n	b4e7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xca>
        msgIdOut = 1;
   b4f76:	2301      	movs	r3, #1
   b4f78:	e78c      	b.n	b4e94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4f7a:	f04f 0805 	mov.w	r8, #5
   b4f7e:	e790      	b.n	b4ea2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf2>
    size_t pos = sizeof(BlynkHeader);
   b4f80:	2005      	movs	r0, #5
   b4f82:	e7b5      	b.n	b4ef0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x140>
        wlen += w;
   b4f84:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4f86:	e7be      	b.n	b4f06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
    if (wlen != full_length) {
   b4f88:	d003      	beq.n	b4f92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1e2>
        internalReconnect();
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	f7ff fb5e 	bl	b464c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4f90:	e7d3      	b.n	b4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    lastActivityOut = BlynkMillis();
   b4f92:	f000 fdd1 	bl	b5b38 <_Z11BlynkMillisv>
   b4f96:	6220      	str	r0, [r4, #32]
   b4f98:	e7cf      	b.n	b4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b4f9a:	bf00      	nop
   b4f9c:	20000041 	.word	0x20000041
   b4fa0:	000ba7e1 	.word	0x000ba7e1
   b4fa4:	000ba82e 	.word	0x000ba82e
   b4fa8:	000ba833 	.word	0x000ba833

000b4fac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4fac:	b530      	push	{r4, r5, lr}
   b4fae:	b099      	sub	sp, #100	; 0x64
   b4fb0:	ab08      	add	r3, sp, #32
   b4fb2:	4604      	mov	r4, r0
   b4fb4:	9305      	str	r3, [sp, #20]
   b4fb6:	2500      	movs	r5, #0
   b4fb8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b4fba:	a805      	add	r0, sp, #20
   b4fbc:	490b      	ldr	r1, [pc, #44]	; (b4fec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4fbe:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b4fc2:	f7ff f8d8 	bl	b4176 <_ZN10BlynkParam3addEPKc>
        add(val);
   b4fc6:	a805      	add	r0, sp, #20
   b4fc8:	4909      	ldr	r1, [pc, #36]	; (b4ff0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b4fca:	f7ff f8d4 	bl	b4176 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength()-1);
   b4fce:	9b06      	ldr	r3, [sp, #24]
   b4fd0:	3b01      	subs	r3, #1
   b4fd2:	9302      	str	r3, [sp, #8]
   b4fd4:	9b05      	ldr	r3, [sp, #20]
   b4fd6:	9301      	str	r3, [sp, #4]
   b4fd8:	2371      	movs	r3, #113	; 0x71
   b4fda:	9300      	str	r3, [sp, #0]
   b4fdc:	462a      	mov	r2, r5
   b4fde:	4b05      	ldr	r3, [pc, #20]	; (b4ff4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b4fe0:	2111      	movs	r1, #17
   b4fe2:	4620      	mov	r0, r4
   b4fe4:	f7ff fee4 	bl	b4db0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4fe8:	b019      	add	sp, #100	; 0x64
   b4fea:	bd30      	pop	{r4, r5, pc}
   b4fec:	000ba835 	.word	0x000ba835
   b4ff0:	000ba83a 	.word	0x000ba83a
   b4ff4:	000ba8e7 	.word	0x000ba8e7

000b4ff8 <_GLOBAL__sub_I_Blynk>:
   b4ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        : domain(NULL), port(0), actual_port(0)
   b4ffa:	4c7d      	ldr	r4, [pc, #500]	; (b51f0 <_GLOBAL__sub_I_Blynk+0x1f8>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4ffc:	4e7d      	ldr	r6, [pc, #500]	; (b51f4 <_GLOBAL__sub_I_Blynk+0x1fc>)
   b4ffe:	4620      	mov	r0, r4
   b5000:	f001 ffba 	bl	b6f78 <_ZN9TCPClientC1Ev>
   b5004:	f104 001c 	add.w	r0, r4, #28
   b5008:	f001 fb96 	bl	b6738 <_ZN9IPAddressC1Ev>
        , groupTs(0)
   b500c:	4b7a      	ldr	r3, [pc, #488]	; (b51f8 <_GLOBAL__sub_I_Blynk+0x200>)
   b500e:	2500      	movs	r5, #0
   b5010:	2100      	movs	r1, #0
   b5012:	2000      	movs	r0, #0
   b5014:	e9c3 0102 	strd	r0, r1, [r3, #8]
        , state(CONNECTING)
   b5018:	e9c3 4504 	strd	r4, r5, [r3, #16]
   b501c:	701d      	strb	r5, [r3, #0]
   b501e:	e9c3 5506 	strd	r5, r5, [r3, #24]
   b5022:	e9c3 5508 	strd	r5, r5, [r3, #32]
   b5026:	629d      	str	r5, [r3, #40]	; 0x28
   b5028:	859d      	strh	r5, [r3, #44]	; 0x2c
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b502a:	4b74      	ldr	r3, [pc, #464]	; (b51fc <_GLOBAL__sub_I_Blynk+0x204>)
   b502c:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5030:	e9c3 2500 	strd	r2, r5, [r3]
   b5034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   b5038:	721d      	strb	r5, [r3, #8]
   b503a:	f000 fdf7 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
unsigned long moment = millis();
   b503e:	4b70      	ldr	r3, [pc, #448]	; (b5200 <_GLOBAL__sub_I_Blynk+0x208>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b5040:	4c70      	ldr	r4, [pc, #448]	; (b5204 <_GLOBAL__sub_I_Blynk+0x20c>)
unsigned long moment = millis();
   b5042:	6018      	str	r0, [r3, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5044:	4b70      	ldr	r3, [pc, #448]	; (b5208 <_GLOBAL__sub_I_Blynk+0x210>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b5046:	4971      	ldr	r1, [pc, #452]	; (b520c <_GLOBAL__sub_I_Blynk+0x214>)
   b5048:	721d      	strb	r5, [r3, #8]
   b504a:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b504e:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5052:	4b6f      	ldr	r3, [pc, #444]	; (b5210 <_GLOBAL__sub_I_Blynk+0x218>)
   b5054:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5058:	e9c3 2500 	strd	r2, r5, [r3]
   b505c:	721d      	strb	r5, [r3, #8]
   b505e:	4620      	mov	r0, r4
   b5060:	f001 f8a5 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5064:	496b      	ldr	r1, [pc, #428]	; (b5214 <_GLOBAL__sub_I_Blynk+0x21c>)
   b5066:	f104 0010 	add.w	r0, r4, #16
   b506a:	f001 f8a0 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b506e:	496a      	ldr	r1, [pc, #424]	; (b5218 <_GLOBAL__sub_I_Blynk+0x220>)
   b5070:	f104 0020 	add.w	r0, r4, #32
   b5074:	f001 f89b 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5078:	4968      	ldr	r1, [pc, #416]	; (b521c <_GLOBAL__sub_I_Blynk+0x224>)
   b507a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b507e:	f001 f896 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5082:	4967      	ldr	r1, [pc, #412]	; (b5220 <_GLOBAL__sub_I_Blynk+0x228>)
   b5084:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b5088:	f001 f891 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b508c:	4965      	ldr	r1, [pc, #404]	; (b5224 <_GLOBAL__sub_I_Blynk+0x22c>)
   b508e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5092:	f001 f88c 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5096:	4964      	ldr	r1, [pc, #400]	; (b5228 <_GLOBAL__sub_I_Blynk+0x230>)
   b5098:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b509c:	f001 f887 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50a0:	4962      	ldr	r1, [pc, #392]	; (b522c <_GLOBAL__sub_I_Blynk+0x234>)
   b50a2:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b50a6:	f001 f882 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50aa:	4961      	ldr	r1, [pc, #388]	; (b5230 <_GLOBAL__sub_I_Blynk+0x238>)
   b50ac:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b50b0:	f001 f87d 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50b4:	495f      	ldr	r1, [pc, #380]	; (b5234 <_GLOBAL__sub_I_Blynk+0x23c>)
   b50b6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b50ba:	f001 f878 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50be:	495e      	ldr	r1, [pc, #376]	; (b5238 <_GLOBAL__sub_I_Blynk+0x240>)
   b50c0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b50c4:	f001 f873 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50c8:	495c      	ldr	r1, [pc, #368]	; (b523c <_GLOBAL__sub_I_Blynk+0x244>)
   b50ca:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b50ce:	f001 f86e 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50d2:	495b      	ldr	r1, [pc, #364]	; (b5240 <_GLOBAL__sub_I_Blynk+0x248>)
   b50d4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b50d8:	f001 f869 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50dc:	4959      	ldr	r1, [pc, #356]	; (b5244 <_GLOBAL__sub_I_Blynk+0x24c>)
   b50de:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   b50e2:	f001 f864 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50e6:	4958      	ldr	r1, [pc, #352]	; (b5248 <_GLOBAL__sub_I_Blynk+0x250>)
   b50e8:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   b50ec:	f001 f85f 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50f0:	4956      	ldr	r1, [pc, #344]	; (b524c <_GLOBAL__sub_I_Blynk+0x254>)
   b50f2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   b50f6:	f001 f85a 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b50fa:	4955      	ldr	r1, [pc, #340]	; (b5250 <_GLOBAL__sub_I_Blynk+0x258>)
   b50fc:	f504 7080 	add.w	r0, r4, #256	; 0x100
   b5100:	f001 f855 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5104:	4953      	ldr	r1, [pc, #332]	; (b5254 <_GLOBAL__sub_I_Blynk+0x25c>)
   b5106:	f504 7088 	add.w	r0, r4, #272	; 0x110
   b510a:	f001 f850 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b510e:	4952      	ldr	r1, [pc, #328]	; (b5258 <_GLOBAL__sub_I_Blynk+0x260>)
   b5110:	f504 7090 	add.w	r0, r4, #288	; 0x120
   b5114:	f001 f84b 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5118:	4950      	ldr	r1, [pc, #320]	; (b525c <_GLOBAL__sub_I_Blynk+0x264>)
   b511a:	f504 7098 	add.w	r0, r4, #304	; 0x130
   b511e:	f001 f846 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5122:	494f      	ldr	r1, [pc, #316]	; (b5260 <_GLOBAL__sub_I_Blynk+0x268>)
   b5124:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   b5128:	f001 f841 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b512c:	494d      	ldr	r1, [pc, #308]	; (b5264 <_GLOBAL__sub_I_Blynk+0x26c>)
   b512e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   b5132:	f001 f83c 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5136:	494c      	ldr	r1, [pc, #304]	; (b5268 <_GLOBAL__sub_I_Blynk+0x270>)
   b5138:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   b513c:	f001 f837 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5140:	4631      	mov	r1, r6
   b5142:	f504 70b8 	add.w	r0, r4, #368	; 0x170
   b5146:	f001 f832 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b514a:	4948      	ldr	r1, [pc, #288]	; (b526c <_GLOBAL__sub_I_Blynk+0x274>)
   b514c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   b5150:	f001 f82d 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5154:	4946      	ldr	r1, [pc, #280]	; (b5270 <_GLOBAL__sub_I_Blynk+0x278>)
   b5156:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   b515a:	f001 f828 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b515e:	4945      	ldr	r1, [pc, #276]	; (b5274 <_GLOBAL__sub_I_Blynk+0x27c>)
   b5160:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   b5164:	f001 f823 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5168:	4943      	ldr	r1, [pc, #268]	; (b5278 <_GLOBAL__sub_I_Blynk+0x280>)
   b516a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   b516e:	f001 f81e 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5172:	4942      	ldr	r1, [pc, #264]	; (b527c <_GLOBAL__sub_I_Blynk+0x284>)
   b5174:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   b5178:	f001 f819 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b517c:	4940      	ldr	r1, [pc, #256]	; (b5280 <_GLOBAL__sub_I_Blynk+0x288>)
   b517e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   b5182:	f001 f814 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5186:	493f      	ldr	r1, [pc, #252]	; (b5284 <_GLOBAL__sub_I_Blynk+0x28c>)
   b5188:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   b518c:	f001 f80f 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5190:	493d      	ldr	r1, [pc, #244]	; (b5288 <_GLOBAL__sub_I_Blynk+0x290>)
   b5192:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   b5196:	f001 f80a 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b519a:	493c      	ldr	r1, [pc, #240]	; (b528c <_GLOBAL__sub_I_Blynk+0x294>)
   b519c:	f504 7000 	add.w	r0, r4, #512	; 0x200
   b51a0:	f001 f805 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
   b51a4:	493a      	ldr	r1, [pc, #232]	; (b5290 <_GLOBAL__sub_I_Blynk+0x298>)
   b51a6:	f504 7004 	add.w	r0, r4, #528	; 0x210
   b51aa:	f001 f800 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
String airport = "ORD";
   b51ae:	4631      	mov	r1, r6
   b51b0:	4838      	ldr	r0, [pc, #224]	; (b5294 <_GLOBAL__sub_I_Blynk+0x29c>)
   b51b2:	f000 fffc 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b51b6:	4b38      	ldr	r3, [pc, #224]	; (b5298 <_GLOBAL__sub_I_Blynk+0x2a0>)
MQTT client("lab.thewcl.com", 1883, callback, true);
   b51b8:	4938      	ldr	r1, [pc, #224]	; (b529c <_GLOBAL__sub_I_Blynk+0x2a4>)
   b51ba:	721d      	strb	r5, [r3, #8]
   b51bc:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b51c0:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b51c4:	4b36      	ldr	r3, [pc, #216]	; (b52a0 <_GLOBAL__sub_I_Blynk+0x2a8>)
   b51c6:	4837      	ldr	r0, [pc, #220]	; (b52a4 <_GLOBAL__sub_I_Blynk+0x2ac>)
   b51c8:	721d      	strb	r5, [r3, #8]
   b51ca:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b51ce:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b51d2:	4b35      	ldr	r3, [pc, #212]	; (b52a8 <_GLOBAL__sub_I_Blynk+0x2b0>)
   b51d4:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b51d8:	e9c3 2500 	strd	r2, r5, [r3]
   b51dc:	721d      	strb	r5, [r3, #8]
   b51de:	2301      	movs	r3, #1
   b51e0:	9300      	str	r3, [sp, #0]
   b51e2:	f240 725b 	movw	r2, #1883	; 0x75b
   b51e6:	4b31      	ldr	r3, [pc, #196]	; (b52ac <_GLOBAL__sub_I_Blynk+0x2b4>)
   b51e8:	f000 f8a6 	bl	b5338 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b51ec:	b002      	add	sp, #8
   b51ee:	bd70      	pop	{r4, r5, r6, pc}
   b51f0:	2003e3e0 	.word	0x2003e3e0
   b51f4:	000ba8a4 	.word	0x000ba8a4
   b51f8:	2003e320 	.word	0x2003e320
   b51fc:	2003e3b0 	.word	0x2003e3b0
   b5200:	2003e6b0 	.word	0x2003e6b0
   b5204:	2003e42c 	.word	0x2003e42c
   b5208:	2003e380 	.word	0x2003e380
   b520c:	000ba848 	.word	0x000ba848
   b5210:	2003e350 	.word	0x2003e350
   b5214:	000ba84c 	.word	0x000ba84c
   b5218:	000ba850 	.word	0x000ba850
   b521c:	000ba854 	.word	0x000ba854
   b5220:	000ba858 	.word	0x000ba858
   b5224:	000ba85c 	.word	0x000ba85c
   b5228:	000ba860 	.word	0x000ba860
   b522c:	000ba864 	.word	0x000ba864
   b5230:	000ba868 	.word	0x000ba868
   b5234:	000ba86c 	.word	0x000ba86c
   b5238:	000ba870 	.word	0x000ba870
   b523c:	000ba874 	.word	0x000ba874
   b5240:	000ba878 	.word	0x000ba878
   b5244:	000ba87c 	.word	0x000ba87c
   b5248:	000ba880 	.word	0x000ba880
   b524c:	000ba884 	.word	0x000ba884
   b5250:	000ba888 	.word	0x000ba888
   b5254:	000ba88c 	.word	0x000ba88c
   b5258:	000ba890 	.word	0x000ba890
   b525c:	000ba894 	.word	0x000ba894
   b5260:	000ba898 	.word	0x000ba898
   b5264:	000ba89c 	.word	0x000ba89c
   b5268:	000ba8a0 	.word	0x000ba8a0
   b526c:	000ba8a8 	.word	0x000ba8a8
   b5270:	000ba8ac 	.word	0x000ba8ac
   b5274:	000ba8b0 	.word	0x000ba8b0
   b5278:	000ba8b4 	.word	0x000ba8b4
   b527c:	000ba8b8 	.word	0x000ba8b8
   b5280:	000ba8bc 	.word	0x000ba8bc
   b5284:	000ba8c0 	.word	0x000ba8c0
   b5288:	000ba8c4 	.word	0x000ba8c4
   b528c:	000ba8c8 	.word	0x000ba8c8
   b5290:	000ba8cc 	.word	0x000ba8cc
   b5294:	2003e41c 	.word	0x2003e41c
   b5298:	2003e368 	.word	0x2003e368
   b529c:	000ba8d0 	.word	0x000ba8d0
   b52a0:	2003e3c8 	.word	0x2003e3c8
   b52a4:	2003e64c 	.word	0x2003e64c
   b52a8:	2003e398 	.word	0x2003e398
   b52ac:	000b429d 	.word	0x000b429d

000b52b0 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b52b0:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b52b4:	b510      	push	{r4, lr}
   b52b6:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b52b8:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b52ba:	b113      	cbz	r3, b52c2 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b52bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b52be:	f000 fcc5 	bl	b5c4c <os_mutex_lock>
#endif
#endif
#endif
        }
   b52c2:	4620      	mov	r0, r4
   b52c4:	bd10      	pop	{r4, pc}

000b52c6 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b52c6:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b52c8:	6803      	ldr	r3, [r0, #0]
   b52ca:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b52ce:	4604      	mov	r4, r0
            if (mqtt->thread)
   b52d0:	b112      	cbz	r2, b52d8 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b52d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b52d4:	f000 fcc2 	bl	b5c5c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b52d8:	4620      	mov	r0, r4
   b52da:	bd10      	pop	{r4, pc}

000b52dc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b52de:	461f      	mov	r7, r3
   b52e0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b52e4:	4604      	mov	r4, r0
   b52e6:	460d      	mov	r5, r1
   b52e8:	4616      	mov	r6, r2
    if (thread) {
   b52ea:	b12b      	cbz	r3, b52f8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b52ec:	2301      	movs	r3, #1
   b52ee:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b52f2:	3058      	adds	r0, #88	; 0x58
   b52f4:	f000 fca2 	bl	b5c3c <os_mutex_create>
    }
    this->callback = callback;
   b52f8:	9b08      	ldr	r3, [sp, #32]
   b52fa:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b52fc:	2300      	movs	r3, #0
   b52fe:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5300:	b106      	cbz	r6, b5304 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5302:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5304:	b125      	cbz	r5, b5310 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5306:	4629      	mov	r1, r5
   b5308:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b530c:	f000 ff72 	bl	b61f4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5310:	9b06      	ldr	r3, [sp, #24]
   b5312:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5314:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5316:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5318:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b531c:	2bff      	cmp	r3, #255	; 0xff
   b531e:	bfb8      	it	lt
   b5320:	23ff      	movlt	r3, #255	; 0xff
   b5322:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5326:	b108      	cbz	r0, b532c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5328:	f7fe febb 	bl	b40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b532c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5330:	f7fe feb3 	bl	b409a <_Znaj>
   b5334:	61e0      	str	r0, [r4, #28]
}
   b5336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5338 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b533c:	4604      	mov	r4, r0
            bool thread) {
   b533e:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5340:	4617      	mov	r7, r2
   b5342:	4698      	mov	r8, r3
   b5344:	460e      	mov	r6, r1
            bool thread) {
   b5346:	f001 fe17 	bl	b6f78 <_ZN9TCPClientC1Ev>
   b534a:	490d      	ldr	r1, [pc, #52]	; (b5380 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b534c:	61e5      	str	r5, [r4, #28]
   b534e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5352:	f000 ff2c 	bl	b61ae <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5356:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b535a:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b535c:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5360:	22ff      	movs	r2, #255	; 0xff
   b5362:	230f      	movs	r3, #15
   b5364:	e9cd 3200 	strd	r3, r2, [sp]
   b5368:	4620      	mov	r0, r4
            bool thread) {
   b536a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b536e:	463b      	mov	r3, r7
   b5370:	462a      	mov	r2, r5
   b5372:	4631      	mov	r1, r6
   b5374:	f7ff ffb2 	bl	b52dc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5378:	4620      	mov	r0, r4
   b537a:	b004      	add	sp, #16
   b537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5380:	000bb000 	.word	0x000bb000

000b5384 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5384:	b510      	push	{r4, lr}
   b5386:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5388:	4620      	mov	r0, r4
   b538a:	f001 fd51 	bl	b6e30 <_ZN9TCPClient9availableEv>
   b538e:	2800      	cmp	r0, #0
   b5390:	d0fa      	beq.n	b5388 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5392:	4620      	mov	r0, r4
   b5394:	f001 fb5a 	bl	b6a4c <_ZN9TCPClient4readEv>
}
   b5398:	b2c0      	uxtb	r0, r0
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b53a0:	4605      	mov	r5, r0
   b53a2:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b53a4:	f7ff ffee 	bl	b5384 <_ZN4MQTT8readByteEv>
   b53a8:	69eb      	ldr	r3, [r5, #28]
   b53aa:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b53ac:	69eb      	ldr	r3, [r5, #28]
   b53ae:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b53b2:	f04f 0901 	mov.w	r9, #1
   b53b6:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b53ba:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b53bc:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b53be:	4628      	mov	r0, r5
   b53c0:	f7ff ffe0 	bl	b5384 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b53c4:	4626      	mov	r6, r4
   b53c6:	69eb      	ldr	r3, [r5, #28]
   b53c8:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b53ca:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b53ce:	fb13 f309 	smulbb	r3, r3, r9
   b53d2:	441f      	add	r7, r3
        buffer[len++] = digit;
   b53d4:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b53d6:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b53d8:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b53da:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b53dc:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b53e0:	d4ed      	bmi.n	b53be <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b53e2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b53e4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b53e8:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b53ec:	d11e      	bne.n	b542c <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b53ee:	4628      	mov	r0, r5
   b53f0:	f7ff ffc8 	bl	b5384 <_ZN4MQTT8readByteEv>
   b53f4:	69eb      	ldr	r3, [r5, #28]
   b53f6:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b53f8:	4628      	mov	r0, r5
   b53fa:	f7ff ffc3 	bl	b5384 <_ZN4MQTT8readByteEv>
   b53fe:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5400:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5402:	b2b6      	uxth	r6, r6
   b5404:	69eb      	ldr	r3, [r5, #28]
   b5406:	b2a4      	uxth	r4, r4
   b5408:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b540a:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b540c:	b2b6      	uxth	r6, r6
   b540e:	42be      	cmp	r6, r7
   b5410:	d20e      	bcs.n	b5430 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5412:	4628      	mov	r0, r5
   b5414:	f7ff ffb6 	bl	b5384 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5418:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b541c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b541e:	bf84      	itt	hi
   b5420:	69eb      	ldrhi	r3, [r5, #28]
   b5422:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5424:	3401      	adds	r4, #1
   b5426:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5428:	3601      	adds	r6, #1
   b542a:	e7ef      	b.n	b540c <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b542c:	2600      	movs	r6, #0
   b542e:	e7ed      	b.n	b540c <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5430:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5434:	42a3      	cmp	r3, r4
   b5436:	bf2c      	ite	cs
   b5438:	4620      	movcs	r0, r4
   b543a:	2000      	movcc	r0, #0
   b543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5440 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5444:	4615      	mov	r5, r2
   b5446:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5448:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b544a:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b544c:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b544e:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5450:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5452:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5456:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b545a:	f103 0401 	add.w	r4, r3, #1
   b545e:	4403      	add	r3, r0
            digit |= 0x80;
   b5460:	bf88      	it	hi
   b5462:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5466:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b546a:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b546e:	b2e4      	uxtb	r4, r4
   b5470:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5474:	d81e      	bhi.n	b54b4 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5476:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b547a:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b547e:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5480:	4622      	mov	r2, r4
   b5482:	a901      	add	r1, sp, #4
   b5484:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5486:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b548a:	f003 f931 	bl	b86f0 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b548e:	1c72      	adds	r2, r6, #1
   b5490:	4422      	add	r2, r4
   b5492:	4641      	mov	r1, r8
   b5494:	4638      	mov	r0, r7
   b5496:	f001 fac4 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
   b549a:	4605      	mov	r5, r0
   b549c:	f000 fbc6 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b54a0:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b54a2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b54a4:	4432      	add	r2, r6
   b54a6:	b2a8      	uxth	r0, r5
}
   b54a8:	1a13      	subs	r3, r2, r0
   b54aa:	4258      	negs	r0, r3
   b54ac:	4158      	adcs	r0, r3
   b54ae:	b002      	add	sp, #8
   b54b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b54b4:	4623      	mov	r3, r4
   b54b6:	e7ca      	b.n	b544e <_ZN4MQTT5writeEhPht+0xe>

000b54b8 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b54b8:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b54ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   b54bc:	4605      	mov	r5, r0
    pos += 2;
   b54be:	b298      	uxth	r0, r3
   b54c0:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b54c2:	5cce      	ldrb	r6, [r1, r3]
   b54c4:	b29c      	uxth	r4, r3
   b54c6:	b156      	cbz	r6, b54de <_ZN4MQTT11writeStringEPKcPht+0x26>
   b54c8:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b54cc:	4584      	cmp	ip, r0
   b54ce:	f103 0701 	add.w	r7, r3, #1
   b54d2:	d904      	bls.n	b54de <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b54d4:	1c44      	adds	r4, r0, #1
   b54d6:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b54d8:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b54da:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b54dc:	e7f1      	b.n	b54c2 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b54de:	b299      	uxth	r1, r3
   b54e0:	1a41      	subs	r1, r0, r1
   b54e2:	440a      	add	r2, r1
   b54e4:	0a21      	lsrs	r1, r4, #8
   b54e6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b54ea:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b54ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54f0 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b54f0:	b538      	push	{r3, r4, r5, lr}
   b54f2:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b54f4:	f001 fbbe 	bl	b6c74 <_ZN9TCPClient9connectedEv>
   b54f8:	2800      	cmp	r0, #0
   b54fa:	bf14      	ite	ne
   b54fc:	2501      	movne	r5, #1
   b54fe:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b5500:	d102      	bne.n	b5508 <_ZN4MQTT11isConnectedEv+0x18>
   b5502:	4620      	mov	r0, r4
   b5504:	f001 fcee 	bl	b6ee4 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5508:	4628      	mov	r0, r5
   b550a:	bd38      	pop	{r3, r4, r5, pc}

000b550c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5510:	b088      	sub	sp, #32
   b5512:	4604      	mov	r4, r0
   b5514:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5518:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b551c:	4689      	mov	r9, r1
   b551e:	4617      	mov	r7, r2
   b5520:	461e      	mov	r6, r3
    if (!isConnected()) {
   b5522:	f7ff ffe5 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b5526:	4605      	mov	r5, r0
   b5528:	2800      	cmp	r0, #0
   b552a:	f040 80cd 	bne.w	b56c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b552e:	4621      	mov	r1, r4
   b5530:	a801      	add	r0, sp, #4
   b5532:	f7ff febd 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5536:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5538:	2900      	cmp	r1, #0
   b553a:	f040 8088 	bne.w	b564e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b553e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5542:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5544:	462b      	mov	r3, r5
   b5546:	4620      	mov	r0, r4
   b5548:	f001 fb16 	bl	b6b78 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b554c:	2800      	cmp	r0, #0
   b554e:	d07a      	beq.n	b5646 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5550:	2301      	movs	r3, #1
   b5552:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5554:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5558:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b555a:	2b04      	cmp	r3, #4
   b555c:	4b5b      	ldr	r3, [pc, #364]	; (b56cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b555e:	f040 8081 	bne.w	b5664 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5562:	6818      	ldr	r0, [r3, #0]
   b5564:	8899      	ldrh	r1, [r3, #4]
   b5566:	799b      	ldrb	r3, [r3, #6]
   b5568:	f8ad 100c 	strh.w	r1, [sp, #12]
   b556c:	f88d 300e 	strb.w	r3, [sp, #14]
   b5570:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5572:	f8c2 0005 	str.w	r0, [r2, #5]
   b5576:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b557a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b557e:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5582:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5584:	230c      	movs	r3, #12
            if (willTopic) {
   b5586:	f1b8 0f00 	cmp.w	r8, #0
   b558a:	f000 8081 	beq.w	b5690 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b558e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5592:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5596:	0140      	lsls	r0, r0, #5
   b5598:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b559c:	f040 0006 	orr.w	r0, r0, #6
   b55a0:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b55a2:	f1ba 0f00 	cmp.w	sl, #0
   b55a6:	d101      	bne.n	b55ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b55a8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b55ac:	b11f      	cbz	r7, b55b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b55ae:	2e00      	cmp	r6, #0
   b55b0:	d170      	bne.n	b5694 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b55b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b55b6:	69e2      	ldr	r2, [r4, #28]
   b55b8:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b55ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b55bc:	69e1      	ldr	r1, [r4, #28]
   b55be:	1c58      	adds	r0, r3, #1
   b55c0:	1212      	asrs	r2, r2, #8
   b55c2:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b55c4:	1c9a      	adds	r2, r3, #2
   b55c6:	69e1      	ldr	r1, [r4, #28]
   b55c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b55ca:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b55cc:	3303      	adds	r3, #3
   b55ce:	69e2      	ldr	r2, [r4, #28]
   b55d0:	4649      	mov	r1, r9
   b55d2:	4620      	mov	r0, r4
   b55d4:	f7ff ff70 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
   b55d8:	4603      	mov	r3, r0
            if (willTopic) {
   b55da:	f1b8 0f00 	cmp.w	r8, #0
   b55de:	d00b      	beq.n	b55f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b55e0:	69e2      	ldr	r2, [r4, #28]
   b55e2:	4641      	mov	r1, r8
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7ff ff67 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b55ea:	69e2      	ldr	r2, [r4, #28]
   b55ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b55ee:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7ff ff61 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
   b55f6:	4603      	mov	r3, r0
            if(user != NULL) {
   b55f8:	b167      	cbz	r7, b5614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b55fa:	69e2      	ldr	r2, [r4, #28]
   b55fc:	4639      	mov	r1, r7
   b55fe:	4620      	mov	r0, r4
   b5600:	f7ff ff5a 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
   b5604:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5606:	b12e      	cbz	r6, b5614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5608:	69e2      	ldr	r2, [r4, #28]
   b560a:	4631      	mov	r1, r6
   b560c:	4620      	mov	r0, r4
   b560e:	f7ff ff53 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
   b5612:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5614:	3b05      	subs	r3, #5
   b5616:	69e2      	ldr	r2, [r4, #28]
   b5618:	b29b      	uxth	r3, r3
   b561a:	2110      	movs	r1, #16
   b561c:	4620      	mov	r0, r4
   b561e:	f7ff ff0f 	bl	b5440 <_ZN4MQTT5writeEhPht>
   b5622:	f000 fb03 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5626:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b562a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b562e:	4620      	mov	r0, r4
   b5630:	f001 fbfe 	bl	b6e30 <_ZN9TCPClient9availableEv>
   b5634:	bb88      	cbnz	r0, b569a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5636:	f000 faf9 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b563a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b563c:	1ac0      	subs	r0, r0, r3
   b563e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5640:	4373      	muls	r3, r6
   b5642:	4298      	cmp	r0, r3
   b5644:	d9f3      	bls.n	b562e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5646:	4620      	mov	r0, r4
   b5648:	f001 fc4c 	bl	b6ee4 <_ZN9TCPClient4stopEv>
   b564c:	e035      	b.n	b56ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b564e:	a802      	add	r0, sp, #8
   b5650:	f001 f8b6 	bl	b67c0 <_ZN9IPAddressC1EPKh>
   b5654:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5658:	462b      	mov	r3, r5
   b565a:	a902      	add	r1, sp, #8
   b565c:	4620      	mov	r0, r4
   b565e:	f001 fb6b 	bl	b6d38 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5662:	e773      	b.n	b554c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5664:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5668:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b566c:	7bdb      	ldrb	r3, [r3, #15]
   b566e:	f10d 0c08 	add.w	ip, sp, #8
   b5672:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5676:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b567a:	ab02      	add	r3, sp, #8
   b567c:	cb03      	ldmia	r3!, {r0, r1}
   b567e:	f8c2 0005 	str.w	r0, [r2, #5]
   b5682:	f8c2 1009 	str.w	r1, [r2, #9]
   b5686:	f89c 3000 	ldrb.w	r3, [ip]
   b568a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b568c:	230e      	movs	r3, #14
   b568e:	e77a      	b.n	b5586 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5690:	2002      	movs	r0, #2
   b5692:	e786      	b.n	b55a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5694:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5698:	e78d      	b.n	b55b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b569a:	a902      	add	r1, sp, #8
   b569c:	4620      	mov	r0, r4
   b569e:	f7ff fe7d 	bl	b539c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b56a2:	2804      	cmp	r0, #4
   b56a4:	d1cf      	bne.n	b5646 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b56a6:	69e3      	ldr	r3, [r4, #28]
   b56a8:	78de      	ldrb	r6, [r3, #3]
   b56aa:	2e00      	cmp	r6, #0
   b56ac:	d1cb      	bne.n	b5646 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b56ae:	f000 fabd 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b56b2:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b56b4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b56b6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b56ba:	a801      	add	r0, sp, #4
   b56bc:	f7ff fe03 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b56c0:	4628      	mov	r0, r5
   b56c2:	b008      	add	sp, #32
   b56c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b56c8:	2500      	movs	r5, #0
   b56ca:	e7f9      	b.n	b56c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b56cc:	000ba95a 	.word	0x000ba95a

000b56d0 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b56d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b56d2:	2301      	movs	r3, #1
   b56d4:	2204      	movs	r2, #4
   b56d6:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b56da:	2300      	movs	r3, #0
   b56dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b56e0:	e9cd 3300 	strd	r3, r3, [sp]
   b56e4:	461a      	mov	r2, r3
   b56e6:	f7ff ff11 	bl	b550c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b56ea:	b007      	add	sp, #28
   b56ec:	f85d fb04 	ldr.w	pc, [sp], #4

000b56f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b56f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56f4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b56f8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b56fc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b5700:	4604      	mov	r4, r0
   b5702:	468b      	mov	fp, r1
   b5704:	4616      	mov	r6, r2
   b5706:	461f      	mov	r7, r3
    if (isConnected()) {
   b5708:	f7ff fef2 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b570c:	4682      	mov	sl, r0
   b570e:	2800      	cmp	r0, #0
   b5710:	d051      	beq.n	b57b6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b5712:	4621      	mov	r1, r4
   b5714:	a801      	add	r0, sp, #4
   b5716:	f7ff fdcb 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b571a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b571e:	69e0      	ldr	r0, [r4, #28]
   b5720:	2100      	movs	r1, #0
   b5722:	f003 f80d 	bl	b8740 <memset>
        length = writeString(topic, buffer, length);
   b5726:	2305      	movs	r3, #5
   b5728:	69e2      	ldr	r2, [r4, #28]
   b572a:	4659      	mov	r1, fp
   b572c:	4620      	mov	r0, r4
   b572e:	f7ff fec3 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b5732:	1e6b      	subs	r3, r5, #1
   b5734:	2b01      	cmp	r3, #1
   b5736:	d815      	bhi.n	b5764 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5738:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b573a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b573c:	3101      	adds	r1, #1
   b573e:	b289      	uxth	r1, r1
   b5740:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5742:	0a09      	lsrs	r1, r1, #8
   b5744:	5419      	strb	r1, [r3, r0]
   b5746:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5748:	69e3      	ldr	r3, [r4, #28]
   b574a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b574c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b574e:	3002      	adds	r0, #2
   b5750:	5499      	strb	r1, [r3, r2]
   b5752:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5754:	f1b8 0f00 	cmp.w	r8, #0
   b5758:	d004      	beq.n	b5764 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b575a:	8c23      	ldrh	r3, [r4, #32]
   b575c:	1c5a      	adds	r2, r3, #1
   b575e:	8422      	strh	r2, [r4, #32]
   b5760:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5764:	2100      	movs	r1, #0
   b5766:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5768:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b576a:	69e2      	ldr	r2, [r4, #28]
   b576c:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b576e:	d90a      	bls.n	b5786 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5770:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5774:	459c      	cmp	ip, r3
   b5776:	d906      	bls.n	b5786 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5778:	f816 c001 	ldrb.w	ip, [r6, r1]
   b577c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5780:	3101      	adds	r1, #1
   b5782:	b289      	uxth	r1, r1
   b5784:	e7ef      	b.n	b5766 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b5786:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b578a:	2900      	cmp	r1, #0
   b578c:	bf0c      	ite	eq
   b578e:	2130      	moveq	r1, #48	; 0x30
   b5790:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5792:	f1b9 0f00 	cmp.w	r9, #0
   b5796:	d001      	beq.n	b579c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5798:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b579c:	2d02      	cmp	r5, #2
   b579e:	d10e      	bne.n	b57be <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b57a0:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b57a4:	3b05      	subs	r3, #5
   b57a6:	b29b      	uxth	r3, r3
   b57a8:	4620      	mov	r0, r4
   b57aa:	f7ff fe49 	bl	b5440 <_ZN4MQTT5writeEhPht>
   b57ae:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b57b0:	a801      	add	r0, sp, #4
   b57b2:	f7ff fd88 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b57b6:	4650      	mov	r0, sl
   b57b8:	b003      	add	sp, #12
   b57ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b57be:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b57c0:	bf08      	it	eq
   b57c2:	f041 0102 	orreq.w	r1, r1, #2
   b57c6:	e7ed      	b.n	b57a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b57c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b57c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b57ca:	9c08      	ldr	r4, [sp, #32]
   b57cc:	9403      	str	r4, [sp, #12]
   b57ce:	2400      	movs	r4, #0
   b57d0:	9402      	str	r4, [sp, #8]
   b57d2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b57d6:	9401      	str	r4, [sp, #4]
   b57d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b57dc:	9400      	str	r4, [sp, #0]
   b57de:	f7ff ff87 	bl	b56f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b57e2:	b004      	add	sp, #16
   b57e4:	bd10      	pop	{r4, pc}

000b57e6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b57e6:	b530      	push	{r4, r5, lr}
   b57e8:	b087      	sub	sp, #28
   b57ea:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b57ec:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b57ee:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b57f0:	9204      	str	r2, [sp, #16]
   b57f2:	f002 ffe5 	bl	b87c0 <strlen>
   b57f6:	2500      	movs	r5, #0
   b57f8:	4603      	mov	r3, r0
   b57fa:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b57fe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b5802:	9500      	str	r5, [sp, #0]
   b5804:	4620      	mov	r0, r4
   b5806:	f7ff ffdf 	bl	b57c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b580a:	b007      	add	sp, #28
   b580c:	bd30      	pop	{r4, r5, pc}

000b580e <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b580e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5810:	4604      	mov	r4, r0
   b5812:	460e      	mov	r6, r1
    if (isConnected()) {
   b5814:	f7ff fe6c 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b5818:	4605      	mov	r5, r0
   b581a:	b1c8      	cbz	r0, b5850 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b581c:	4621      	mov	r1, r4
   b581e:	a801      	add	r0, sp, #4
   b5820:	f7ff fd46 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5824:	69e3      	ldr	r3, [r4, #28]
   b5826:	2262      	movs	r2, #98	; 0x62
   b5828:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b582a:	69e3      	ldr	r3, [r4, #28]
   b582c:	2202      	movs	r2, #2
   b582e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5830:	69e3      	ldr	r3, [r4, #28]
   b5832:	0a32      	lsrs	r2, r6, #8
   b5834:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5836:	69e3      	ldr	r3, [r4, #28]
   b5838:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b583a:	69e1      	ldr	r1, [r4, #28]
   b583c:	2204      	movs	r2, #4
   b583e:	4620      	mov	r0, r4
   b5840:	f001 f8ef 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
   b5844:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5846:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5848:	bf18      	it	ne
   b584a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b584c:	f7ff fd3b 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5850:	4628      	mov	r0, r5
   b5852:	b002      	add	sp, #8
   b5854:	bd70      	pop	{r4, r5, r6, pc}

000b5856 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5856:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5858:	4604      	mov	r4, r0
   b585a:	460e      	mov	r6, r1
    if (isConnected()) {
   b585c:	f7ff fe48 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b5860:	4605      	mov	r5, r0
   b5862:	b1c8      	cbz	r0, b5898 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5864:	4621      	mov	r1, r4
   b5866:	a801      	add	r0, sp, #4
   b5868:	f7ff fd22 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b586c:	69e3      	ldr	r3, [r4, #28]
   b586e:	2272      	movs	r2, #114	; 0x72
   b5870:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5872:	69e3      	ldr	r3, [r4, #28]
   b5874:	2202      	movs	r2, #2
   b5876:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5878:	69e3      	ldr	r3, [r4, #28]
   b587a:	0a32      	lsrs	r2, r6, #8
   b587c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b587e:	69e3      	ldr	r3, [r4, #28]
   b5880:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5882:	69e1      	ldr	r1, [r4, #28]
   b5884:	2204      	movs	r2, #4
   b5886:	4620      	mov	r0, r4
   b5888:	f001 f8cb 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
   b588c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b588e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5890:	bf18      	it	ne
   b5892:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5894:	f7ff fd17 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5898:	4628      	mov	r0, r5
   b589a:	b002      	add	sp, #8
   b589c:	bd70      	pop	{r4, r5, r6, pc}

000b589e <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b589e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58a2:	ed2d 8b02 	vpush	{d8}
   b58a6:	b087      	sub	sp, #28
   b58a8:	af00      	add	r7, sp, #0
   b58aa:	4604      	mov	r4, r0
    if (isConnected()) {
   b58ac:	f7ff fe20 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b58b0:	4681      	mov	r9, r0
   b58b2:	b1f8      	cbz	r0, b58f4 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b58b4:	4621      	mov	r1, r4
   b58b6:	f107 0014 	add.w	r0, r7, #20
   b58ba:	f7ff fcf9 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
   b58be:	f000 f9b5 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b58c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b58c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b58c8:	4353      	muls	r3, r2
   b58ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b58cc:	1a82      	subs	r2, r0, r2
   b58ce:	429a      	cmp	r2, r3
   b58d0:	4606      	mov	r6, r0
   b58d2:	d803      	bhi.n	b58dc <_ZN4MQTT4loopEv+0x3e>
   b58d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b58d6:	1a82      	subs	r2, r0, r2
   b58d8:	4293      	cmp	r3, r2
   b58da:	d221      	bcs.n	b5920 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b58dc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b58e0:	b17b      	cbz	r3, b5902 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b58e2:	4620      	mov	r0, r4
   b58e4:	f001 fafe 	bl	b6ee4 <_ZN9TCPClient4stopEv>
                return false;
   b58e8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b58ec:	f107 0014 	add.w	r0, r7, #20
   b58f0:	f7ff fce9 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b58f4:	4648      	mov	r0, r9
   b58f6:	371c      	adds	r7, #28
   b58f8:	46bd      	mov	sp, r7
   b58fa:	ecbd 8b02 	vpop	{d8}
   b58fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5902:	69e2      	ldr	r2, [r4, #28]
   b5904:	21c0      	movs	r1, #192	; 0xc0
   b5906:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5908:	69e2      	ldr	r2, [r4, #28]
   b590a:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b590c:	69e1      	ldr	r1, [r4, #28]
   b590e:	2202      	movs	r2, #2
   b5910:	4620      	mov	r0, r4
   b5912:	f001 f886 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5916:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b591a:	2301      	movs	r3, #1
   b591c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5920:	4620      	mov	r0, r4
   b5922:	f001 fa85 	bl	b6e30 <_ZN9TCPClient9availableEv>
   b5926:	2800      	cmp	r0, #0
   b5928:	d0e0      	beq.n	b58ec <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b592a:	f107 0113 	add.w	r1, r7, #19
   b592e:	4620      	mov	r0, r4
   b5930:	f7ff fd34 	bl	b539c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5934:	4683      	mov	fp, r0
   b5936:	2800      	cmp	r0, #0
   b5938:	d0d8      	beq.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b593a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b593c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b593e:	7819      	ldrb	r1, [r3, #0]
   b5940:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5944:	2a30      	cmp	r2, #48	; 0x30
   b5946:	d17f      	bne.n	b5a48 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5948:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b594c:	f1ba 0f00 	cmp.w	sl, #0
   b5950:	d0cc      	beq.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5952:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5956:	466a      	mov	r2, sp
   b5958:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b595c:	eb03 020c 	add.w	r2, r3, ip
   b5960:	7851      	ldrb	r1, [r2, #1]
   b5962:	7895      	ldrb	r5, [r2, #2]
   b5964:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5968:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b596a:	f105 0208 	add.w	r2, r5, #8
   b596e:	4669      	mov	r1, sp
   b5970:	08d2      	lsrs	r2, r2, #3
   b5972:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5976:	4695      	mov	sp, r2
   b5978:	f10c 0203 	add.w	r2, ip, #3
   b597c:	60fa      	str	r2, [r7, #12]
   b597e:	eb03 0e02 	add.w	lr, r3, r2
   b5982:	eb0d 0205 	add.w	r2, sp, r5
   b5986:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5988:	f8c7 d008 	str.w	sp, [r7, #8]
   b598c:	607a      	str	r2, [r7, #4]
   b598e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5992:	428a      	cmp	r2, r1
   b5994:	d006      	beq.n	b59a4 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5996:	460a      	mov	r2, r1
   b5998:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b599c:	f802 8b01 	strb.w	r8, [r2], #1
   b59a0:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b59a2:	e7f4      	b.n	b598e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b59a4:	2200      	movs	r2, #0
   b59a6:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b59a8:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59ac:	68f9      	ldr	r1, [r7, #12]
   b59ae:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b59b2:	ebab 020c 	sub.w	r2, fp, ip
   b59b6:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b59b8:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b59bc:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59c0:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b59c2:	d125      	bne.n	b5a10 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59c4:	f813 e001 	ldrb.w	lr, [r3, r1]
   b59c8:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b59ca:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59cc:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b59d0:	f10c 0105 	add.w	r1, ip, #5
   b59d4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b59d6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59d8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b59dc:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b59de:	69e3      	ldr	r3, [r4, #28]
   b59e0:	2240      	movs	r2, #64	; 0x40
   b59e2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b59e4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b59e6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b59ea:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b59ee:	69e3      	ldr	r3, [r4, #28]
   b59f0:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b59f4:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b59f6:	69e3      	ldr	r3, [r4, #28]
   b59f8:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b59fc:	69e1      	ldr	r1, [r4, #28]
   b59fe:	2204      	movs	r2, #4
   b5a00:	4620      	mov	r0, r4
   b5a02:	f001 f80e 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5a06:	6266      	str	r6, [r4, #36]	; 0x24
   b5a08:	ee18 3a10 	vmov	r3, s16
   b5a0c:	469d      	mov	sp, r3
   b5a0e:	e76d      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5a10:	f1b8 0f04 	cmp.w	r8, #4
   b5a14:	d115      	bne.n	b5a42 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5a16:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5a1a:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5a1c:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5a1e:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5a22:	f10c 0105 	add.w	r1, ip, #5
   b5a26:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5a28:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5a2a:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5a2e:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5a30:	69e3      	ldr	r3, [r4, #28]
   b5a32:	2250      	movs	r2, #80	; 0x50
   b5a34:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5a36:	69e3      	ldr	r3, [r4, #28]
   b5a38:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5a3a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5a3e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5a40:	e7d5      	b.n	b59ee <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5a42:	4419      	add	r1, r3
   b5a44:	47d0      	blx	sl
   b5a46:	e7df      	b.n	b5a08 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5a48:	2a50      	cmp	r2, #80	; 0x50
   b5a4a:	d108      	bne.n	b5a5e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5a4c:	789a      	ldrb	r2, [r3, #2]
   b5a4e:	78d9      	ldrb	r1, [r3, #3]
   b5a50:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5a54:	b289      	uxth	r1, r1
   b5a56:	4620      	mov	r0, r4
   b5a58:	f7ff fed9 	bl	b580e <_ZN4MQTT14publishReleaseEt>
   b5a5c:	e746      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5a5e:	2a40      	cmp	r2, #64	; 0x40
   b5a60:	d112      	bne.n	b5a88 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5a62:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5a64:	2a00      	cmp	r2, #0
   b5a66:	f43f af41 	beq.w	b58ec <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5a6a:	f1bb 0f04 	cmp.w	fp, #4
   b5a6e:	f47f af3d 	bne.w	b58ec <_ZN4MQTT4loopEv+0x4e>
   b5a72:	f011 0f06 	tst.w	r1, #6
   b5a76:	f47f af39 	bne.w	b58ec <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5a7a:	7899      	ldrb	r1, [r3, #2]
   b5a7c:	78d8      	ldrb	r0, [r3, #3]
   b5a7e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5a82:	b280      	uxth	r0, r0
   b5a84:	4790      	blx	r2
   b5a86:	e731      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5a88:	2a60      	cmp	r2, #96	; 0x60
   b5a8a:	d108      	bne.n	b5a9e <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5a8c:	789a      	ldrb	r2, [r3, #2]
   b5a8e:	78d9      	ldrb	r1, [r3, #3]
   b5a90:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5a94:	b289      	uxth	r1, r1
   b5a96:	4620      	mov	r0, r4
   b5a98:	f7ff fedd 	bl	b5856 <_ZN4MQTT15publishCompleteEt>
   b5a9c:	e726      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5a9e:	2a70      	cmp	r2, #112	; 0x70
   b5aa0:	d0df      	beq.n	b5a62 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5aa2:	2a90      	cmp	r2, #144	; 0x90
   b5aa4:	f43f af22 	beq.w	b58ec <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5aa8:	2ac0      	cmp	r2, #192	; 0xc0
   b5aaa:	d10a      	bne.n	b5ac2 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5aac:	22d0      	movs	r2, #208	; 0xd0
   b5aae:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5ab0:	69e3      	ldr	r3, [r4, #28]
   b5ab2:	2200      	movs	r2, #0
   b5ab4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5ab6:	69e1      	ldr	r1, [r4, #28]
   b5ab8:	2202      	movs	r2, #2
   b5aba:	4620      	mov	r0, r4
   b5abc:	f000 ffb1 	bl	b6a22 <_ZN9TCPClient5writeEPKhj>
   b5ac0:	e714      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5ac2:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5ac4:	bf04      	itt	eq
   b5ac6:	2300      	moveq	r3, #0
   b5ac8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5acc:	e70e      	b.n	b58ec <_ZN4MQTT4loopEv+0x4e>

000b5ace <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5ad0:	4604      	mov	r4, r0
   b5ad2:	460f      	mov	r7, r1
   b5ad4:	4616      	mov	r6, r2
    if (isConnected()) {
   b5ad6:	f7ff fd0b 	bl	b54f0 <_ZN4MQTT11isConnectedEv>
   b5ada:	4605      	mov	r5, r0
   b5adc:	b310      	cbz	r0, b5b24 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5ade:	4621      	mov	r1, r4
   b5ae0:	a801      	add	r0, sp, #4
   b5ae2:	f7ff fbe5 	bl	b52b0 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5ae6:	8c23      	ldrh	r3, [r4, #32]
   b5ae8:	3301      	adds	r3, #1
   b5aea:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5aec:	b1eb      	cbz	r3, b5b2a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5aee:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5af0:	8c23      	ldrh	r3, [r4, #32]
   b5af2:	69e2      	ldr	r2, [r4, #28]
   b5af4:	0a1b      	lsrs	r3, r3, #8
   b5af6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5af8:	69e3      	ldr	r3, [r4, #28]
   b5afa:	8c22      	ldrh	r2, [r4, #32]
   b5afc:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5afe:	69e2      	ldr	r2, [r4, #28]
   b5b00:	2307      	movs	r3, #7
   b5b02:	4639      	mov	r1, r7
   b5b04:	4620      	mov	r0, r4
   b5b06:	f7ff fcd7 	bl	b54b8 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5b0a:	69e3      	ldr	r3, [r4, #28]
   b5b0c:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5b0e:	3804      	subs	r0, #4
   b5b10:	b283      	uxth	r3, r0
   b5b12:	69e2      	ldr	r2, [r4, #28]
   b5b14:	2182      	movs	r1, #130	; 0x82
   b5b16:	4620      	mov	r0, r4
   b5b18:	f7ff fc92 	bl	b5440 <_ZN4MQTT5writeEhPht>
   b5b1c:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5b1e:	a801      	add	r0, sp, #4
   b5b20:	f7ff fbd1 	bl	b52c6 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5b24:	4628      	mov	r0, r5
   b5b26:	b003      	add	sp, #12
   b5b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5b2a:	2301      	movs	r3, #1
   b5b2c:	e7df      	b.n	b5aee <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5b2e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5b2e:	2200      	movs	r2, #0
   b5b30:	f7ff bfcd 	b.w	b5ace <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5b34 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b5b34:	f000 bd0a 	b.w	b654c <delay>

000b5b38 <_Z11BlynkMillisv>:
   b5b38:	f000 b878 	b.w	b5c2c <HAL_Timer_Get_Milli_Seconds>

000b5b3c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b5b3c:	4770      	bx	lr

000b5b3e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b5b3e:	4770      	bx	lr

000b5b40 <BlynkNoOpCbk>:
{}
   b5b40:	4770      	bx	lr
	...

000b5b44 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b5b44:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b5b46:	bf5a      	itte	pl
   b5b48:	4b02      	ldrpl	r3, [pc, #8]	; (b5b54 <GetReadHandler+0x10>)
   b5b4a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b5b4e:	2000      	movmi	r0, #0
#endif
}
   b5b50:	4770      	bx	lr
   b5b52:	bf00      	nop
   b5b54:	000ba96c 	.word	0x000ba96c

000b5b58 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b5b58:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b5b5a:	bf5a      	itte	pl
   b5b5c:	4b02      	ldrpl	r3, [pc, #8]	; (b5b68 <GetWriteHandler+0x10>)
   b5b5e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b5b62:	2000      	movmi	r0, #0
#endif
}
   b5b64:	4770      	bx	lr
   b5b66:	bf00      	nop
   b5b68:	000bab6c 	.word	0x000bab6c

000b5b6c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5b6c:	b508      	push	{r3, lr}
   b5b6e:	4b02      	ldr	r3, [pc, #8]	; (b5b78 <netdb_freeaddrinfo+0xc>)
   b5b70:	681b      	ldr	r3, [r3, #0]
   b5b72:	689b      	ldr	r3, [r3, #8]
   b5b74:	9301      	str	r3, [sp, #4]
   b5b76:	bd08      	pop	{r3, pc}
   b5b78:	00030268 	.word	0x00030268

000b5b7c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5b7c:	b508      	push	{r3, lr}
   b5b7e:	4b02      	ldr	r3, [pc, #8]	; (b5b88 <netdb_getaddrinfo+0xc>)
   b5b80:	681b      	ldr	r3, [r3, #0]
   b5b82:	68db      	ldr	r3, [r3, #12]
   b5b84:	9301      	str	r3, [sp, #4]
   b5b86:	bd08      	pop	{r3, pc}
   b5b88:	00030268 	.word	0x00030268

000b5b8c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5b8c:	b508      	push	{r3, lr}
   b5b8e:	4b02      	ldr	r3, [pc, #8]	; (b5b98 <HAL_Validate_Pin_Function+0xc>)
   b5b90:	681b      	ldr	r3, [r3, #0]
   b5b92:	685b      	ldr	r3, [r3, #4]
   b5b94:	9301      	str	r3, [sp, #4]
   b5b96:	bd08      	pop	{r3, pc}
   b5b98:	0003022c 	.word	0x0003022c

000b5b9c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5b9c:	b508      	push	{r3, lr}
   b5b9e:	4b02      	ldr	r3, [pc, #8]	; (b5ba8 <HAL_Pin_Mode+0xc>)
   b5ba0:	681b      	ldr	r3, [r3, #0]
   b5ba2:	689b      	ldr	r3, [r3, #8]
   b5ba4:	9301      	str	r3, [sp, #4]
   b5ba6:	bd08      	pop	{r3, pc}
   b5ba8:	0003022c 	.word	0x0003022c

000b5bac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5bac:	b508      	push	{r3, lr}
   b5bae:	4b02      	ldr	r3, [pc, #8]	; (b5bb8 <HAL_Get_Pin_Mode+0xc>)
   b5bb0:	681b      	ldr	r3, [r3, #0]
   b5bb2:	68db      	ldr	r3, [r3, #12]
   b5bb4:	9301      	str	r3, [sp, #4]
   b5bb6:	bd08      	pop	{r3, pc}
   b5bb8:	0003022c 	.word	0x0003022c

000b5bbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5bbc:	b508      	push	{r3, lr}
   b5bbe:	4b02      	ldr	r3, [pc, #8]	; (b5bc8 <HAL_GPIO_Write+0xc>)
   b5bc0:	681b      	ldr	r3, [r3, #0]
   b5bc2:	691b      	ldr	r3, [r3, #16]
   b5bc4:	9301      	str	r3, [sp, #4]
   b5bc6:	bd08      	pop	{r3, pc}
   b5bc8:	0003022c 	.word	0x0003022c

000b5bcc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5bcc:	b508      	push	{r3, lr}
   b5bce:	4b02      	ldr	r3, [pc, #8]	; (b5bd8 <HAL_GPIO_Read+0xc>)
   b5bd0:	681b      	ldr	r3, [r3, #0]
   b5bd2:	695b      	ldr	r3, [r3, #20]
   b5bd4:	9301      	str	r3, [sp, #4]
   b5bd6:	bd08      	pop	{r3, pc}
   b5bd8:	0003022c 	.word	0x0003022c

000b5bdc <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b5bdc:	b508      	push	{r3, lr}
   b5bde:	4b02      	ldr	r3, [pc, #8]	; (b5be8 <HAL_DAC_Write+0xc>)
   b5be0:	681b      	ldr	r3, [r3, #0]
   b5be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5be4:	9301      	str	r3, [sp, #4]
   b5be6:	bd08      	pop	{r3, pc}
   b5be8:	0003022c 	.word	0x0003022c

000b5bec <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5bec:	b508      	push	{r3, lr}
   b5bee:	4b02      	ldr	r3, [pc, #8]	; (b5bf8 <hal_adc_read+0xc>)
   b5bf0:	681b      	ldr	r3, [r3, #0]
   b5bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5bf4:	9301      	str	r3, [sp, #4]
   b5bf6:	bd08      	pop	{r3, pc}
   b5bf8:	0003022c 	.word	0x0003022c

000b5bfc <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b5bfc:	b508      	push	{r3, lr}
   b5bfe:	4b02      	ldr	r3, [pc, #8]	; (b5c08 <hal_pwm_write_ext+0xc>)
   b5c00:	681b      	ldr	r3, [r3, #0]
   b5c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5c04:	9301      	str	r3, [sp, #4]
   b5c06:	bd08      	pop	{r3, pc}
   b5c08:	0003022c 	.word	0x0003022c

000b5c0c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5c0c:	b508      	push	{r3, lr}
   b5c0e:	4b02      	ldr	r3, [pc, #8]	; (b5c18 <if_index_to_name+0xc>)
   b5c10:	681b      	ldr	r3, [r3, #0]
   b5c12:	695b      	ldr	r3, [r3, #20]
   b5c14:	9301      	str	r3, [sp, #4]
   b5c16:	bd08      	pop	{r3, pc}
   b5c18:	0003026c 	.word	0x0003026c

000b5c1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5c1c:	b508      	push	{r3, lr}
   b5c1e:	4b02      	ldr	r3, [pc, #8]	; (b5c28 <HAL_RNG_GetRandomNumber+0xc>)
   b5c20:	681b      	ldr	r3, [r3, #0]
   b5c22:	685b      	ldr	r3, [r3, #4]
   b5c24:	9301      	str	r3, [sp, #4]
   b5c26:	bd08      	pop	{r3, pc}
   b5c28:	00030218 	.word	0x00030218

000b5c2c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5c2c:	b508      	push	{r3, lr}
   b5c2e:	4b02      	ldr	r3, [pc, #8]	; (b5c38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5c30:	681b      	ldr	r3, [r3, #0]
   b5c32:	695b      	ldr	r3, [r3, #20]
   b5c34:	9301      	str	r3, [sp, #4]
   b5c36:	bd08      	pop	{r3, pc}
   b5c38:	00030218 	.word	0x00030218

000b5c3c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <os_mutex_create+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	00030248 	.word	0x00030248

000b5c4c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <os_mutex_lock+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	00030248 	.word	0x00030248

000b5c5c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <os_mutex_unlock+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	00030248 	.word	0x00030248

000b5c6c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <os_mutex_recursive_create+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	00030248 	.word	0x00030248

000b5c7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <inet_inet_ntop+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	695b      	ldr	r3, [r3, #20]
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	00030264 	.word	0x00030264

000b5c8c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <inet_htonl+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	6a1b      	ldr	r3, [r3, #32]
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	00030264 	.word	0x00030264

000b5c9c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <inet_htons+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030264 	.word	0x00030264

000b5cac <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <hal_usart_write+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	68db      	ldr	r3, [r3, #12]
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	0003023c 	.word	0x0003023c

000b5cbc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <hal_usart_available+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	691b      	ldr	r3, [r3, #16]
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	0003023c 	.word	0x0003023c

000b5ccc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <hal_usart_read+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	695b      	ldr	r3, [r3, #20]
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	0003023c 	.word	0x0003023c

000b5cdc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <hal_usart_peek+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	699b      	ldr	r3, [r3, #24]
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	0003023c 	.word	0x0003023c

000b5cec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <hal_usart_flush+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	69db      	ldr	r3, [r3, #28]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	0003023c 	.word	0x0003023c

000b5cfc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <hal_usart_is_enabled+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	6a1b      	ldr	r3, [r3, #32]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	0003023c 	.word	0x0003023c

000b5d0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <hal_usart_available_data_for_write+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	0003023c 	.word	0x0003023c

000b5d1c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <hal_usart_init_ex+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	0003023c 	.word	0x0003023c

000b5d2c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <hal_i2c_write+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	6a1b      	ldr	r3, [r3, #32]
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030228 	.word	0x00030228

000b5d3c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <hal_i2c_available+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030228 	.word	0x00030228

000b5d4c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <hal_i2c_read+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030228 	.word	0x00030228

000b5d5c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <hal_i2c_peek+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030228 	.word	0x00030228

000b5d6c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <hal_i2c_flush+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030228 	.word	0x00030228

000b5d7c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <hal_i2c_is_enabled+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030228 	.word	0x00030228

000b5d8c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <hal_i2c_init+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030228 	.word	0x00030228

000b5d9c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <sock_setsockopt+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	699b      	ldr	r3, [r3, #24]
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030238 	.word	0x00030238

000b5dac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <sock_close+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	69db      	ldr	r3, [r3, #28]
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030238 	.word	0x00030238

000b5dbc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <sock_connect+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6a1b      	ldr	r3, [r3, #32]
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030238 	.word	0x00030238

000b5dcc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <sock_recv+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030238 	.word	0x00030238

000b5ddc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <sock_send+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	00030238 	.word	0x00030238

000b5dec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <sock_socket+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030238 	.word	0x00030238

000b5dfc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <hal_spi_init+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	69db      	ldr	r3, [r3, #28]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030230 	.word	0x00030230

000b5e0c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <hal_spi_is_enabled+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	6a1b      	ldr	r3, [r3, #32]
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030230 	.word	0x00030230

000b5e1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <HAL_USB_USART_Init+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	681b      	ldr	r3, [r3, #0]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	0003024c 	.word	0x0003024c

000b5e2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <HAL_USB_USART_Begin+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	685b      	ldr	r3, [r3, #4]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	0003024c 	.word	0x0003024c

000b5e3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <HAL_USB_USART_Available_Data+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	691b      	ldr	r3, [r3, #16]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	0003024c 	.word	0x0003024c

000b5e4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	695b      	ldr	r3, [r3, #20]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	0003024c 	.word	0x0003024c

000b5e5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <HAL_USB_USART_Receive_Data+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	699b      	ldr	r3, [r3, #24]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	0003024c 	.word	0x0003024c

000b5e6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <HAL_USB_USART_Send_Data+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	69db      	ldr	r3, [r3, #28]
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	0003024c 	.word	0x0003024c

000b5e7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <HAL_USB_USART_Flush_Data+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6a1b      	ldr	r3, [r3, #32]
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	0003024c 	.word	0x0003024c

000b5e8c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <log_message+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030260 	.word	0x00030260

000b5e9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <set_system_mode+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	685b      	ldr	r3, [r3, #4]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030220 	.word	0x00030220

000b5eac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <system_delay_ms+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	695b      	ldr	r3, [r3, #20]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030220 	.word	0x00030220

000b5ebc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b03      	ldr	r3, [pc, #12]	; (b5ecc <system_ctrl_set_app_request_handler+0x10>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5ec6:	9301      	str	r3, [sp, #4]
   b5ec8:	bd08      	pop	{r3, pc}
   b5eca:	0000      	.short	0x0000
   b5ecc:	00030220 	.word	0x00030220

000b5ed0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b03      	ldr	r3, [pc, #12]	; (b5ee0 <system_ctrl_set_result+0x10>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5eda:	9301      	str	r3, [sp, #4]
   b5edc:	bd08      	pop	{r3, pc}
   b5ede:	0000      	.short	0x0000
   b5ee0:	00030220 	.word	0x00030220

000b5ee4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ee4:	b508      	push	{r3, lr}
   b5ee6:	4b02      	ldr	r3, [pc, #8]	; (b5ef0 <network_connect+0xc>)
   b5ee8:	681b      	ldr	r3, [r3, #0]
   b5eea:	685b      	ldr	r3, [r3, #4]
   b5eec:	9301      	str	r3, [sp, #4]
   b5eee:	bd08      	pop	{r3, pc}
   b5ef0:	00030240 	.word	0x00030240

000b5ef4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5ef4:	b508      	push	{r3, lr}
   b5ef6:	4b02      	ldr	r3, [pc, #8]	; (b5f00 <network_connecting+0xc>)
   b5ef8:	681b      	ldr	r3, [r3, #0]
   b5efa:	689b      	ldr	r3, [r3, #8]
   b5efc:	9301      	str	r3, [sp, #4]
   b5efe:	bd08      	pop	{r3, pc}
   b5f00:	00030240 	.word	0x00030240

000b5f04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5f04:	b508      	push	{r3, lr}
   b5f06:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <network_disconnect+0xc>)
   b5f08:	681b      	ldr	r3, [r3, #0]
   b5f0a:	68db      	ldr	r3, [r3, #12]
   b5f0c:	9301      	str	r3, [sp, #4]
   b5f0e:	bd08      	pop	{r3, pc}
   b5f10:	00030240 	.word	0x00030240

000b5f14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5f14:	b508      	push	{r3, lr}
   b5f16:	4b02      	ldr	r3, [pc, #8]	; (b5f20 <network_ready+0xc>)
   b5f18:	681b      	ldr	r3, [r3, #0]
   b5f1a:	691b      	ldr	r3, [r3, #16]
   b5f1c:	9301      	str	r3, [sp, #4]
   b5f1e:	bd08      	pop	{r3, pc}
   b5f20:	00030240 	.word	0x00030240

000b5f24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f24:	b508      	push	{r3, lr}
   b5f26:	4b02      	ldr	r3, [pc, #8]	; (b5f30 <network_on+0xc>)
   b5f28:	681b      	ldr	r3, [r3, #0]
   b5f2a:	695b      	ldr	r3, [r3, #20]
   b5f2c:	9301      	str	r3, [sp, #4]
   b5f2e:	bd08      	pop	{r3, pc}
   b5f30:	00030240 	.word	0x00030240

000b5f34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f34:	b508      	push	{r3, lr}
   b5f36:	4b02      	ldr	r3, [pc, #8]	; (b5f40 <network_off+0xc>)
   b5f38:	681b      	ldr	r3, [r3, #0]
   b5f3a:	699b      	ldr	r3, [r3, #24]
   b5f3c:	9301      	str	r3, [sp, #4]
   b5f3e:	bd08      	pop	{r3, pc}
   b5f40:	00030240 	.word	0x00030240

000b5f44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5f44:	b508      	push	{r3, lr}
   b5f46:	4b02      	ldr	r3, [pc, #8]	; (b5f50 <network_listen+0xc>)
   b5f48:	681b      	ldr	r3, [r3, #0]
   b5f4a:	69db      	ldr	r3, [r3, #28]
   b5f4c:	9301      	str	r3, [sp, #4]
   b5f4e:	bd08      	pop	{r3, pc}
   b5f50:	00030240 	.word	0x00030240

000b5f54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5f54:	b508      	push	{r3, lr}
   b5f56:	4b02      	ldr	r3, [pc, #8]	; (b5f60 <network_listening+0xc>)
   b5f58:	681b      	ldr	r3, [r3, #0]
   b5f5a:	6a1b      	ldr	r3, [r3, #32]
   b5f5c:	9301      	str	r3, [sp, #4]
   b5f5e:	bd08      	pop	{r3, pc}
   b5f60:	00030240 	.word	0x00030240

000b5f64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5f64:	b508      	push	{r3, lr}
   b5f66:	4b02      	ldr	r3, [pc, #8]	; (b5f70 <network_set_listen_timeout+0xc>)
   b5f68:	681b      	ldr	r3, [r3, #0]
   b5f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f6c:	9301      	str	r3, [sp, #4]
   b5f6e:	bd08      	pop	{r3, pc}
   b5f70:	00030240 	.word	0x00030240

000b5f74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5f74:	b508      	push	{r3, lr}
   b5f76:	4b02      	ldr	r3, [pc, #8]	; (b5f80 <network_get_listen_timeout+0xc>)
   b5f78:	681b      	ldr	r3, [r3, #0]
   b5f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5f7c:	9301      	str	r3, [sp, #4]
   b5f7e:	bd08      	pop	{r3, pc}
   b5f80:	00030240 	.word	0x00030240

000b5f84 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5f84:	b508      	push	{r3, lr}
   b5f86:	4b02      	ldr	r3, [pc, #8]	; (b5f90 <network_is_on+0xc>)
   b5f88:	681b      	ldr	r3, [r3, #0]
   b5f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f8c:	9301      	str	r3, [sp, #4]
   b5f8e:	bd08      	pop	{r3, pc}
   b5f90:	00030240 	.word	0x00030240

000b5f94 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5f94:	b508      	push	{r3, lr}
   b5f96:	4b02      	ldr	r3, [pc, #8]	; (b5fa0 <network_is_off+0xc>)
   b5f98:	681b      	ldr	r3, [r3, #0]
   b5f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f9c:	9301      	str	r3, [sp, #4]
   b5f9e:	bd08      	pop	{r3, pc}
   b5fa0:	00030240 	.word	0x00030240

000b5fa4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5fa4:	b508      	push	{r3, lr}
   b5fa6:	4b02      	ldr	r3, [pc, #8]	; (b5fb0 <spark_process+0xc>)
   b5fa8:	681b      	ldr	r3, [r3, #0]
   b5faa:	689b      	ldr	r3, [r3, #8]
   b5fac:	9301      	str	r3, [sp, #4]
   b5fae:	bd08      	pop	{r3, pc}
   b5fb0:	00030244 	.word	0x00030244

000b5fb4 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b5fb4:	b508      	push	{r3, lr}
   b5fb6:	4b02      	ldr	r3, [pc, #8]	; (b5fc0 <spark_deviceID+0xc>)
   b5fb8:	681b      	ldr	r3, [r3, #0]
   b5fba:	69db      	ldr	r3, [r3, #28]
   b5fbc:	9301      	str	r3, [sp, #4]
   b5fbe:	bd08      	pop	{r3, pc}
   b5fc0:	00030244 	.word	0x00030244

000b5fc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5fc4:	b508      	push	{r3, lr}
   b5fc6:	4b02      	ldr	r3, [pc, #8]	; (b5fd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5fc8:	681b      	ldr	r3, [r3, #0]
   b5fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5fcc:	9301      	str	r3, [sp, #4]
   b5fce:	bd08      	pop	{r3, pc}
   b5fd0:	00030244 	.word	0x00030244

000b5fd4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5fd4:	b508      	push	{r3, lr}
   b5fd6:	4b02      	ldr	r3, [pc, #8]	; (b5fe0 <malloc+0xc>)
   b5fd8:	681b      	ldr	r3, [r3, #0]
   b5fda:	681b      	ldr	r3, [r3, #0]
   b5fdc:	9301      	str	r3, [sp, #4]
   b5fde:	bd08      	pop	{r3, pc}
   b5fe0:	0003021c 	.word	0x0003021c

000b5fe4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5fe4:	b508      	push	{r3, lr}
   b5fe6:	4b02      	ldr	r3, [pc, #8]	; (b5ff0 <free+0xc>)
   b5fe8:	681b      	ldr	r3, [r3, #0]
   b5fea:	685b      	ldr	r3, [r3, #4]
   b5fec:	9301      	str	r3, [sp, #4]
   b5fee:	bd08      	pop	{r3, pc}
   b5ff0:	0003021c 	.word	0x0003021c

000b5ff4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5ff4:	b508      	push	{r3, lr}
   b5ff6:	4b02      	ldr	r3, [pc, #8]	; (b6000 <realloc+0xc>)
   b5ff8:	681b      	ldr	r3, [r3, #0]
   b5ffa:	689b      	ldr	r3, [r3, #8]
   b5ffc:	9301      	str	r3, [sp, #4]
   b5ffe:	bd08      	pop	{r3, pc}
   b6000:	0003021c 	.word	0x0003021c

000b6004 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6004:	b508      	push	{r3, lr}
   b6006:	4b02      	ldr	r3, [pc, #8]	; (b6010 <snprintf+0xc>)
   b6008:	681b      	ldr	r3, [r3, #0]
   b600a:	69db      	ldr	r3, [r3, #28]
   b600c:	9301      	str	r3, [sp, #4]
   b600e:	bd08      	pop	{r3, pc}
   b6010:	0003021c 	.word	0x0003021c

000b6014 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6014:	b508      	push	{r3, lr}
   b6016:	4b02      	ldr	r3, [pc, #8]	; (b6020 <abort+0xc>)
   b6018:	681b      	ldr	r3, [r3, #0]
   b601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b601c:	9301      	str	r3, [sp, #4]
   b601e:	bd08      	pop	{r3, pc}
   b6020:	0003021c 	.word	0x0003021c

000b6024 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6024:	b508      	push	{r3, lr}
   b6026:	4b02      	ldr	r3, [pc, #8]	; (b6030 <_malloc_r+0xc>)
   b6028:	681b      	ldr	r3, [r3, #0]
   b602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b602c:	9301      	str	r3, [sp, #4]
   b602e:	bd08      	pop	{r3, pc}
   b6030:	0003021c 	.word	0x0003021c

000b6034 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <__errno+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	0003021c 	.word	0x0003021c

000b6044 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <__assert_func+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	0003021c 	.word	0x0003021c

000b6054 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <newlib_impure_ptr_callback+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	0003021c 	.word	0x0003021c

000b6064 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6064:	2200      	movs	r2, #0
   b6066:	6840      	ldr	r0, [r0, #4]
   b6068:	4611      	mov	r1, r2
   b606a:	f7ff bf73 	b.w	b5f54 <network_listening>

000b606e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b606e:	2200      	movs	r2, #0
   b6070:	6840      	ldr	r0, [r0, #4]
   b6072:	4611      	mov	r1, r2
   b6074:	f7ff bf7e 	b.w	b5f74 <network_get_listen_timeout>

000b6078 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6078:	6840      	ldr	r0, [r0, #4]
   b607a:	2200      	movs	r2, #0
   b607c:	f7ff bf72 	b.w	b5f64 <network_set_listen_timeout>

000b6080 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6080:	6840      	ldr	r0, [r0, #4]
   b6082:	2200      	movs	r2, #0
   b6084:	f081 0101 	eor.w	r1, r1, #1
   b6088:	f7ff bf5c 	b.w	b5f44 <network_listen>

000b608c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b608c:	2300      	movs	r3, #0
   b608e:	6840      	ldr	r0, [r0, #4]
   b6090:	461a      	mov	r2, r3
   b6092:	4619      	mov	r1, r3
   b6094:	f7ff bf4e 	b.w	b5f34 <network_off>

000b6098 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6098:	2300      	movs	r3, #0
   b609a:	6840      	ldr	r0, [r0, #4]
   b609c:	461a      	mov	r2, r3
   b609e:	4619      	mov	r1, r3
   b60a0:	f7ff bf40 	b.w	b5f24 <network_on>

000b60a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b60a4:	2200      	movs	r2, #0
   b60a6:	6840      	ldr	r0, [r0, #4]
   b60a8:	4611      	mov	r1, r2
   b60aa:	f7ff bf33 	b.w	b5f14 <network_ready>

000b60ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b60ae:	2200      	movs	r2, #0
   b60b0:	6840      	ldr	r0, [r0, #4]
   b60b2:	4611      	mov	r1, r2
   b60b4:	f7ff bf1e 	b.w	b5ef4 <network_connecting>

000b60b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b60b8:	6840      	ldr	r0, [r0, #4]
   b60ba:	2200      	movs	r2, #0
   b60bc:	2102      	movs	r1, #2
   b60be:	f7ff bf21 	b.w	b5f04 <network_disconnect>

000b60c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b60c2:	2300      	movs	r3, #0
   b60c4:	6840      	ldr	r0, [r0, #4]
   b60c6:	461a      	mov	r2, r3
   b60c8:	f7ff bf0c 	b.w	b5ee4 <network_connect>

000b60cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b60cc:	4b02      	ldr	r3, [pc, #8]	; (b60d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b60ce:	2203      	movs	r2, #3
   b60d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b60d2:	4a02      	ldr	r2, [pc, #8]	; (b60dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b60d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b60d6:	4770      	bx	lr
   b60d8:	2003e6c4 	.word	0x2003e6c4
   b60dc:	000bad74 	.word	0x000bad74

000b60e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b60e0:	b510      	push	{r4, lr}
   b60e2:	4604      	mov	r4, r0
   b60e4:	4608      	mov	r0, r1
{
    _spi = spi;
   b60e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b60e8:	f7ff fe88 	bl	b5dfc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b60ec:	2300      	movs	r3, #0
   b60ee:	6063      	str	r3, [r4, #4]
}
   b60f0:	4620      	mov	r0, r4
   b60f2:	bd10      	pop	{r4, pc}

000b60f4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b60f4:	4b05      	ldr	r3, [pc, #20]	; (b610c <_GLOBAL__sub_I_System+0x18>)
   b60f6:	2202      	movs	r2, #2
   b60f8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b60fa:	4b05      	ldr	r3, [pc, #20]	; (b6110 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b60fc:	4a05      	ldr	r2, [pc, #20]	; (b6114 <_GLOBAL__sub_I_System+0x20>)
   b60fe:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6100:	2000      	movs	r0, #0
   b6102:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6106:	f7ff bec9 	b.w	b5e9c <set_system_mode>
   b610a:	bf00      	nop
   b610c:	2003e6d8 	.word	0x2003e6d8
   b6110:	2003e6cc 	.word	0x2003e6cc
   b6114:	ffff0000 	.word	0xffff0000

000b6118 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6118:	b510      	push	{r4, lr}
   b611a:	4604      	mov	r4, r0
{
	free(buffer);
   b611c:	6800      	ldr	r0, [r0, #0]
   b611e:	f7ff ff61 	bl	b5fe4 <free>
}
   b6122:	4620      	mov	r0, r4
   b6124:	bd10      	pop	{r4, pc}

000b6126 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6126:	b510      	push	{r4, lr}
   b6128:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b612a:	6800      	ldr	r0, [r0, #0]
   b612c:	b108      	cbz	r0, b6132 <_ZN6String10invalidateEv+0xc>
   b612e:	f7ff ff59 	bl	b5fe4 <free>
	buffer = NULL;
   b6132:	2300      	movs	r3, #0
	capacity = len = 0;
   b6134:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6138:	6023      	str	r3, [r4, #0]
}
   b613a:	bd10      	pop	{r4, pc}

000b613c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b613c:	b538      	push	{r3, r4, r5, lr}
   b613e:	4604      	mov	r4, r0
   b6140:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6142:	6800      	ldr	r0, [r0, #0]
   b6144:	3101      	adds	r1, #1
   b6146:	f7ff ff55 	bl	b5ff4 <realloc>
	if (newbuffer) {
   b614a:	b110      	cbz	r0, b6152 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b614c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6150:	2001      	movs	r0, #1
	}
	return 0;
}
   b6152:	bd38      	pop	{r3, r4, r5, pc}

000b6154 <_ZN6String7reserveEj>:
{
   b6154:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6156:	6803      	ldr	r3, [r0, #0]
{
   b6158:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b615a:	b123      	cbz	r3, b6166 <_ZN6String7reserveEj+0x12>
   b615c:	6843      	ldr	r3, [r0, #4]
   b615e:	428b      	cmp	r3, r1
   b6160:	d301      	bcc.n	b6166 <_ZN6String7reserveEj+0x12>
   b6162:	2001      	movs	r0, #1
}
   b6164:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6166:	4620      	mov	r0, r4
   b6168:	f7ff ffe8 	bl	b613c <_ZN6String12changeBufferEj>
   b616c:	2800      	cmp	r0, #0
   b616e:	d0f9      	beq.n	b6164 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6170:	68a3      	ldr	r3, [r4, #8]
   b6172:	2b00      	cmp	r3, #0
   b6174:	d1f5      	bne.n	b6162 <_ZN6String7reserveEj+0xe>
   b6176:	6822      	ldr	r2, [r4, #0]
   b6178:	7013      	strb	r3, [r2, #0]
   b617a:	e7f2      	b.n	b6162 <_ZN6String7reserveEj+0xe>

000b617c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b617c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b617e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6180:	4611      	mov	r1, r2
   b6182:	9201      	str	r2, [sp, #4]
{
   b6184:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6186:	f7ff ffe5 	bl	b6154 <_ZN6String7reserveEj>
   b618a:	9a01      	ldr	r2, [sp, #4]
   b618c:	b928      	cbnz	r0, b619a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b618e:	4620      	mov	r0, r4
   b6190:	f7ff ffc9 	bl	b6126 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6194:	4620      	mov	r0, r4
   b6196:	b003      	add	sp, #12
   b6198:	bd30      	pop	{r4, r5, pc}
	len = length;
   b619a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b619c:	4629      	mov	r1, r5
   b619e:	6820      	ldr	r0, [r4, #0]
   b61a0:	f002 faa6 	bl	b86f0 <memcpy>
	buffer[len] = 0;
   b61a4:	6822      	ldr	r2, [r4, #0]
   b61a6:	68a3      	ldr	r3, [r4, #8]
   b61a8:	2100      	movs	r1, #0
   b61aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b61ac:	e7f2      	b.n	b6194 <_ZN6String4copyEPKcj+0x18>

000b61ae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b61ae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b61b0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b61b2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b61b6:	4604      	mov	r4, r0
	len = 0;
   b61b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b61bc:	b141      	cbz	r1, b61d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b61be:	4608      	mov	r0, r1
   b61c0:	9101      	str	r1, [sp, #4]
   b61c2:	f002 fafd 	bl	b87c0 <strlen>
   b61c6:	9901      	ldr	r1, [sp, #4]
   b61c8:	4602      	mov	r2, r0
   b61ca:	4620      	mov	r0, r4
   b61cc:	f7ff ffd6 	bl	b617c <_ZN6String4copyEPKcj>
}
   b61d0:	4620      	mov	r0, r4
   b61d2:	b002      	add	sp, #8
   b61d4:	bd10      	pop	{r4, pc}

000b61d6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b61d6:	4288      	cmp	r0, r1
{
   b61d8:	b510      	push	{r4, lr}
   b61da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b61dc:	d005      	beq.n	b61ea <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b61de:	680b      	ldr	r3, [r1, #0]
   b61e0:	b12b      	cbz	r3, b61ee <_ZN6StringaSERKS_+0x18>
   b61e2:	688a      	ldr	r2, [r1, #8]
   b61e4:	4619      	mov	r1, r3
   b61e6:	f7ff ffc9 	bl	b617c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b61ea:	4620      	mov	r0, r4
   b61ec:	bd10      	pop	{r4, pc}
	else invalidate();
   b61ee:	f7ff ff9a 	bl	b6126 <_ZN6String10invalidateEv>
   b61f2:	e7fa      	b.n	b61ea <_ZN6StringaSERKS_+0x14>

000b61f4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b61f4:	b513      	push	{r0, r1, r4, lr}
   b61f6:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b61f8:	b159      	cbz	r1, b6212 <_ZN6StringaSEPKc+0x1e>
   b61fa:	4608      	mov	r0, r1
   b61fc:	9101      	str	r1, [sp, #4]
   b61fe:	f002 fadf 	bl	b87c0 <strlen>
   b6202:	9901      	ldr	r1, [sp, #4]
   b6204:	4602      	mov	r2, r0
   b6206:	4620      	mov	r0, r4
   b6208:	f7ff ffb8 	bl	b617c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b620c:	4620      	mov	r0, r4
   b620e:	b002      	add	sp, #8
   b6210:	bd10      	pop	{r4, pc}
	else invalidate();
   b6212:	f7ff ff88 	bl	b6126 <_ZN6String10invalidateEv>
   b6216:	e7f9      	b.n	b620c <_ZN6StringaSEPKc+0x18>

000b6218 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b6218:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b621a:	6843      	ldr	r3, [r0, #4]
   b621c:	3b01      	subs	r3, #1
    {
   b621e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6220:	6043      	str	r3, [r0, #4]
   b6222:	b963      	cbnz	r3, b623e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b6224:	6803      	ldr	r3, [r0, #0]
   b6226:	689b      	ldr	r3, [r3, #8]
   b6228:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b622a:	68a3      	ldr	r3, [r4, #8]
   b622c:	3b01      	subs	r3, #1
   b622e:	60a3      	str	r3, [r4, #8]
   b6230:	b92b      	cbnz	r3, b623e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6232:	6823      	ldr	r3, [r4, #0]
   b6234:	4620      	mov	r0, r4
   b6236:	68db      	ldr	r3, [r3, #12]
        }
    }
   b6238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b623c:	4718      	bx	r3
    }
   b623e:	bd10      	pop	{r4, pc}

000b6240 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6240:	4802      	ldr	r0, [pc, #8]	; (b624c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6242:	2300      	movs	r3, #0
   b6244:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6246:	f7ff bd11 	b.w	b5c6c <os_mutex_recursive_create>
   b624a:	bf00      	nop
   b624c:	2003e6dc 	.word	0x2003e6dc

000b6250 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6252:	4606      	mov	r6, r0
   b6254:	460d      	mov	r5, r1
  size_t n = 0;
   b6256:	188f      	adds	r7, r1, r2
   b6258:	2400      	movs	r4, #0
  while (size--) {
   b625a:	42bd      	cmp	r5, r7
   b625c:	d00c      	beq.n	b6278 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b625e:	6833      	ldr	r3, [r6, #0]
   b6260:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6264:	689b      	ldr	r3, [r3, #8]
   b6266:	4630      	mov	r0, r6
   b6268:	4798      	blx	r3
     if (chunk>=0)
   b626a:	1e03      	subs	r3, r0, #0
   b626c:	db01      	blt.n	b6272 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b626e:	441c      	add	r4, r3
  while (size--) {
   b6270:	e7f3      	b.n	b625a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6272:	2c00      	cmp	r4, #0
   b6274:	bf08      	it	eq
   b6276:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6278:	4620      	mov	r0, r4
   b627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b627c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b627c:	b513      	push	{r0, r1, r4, lr}
   b627e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6280:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6282:	b159      	cbz	r1, b629c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6284:	9101      	str	r1, [sp, #4]
   b6286:	f002 fa9b 	bl	b87c0 <strlen>
   b628a:	6823      	ldr	r3, [r4, #0]
   b628c:	9901      	ldr	r1, [sp, #4]
   b628e:	68db      	ldr	r3, [r3, #12]
   b6290:	4602      	mov	r2, r0
   b6292:	4620      	mov	r0, r4
    }
   b6294:	b002      	add	sp, #8
   b6296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b629a:	4718      	bx	r3
    }
   b629c:	b002      	add	sp, #8
   b629e:	bd10      	pop	{r4, pc}

000b62a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b62a0:	6803      	ldr	r3, [r0, #0]
   b62a2:	689b      	ldr	r3, [r3, #8]
   b62a4:	4718      	bx	r3

000b62a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b62a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b62a8:	210d      	movs	r1, #13
{
   b62aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b62ac:	f7ff fff8 	bl	b62a0 <_ZN5Print5printEc>
  n += print('\n');
   b62b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b62b2:	4604      	mov	r4, r0
  n += print('\n');
   b62b4:	4628      	mov	r0, r5
   b62b6:	f7ff fff3 	bl	b62a0 <_ZN5Print5printEc>
  return n;
}
   b62ba:	4420      	add	r0, r4
   b62bc:	bd38      	pop	{r3, r4, r5, pc}

000b62be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b62be:	b538      	push	{r3, r4, r5, lr}
   b62c0:	4605      	mov	r5, r0
  return write(str);
   b62c2:	f7ff ffdb 	bl	b627c <_ZN5Print5writeEPKc>
   b62c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b62c8:	4628      	mov	r0, r5
   b62ca:	f7ff ffec 	bl	b62a6 <_ZN5Print7printlnEv>
  return n;
}
   b62ce:	4420      	add	r0, r4
   b62d0:	bd38      	pop	{r3, r4, r5, pc}

000b62d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b62d2:	b530      	push	{r4, r5, lr}
   b62d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b62d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b62d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b62da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b62de:	bf98      	it	ls
   b62e0:	220a      	movls	r2, #10
   b62e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b62e4:	460d      	mov	r5, r1
   b62e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b62ea:	fb01 5312 	mls	r3, r1, r2, r5
   b62ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62f2:	2b09      	cmp	r3, #9
   b62f4:	bf94      	ite	ls
   b62f6:	3330      	addls	r3, #48	; 0x30
   b62f8:	3337      	addhi	r3, #55	; 0x37
   b62fa:	b2db      	uxtb	r3, r3
  } while(n);
   b62fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b62fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6302:	d9ef      	bls.n	b62e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6304:	4621      	mov	r1, r4
   b6306:	f7ff ffb9 	bl	b627c <_ZN5Print5writeEPKc>
}
   b630a:	b00b      	add	sp, #44	; 0x2c
   b630c:	bd30      	pop	{r4, r5, pc}
	...

000b6310 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6314:	ec55 4b10 	vmov	r4, r5, d0
   b6318:	4606      	mov	r6, r0
   b631a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b631c:	ee10 2a10 	vmov	r2, s0
   b6320:	ee10 0a10 	vmov	r0, s0
   b6324:	462b      	mov	r3, r5
   b6326:	4629      	mov	r1, r5
   b6328:	f002 f89e 	bl	b8468 <__aeabi_dcmpun>
   b632c:	b140      	cbz	r0, b6340 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b632e:	4953      	ldr	r1, [pc, #332]	; (b647c <_ZN5Print10printFloatEdh+0x16c>)
   b6330:	4630      	mov	r0, r6
   b6332:	f7ff ffa3 	bl	b627c <_ZN5Print5writeEPKc>
   b6336:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6338:	4650      	mov	r0, sl
   b633a:	b003      	add	sp, #12
   b633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6340:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6344:	4b4e      	ldr	r3, [pc, #312]	; (b6480 <_ZN5Print10printFloatEdh+0x170>)
   b6346:	f04f 32ff 	mov.w	r2, #4294967295
   b634a:	4620      	mov	r0, r4
   b634c:	4649      	mov	r1, r9
   b634e:	f002 f88b 	bl	b8468 <__aeabi_dcmpun>
   b6352:	b948      	cbnz	r0, b6368 <_ZN5Print10printFloatEdh+0x58>
   b6354:	4b4a      	ldr	r3, [pc, #296]	; (b6480 <_ZN5Print10printFloatEdh+0x170>)
   b6356:	f04f 32ff 	mov.w	r2, #4294967295
   b635a:	4620      	mov	r0, r4
   b635c:	4649      	mov	r1, r9
   b635e:	f002 f865 	bl	b842c <__aeabi_dcmple>
   b6362:	b908      	cbnz	r0, b6368 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6364:	4947      	ldr	r1, [pc, #284]	; (b6484 <_ZN5Print10printFloatEdh+0x174>)
   b6366:	e7e3      	b.n	b6330 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6368:	4b47      	ldr	r3, [pc, #284]	; (b6488 <_ZN5Print10printFloatEdh+0x178>)
   b636a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b636e:	4620      	mov	r0, r4
   b6370:	4629      	mov	r1, r5
   b6372:	f002 f86f 	bl	b8454 <__aeabi_dcmpgt>
   b6376:	b108      	cbz	r0, b637c <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6378:	4944      	ldr	r1, [pc, #272]	; (b648c <_ZN5Print10printFloatEdh+0x17c>)
   b637a:	e7d9      	b.n	b6330 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b637c:	4b44      	ldr	r3, [pc, #272]	; (b6490 <_ZN5Print10printFloatEdh+0x180>)
   b637e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6382:	4620      	mov	r0, r4
   b6384:	4629      	mov	r1, r5
   b6386:	f002 f847 	bl	b8418 <__aeabi_dcmplt>
   b638a:	2800      	cmp	r0, #0
   b638c:	d1f4      	bne.n	b6378 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b638e:	2200      	movs	r2, #0
   b6390:	2300      	movs	r3, #0
   b6392:	4620      	mov	r0, r4
   b6394:	4629      	mov	r1, r5
   b6396:	f002 f83f 	bl	b8418 <__aeabi_dcmplt>
   b639a:	b1d0      	cbz	r0, b63d2 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b639c:	212d      	movs	r1, #45	; 0x2d
   b639e:	4630      	mov	r0, r6
   b63a0:	f7ff ff7e 	bl	b62a0 <_ZN5Print5printEc>
     number = -number;
   b63a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b63a8:	4682      	mov	sl, r0
     number = -number;
   b63aa:	461d      	mov	r5, r3
  double rounding = 0.5;
   b63ac:	4939      	ldr	r1, [pc, #228]	; (b6494 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b63ae:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b649c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b63b2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b63b6:	2000      	movs	r0, #0
    rounding /= 10.0;
   b63b8:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b63bc:	fa5f f38b 	uxtb.w	r3, fp
   b63c0:	429f      	cmp	r7, r3
   b63c2:	d908      	bls.n	b63d6 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b63c4:	4642      	mov	r2, r8
   b63c6:	464b      	mov	r3, r9
   b63c8:	f001 fede 	bl	b8188 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b63cc:	f10b 0b01 	add.w	fp, fp, #1
   b63d0:	e7f4      	b.n	b63bc <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b63d2:	4682      	mov	sl, r0
   b63d4:	e7ea      	b.n	b63ac <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b63d6:	4622      	mov	r2, r4
   b63d8:	462b      	mov	r3, r5
   b63da:	f001 fbf5 	bl	b7bc8 <__adddf3>
   b63de:	460d      	mov	r5, r1
   b63e0:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b63e2:	f002 f87f 	bl	b84e4 <__aeabi_d2uiz>
   b63e6:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b63e8:	f001 fd2a 	bl	b7e40 <__aeabi_ui2d>
   b63ec:	4602      	mov	r2, r0
   b63ee:	460b      	mov	r3, r1
   b63f0:	4620      	mov	r0, r4
   b63f2:	4629      	mov	r1, r5
   b63f4:	f001 fbe6 	bl	b7bc4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b63f8:	220a      	movs	r2, #10
   b63fa:	4604      	mov	r4, r0
   b63fc:	460d      	mov	r5, r1
   b63fe:	4630      	mov	r0, r6
   b6400:	4641      	mov	r1, r8
   b6402:	f7ff ff66 	bl	b62d2 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6406:	4482      	add	sl, r0
  if (digits > 0) {
   b6408:	2f00      	cmp	r7, #0
   b640a:	d095      	beq.n	b6338 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b640c:	4922      	ldr	r1, [pc, #136]	; (b6498 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b640e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b649c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6412:	4630      	mov	r0, r6
   b6414:	f7ff ff32 	bl	b627c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6418:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b641c:	4482      	add	sl, r0
  while (digits-- > 0)
   b641e:	2f00      	cmp	r7, #0
   b6420:	d08a      	beq.n	b6338 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6422:	4642      	mov	r2, r8
   b6424:	464b      	mov	r3, r9
   b6426:	4620      	mov	r0, r4
   b6428:	4629      	mov	r1, r5
   b642a:	f001 fd83 	bl	b7f34 <__aeabi_dmul>
   b642e:	4604      	mov	r4, r0
   b6430:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6432:	f002 f82f 	bl	b8494 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6436:	f1b0 0b00 	subs.w	fp, r0, #0
   b643a:	da1c      	bge.n	b6476 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b643c:	212d      	movs	r1, #45	; 0x2d
   b643e:	4630      	mov	r0, r6
   b6440:	f7ff ff2e 	bl	b62a0 <_ZN5Print5printEc>
            val = -n;
   b6444:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6448:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b644a:	220a      	movs	r2, #10
   b644c:	4630      	mov	r0, r6
   b644e:	9301      	str	r3, [sp, #4]
   b6450:	f7ff ff3f 	bl	b62d2 <_ZN5Print11printNumberEmh>
   b6454:	9b01      	ldr	r3, [sp, #4]
   b6456:	4418      	add	r0, r3
    n += print(toPrint);
   b6458:	4482      	add	sl, r0
    remainder -= toPrint;
   b645a:	4658      	mov	r0, fp
   b645c:	f001 fd00 	bl	b7e60 <__aeabi_i2d>
   b6460:	4602      	mov	r2, r0
   b6462:	460b      	mov	r3, r1
   b6464:	4620      	mov	r0, r4
   b6466:	4629      	mov	r1, r5
   b6468:	f001 fbac 	bl	b7bc4 <__aeabi_dsub>
   b646c:	3f01      	subs	r7, #1
   b646e:	4604      	mov	r4, r0
   b6470:	460d      	mov	r5, r1
   b6472:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6474:	e7d3      	b.n	b641e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6476:	4659      	mov	r1, fp
        size_t t = 0;
   b6478:	2300      	movs	r3, #0
   b647a:	e7e6      	b.n	b644a <_ZN5Print10printFloatEdh+0x13a>
   b647c:	000badb0 	.word	0x000badb0
   b6480:	7fefffff 	.word	0x7fefffff
   b6484:	000badb4 	.word	0x000badb4
   b6488:	41efffff 	.word	0x41efffff
   b648c:	000badb8 	.word	0x000badb8
   b6490:	c1efffff 	.word	0xc1efffff
   b6494:	3fe00000 	.word	0x3fe00000
   b6498:	000badbc 	.word	0x000badbc
   b649c:	40240000 	.word	0x40240000

000b64a0 <_ZN5Print7printlnEdi>:
{
   b64a0:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b64a2:	b2c9      	uxtb	r1, r1
{
   b64a4:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b64a6:	f7ff ff33 	bl	b6310 <_ZN5Print10printFloatEdh>
   b64aa:	4604      	mov	r4, r0
  n += println();
   b64ac:	4628      	mov	r0, r5
   b64ae:	f7ff fefa 	bl	b62a6 <_ZN5Print7printlnEv>
}
   b64b2:	4420      	add	r0, r4
   b64b4:	bd38      	pop	{r3, r4, r5, pc}

000b64b6 <_ZN5Print7printlnEfi>:
{
   b64b6:	b538      	push	{r3, r4, r5, lr}
   b64b8:	4604      	mov	r4, r0
   b64ba:	ee10 0a10 	vmov	r0, s0
   b64be:	460d      	mov	r5, r1
    return println((double)num, digits);
   b64c0:	f001 fce0 	bl	b7e84 <__aeabi_f2d>
   b64c4:	ec41 0b10 	vmov	d0, r0, r1
   b64c8:	4629      	mov	r1, r5
   b64ca:	4620      	mov	r0, r4
}
   b64cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b64d0:	f7ff bfe6 	b.w	b64a0 <_ZN5Print7printlnEdi>

000b64d4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b64d4:	b510      	push	{r4, lr}
   b64d6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b64d8:	f7ff fba8 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b64dc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b64de:	6823      	ldr	r3, [r4, #0]
   b64e0:	4620      	mov	r0, r4
   b64e2:	695b      	ldr	r3, [r3, #20]
   b64e4:	4798      	blx	r3
    if (c >= 0) return c;
   b64e6:	2800      	cmp	r0, #0
   b64e8:	da08      	bge.n	b64fc <_ZN6Stream9timedReadEv+0x28>
   b64ea:	f7ff fb9f 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b64ee:	68e3      	ldr	r3, [r4, #12]
   b64f0:	1ac0      	subs	r0, r0, r3
   b64f2:	68a3      	ldr	r3, [r4, #8]
   b64f4:	4298      	cmp	r0, r3
   b64f6:	d3f2      	bcc.n	b64de <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b64f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   b64fc:	bd10      	pop	{r4, pc}

000b64fe <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b64fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6502:	4607      	mov	r7, r0
   b6504:	460c      	mov	r4, r1
   b6506:	188e      	adds	r6, r1, r2
   b6508:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b650a:	42b5      	cmp	r5, r6
   b650c:	eba5 0804 	sub.w	r8, r5, r4
   b6510:	d007      	beq.n	b6522 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b6512:	4638      	mov	r0, r7
   b6514:	f7ff ffde 	bl	b64d4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b6518:	1e03      	subs	r3, r0, #0
   b651a:	db02      	blt.n	b6522 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b651c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b6520:	e7f3      	b.n	b650a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b6522:	4640      	mov	r0, r8
   b6524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6528 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6528:	4b01      	ldr	r3, [pc, #4]	; (b6530 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b652a:	4a02      	ldr	r2, [pc, #8]	; (b6534 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b652c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b652e:	4770      	bx	lr
   b6530:	2003e6e0 	.word	0x2003e6e0
   b6534:	000badbe 	.word	0x000badbe

000b6538 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6538:	4b02      	ldr	r3, [pc, #8]	; (b6544 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b653a:	681a      	ldr	r2, [r3, #0]
   b653c:	4b02      	ldr	r3, [pc, #8]	; (b6548 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b653e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6540:	4770      	bx	lr
   b6542:	bf00      	nop
   b6544:	2003e144 	.word	0x2003e144
   b6548:	2003e6e4 	.word	0x2003e6e4

000b654c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b654c:	2100      	movs	r1, #0
   b654e:	f7ff bcad 	b.w	b5eac <system_delay_ms>
	...

000b6554 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6554:	b510      	push	{r4, lr}
   b6556:	4b04      	ldr	r3, [pc, #16]	; (b6568 <_ZN9TCPClientD1Ev+0x14>)
   b6558:	6003      	str	r3, [r0, #0]
   b655a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b655c:	6980      	ldr	r0, [r0, #24]
   b655e:	b108      	cbz	r0, b6564 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6560:	f7ff fe5a 	bl	b6218 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6564:	4620      	mov	r0, r4
   b6566:	bd10      	pop	{r4, pc}
   b6568:	000baeb8 	.word	0x000baeb8

000b656c <_ZN9TCPClientD0Ev>:
   b656c:	b510      	push	{r4, lr}
   b656e:	4604      	mov	r4, r0
   b6570:	f7ff fff0 	bl	b6554 <_ZN9TCPClientD1Ev>
   b6574:	4620      	mov	r0, r4
   b6576:	211c      	movs	r1, #28
   b6578:	f7fd fd95 	bl	b40a6 <_ZdlPvj>
   b657c:	4620      	mov	r0, r4
   b657e:	bd10      	pop	{r4, pc}

000b6580 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6580:	4b01      	ldr	r3, [pc, #4]	; (b6588 <_GLOBAL__sub_I_RGB+0x8>)
   b6582:	2200      	movs	r2, #0
   b6584:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6586:	4770      	bx	lr
   b6588:	2003e6e8 	.word	0x2003e6e8

000b658c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b658c:	4b01      	ldr	r3, [pc, #4]	; (b6594 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b658e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6590:	4770      	bx	lr
   b6592:	bf00      	nop
   b6594:	2003e148 	.word	0x2003e148

000b6598 <serialEventRun>:
{
   b6598:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b659a:	4b0b      	ldr	r3, [pc, #44]	; (b65c8 <serialEventRun+0x30>)
   b659c:	b143      	cbz	r3, b65b0 <serialEventRun+0x18>
   b659e:	f000 f97d 	bl	b689c <_Z16_fetch_usbserialv>
   b65a2:	6803      	ldr	r3, [r0, #0]
   b65a4:	691b      	ldr	r3, [r3, #16]
   b65a6:	4798      	blx	r3
   b65a8:	2800      	cmp	r0, #0
   b65aa:	dd01      	ble.n	b65b0 <serialEventRun+0x18>
        serialEvent();
   b65ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b65b0:	4b06      	ldr	r3, [pc, #24]	; (b65cc <serialEventRun+0x34>)
   b65b2:	b143      	cbz	r3, b65c6 <serialEventRun+0x2e>
   b65b4:	f000 feb8 	bl	b7328 <_Z22__fetch_global_Serial1v>
   b65b8:	6803      	ldr	r3, [r0, #0]
   b65ba:	691b      	ldr	r3, [r3, #16]
   b65bc:	4798      	blx	r3
   b65be:	2800      	cmp	r0, #0
   b65c0:	dd01      	ble.n	b65c6 <serialEventRun+0x2e>
        serialEvent1();
   b65c2:	f3af 8000 	nop.w
}
   b65c6:	bd08      	pop	{r3, pc}
	...

000b65d0 <_post_loop>:
{
   b65d0:	b508      	push	{r3, lr}
	serialEventRun();
   b65d2:	f7ff ffe1 	bl	b6598 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b65d6:	f7ff fb29 	bl	b5c2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b65da:	4b01      	ldr	r3, [pc, #4]	; (b65e0 <_post_loop+0x10>)
   b65dc:	6018      	str	r0, [r3, #0]
}
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	2003e740 	.word	0x2003e740

000b65e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b65e4:	4805      	ldr	r0, [pc, #20]	; (b65fc <_Z33system_initialize_user_backup_ramv+0x18>)
   b65e6:	4a06      	ldr	r2, [pc, #24]	; (b6600 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b65e8:	4906      	ldr	r1, [pc, #24]	; (b6604 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b65ea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b65ec:	1a12      	subs	r2, r2, r0
   b65ee:	f002 f87f 	bl	b86f0 <memcpy>
    __backup_sram_signature = signature;
   b65f2:	4b05      	ldr	r3, [pc, #20]	; (b6608 <_Z33system_initialize_user_backup_ramv+0x24>)
   b65f4:	4a05      	ldr	r2, [pc, #20]	; (b660c <_Z33system_initialize_user_backup_ramv+0x28>)
   b65f6:	601a      	str	r2, [r3, #0]
}
   b65f8:	bd08      	pop	{r3, pc}
   b65fa:	bf00      	nop
   b65fc:	2003f400 	.word	0x2003f400
   b6600:	2003f404 	.word	0x2003f404
   b6604:	000bb604 	.word	0x000bb604
   b6608:	2003f400 	.word	0x2003f400
   b660c:	9a271c1e 	.word	0x9a271c1e

000b6610 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6610:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6612:	2300      	movs	r3, #0
   b6614:	9300      	str	r3, [sp, #0]
   b6616:	461a      	mov	r2, r3
   b6618:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b661c:	f7ff fc58 	bl	b5ed0 <system_ctrl_set_result>
}
   b6620:	b003      	add	sp, #12
   b6622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6628 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6628:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b662a:	8843      	ldrh	r3, [r0, #2]
   b662c:	2b0a      	cmp	r3, #10
   b662e:	d008      	beq.n	b6642 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6630:	2b50      	cmp	r3, #80	; 0x50
   b6632:	d10b      	bne.n	b664c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6634:	4b09      	ldr	r3, [pc, #36]	; (b665c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6636:	681b      	ldr	r3, [r3, #0]
   b6638:	b14b      	cbz	r3, b664e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b663a:	b003      	add	sp, #12
   b663c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6640:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6642:	f7ff ffe5 	bl	b6610 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6646:	b003      	add	sp, #12
   b6648:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b664c:	2300      	movs	r3, #0
   b664e:	9300      	str	r3, [sp, #0]
   b6650:	461a      	mov	r2, r3
   b6652:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6656:	f7ff fc3b 	bl	b5ed0 <system_ctrl_set_result>
}
   b665a:	e7f4      	b.n	b6646 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b665c:	2003e6fc 	.word	0x2003e6fc

000b6660 <module_user_init_hook>:
{
   b6660:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6662:	4812      	ldr	r0, [pc, #72]	; (b66ac <module_user_init_hook+0x4c>)
   b6664:	2100      	movs	r1, #0
   b6666:	f7ff fcf5 	bl	b6054 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b666a:	4b11      	ldr	r3, [pc, #68]	; (b66b0 <module_user_init_hook+0x50>)
   b666c:	681a      	ldr	r2, [r3, #0]
   b666e:	4b11      	ldr	r3, [pc, #68]	; (b66b4 <module_user_init_hook+0x54>)
   b6670:	429a      	cmp	r2, r3
   b6672:	4b11      	ldr	r3, [pc, #68]	; (b66b8 <module_user_init_hook+0x58>)
   b6674:	bf0c      	ite	eq
   b6676:	2201      	moveq	r2, #1
   b6678:	2200      	movne	r2, #0
   b667a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b667c:	d001      	beq.n	b6682 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b667e:	f7ff ffb1 	bl	b65e4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6682:	f7ff facb 	bl	b5c1c <HAL_RNG_GetRandomNumber>
   b6686:	4604      	mov	r4, r0
    srand(seed);
   b6688:	f002 f862 	bl	b8750 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b668c:	4b0b      	ldr	r3, [pc, #44]	; (b66bc <module_user_init_hook+0x5c>)
   b668e:	b113      	cbz	r3, b6696 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6690:	4620      	mov	r0, r4
   b6692:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6696:	2100      	movs	r1, #0
   b6698:	4808      	ldr	r0, [pc, #32]	; (b66bc <module_user_init_hook+0x5c>)
   b669a:	f7ff fc93 	bl	b5fc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b669e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b66a2:	4807      	ldr	r0, [pc, #28]	; (b66c0 <module_user_init_hook+0x60>)
   b66a4:	2100      	movs	r1, #0
   b66a6:	f7ff bc09 	b.w	b5ebc <system_ctrl_set_app_request_handler>
   b66aa:	bf00      	nop
   b66ac:	000b658d 	.word	0x000b658d
   b66b0:	2003f400 	.word	0x2003f400
   b66b4:	9a271c1e 	.word	0x9a271c1e
   b66b8:	2003e6f8 	.word	0x2003e6f8
   b66bc:	00000000 	.word	0x00000000
   b66c0:	000b6629 	.word	0x000b6629

000b66c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b66c4:	4770      	bx	lr

000b66c6 <_ZN9IPAddressD0Ev>:
   b66c6:	b510      	push	{r4, lr}
   b66c8:	2118      	movs	r1, #24
   b66ca:	4604      	mov	r4, r0
   b66cc:	f7fd fceb 	bl	b40a6 <_ZdlPvj>
   b66d0:	4620      	mov	r0, r4
   b66d2:	bd10      	pop	{r4, pc}

000b66d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66d6:	7d03      	ldrb	r3, [r0, #20]
   b66d8:	2b06      	cmp	r3, #6
{
   b66da:	b08d      	sub	sp, #52	; 0x34
   b66dc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66de:	f100 0704 	add.w	r7, r0, #4
   b66e2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66e6:	d012      	beq.n	b670e <_ZNK9IPAddress7printToER5Print+0x3a>
   b66e8:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   b66ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66f0:	220a      	movs	r2, #10
   b66f2:	4630      	mov	r0, r6
   b66f4:	f7ff fded 	bl	b62d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66fc:	d019      	beq.n	b6732 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66fe:	2c00      	cmp	r4, #0
   b6700:	d0f4      	beq.n	b66ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6702:	212e      	movs	r1, #46	; 0x2e
   b6704:	4630      	mov	r0, r6
   b6706:	f7ff fdcb 	bl	b62a0 <_ZN5Print5printEc>
   b670a:	4404      	add	r4, r0
   b670c:	e7ee      	b.n	b66ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b670e:	232f      	movs	r3, #47	; 0x2f
   b6710:	466a      	mov	r2, sp
   b6712:	4639      	mov	r1, r7
   b6714:	200a      	movs	r0, #10
		buf[0] = 0;
   b6716:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b671a:	f7ff faaf 	bl	b5c7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b671e:	4668      	mov	r0, sp
   b6720:	f002 f84e 	bl	b87c0 <strlen>
   b6724:	6833      	ldr	r3, [r6, #0]
   b6726:	4602      	mov	r2, r0
   b6728:	68db      	ldr	r3, [r3, #12]
   b672a:	4669      	mov	r1, sp
   b672c:	4630      	mov	r0, r6
   b672e:	4798      	blx	r3
   b6730:	4604      	mov	r4, r0
    }
    return n;
}
   b6732:	4620      	mov	r0, r4
   b6734:	b00d      	add	sp, #52	; 0x34
   b6736:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6738 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6738:	b510      	push	{r4, lr}
   b673a:	4b05      	ldr	r3, [pc, #20]	; (b6750 <_ZN9IPAddressC1Ev+0x18>)
   b673c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b673e:	2211      	movs	r2, #17
   b6740:	f840 3b04 	str.w	r3, [r0], #4
   b6744:	2100      	movs	r1, #0
   b6746:	f001 fffb 	bl	b8740 <memset>
}
   b674a:	4620      	mov	r0, r4
   b674c:	bd10      	pop	{r4, pc}
   b674e:	bf00      	nop
   b6750:	000bade8 	.word	0x000bade8

000b6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6754:	4603      	mov	r3, r0
   b6756:	4a07      	ldr	r2, [pc, #28]	; (b6774 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6758:	b510      	push	{r4, lr}
   b675a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b675e:	f101 0210 	add.w	r2, r1, #16
   b6762:	f851 4b04 	ldr.w	r4, [r1], #4
   b6766:	f843 4b04 	str.w	r4, [r3], #4
   b676a:	4291      	cmp	r1, r2
   b676c:	d1f9      	bne.n	b6762 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b676e:	780a      	ldrb	r2, [r1, #0]
   b6770:	701a      	strb	r2, [r3, #0]
}
   b6772:	bd10      	pop	{r4, pc}
   b6774:	000bade8 	.word	0x000bade8

000b6778 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6778:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b677a:	2b04      	cmp	r3, #4
   b677c:	d104      	bne.n	b6788 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b677e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6780:	3800      	subs	r0, #0
   b6782:	bf18      	it	ne
   b6784:	2001      	movne	r0, #1
   b6786:	4770      	bx	lr
    } else if (version() == 6) {
   b6788:	2b06      	cmp	r3, #6
   b678a:	d107      	bne.n	b679c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b678c:	6843      	ldr	r3, [r0, #4]
   b678e:	b93b      	cbnz	r3, b67a0 <_ZNK9IPAddresscvbEv+0x28>
   b6790:	6883      	ldr	r3, [r0, #8]
   b6792:	b92b      	cbnz	r3, b67a0 <_ZNK9IPAddresscvbEv+0x28>
   b6794:	68c3      	ldr	r3, [r0, #12]
   b6796:	b91b      	cbnz	r3, b67a0 <_ZNK9IPAddresscvbEv+0x28>
   b6798:	6900      	ldr	r0, [r0, #16]
   b679a:	e7f1      	b.n	b6780 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b679c:	2000      	movs	r0, #0
   b679e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b67a0:	2001      	movs	r0, #1
}
   b67a2:	4770      	bx	lr

000b67a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b67a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b67a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b67aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b67ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b67b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b67b6:	2304      	movs	r3, #4
   b67b8:	6041      	str	r1, [r0, #4]
   b67ba:	7503      	strb	r3, [r0, #20]
}
   b67bc:	bd10      	pop	{r4, pc}
	...

000b67c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b67c0:	b507      	push	{r0, r1, r2, lr}
   b67c2:	4b06      	ldr	r3, [pc, #24]	; (b67dc <_ZN9IPAddressC1EPKh+0x1c>)
   b67c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b67c6:	78cb      	ldrb	r3, [r1, #3]
   b67c8:	9300      	str	r3, [sp, #0]
   b67ca:	788b      	ldrb	r3, [r1, #2]
   b67cc:	784a      	ldrb	r2, [r1, #1]
   b67ce:	7809      	ldrb	r1, [r1, #0]
   b67d0:	f7ff ffe8 	bl	b67a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b67d4:	b003      	add	sp, #12
   b67d6:	f85d fb04 	ldr.w	pc, [sp], #4
   b67da:	bf00      	nop
   b67dc:	000bade8 	.word	0x000bade8

000b67e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67e0:	7441      	strb	r1, [r0, #17]
}
   b67e2:	4770      	bx	lr

000b67e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b67e4:	4770      	bx	lr

000b67e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b67e6:	4770      	bx	lr

000b67e8 <_ZN9USBSerial4readEv>:
{
   b67e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b67ea:	2100      	movs	r1, #0
   b67ec:	7c00      	ldrb	r0, [r0, #16]
   b67ee:	f7ff fb35 	bl	b5e5c <HAL_USB_USART_Receive_Data>
}
   b67f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b67f6:	bd08      	pop	{r3, pc}

000b67f8 <_ZN9USBSerial4peekEv>:
{
   b67f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b67fa:	2101      	movs	r1, #1
   b67fc:	7c00      	ldrb	r0, [r0, #16]
   b67fe:	f7ff fb2d 	bl	b5e5c <HAL_USB_USART_Receive_Data>
}
   b6802:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6806:	bd08      	pop	{r3, pc}

000b6808 <_ZN9USBSerial17availableForWriteEv>:
{
   b6808:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b680a:	7c00      	ldrb	r0, [r0, #16]
   b680c:	f7ff fb1e 	bl	b5e4c <HAL_USB_USART_Available_Data_For_Write>
}
   b6810:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6814:	bd08      	pop	{r3, pc}

000b6816 <_ZN9USBSerial9availableEv>:
{
   b6816:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6818:	7c00      	ldrb	r0, [r0, #16]
   b681a:	f7ff fb0f 	bl	b5e3c <HAL_USB_USART_Available_Data>
}
   b681e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6822:	bd08      	pop	{r3, pc}

000b6824 <_ZN9USBSerial5writeEh>:
{
   b6824:	b513      	push	{r0, r1, r4, lr}
   b6826:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6828:	7c00      	ldrb	r0, [r0, #16]
{
   b682a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b682c:	f7ff fb0e 	bl	b5e4c <HAL_USB_USART_Available_Data_For_Write>
   b6830:	2800      	cmp	r0, #0
   b6832:	9901      	ldr	r1, [sp, #4]
   b6834:	dc01      	bgt.n	b683a <_ZN9USBSerial5writeEh+0x16>
   b6836:	7c60      	ldrb	r0, [r4, #17]
   b6838:	b120      	cbz	r0, b6844 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b683a:	7c20      	ldrb	r0, [r4, #16]
   b683c:	f7ff fb16 	bl	b5e6c <HAL_USB_USART_Send_Data>
   b6840:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6844:	b002      	add	sp, #8
   b6846:	bd10      	pop	{r4, pc}

000b6848 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6848:	7c00      	ldrb	r0, [r0, #16]
   b684a:	f7ff bb17 	b.w	b5e7c <HAL_USB_USART_Flush_Data>

000b684e <_ZN9USBSerialD0Ev>:
   b684e:	b510      	push	{r4, lr}
   b6850:	2114      	movs	r1, #20
   b6852:	4604      	mov	r4, r0
   b6854:	f7fd fc27 	bl	b40a6 <_ZdlPvj>
   b6858:	4620      	mov	r0, r4
   b685a:	bd10      	pop	{r4, pc}

000b685c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b685c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b685e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6862:	4604      	mov	r4, r0
   b6864:	4608      	mov	r0, r1
   b6866:	2100      	movs	r1, #0
   b6868:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b686c:	4b04      	ldr	r3, [pc, #16]	; (b6880 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b686e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6870:	2301      	movs	r3, #1
  _serial = serial;
   b6872:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6874:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6876:	4611      	mov	r1, r2
   b6878:	f7ff fad0 	bl	b5e1c <HAL_USB_USART_Init>
}
   b687c:	4620      	mov	r0, r4
   b687e:	bd10      	pop	{r4, pc}
   b6880:	000badfc 	.word	0x000badfc

000b6884 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6884:	7c00      	ldrb	r0, [r0, #16]
   b6886:	2200      	movs	r2, #0
   b6888:	f7ff bad0 	b.w	b5e2c <HAL_USB_USART_Begin>

000b688c <_Z19acquireSerialBufferv>:
{
   b688c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b688e:	2214      	movs	r2, #20
{
   b6890:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6892:	2100      	movs	r1, #0
   b6894:	f001 ff54 	bl	b8740 <memset>
}
   b6898:	4620      	mov	r0, r4
   b689a:	bd10      	pop	{r4, pc}

000b689c <_Z16_fetch_usbserialv>:
{
   b689c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b689e:	4c0f      	ldr	r4, [pc, #60]	; (b68dc <_Z16_fetch_usbserialv+0x40>)
{
   b68a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b68a2:	a803      	add	r0, sp, #12
   b68a4:	f7ff fff2 	bl	b688c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b68a8:	7821      	ldrb	r1, [r4, #0]
   b68aa:	f3bf 8f5b 	dmb	ish
   b68ae:	f011 0101 	ands.w	r1, r1, #1
   b68b2:	d10f      	bne.n	b68d4 <_Z16_fetch_usbserialv+0x38>
   b68b4:	4620      	mov	r0, r4
   b68b6:	9101      	str	r1, [sp, #4]
   b68b8:	f7fd fbf7 	bl	b40aa <__cxa_guard_acquire>
   b68bc:	9901      	ldr	r1, [sp, #4]
   b68be:	b148      	cbz	r0, b68d4 <_Z16_fetch_usbserialv+0x38>
   b68c0:	aa03      	add	r2, sp, #12
   b68c2:	4807      	ldr	r0, [pc, #28]	; (b68e0 <_Z16_fetch_usbserialv+0x44>)
   b68c4:	f7ff ffca 	bl	b685c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b68c8:	4620      	mov	r0, r4
   b68ca:	f7fd fbf3 	bl	b40b4 <__cxa_guard_release>
   b68ce:	4805      	ldr	r0, [pc, #20]	; (b68e4 <_Z16_fetch_usbserialv+0x48>)
   b68d0:	f001 fe96 	bl	b8600 <atexit>
	return _usbserial;
}
   b68d4:	4802      	ldr	r0, [pc, #8]	; (b68e0 <_Z16_fetch_usbserialv+0x44>)
   b68d6:	b008      	add	sp, #32
   b68d8:	bd10      	pop	{r4, pc}
   b68da:	bf00      	nop
   b68dc:	2003e700 	.word	0x2003e700
   b68e0:	2003e704 	.word	0x2003e704
   b68e4:	000b67e5 	.word	0x000b67e5

000b68e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b68e8:	4770      	bx	lr

000b68ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b68ea:	7441      	strb	r1, [r0, #17]
}
   b68ec:	4770      	bx	lr

000b68ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b68ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b68f0:	7c00      	ldrb	r0, [r0, #16]
   b68f2:	f7ff fa0b 	bl	b5d0c <hal_usart_available_data_for_write>
}
   b68f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68fa:	bd08      	pop	{r3, pc}

000b68fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b68fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b68fe:	7c00      	ldrb	r0, [r0, #16]
   b6900:	f7ff f9dc 	bl	b5cbc <hal_usart_available>
}
   b6904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6908:	bd08      	pop	{r3, pc}

000b690a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b690a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b690c:	7c00      	ldrb	r0, [r0, #16]
   b690e:	f7ff f9e5 	bl	b5cdc <hal_usart_peek>
}
   b6912:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6916:	bd08      	pop	{r3, pc}

000b6918 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6918:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b691a:	7c00      	ldrb	r0, [r0, #16]
   b691c:	f7ff f9d6 	bl	b5ccc <hal_usart_read>
}
   b6920:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6924:	bd08      	pop	{r3, pc}

000b6926 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6926:	7c00      	ldrb	r0, [r0, #16]
   b6928:	f7ff b9e0 	b.w	b5cec <hal_usart_flush>

000b692c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b692c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b692e:	7c45      	ldrb	r5, [r0, #17]
{
   b6930:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6932:	b12d      	cbz	r5, b6940 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6934:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6936:	b003      	add	sp, #12
   b6938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b693c:	f7ff b9b6 	b.w	b5cac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6940:	7c00      	ldrb	r0, [r0, #16]
   b6942:	9101      	str	r1, [sp, #4]
   b6944:	f7ff f9e2 	bl	b5d0c <hal_usart_available_data_for_write>
   b6948:	2800      	cmp	r0, #0
   b694a:	9901      	ldr	r1, [sp, #4]
   b694c:	dcf2      	bgt.n	b6934 <_ZN11USARTSerial5writeEh+0x8>
}
   b694e:	4628      	mov	r0, r5
   b6950:	b003      	add	sp, #12
   b6952:	bd30      	pop	{r4, r5, pc}

000b6954 <_ZN11USARTSerialD0Ev>:
   b6954:	b510      	push	{r4, lr}
   b6956:	2114      	movs	r1, #20
   b6958:	4604      	mov	r4, r0
   b695a:	f7fd fba4 	bl	b40a6 <_ZdlPvj>
   b695e:	4620      	mov	r0, r4
   b6960:	bd10      	pop	{r4, pc}
	...

000b6964 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6964:	b510      	push	{r4, lr}
   b6966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b696a:	4604      	mov	r4, r0
   b696c:	4608      	mov	r0, r1
   b696e:	4611      	mov	r1, r2
   b6970:	2200      	movs	r2, #0
   b6972:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6976:	4b04      	ldr	r3, [pc, #16]	; (b6988 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6978:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b697a:	2301      	movs	r3, #1
  _serial = serial;
   b697c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b697e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6980:	f7ff f9cc 	bl	b5d1c <hal_usart_init_ex>
}
   b6984:	4620      	mov	r0, r4
   b6986:	bd10      	pop	{r4, pc}
   b6988:	000bae2c 	.word	0x000bae2c

000b698c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b698c:	4770      	bx	lr

000b698e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b698e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6990:	4606      	mov	r6, r0
   b6992:	4615      	mov	r5, r2
   b6994:	460c      	mov	r4, r1
   b6996:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6998:	42bc      	cmp	r4, r7
   b699a:	d006      	beq.n	b69aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b699c:	6833      	ldr	r3, [r6, #0]
   b699e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b69a2:	689b      	ldr	r3, [r3, #8]
   b69a4:	4630      	mov	r0, r6
   b69a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b69a8:	e7f6      	b.n	b6998 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b69aa:	4628      	mov	r0, r5
   b69ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b69ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b69ae:	7c00      	ldrb	r0, [r0, #16]
   b69b0:	2200      	movs	r2, #0
   b69b2:	f7ff b9bb 	b.w	b5d2c <hal_i2c_write>

000b69b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b69b6:	7c00      	ldrb	r0, [r0, #16]
   b69b8:	2100      	movs	r1, #0
   b69ba:	f7ff b9bf 	b.w	b5d3c <hal_i2c_available>

000b69be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b69be:	7c00      	ldrb	r0, [r0, #16]
   b69c0:	2100      	movs	r1, #0
   b69c2:	f7ff b9c3 	b.w	b5d4c <hal_i2c_read>

000b69c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b69c6:	7c00      	ldrb	r0, [r0, #16]
   b69c8:	2100      	movs	r1, #0
   b69ca:	f7ff b9c7 	b.w	b5d5c <hal_i2c_peek>

000b69ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b69ce:	7c00      	ldrb	r0, [r0, #16]
   b69d0:	2100      	movs	r1, #0
   b69d2:	f7ff b9cb 	b.w	b5d6c <hal_i2c_flush>

000b69d6 <_ZN7TwoWireD0Ev>:
   b69d6:	b510      	push	{r4, lr}
   b69d8:	2114      	movs	r1, #20
   b69da:	4604      	mov	r4, r0
   b69dc:	f7fd fb63 	bl	b40a6 <_ZdlPvj>
   b69e0:	4620      	mov	r0, r4
   b69e2:	bd10      	pop	{r4, pc}

000b69e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b69e4:	b510      	push	{r4, lr}
   b69e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b69ea:	4604      	mov	r4, r0
   b69ec:	4608      	mov	r0, r1
   b69ee:	2100      	movs	r1, #0
   b69f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b69f4:	4b03      	ldr	r3, [pc, #12]	; (b6a04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b69f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b69f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b69fa:	4611      	mov	r1, r2
   b69fc:	f7ff f9c6 	bl	b5d8c <hal_i2c_init>
}
   b6a00:	4620      	mov	r0, r4
   b6a02:	bd10      	pop	{r4, pc}
   b6a04:	000bae5c 	.word	0x000bae5c

000b6a08 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6a08:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a0a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6a0c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6a10:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a12:	2201      	movs	r2, #1
   b6a14:	f04f 33ff 	mov.w	r3, #4294967295
   b6a18:	f10d 0107 	add.w	r1, sp, #7
   b6a1c:	47a0      	blx	r4
}
   b6a1e:	b002      	add	sp, #8
   b6a20:	bd10      	pop	{r4, pc}

000b6a22 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6a22:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a24:	6803      	ldr	r3, [r0, #0]
   b6a26:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6a28:	f04f 33ff 	mov.w	r3, #4294967295
   b6a2c:	46a4      	mov	ip, r4
}
   b6a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6a32:	4760      	bx	ip

000b6a34 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a34:	b513      	push	{r0, r1, r4, lr}
   b6a36:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6a38:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6a3a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6a3e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6a40:	f10d 0107 	add.w	r1, sp, #7
   b6a44:	2201      	movs	r2, #1
   b6a46:	47a0      	blx	r4
}
   b6a48:	b002      	add	sp, #8
   b6a4a:	bd10      	pop	{r4, pc}

000b6a4c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6a4c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6a4e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a50:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6a54:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6a58:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6a5a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a5c:	d008      	beq.n	b6a70 <_ZN9TCPClient4readEv+0x24>
   b6a5e:	6963      	ldr	r3, [r4, #20]
   b6a60:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6a64:	1c51      	adds	r1, r2, #1
   b6a66:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6a6a:	4413      	add	r3, r2
   b6a6c:	7918      	ldrb	r0, [r3, #4]
}
   b6a6e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6a70:	6803      	ldr	r3, [r0, #0]
   b6a72:	691b      	ldr	r3, [r3, #16]
   b6a74:	4798      	blx	r3
   b6a76:	2800      	cmp	r0, #0
   b6a78:	d1f1      	bne.n	b6a5e <_ZN9TCPClient4readEv+0x12>
   b6a7a:	f04f 30ff 	mov.w	r0, #4294967295
   b6a7e:	e7f6      	b.n	b6a6e <_ZN9TCPClient4readEv+0x22>

000b6a80 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6a80:	4770      	bx	lr

000b6a82 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6a82:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6a84:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6a86:	43c0      	mvns	r0, r0
   b6a88:	0fc0      	lsrs	r0, r0, #31
   b6a8a:	4770      	bx	lr

000b6a8c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6a8c:	4770      	bx	lr
	...

000b6a90 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6a90:	4b06      	ldr	r3, [pc, #24]	; (b6aac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6a92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6a94:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6a96:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6a9a:	d005      	beq.n	b6aa8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6a9c:	4608      	mov	r0, r1
   b6a9e:	f000 fcd1 	bl	b7444 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6aa2:	2800      	cmp	r0, #0
   b6aa4:	bf08      	it	eq
   b6aa6:	2400      	moveq	r4, #0
      }
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	bd10      	pop	{r4, pc}
   b6aac:	000bada8 	.word	0x000bada8

000b6ab0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6ab0:	b510      	push	{r4, lr}
   b6ab2:	21ac      	movs	r1, #172	; 0xac
   b6ab4:	4604      	mov	r4, r0
   b6ab6:	f7fd faf6 	bl	b40a6 <_ZdlPvj>
   b6aba:	4620      	mov	r0, r4
   b6abc:	bd10      	pop	{r4, pc}

000b6abe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6abe:	21ac      	movs	r1, #172	; 0xac
   b6ac0:	f7fd baf1 	b.w	b40a6 <_ZdlPvj>

000b6ac4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6ac8:	f04f 0800 	mov.w	r8, #0
   b6acc:	b086      	sub	sp, #24
   b6ace:	461c      	mov	r4, r3
   b6ad0:	f8c0 8004 	str.w	r8, [r0, #4]
   b6ad4:	4605      	mov	r5, r0
   b6ad6:	460e      	mov	r6, r1
   b6ad8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6ada:	4641      	mov	r1, r8
   b6adc:	2210      	movs	r2, #16
   b6ade:	a802      	add	r0, sp, #8
   b6ae0:	f001 fe2e 	bl	b8740 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6ae4:	1c63      	adds	r3, r4, #1
   b6ae6:	d009      	beq.n	b6afc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6aec:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6af0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6af4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6af8:	435c      	muls	r4, r3
   b6afa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6afc:	6968      	ldr	r0, [r5, #20]
   b6afe:	2310      	movs	r3, #16
   b6b00:	9300      	str	r3, [sp, #0]
   b6b02:	6800      	ldr	r0, [r0, #0]
   b6b04:	ab02      	add	r3, sp, #8
   b6b06:	f241 0205 	movw	r2, #4101	; 0x1005
   b6b0a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6b0e:	f7ff f945 	bl	b5d9c <sock_setsockopt>
    if (ret < 0) {
   b6b12:	2800      	cmp	r0, #0
   b6b14:	da07      	bge.n	b6b26 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6b16:	f7ff fa8d 	bl	b6034 <__errno>
   b6b1a:	6803      	ldr	r3, [r0, #0]
   b6b1c:	606b      	str	r3, [r5, #4]
        return 0;
   b6b1e:	2000      	movs	r0, #0
}
   b6b20:	b006      	add	sp, #24
   b6b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6b26:	6968      	ldr	r0, [r5, #20]
   b6b28:	2300      	movs	r3, #0
   b6b2a:	6800      	ldr	r0, [r0, #0]
   b6b2c:	463a      	mov	r2, r7
   b6b2e:	4631      	mov	r1, r6
   b6b30:	f7ff f954 	bl	b5ddc <sock_send>
    if (ret < 0) {
   b6b34:	1e03      	subs	r3, r0, #0
   b6b36:	dbee      	blt.n	b6b16 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6b38:	4618      	mov	r0, r3
   b6b3a:	e7f1      	b.n	b6b20 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6b3c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6b3c:	b530      	push	{r4, r5, lr}
   b6b3e:	b087      	sub	sp, #28
   b6b40:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6b42:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6b44:	4668      	mov	r0, sp
   b6b46:	f7ff fe3b 	bl	b67c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b4c:	3404      	adds	r4, #4
   b6b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b50:	682b      	ldr	r3, [r5, #0]
   b6b52:	7023      	strb	r3, [r4, #0]
    }
   b6b54:	b007      	add	sp, #28
   b6b56:	bd30      	pop	{r4, r5, pc}

000b6b58 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6b58:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6b5a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6b5c:	4b05      	ldr	r3, [pc, #20]	; (b6b74 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6b5e:	4604      	mov	r4, r0
   b6b60:	358c      	adds	r5, #140	; 0x8c
   b6b62:	f844 3b04 	str.w	r3, [r4], #4
   b6b66:	4606      	mov	r6, r0
   b6b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b6c:	682b      	ldr	r3, [r5, #0]
   b6b6e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6b70:	4630      	mov	r0, r6
   b6b72:	bd70      	pop	{r4, r5, r6, pc}
   b6b74:	000bade8 	.word	0x000bade8

000b6b78 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b7c:	4698      	mov	r8, r3
    stop();
   b6b7e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b80:	b093      	sub	sp, #76	; 0x4c
   b6b82:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6b84:	2400      	movs	r4, #0
    stop();
   b6b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6b88:	4606      	mov	r6, r0
   b6b8a:	4617      	mov	r7, r2
    stop();
   b6b8c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b8e:	4628      	mov	r0, r5
   b6b90:	466b      	mov	r3, sp
   b6b92:	4622      	mov	r2, r4
   b6b94:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6b96:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6b98:	f7fe fff0 	bl	b5b7c <netdb_getaddrinfo>
   b6b9c:	4605      	mov	r5, r0
   b6b9e:	2800      	cmp	r0, #0
   b6ba0:	d163      	bne.n	b6c6a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6ba2:	9b00      	ldr	r3, [sp, #0]
   b6ba4:	2b00      	cmp	r3, #0
   b6ba6:	d04b      	beq.n	b6c40 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6ba8:	695b      	ldr	r3, [r3, #20]
   b6baa:	2b00      	cmp	r3, #0
   b6bac:	d048      	beq.n	b6c40 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6bae:	a806      	add	r0, sp, #24
   b6bb0:	f7ff fdc2 	bl	b6738 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6bb4:	9b00      	ldr	r3, [sp, #0]
   b6bb6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6bb8:	7863      	ldrb	r3, [r4, #1]
   b6bba:	2b02      	cmp	r3, #2
   b6bbc:	d104      	bne.n	b6bc8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6bbe:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6bc0:	a806      	add	r0, sp, #24
   b6bc2:	f7ff ffbb 	bl	b6b3c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6bc6:	e026      	b.n	b6c16 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6bc8:	2b0a      	cmp	r3, #10
   b6bca:	d124      	bne.n	b6c16 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6bcc:	2211      	movs	r2, #17
   b6bce:	4629      	mov	r1, r5
   b6bd0:	a801      	add	r0, sp, #4
   b6bd2:	f001 fdb5 	bl	b8740 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6bd6:	68a3      	ldr	r3, [r4, #8]
   b6bd8:	2b00      	cmp	r3, #0
   b6bda:	d038      	beq.n	b6c4e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6bdc:	f104 0308 	add.w	r3, r4, #8
   b6be0:	f10d 0c04 	add.w	ip, sp, #4
   b6be4:	3418      	adds	r4, #24
   b6be6:	6818      	ldr	r0, [r3, #0]
   b6be8:	6859      	ldr	r1, [r3, #4]
   b6bea:	4662      	mov	r2, ip
   b6bec:	c203      	stmia	r2!, {r0, r1}
   b6bee:	3308      	adds	r3, #8
   b6bf0:	42a3      	cmp	r3, r4
   b6bf2:	4694      	mov	ip, r2
   b6bf4:	d1f7      	bne.n	b6be6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6bf6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6bf8:	a901      	add	r1, sp, #4
   b6bfa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6bfc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6c00:	f7ff fda8 	bl	b6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c04:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6c0c:	ac07      	add	r4, sp, #28
   b6c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c10:	f8dc 3000 	ldr.w	r3, [ip]
   b6c14:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6c16:	a806      	add	r0, sp, #24
   b6c18:	f7ff fdae 	bl	b6778 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6c1c:	b180      	cbz	r0, b6c40 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6c1e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6c20:	ad07      	add	r5, sp, #28
   b6c22:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6c26:	4b12      	ldr	r3, [pc, #72]	; (b6c70 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6c28:	930c      	str	r3, [sp, #48]	; 0x30
   b6c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c2c:	ac0d      	add	r4, sp, #52	; 0x34
   b6c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c30:	682b      	ldr	r3, [r5, #0]
   b6c32:	7023      	strb	r3, [r4, #0]
   b6c34:	463a      	mov	r2, r7
   b6c36:	4643      	mov	r3, r8
   b6c38:	a90c      	add	r1, sp, #48	; 0x30
   b6c3a:	4630      	mov	r0, r6
   b6c3c:	47c8      	blx	r9
   b6c3e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6c40:	9800      	ldr	r0, [sp, #0]
   b6c42:	f7fe ff93 	bl	b5b6c <netdb_freeaddrinfo>
}
   b6c46:	4628      	mov	r0, r5
   b6c48:	b013      	add	sp, #76	; 0x4c
   b6c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6c4e:	68e3      	ldr	r3, [r4, #12]
   b6c50:	2b00      	cmp	r3, #0
   b6c52:	d1c3      	bne.n	b6bdc <_ZN9TCPClient7connectEPKctm+0x64>
   b6c54:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6c58:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6c5c:	f7ff f816 	bl	b5c8c <inet_htonl>
   b6c60:	4581      	cmp	r9, r0
   b6c62:	d1bb      	bne.n	b6bdc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6c64:	f104 0114 	add.w	r1, r4, #20
   b6c68:	e7aa      	b.n	b6bc0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6c6a:	4625      	mov	r5, r4
   b6c6c:	e7e8      	b.n	b6c40 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6c6e:	bf00      	nop
   b6c70:	000bade8 	.word	0x000bade8

000b6c74 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6c74:	b538      	push	{r3, r4, r5, lr}
   b6c76:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6c78:	681a      	ldr	r2, [r3, #0]
   b6c7a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6c7c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b6c7e:	da10      	bge.n	b6ca2 <_ZN9TCPClient9connectedEv+0x2e>
   b6c80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6c84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6c88:	429a      	cmp	r2, r3
   b6c8a:	d10a      	bne.n	b6ca2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6c8c:	6803      	ldr	r3, [r0, #0]
   b6c8e:	691b      	ldr	r3, [r3, #16]
   b6c90:	4798      	blx	r3
        if (!rv) {
   b6c92:	4604      	mov	r4, r0
   b6c94:	b928      	cbnz	r0, b6ca2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6c96:	682b      	ldr	r3, [r5, #0]
   b6c98:	4628      	mov	r0, r5
   b6c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c9c:	4798      	blx	r3
        rv = available();
   b6c9e:	4620      	mov	r0, r4
}
   b6ca0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6ca2:	2001      	movs	r0, #1
   b6ca4:	e7fc      	b.n	b6ca0 <_ZN9TCPClient9connectedEv+0x2c>

000b6ca6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6ca6:	b510      	push	{r4, lr}
   b6ca8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6caa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6cae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6cb2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6cb4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6cb6:	d005      	beq.n	b6cc4 <_ZN9TCPClient4peekEv+0x1e>
   b6cb8:	6963      	ldr	r3, [r4, #20]
   b6cba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6cbe:	4413      	add	r3, r2
   b6cc0:	7918      	ldrb	r0, [r3, #4]
}
   b6cc2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6cc4:	6803      	ldr	r3, [r0, #0]
   b6cc6:	691b      	ldr	r3, [r3, #16]
   b6cc8:	4798      	blx	r3
   b6cca:	2800      	cmp	r0, #0
   b6ccc:	d1f4      	bne.n	b6cb8 <_ZN9TCPClient4peekEv+0x12>
   b6cce:	f04f 30ff 	mov.w	r0, #4294967295
   b6cd2:	e7f6      	b.n	b6cc2 <_ZN9TCPClient4peekEv+0x1c>

000b6cd4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cd6:	6943      	ldr	r3, [r0, #20]
   b6cd8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6cda:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6cde:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6ce2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6ce4:	4605      	mov	r5, r0
   b6ce6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6ce8:	d016      	beq.n	b6d18 <_ZN9TCPClient4readEPhj+0x44>
   b6cea:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6cec:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6cf0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6cf4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6cf6:	42bc      	cmp	r4, r7
   b6cf8:	bf28      	it	cs
   b6cfa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6cfc:	3304      	adds	r3, #4
   b6cfe:	4622      	mov	r2, r4
   b6d00:	4419      	add	r1, r3
   b6d02:	4630      	mov	r0, r6
   b6d04:	f001 fcf4 	bl	b86f0 <memcpy>
   b6d08:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6d0a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6d0e:	4423      	add	r3, r4
   b6d10:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6d14:	4620      	mov	r0, r4
   b6d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6d18:	6803      	ldr	r3, [r0, #0]
   b6d1a:	691b      	ldr	r3, [r3, #16]
   b6d1c:	4798      	blx	r3
   b6d1e:	2800      	cmp	r0, #0
   b6d20:	d1e3      	bne.n	b6cea <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6d22:	f04f 34ff 	mov.w	r4, #4294967295
   b6d26:	e7f5      	b.n	b6d14 <_ZN9TCPClient4readEPhj+0x40>

000b6d28 <_ZN9TCPClient12flush_bufferEv>:
   b6d28:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6d2a:	2300      	movs	r3, #0
   b6d2c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6d30:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6d32:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6d36:	4770      	bx	lr

000b6d38 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d3c:	461f      	mov	r7, r3
    stop();
   b6d3e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d40:	460c      	mov	r4, r1
    stop();
   b6d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6d44:	b08a      	sub	sp, #40	; 0x28
   b6d46:	4605      	mov	r5, r0
   b6d48:	4616      	mov	r6, r2
    stop();
   b6d4a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b6d4c:	7d23      	ldrb	r3, [r4, #20]
   b6d4e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b6d52:	2b04      	cmp	r3, #4
   b6d54:	bf0c      	ite	eq
   b6d56:	2002      	moveq	r0, #2
   b6d58:	200a      	movne	r0, #10
   b6d5a:	2206      	movs	r2, #6
   b6d5c:	2101      	movs	r1, #1
   b6d5e:	f7ff f845 	bl	b5dec <sock_socket>
   b6d62:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6d66:	696b      	ldr	r3, [r5, #20]
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	2b00      	cmp	r3, #0
   b6d6c:	da08      	bge.n	b6d80 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b6d6e:	682b      	ldr	r3, [r5, #0]
   b6d70:	4628      	mov	r0, r5
   b6d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d74:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6d76:	4798      	blx	r3
}
   b6d78:	4620      	mov	r0, r4
   b6d7a:	b00a      	add	sp, #40	; 0x28
   b6d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6d80:	4628      	mov	r0, r5
   b6d82:	f7ff ffd1 	bl	b6d28 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6d86:	b1b7      	cbz	r7, b6db6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6d88:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d8a:	a903      	add	r1, sp, #12
   b6d8c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6d8e:	9303      	str	r3, [sp, #12]
   b6d90:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6d94:	f7fe ff3a 	bl	b5c0c <if_index_to_name>
   b6d98:	2800      	cmp	r0, #0
   b6d9a:	d1e8      	bne.n	b6d6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6d9c:	6968      	ldr	r0, [r5, #20]
   b6d9e:	2306      	movs	r3, #6
   b6da0:	9300      	str	r3, [sp, #0]
   b6da2:	6800      	ldr	r0, [r0, #0]
   b6da4:	ab03      	add	r3, sp, #12
   b6da6:	f241 020b 	movw	r2, #4107	; 0x100b
   b6daa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6dae:	f7fe fff5 	bl	b5d9c <sock_setsockopt>
   b6db2:	2800      	cmp	r0, #0
   b6db4:	d1db      	bne.n	b6d6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6db6:	221c      	movs	r2, #28
   b6db8:	2100      	movs	r1, #0
   b6dba:	a803      	add	r0, sp, #12
   b6dbc:	f001 fcc0 	bl	b8740 <memset>
    if (ip.version() == 4) {
   b6dc0:	7d23      	ldrb	r3, [r4, #20]
   b6dc2:	2b04      	cmp	r3, #4
   b6dc4:	d11d      	bne.n	b6e02 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6dc6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6dca:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6dcc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6dd0:	f7fe ff64 	bl	b5c9c <inet_htons>
   b6dd4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6dd8:	6860      	ldr	r0, [r4, #4]
   b6dda:	f7fe ff57 	bl	b5c8c <inet_htonl>
   b6dde:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6de0:	696b      	ldr	r3, [r5, #20]
   b6de2:	221c      	movs	r2, #28
   b6de4:	6818      	ldr	r0, [r3, #0]
   b6de6:	a903      	add	r1, sp, #12
   b6de8:	f7fe ffe8 	bl	b5dbc <sock_connect>
   b6dec:	2800      	cmp	r0, #0
   b6dee:	d1be      	bne.n	b6d6e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6df0:	3404      	adds	r4, #4
   b6df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6df4:	696d      	ldr	r5, [r5, #20]
   b6df6:	358c      	adds	r5, #140	; 0x8c
   b6df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6dfa:	6823      	ldr	r3, [r4, #0]
   b6dfc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6dfe:	2401      	movs	r4, #1
   b6e00:	e7ba      	b.n	b6d78 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6e02:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6e06:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6e08:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6e0c:	f7fe ff46 	bl	b5c9c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e10:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6e12:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6e16:	1d23      	adds	r3, r4, #4
   b6e18:	f104 0714 	add.w	r7, r4, #20
   b6e1c:	6818      	ldr	r0, [r3, #0]
   b6e1e:	6859      	ldr	r1, [r3, #4]
   b6e20:	4632      	mov	r2, r6
   b6e22:	c203      	stmia	r2!, {r0, r1}
   b6e24:	3308      	adds	r3, #8
   b6e26:	42bb      	cmp	r3, r7
   b6e28:	4616      	mov	r6, r2
   b6e2a:	d1f7      	bne.n	b6e1c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6e2c:	e7d8      	b.n	b6de0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6e30 <_ZN9TCPClient9availableEv>:
{
   b6e30:	b530      	push	{r4, r5, lr}
   b6e32:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6e34:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6e38:	b08b      	sub	sp, #44	; 0x2c
   b6e3a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6e3c:	b12b      	cbz	r3, b6e4a <_ZN9TCPClient9availableEv+0x1a>
   b6e3e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6e42:	429a      	cmp	r2, r3
   b6e44:	d101      	bne.n	b6e4a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6e46:	f7ff ff6f 	bl	b6d28 <_ZN9TCPClient12flush_bufferEv>
   b6e4a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6e4c:	6808      	ldr	r0, [r1, #0]
   b6e4e:	2800      	cmp	r0, #0
   b6e50:	db18      	blt.n	b6e84 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6e52:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6e56:	2d7f      	cmp	r5, #127	; 0x7f
   b6e58:	d814      	bhi.n	b6e84 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6e5a:	3104      	adds	r1, #4
   b6e5c:	2308      	movs	r3, #8
   b6e5e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6e62:	4429      	add	r1, r5
   b6e64:	f7fe ffb2 	bl	b5dcc <sock_recv>
            if (ret > 0) {
   b6e68:	2800      	cmp	r0, #0
   b6e6a:	dd13      	ble.n	b6e94 <_ZN9TCPClient9availableEv+0x64>
   b6e6c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6e6e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6e72:	b90a      	cbnz	r2, b6e78 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6e74:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6e78:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6e7a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6e7e:	4410      	add	r0, r2
   b6e80:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6e84:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6e86:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6e8a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6e8e:	1ac0      	subs	r0, r0, r3
   b6e90:	b00b      	add	sp, #44	; 0x2c
   b6e92:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6e94:	f7ff f8ce 	bl	b6034 <__errno>
   b6e98:	6803      	ldr	r3, [r0, #0]
   b6e9a:	2b0b      	cmp	r3, #11
   b6e9c:	d0f2      	beq.n	b6e84 <_ZN9TCPClient9availableEv+0x54>
   b6e9e:	f7ff f8c9 	bl	b6034 <__errno>
   b6ea2:	6803      	ldr	r3, [r0, #0]
   b6ea4:	2b0b      	cmp	r3, #11
   b6ea6:	d0ed      	beq.n	b6e84 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6ea8:	2320      	movs	r3, #32
   b6eaa:	2500      	movs	r5, #0
   b6eac:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6eb0:	f7ff f8c0 	bl	b6034 <__errno>
   b6eb4:	6803      	ldr	r3, [r0, #0]
   b6eb6:	9301      	str	r3, [sp, #4]
   b6eb8:	4b08      	ldr	r3, [pc, #32]	; (b6edc <_ZN9TCPClient9availableEv+0xac>)
   b6eba:	4909      	ldr	r1, [pc, #36]	; (b6ee0 <_ZN9TCPClient9availableEv+0xb0>)
   b6ebc:	9300      	str	r3, [sp, #0]
   b6ebe:	aa02      	add	r2, sp, #8
   b6ec0:	462b      	mov	r3, r5
   b6ec2:	2032      	movs	r0, #50	; 0x32
   b6ec4:	f7fe ffe2 	bl	b5e8c <log_message>
                    sock_close(d_->sock);
   b6ec8:	6963      	ldr	r3, [r4, #20]
   b6eca:	6818      	ldr	r0, [r3, #0]
   b6ecc:	f7fe ff6e 	bl	b5dac <sock_close>
   b6ed0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6ed2:	f04f 32ff 	mov.w	r2, #4294967295
   b6ed6:	601a      	str	r2, [r3, #0]
   b6ed8:	e7d4      	b.n	b6e84 <_ZN9TCPClient9availableEv+0x54>
   b6eda:	bf00      	nop
   b6edc:	000bae83 	.word	0x000bae83
   b6ee0:	000bae7c 	.word	0x000bae7c

000b6ee4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6ee4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6ee6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6ee8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6eea:	6818      	ldr	r0, [r3, #0]
   b6eec:	2800      	cmp	r0, #0
   b6eee:	db01      	blt.n	b6ef4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6ef0:	f7fe ff5c 	bl	b5dac <sock_close>
   b6ef4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6ef6:	f04f 32ff 	mov.w	r2, #4294967295
   b6efa:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6efc:	6960      	ldr	r0, [r4, #20]
   b6efe:	2211      	movs	r2, #17
   b6f00:	2100      	movs	r1, #0
   b6f02:	308c      	adds	r0, #140	; 0x8c
   b6f04:	f001 fc1c 	bl	b8740 <memset>
    flush_buffer();
   b6f08:	4620      	mov	r0, r4
}
   b6f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6f0e:	f7ff bf0b 	b.w	b6d28 <_ZN9TCPClient12flush_bufferEv>

000b6f12 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6f12:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6f14:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6f16:	4604      	mov	r4, r0
          total(0) {
   b6f18:	6001      	str	r1, [r0, #0]
   b6f1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6f1e:	3088      	adds	r0, #136	; 0x88
   b6f20:	f7ff fc0a 	bl	b6738 <_ZN9IPAddressC1Ev>
}
   b6f24:	4620      	mov	r0, r4
   b6f26:	bd10      	pop	{r4, pc}

000b6f28 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f2a:	2300      	movs	r3, #0
   b6f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6f30:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6f34:	4a0e      	ldr	r2, [pc, #56]	; (b6f70 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6f36:	6103      	str	r3, [r0, #16]
   b6f38:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6f3a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6f3c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6f3e:	20ac      	movs	r0, #172	; 0xac
   b6f40:	9101      	str	r1, [sp, #4]
   b6f42:	f7fd f8a8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b6f46:	1e05      	subs	r5, r0, #0
   b6f48:	f105 060c 	add.w	r6, r5, #12
   b6f4c:	d008      	beq.n	b6f60 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6f4e:	2301      	movs	r3, #1
   b6f50:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6f54:	4b07      	ldr	r3, [pc, #28]	; (b6f74 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6f56:	9901      	ldr	r1, [sp, #4]
   b6f58:	602b      	str	r3, [r5, #0]
   b6f5a:	4630      	mov	r0, r6
   b6f5c:	f7ff ffd9 	bl	b6f12 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6f60:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6f62:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6f66:	f7ff fedf 	bl	b6d28 <_ZN9TCPClient12flush_bufferEv>
}
   b6f6a:	b002      	add	sp, #8
   b6f6c:	bd70      	pop	{r4, r5, r6, pc}
   b6f6e:	bf00      	nop
   b6f70:	000baeb8 	.word	0x000baeb8
   b6f74:	000bae9c 	.word	0x000bae9c

000b6f78 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6f78:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6f7a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6f7e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6f80:	f7ff ffd2 	bl	b6f28 <_ZN9TCPClientC1Ei>
}
   b6f84:	4620      	mov	r0, r4
   b6f86:	bd10      	pop	{r4, pc}

000b6f88 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6f88:	b510      	push	{r4, lr}
   b6f8a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6f8c:	6800      	ldr	r0, [r0, #0]
   b6f8e:	2800      	cmp	r0, #0
   b6f90:	db01      	blt.n	b6f96 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6f92:	f7fe ff0b 	bl	b5dac <sock_close>
    }
}
   b6f96:	4620      	mov	r0, r4
   b6f98:	bd10      	pop	{r4, pc}

000b6f9a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6f9a:	300c      	adds	r0, #12
   b6f9c:	f7ff bff4 	b.w	b6f88 <_ZN9TCPClient4DataD1Ev>

000b6fa0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6fa0:	2200      	movs	r2, #0
   b6fa2:	6840      	ldr	r0, [r0, #4]
   b6fa4:	4611      	mov	r1, r2
   b6fa6:	f7fe bfb5 	b.w	b5f14 <network_ready>

000b6faa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6faa:	2200      	movs	r2, #0
   b6fac:	6840      	ldr	r0, [r0, #4]
   b6fae:	4611      	mov	r1, r2
   b6fb0:	f7fe bfd0 	b.w	b5f54 <network_listening>

000b6fb4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6fb4:	2200      	movs	r2, #0
   b6fb6:	6840      	ldr	r0, [r0, #4]
   b6fb8:	4611      	mov	r1, r2
   b6fba:	f7fe bfdb 	b.w	b5f74 <network_get_listen_timeout>

000b6fbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6fbe:	6840      	ldr	r0, [r0, #4]
   b6fc0:	2200      	movs	r2, #0
   b6fc2:	f7fe bfcf 	b.w	b5f64 <network_set_listen_timeout>

000b6fc6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6fc6:	6840      	ldr	r0, [r0, #4]
   b6fc8:	2200      	movs	r2, #0
   b6fca:	f081 0101 	eor.w	r1, r1, #1
   b6fce:	f7fe bfb9 	b.w	b5f44 <network_listen>

000b6fd2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6fd2:	2300      	movs	r3, #0
   b6fd4:	6840      	ldr	r0, [r0, #4]
   b6fd6:	461a      	mov	r2, r3
   b6fd8:	4619      	mov	r1, r3
   b6fda:	f7fe bfab 	b.w	b5f34 <network_off>

000b6fde <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6fde:	2300      	movs	r3, #0
   b6fe0:	6840      	ldr	r0, [r0, #4]
   b6fe2:	461a      	mov	r2, r3
   b6fe4:	4619      	mov	r1, r3
   b6fe6:	f7fe bf9d 	b.w	b5f24 <network_on>

000b6fea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6fea:	2200      	movs	r2, #0
   b6fec:	6840      	ldr	r0, [r0, #4]
   b6fee:	4611      	mov	r1, r2
   b6ff0:	f7fe bf80 	b.w	b5ef4 <network_connecting>

000b6ff4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ff4:	6840      	ldr	r0, [r0, #4]
   b6ff6:	2200      	movs	r2, #0
   b6ff8:	2102      	movs	r1, #2
   b6ffa:	f7fe bf83 	b.w	b5f04 <network_disconnect>

000b6ffe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ffe:	2300      	movs	r3, #0
   b7000:	6840      	ldr	r0, [r0, #4]
   b7002:	461a      	mov	r2, r3
   b7004:	f7fe bf6e 	b.w	b5ee4 <network_connect>

000b7008 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7008:	4b02      	ldr	r3, [pc, #8]	; (b7014 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b700a:	2204      	movs	r2, #4
   b700c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b700e:	4a02      	ldr	r2, [pc, #8]	; (b7018 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7010:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7012:	4770      	bx	lr
   b7014:	2003e718 	.word	0x2003e718
   b7018:	000baf04 	.word	0x000baf04

000b701c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b701c:	2300      	movs	r3, #0
   b701e:	6840      	ldr	r0, [r0, #4]
   b7020:	461a      	mov	r2, r3
   b7022:	f7fe bf5f 	b.w	b5ee4 <network_connect>

000b7026 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7026:	6840      	ldr	r0, [r0, #4]
   b7028:	2200      	movs	r2, #0
   b702a:	2102      	movs	r1, #2
   b702c:	f7fe bf6a 	b.w	b5f04 <network_disconnect>

000b7030 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7030:	2200      	movs	r2, #0
   b7032:	6840      	ldr	r0, [r0, #4]
   b7034:	4611      	mov	r1, r2
   b7036:	f7fe bf5d 	b.w	b5ef4 <network_connecting>

000b703a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b703a:	2200      	movs	r2, #0
   b703c:	6840      	ldr	r0, [r0, #4]
   b703e:	4611      	mov	r1, r2
   b7040:	f7fe bf68 	b.w	b5f14 <network_ready>

000b7044 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7044:	2300      	movs	r3, #0
   b7046:	6840      	ldr	r0, [r0, #4]
   b7048:	461a      	mov	r2, r3
   b704a:	4619      	mov	r1, r3
   b704c:	f7fe bf6a 	b.w	b5f24 <network_on>

000b7050 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7050:	2300      	movs	r3, #0
   b7052:	6840      	ldr	r0, [r0, #4]
   b7054:	461a      	mov	r2, r3
   b7056:	4619      	mov	r1, r3
   b7058:	f7fe bf6c 	b.w	b5f34 <network_off>

000b705c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b705c:	6840      	ldr	r0, [r0, #4]
   b705e:	2100      	movs	r1, #0
   b7060:	f7fe bf90 	b.w	b5f84 <network_is_on>

000b7064 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7064:	6840      	ldr	r0, [r0, #4]
   b7066:	2100      	movs	r1, #0
   b7068:	f7fe bf94 	b.w	b5f94 <network_is_off>

000b706c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b706c:	6840      	ldr	r0, [r0, #4]
   b706e:	2200      	movs	r2, #0
   b7070:	f081 0101 	eor.w	r1, r1, #1
   b7074:	f7fe bf66 	b.w	b5f44 <network_listen>

000b7078 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7078:	6840      	ldr	r0, [r0, #4]
   b707a:	2200      	movs	r2, #0
   b707c:	f7fe bf72 	b.w	b5f64 <network_set_listen_timeout>

000b7080 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7080:	2200      	movs	r2, #0
   b7082:	6840      	ldr	r0, [r0, #4]
   b7084:	4611      	mov	r1, r2
   b7086:	f7fe bf75 	b.w	b5f74 <network_get_listen_timeout>

000b708a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b708a:	2200      	movs	r2, #0
   b708c:	6840      	ldr	r0, [r0, #4]
   b708e:	4611      	mov	r1, r2
   b7090:	f7fe bf60 	b.w	b5f54 <network_listening>

000b7094 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7098:	b095      	sub	sp, #84	; 0x54
   b709a:	4614      	mov	r4, r2
   b709c:	460d      	mov	r5, r1
   b709e:	4607      	mov	r7, r0
    IPAddress addr;
   b70a0:	f7ff fb4a 	bl	b6738 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b70a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b70a6:	221c      	movs	r2, #28
   b70a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b70aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b70ac:	f001 fb48 	bl	b8740 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b70b0:	2340      	movs	r3, #64	; 0x40
   b70b2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b70b4:	4620      	mov	r0, r4
   b70b6:	466b      	mov	r3, sp
   b70b8:	aa0c      	add	r2, sp, #48	; 0x30
   b70ba:	2100      	movs	r1, #0
   b70bc:	f7fe fd5e 	bl	b5b7c <netdb_getaddrinfo>
    if (!r) {
   b70c0:	4604      	mov	r4, r0
   b70c2:	2800      	cmp	r0, #0
   b70c4:	d14b      	bne.n	b715e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b70c6:	4602      	mov	r2, r0
   b70c8:	2101      	movs	r1, #1
   b70ca:	6868      	ldr	r0, [r5, #4]
   b70cc:	f7fe ff22 	bl	b5f14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b70d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70d4:	4622      	mov	r2, r4
   b70d6:	6868      	ldr	r0, [r5, #4]
   b70d8:	f7fe ff1c 	bl	b5f14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70dc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b70de:	4681      	mov	r9, r0
        bool ok = false;
   b70e0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70e2:	2e00      	cmp	r6, #0
   b70e4:	d03b      	beq.n	b715e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b70e6:	2900      	cmp	r1, #0
   b70e8:	d139      	bne.n	b715e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b70ea:	6873      	ldr	r3, [r6, #4]
   b70ec:	2b02      	cmp	r3, #2
   b70ee:	d003      	beq.n	b70f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b70f0:	2b0a      	cmp	r3, #10
   b70f2:	d011      	beq.n	b7118 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b70f4:	69f6      	ldr	r6, [r6, #28]
   b70f6:	e7f4      	b.n	b70e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b70f8:	f1b8 0f00 	cmp.w	r8, #0
   b70fc:	d0fa      	beq.n	b70f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b70fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7100:	a806      	add	r0, sp, #24
   b7102:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7104:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7106:	f7ff fb5b 	bl	b67c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b710a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b710c:	1d3c      	adds	r4, r7, #4
   b710e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7110:	682b      	ldr	r3, [r5, #0]
   b7112:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7114:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7116:	e7ed      	b.n	b70f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7118:	f1b9 0f00 	cmp.w	r9, #0
   b711c:	d0ea      	beq.n	b70f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b711e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7120:	2210      	movs	r2, #16
   b7122:	a801      	add	r0, sp, #4
   b7124:	f001 fb0c 	bl	b8740 <memset>
                    a.v = 6;
   b7128:	2306      	movs	r3, #6
   b712a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b712e:	ad01      	add	r5, sp, #4
   b7130:	f104 0308 	add.w	r3, r4, #8
   b7134:	3418      	adds	r4, #24
   b7136:	6818      	ldr	r0, [r3, #0]
   b7138:	6859      	ldr	r1, [r3, #4]
   b713a:	462a      	mov	r2, r5
   b713c:	c203      	stmia	r2!, {r0, r1}
   b713e:	3308      	adds	r3, #8
   b7140:	42a3      	cmp	r3, r4
   b7142:	4615      	mov	r5, r2
   b7144:	d1f7      	bne.n	b7136 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7146:	a901      	add	r1, sp, #4
   b7148:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b714a:	ad07      	add	r5, sp, #28
   b714c:	f7ff fb02 	bl	b6754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7152:	1d3c      	adds	r4, r7, #4
   b7154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7156:	682b      	ldr	r3, [r5, #0]
   b7158:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b715a:	4649      	mov	r1, r9
   b715c:	e7ca      	b.n	b70f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b715e:	9800      	ldr	r0, [sp, #0]
   b7160:	f7fe fd04 	bl	b5b6c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7164:	4638      	mov	r0, r7
   b7166:	b015      	add	sp, #84	; 0x54
   b7168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b716c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b716c:	4b02      	ldr	r3, [pc, #8]	; (b7178 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b716e:	4a03      	ldr	r2, [pc, #12]	; (b717c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7170:	601a      	str	r2, [r3, #0]
   b7172:	2200      	movs	r2, #0
   b7174:	605a      	str	r2, [r3, #4]

} // spark
   b7176:	4770      	bx	lr
   b7178:	2003e720 	.word	0x2003e720
   b717c:	000baf40 	.word	0x000baf40

000b7180 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7180:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7182:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7184:	d902      	bls.n	b718c <pinAvailable+0xc>
    return false;
   b7186:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7188:	b002      	add	sp, #8
   b718a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b718c:	f1a0 030b 	sub.w	r3, r0, #11
   b7190:	2b02      	cmp	r3, #2
   b7192:	d81a      	bhi.n	b71ca <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7194:	4c17      	ldr	r4, [pc, #92]	; (b71f4 <pinAvailable+0x74>)
   b7196:	7821      	ldrb	r1, [r4, #0]
   b7198:	f3bf 8f5b 	dmb	ish
   b719c:	f011 0101 	ands.w	r1, r1, #1
   b71a0:	d10b      	bne.n	b71ba <pinAvailable+0x3a>
   b71a2:	4620      	mov	r0, r4
   b71a4:	9101      	str	r1, [sp, #4]
   b71a6:	f7fc ff80 	bl	b40aa <__cxa_guard_acquire>
   b71aa:	9901      	ldr	r1, [sp, #4]
   b71ac:	b128      	cbz	r0, b71ba <pinAvailable+0x3a>
   b71ae:	4812      	ldr	r0, [pc, #72]	; (b71f8 <pinAvailable+0x78>)
   b71b0:	f7fe ff96 	bl	b60e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b71b4:	4620      	mov	r0, r4
   b71b6:	f7fc ff7d 	bl	b40b4 <__cxa_guard_release>
   b71ba:	4b0f      	ldr	r3, [pc, #60]	; (b71f8 <pinAvailable+0x78>)
   b71bc:	7818      	ldrb	r0, [r3, #0]
   b71be:	f7fe fe25 	bl	b5e0c <hal_spi_is_enabled>
   b71c2:	2800      	cmp	r0, #0
   b71c4:	d1df      	bne.n	b7186 <pinAvailable+0x6>
  return true; // 'pin' is available
   b71c6:	2001      	movs	r0, #1
   b71c8:	e7de      	b.n	b7188 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b71ca:	2801      	cmp	r0, #1
   b71cc:	d809      	bhi.n	b71e2 <pinAvailable+0x62>
   b71ce:	f000 f8e7 	bl	b73a0 <_Z19__fetch_global_Wirev>
   b71d2:	2100      	movs	r1, #0
   b71d4:	7c00      	ldrb	r0, [r0, #16]
   b71d6:	f7fe fdd1 	bl	b5d7c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b71da:	f080 0001 	eor.w	r0, r0, #1
   b71de:	b2c0      	uxtb	r0, r0
   b71e0:	e7d2      	b.n	b7188 <pinAvailable+0x8>
   b71e2:	3809      	subs	r0, #9
   b71e4:	2801      	cmp	r0, #1
   b71e6:	d8ee      	bhi.n	b71c6 <pinAvailable+0x46>
   b71e8:	f000 f89e 	bl	b7328 <_Z22__fetch_global_Serial1v>
   b71ec:	7c00      	ldrb	r0, [r0, #16]
   b71ee:	f7fe fd85 	bl	b5cfc <hal_usart_is_enabled>
   b71f2:	e7f2      	b.n	b71da <pinAvailable+0x5a>
   b71f4:	2003e6b8 	.word	0x2003e6b8
   b71f8:	2003e6bc 	.word	0x2003e6bc

000b71fc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b71fc:	2823      	cmp	r0, #35	; 0x23
{
   b71fe:	b538      	push	{r3, r4, r5, lr}
   b7200:	4604      	mov	r4, r0
   b7202:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7204:	d80a      	bhi.n	b721c <pinMode+0x20>
   b7206:	29ff      	cmp	r1, #255	; 0xff
   b7208:	d008      	beq.n	b721c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b720a:	f7ff ffb9 	bl	b7180 <pinAvailable>
   b720e:	b128      	cbz	r0, b721c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7210:	4629      	mov	r1, r5
   b7212:	4620      	mov	r0, r4
}
   b7214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7218:	f7fe bcc0 	b.w	b5b9c <HAL_Pin_Mode>
}
   b721c:	bd38      	pop	{r3, r4, r5, pc}

000b721e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b721e:	b538      	push	{r3, r4, r5, lr}
   b7220:	4604      	mov	r4, r0
   b7222:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7224:	f7fe fcc2 	bl	b5bac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7228:	28ff      	cmp	r0, #255	; 0xff
   b722a:	d010      	beq.n	b724e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b722c:	2806      	cmp	r0, #6
   b722e:	d804      	bhi.n	b723a <digitalWrite+0x1c>
   b7230:	234d      	movs	r3, #77	; 0x4d
   b7232:	fa23 f000 	lsr.w	r0, r3, r0
   b7236:	07c3      	lsls	r3, r0, #31
   b7238:	d409      	bmi.n	b724e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b723a:	4620      	mov	r0, r4
   b723c:	f7ff ffa0 	bl	b7180 <pinAvailable>
   b7240:	b128      	cbz	r0, b724e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7242:	4629      	mov	r1, r5
   b7244:	4620      	mov	r0, r4
}
   b7246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b724a:	f7fe bcb7 	b.w	b5bbc <HAL_GPIO_Write>
}
   b724e:	bd38      	pop	{r3, r4, r5, pc}

000b7250 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7250:	b510      	push	{r4, lr}
   b7252:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7254:	f7fe fcaa 	bl	b5bac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7258:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b725a:	b2db      	uxtb	r3, r3
   b725c:	2b01      	cmp	r3, #1
   b725e:	d908      	bls.n	b7272 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7260:	4620      	mov	r0, r4
   b7262:	f7ff ff8d 	bl	b7180 <pinAvailable>
   b7266:	b120      	cbz	r0, b7272 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7268:	4620      	mov	r0, r4
}
   b726a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b726e:	f7fe bcad 	b.w	b5bcc <HAL_GPIO_Read>
}
   b7272:	2000      	movs	r0, #0
   b7274:	bd10      	pop	{r4, pc}

000b7276 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7276:	280d      	cmp	r0, #13
{
   b7278:	b510      	push	{r4, lr}
   b727a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b727c:	bf9c      	itt	ls
   b727e:	340e      	addls	r4, #14
   b7280:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7282:	4620      	mov	r0, r4
   b7284:	f7ff ff7c 	bl	b7180 <pinAvailable>
   b7288:	b150      	cbz	r0, b72a0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b728a:	2103      	movs	r1, #3
   b728c:	4620      	mov	r0, r4
   b728e:	f7fe fc7d 	bl	b5b8c <HAL_Validate_Pin_Function>
   b7292:	2803      	cmp	r0, #3
   b7294:	d104      	bne.n	b72a0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7296:	4620      	mov	r0, r4
}
   b7298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b729c:	f7fe bca6 	b.w	b5bec <hal_adc_read>
}
   b72a0:	2000      	movs	r0, #0
   b72a2:	bd10      	pop	{r4, pc}

000b72a4 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b72a4:	b538      	push	{r3, r4, r5, lr}
   b72a6:	4604      	mov	r4, r0
   b72a8:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b72aa:	f7ff ff69 	bl	b7180 <pinAvailable>
   b72ae:	b1f0      	cbz	r0, b72ee <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b72b0:	2104      	movs	r1, #4
   b72b2:	4620      	mov	r0, r4
   b72b4:	f7fe fc6a 	bl	b5b8c <HAL_Validate_Pin_Function>
   b72b8:	2804      	cmp	r0, #4
   b72ba:	d105      	bne.n	b72c8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b72bc:	b2a9      	uxth	r1, r5
   b72be:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b72c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b72c4:	f7fe bc8a 	b.w	b5bdc <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b72c8:	2102      	movs	r1, #2
   b72ca:	4620      	mov	r0, r4
   b72cc:	f7fe fc5e 	bl	b5b8c <HAL_Validate_Pin_Function>
   b72d0:	2802      	cmp	r0, #2
   b72d2:	d10c      	bne.n	b72ee <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b72d4:	4620      	mov	r0, r4
   b72d6:	f7fe fc69 	bl	b5bac <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b72da:	2801      	cmp	r0, #1
   b72dc:	d001      	beq.n	b72e2 <_Z11analogWritetm+0x3e>
   b72de:	2804      	cmp	r0, #4
   b72e0:	d105      	bne.n	b72ee <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b72e2:	4629      	mov	r1, r5
   b72e4:	4620      	mov	r0, r4
}
   b72e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b72ea:	f7fe bc87 	b.w	b5bfc <hal_pwm_write_ext>
}
   b72ee:	bd38      	pop	{r3, r4, r5, pc}

000b72f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72f0:	4770      	bx	lr
	...

000b72f4 <_Z20acquireSerial1Bufferv>:
{
   b72f4:	b538      	push	{r3, r4, r5, lr}
   b72f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b72f8:	2514      	movs	r5, #20
   b72fa:	462a      	mov	r2, r5
   b72fc:	2100      	movs	r1, #0
   b72fe:	f001 fa1f 	bl	b8740 <memset>
   b7302:	8025      	strh	r5, [r4, #0]
   b7304:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7306:	4907      	ldr	r1, [pc, #28]	; (b7324 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7308:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b730a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b730c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b730e:	f000 f86b 	bl	b73e8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7312:	4904      	ldr	r1, [pc, #16]	; (b7324 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7314:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7316:	4628      	mov	r0, r5
   b7318:	f000 f866 	bl	b73e8 <_ZnajRKSt9nothrow_t>
    };
   b731c:	60e0      	str	r0, [r4, #12]
}
   b731e:	4620      	mov	r0, r4
   b7320:	bd38      	pop	{r3, r4, r5, pc}
   b7322:	bf00      	nop
   b7324:	000baf74 	.word	0x000baf74

000b7328 <_Z22__fetch_global_Serial1v>:
{
   b7328:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b732a:	4d0e      	ldr	r5, [pc, #56]	; (b7364 <_Z22__fetch_global_Serial1v+0x3c>)
   b732c:	7829      	ldrb	r1, [r5, #0]
   b732e:	f3bf 8f5b 	dmb	ish
   b7332:	f011 0401 	ands.w	r4, r1, #1
{
   b7336:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7338:	d111      	bne.n	b735e <_Z22__fetch_global_Serial1v+0x36>
   b733a:	4628      	mov	r0, r5
   b733c:	f7fc feb5 	bl	b40aa <__cxa_guard_acquire>
   b7340:	b168      	cbz	r0, b735e <_Z22__fetch_global_Serial1v+0x36>
   b7342:	a801      	add	r0, sp, #4
   b7344:	f7ff ffd6 	bl	b72f4 <_Z20acquireSerial1Bufferv>
   b7348:	aa01      	add	r2, sp, #4
   b734a:	4621      	mov	r1, r4
   b734c:	4806      	ldr	r0, [pc, #24]	; (b7368 <_Z22__fetch_global_Serial1v+0x40>)
   b734e:	f7ff fb09 	bl	b6964 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7352:	4628      	mov	r0, r5
   b7354:	f7fc feae 	bl	b40b4 <__cxa_guard_release>
   b7358:	4804      	ldr	r0, [pc, #16]	; (b736c <_Z22__fetch_global_Serial1v+0x44>)
   b735a:	f001 f951 	bl	b8600 <atexit>
    return serial1;
}
   b735e:	4802      	ldr	r0, [pc, #8]	; (b7368 <_Z22__fetch_global_Serial1v+0x40>)
   b7360:	b007      	add	sp, #28
   b7362:	bd30      	pop	{r4, r5, pc}
   b7364:	2003e728 	.word	0x2003e728
   b7368:	2003e72c 	.word	0x2003e72c
   b736c:	000b72f1 	.word	0x000b72f1

000b7370 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7370:	4770      	bx	lr
	...

000b7374 <_Z17acquireWireBufferv>:
{
   b7374:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7376:	2520      	movs	r5, #32
   b7378:	2314      	movs	r3, #20
{
   b737a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b737c:	6003      	str	r3, [r0, #0]
   b737e:	6085      	str	r5, [r0, #8]
   b7380:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7382:	4906      	ldr	r1, [pc, #24]	; (b739c <_Z17acquireWireBufferv+0x28>)
   b7384:	4628      	mov	r0, r5
   b7386:	f000 f82f 	bl	b73e8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b738a:	4904      	ldr	r1, [pc, #16]	; (b739c <_Z17acquireWireBufferv+0x28>)
	};
   b738c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b738e:	4628      	mov	r0, r5
   b7390:	f000 f82a 	bl	b73e8 <_ZnajRKSt9nothrow_t>
	};
   b7394:	60e0      	str	r0, [r4, #12]
}
   b7396:	4620      	mov	r0, r4
   b7398:	bd38      	pop	{r3, r4, r5, pc}
   b739a:	bf00      	nop
   b739c:	000baf74 	.word	0x000baf74

000b73a0 <_Z19__fetch_global_Wirev>:
{
   b73a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b73a2:	4d0e      	ldr	r5, [pc, #56]	; (b73dc <_Z19__fetch_global_Wirev+0x3c>)
   b73a4:	7829      	ldrb	r1, [r5, #0]
   b73a6:	f3bf 8f5b 	dmb	ish
   b73aa:	f011 0401 	ands.w	r4, r1, #1
{
   b73ae:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b73b0:	d111      	bne.n	b73d6 <_Z19__fetch_global_Wirev+0x36>
   b73b2:	4628      	mov	r0, r5
   b73b4:	f7fc fe79 	bl	b40aa <__cxa_guard_acquire>
   b73b8:	b168      	cbz	r0, b73d6 <_Z19__fetch_global_Wirev+0x36>
   b73ba:	a801      	add	r0, sp, #4
   b73bc:	f7ff ffda 	bl	b7374 <_Z17acquireWireBufferv>
   b73c0:	aa01      	add	r2, sp, #4
   b73c2:	4621      	mov	r1, r4
   b73c4:	4806      	ldr	r0, [pc, #24]	; (b73e0 <_Z19__fetch_global_Wirev+0x40>)
   b73c6:	f7ff fb0d 	bl	b69e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b73ca:	4628      	mov	r0, r5
   b73cc:	f7fc fe72 	bl	b40b4 <__cxa_guard_release>
   b73d0:	4804      	ldr	r0, [pc, #16]	; (b73e4 <_Z19__fetch_global_Wirev+0x44>)
   b73d2:	f001 f915 	bl	b8600 <atexit>
	return wire;
}
   b73d6:	4802      	ldr	r0, [pc, #8]	; (b73e0 <_Z19__fetch_global_Wirev+0x40>)
   b73d8:	b007      	add	sp, #28
   b73da:	bd30      	pop	{r4, r5, pc}
   b73dc:	2003e744 	.word	0x2003e744
   b73e0:	2003e748 	.word	0x2003e748
   b73e4:	000b7371 	.word	0x000b7371

000b73e8 <_ZnajRKSt9nothrow_t>:
   b73e8:	f7fc be57 	b.w	b409a <_Znaj>

000b73ec <_ZSt17__throw_bad_allocv>:
   b73ec:	b508      	push	{r3, lr}
   b73ee:	f7fe fe11 	bl	b6014 <abort>

000b73f2 <_ZSt19__throw_logic_errorPKc>:
   b73f2:	b508      	push	{r3, lr}
   b73f4:	f7fe fe0e 	bl	b6014 <abort>

000b73f8 <_ZSt24__throw_invalid_argumentPKc>:
   b73f8:	b508      	push	{r3, lr}
   b73fa:	f7fe fe0b 	bl	b6014 <abort>

000b73fe <_ZSt20__throw_length_errorPKc>:
   b73fe:	b508      	push	{r3, lr}
   b7400:	f7fe fe08 	bl	b6014 <abort>

000b7404 <_ZSt20__throw_out_of_rangePKc>:
   b7404:	b508      	push	{r3, lr}
   b7406:	f7fe fe05 	bl	b6014 <abort>

000b740a <_ZSt24__throw_out_of_range_fmtPKcz>:
   b740a:	b40f      	push	{r0, r1, r2, r3}
   b740c:	b580      	push	{r7, lr}
   b740e:	b084      	sub	sp, #16
   b7410:	af00      	add	r7, sp, #0
   b7412:	f107 0418 	add.w	r4, r7, #24
   b7416:	f854 2b04 	ldr.w	r2, [r4], #4
   b741a:	607a      	str	r2, [r7, #4]
   b741c:	4610      	mov	r0, r2
   b741e:	f001 f9cf 	bl	b87c0 <strlen>
   b7422:	f200 2307 	addw	r3, r0, #519	; 0x207
   b7426:	f023 0307 	bic.w	r3, r3, #7
   b742a:	ebad 0d03 	sub.w	sp, sp, r3
   b742e:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b7432:	687a      	ldr	r2, [r7, #4]
   b7434:	60fc      	str	r4, [r7, #12]
   b7436:	4623      	mov	r3, r4
   b7438:	4668      	mov	r0, sp
   b743a:	f000 f85b 	bl	b74f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b743e:	f7fe fde9 	bl	b6014 <abort>
	...

000b7444 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7444:	4901      	ldr	r1, [pc, #4]	; (b744c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7446:	f000 bba3 	b.w	b7b90 <_ZNKSt9type_infoeqERKS_>
   b744a:	bf00      	nop
   b744c:	000baf90 	.word	0x000baf90

000b7450 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b7450:	b580      	push	{r7, lr}
   b7452:	b09c      	sub	sp, #112	; 0x70
   b7454:	4606      	mov	r6, r0
   b7456:	af00      	add	r7, sp, #0
   b7458:	460c      	mov	r4, r1
   b745a:	1ba4      	subs	r4, r4, r6
   b745c:	490e      	ldr	r1, [pc, #56]	; (b7498 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b745e:	2269      	movs	r2, #105	; 0x69
   b7460:	1d38      	adds	r0, r7, #4
   b7462:	f001 f945 	bl	b86f0 <memcpy>
   b7466:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b746a:	f023 0307 	bic.w	r3, r3, #7
   b746e:	ebad 0d03 	sub.w	sp, sp, r3
   b7472:	466d      	mov	r5, sp
   b7474:	2268      	movs	r2, #104	; 0x68
   b7476:	1d39      	adds	r1, r7, #4
   b7478:	4628      	mov	r0, r5
   b747a:	f001 f939 	bl	b86f0 <memcpy>
   b747e:	4622      	mov	r2, r4
   b7480:	4631      	mov	r1, r6
   b7482:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b7486:	442c      	add	r4, r5
   b7488:	f001 f932 	bl	b86f0 <memcpy>
   b748c:	2300      	movs	r3, #0
   b748e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b7492:	4628      	mov	r0, r5
   b7494:	f7ff ffad 	bl	b73f2 <_ZSt19__throw_logic_errorPKc>
   b7498:	000baf98 	.word	0x000baf98

000b749c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b749c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74a0:	af00      	add	r7, sp, #0
   b74a2:	b084      	sub	sp, #16
   b74a4:	466d      	mov	r5, sp
   b74a6:	f105 040c 	add.w	r4, r5, #12
   b74aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; b74f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b74ae:	4623      	mov	r3, r4
   b74b0:	f04f 0c0a 	mov.w	ip, #10
   b74b4:	fbb2 f6fc 	udiv	r6, r2, ip
   b74b8:	fb0c 2e16 	mls	lr, ip, r6, r2
   b74bc:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b74c0:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b74c4:	4696      	mov	lr, r2
   b74c6:	f1be 0f09 	cmp.w	lr, #9
   b74ca:	4632      	mov	r2, r6
   b74cc:	d8f2      	bhi.n	b74b4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b74ce:	1ae4      	subs	r4, r4, r3
   b74d0:	428c      	cmp	r4, r1
   b74d2:	d809      	bhi.n	b74e8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b74d4:	f1c4 030c 	rsb	r3, r4, #12
   b74d8:	4622      	mov	r2, r4
   b74da:	18e9      	adds	r1, r5, r3
   b74dc:	f001 f908 	bl	b86f0 <memcpy>
   b74e0:	4620      	mov	r0, r4
   b74e2:	46bd      	mov	sp, r7
   b74e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b74e8:	f04f 34ff 	mov.w	r4, #4294967295
   b74ec:	e7f8      	b.n	b74e0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b74ee:	bf00      	nop
   b74f0:	000bb001 	.word	0x000bb001

000b74f4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b74f4:	3901      	subs	r1, #1
   b74f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74fa:	4607      	mov	r7, r0
   b74fc:	4615      	mov	r5, r2
   b74fe:	eb00 0801 	add.w	r8, r0, r1
   b7502:	4604      	mov	r4, r0
   b7504:	782a      	ldrb	r2, [r5, #0]
   b7506:	b392      	cbz	r2, b756e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b7508:	4544      	cmp	r4, r8
   b750a:	d22a      	bcs.n	b7562 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b750c:	2a25      	cmp	r2, #37	; 0x25
   b750e:	d107      	bne.n	b7520 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7510:	786a      	ldrb	r2, [r5, #1]
   b7512:	2a73      	cmp	r2, #115	; 0x73
   b7514:	d009      	beq.n	b752a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b7516:	2a7a      	cmp	r2, #122	; 0x7a
   b7518:	d012      	beq.n	b7540 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b751a:	2a25      	cmp	r2, #37	; 0x25
   b751c:	d100      	bne.n	b7520 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b751e:	3501      	adds	r5, #1
   b7520:	f815 2b01 	ldrb.w	r2, [r5], #1
   b7524:	f804 2b01 	strb.w	r2, [r4], #1
   b7528:	e7ec      	b.n	b7504 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b752a:	f853 2b04 	ldr.w	r2, [r3], #4
   b752e:	3a01      	subs	r2, #1
   b7530:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b7534:	b1c9      	cbz	r1, b756a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b7536:	4544      	cmp	r4, r8
   b7538:	d013      	beq.n	b7562 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b753a:	f804 1b01 	strb.w	r1, [r4], #1
   b753e:	e7f7      	b.n	b7530 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b7540:	78aa      	ldrb	r2, [r5, #2]
   b7542:	2a75      	cmp	r2, #117	; 0x75
   b7544:	d1ec      	bne.n	b7520 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7546:	461e      	mov	r6, r3
   b7548:	eba8 0104 	sub.w	r1, r8, r4
   b754c:	f856 2b04 	ldr.w	r2, [r6], #4
   b7550:	4620      	mov	r0, r4
   b7552:	f7ff ffa3 	bl	b749c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b7556:	2800      	cmp	r0, #0
   b7558:	dd03      	ble.n	b7562 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b755a:	4404      	add	r4, r0
   b755c:	3503      	adds	r5, #3
   b755e:	4633      	mov	r3, r6
   b7560:	e7d0      	b.n	b7504 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7562:	4621      	mov	r1, r4
   b7564:	4638      	mov	r0, r7
   b7566:	f7ff ff73 	bl	b7450 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b756a:	3502      	adds	r5, #2
   b756c:	e7ca      	b.n	b7504 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b756e:	7022      	strb	r2, [r4, #0]
   b7570:	1be0      	subs	r0, r4, r7
   b7572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7576 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b7576:	b10a      	cbz	r2, b757c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b7578:	f001 b8ba 	b.w	b86f0 <memcpy>
   b757c:	4770      	bx	lr

000b757e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b757e:	b10a      	cbz	r2, b7584 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b7580:	f001 b8a6 	b.w	b86d0 <memcmp>
   b7584:	4610      	mov	r0, r2
   b7586:	4770      	bx	lr

000b7588 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b7588:	4613      	mov	r3, r2
   b758a:	460a      	mov	r2, r1
   b758c:	b111      	cbz	r1, b7594 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b758e:	7819      	ldrb	r1, [r3, #0]
   b7590:	f001 b84e 	b.w	b8630 <memchr>
   b7594:	4608      	mov	r0, r1
   b7596:	4770      	bx	lr

000b7598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b7598:	b508      	push	{r3, lr}
   b759a:	680b      	ldr	r3, [r1, #0]
   b759c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b75a0:	d302      	bcc.n	b75a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b75a2:	480d      	ldr	r0, [pc, #52]	; (b75d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b75a4:	f7ff ff2b 	bl	b73fe <_ZSt20__throw_length_errorPKc>
   b75a8:	4293      	cmp	r3, r2
   b75aa:	d90b      	bls.n	b75c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b75ac:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b75b0:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b75b4:	d206      	bcs.n	b75c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b75b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b75ba:	bf2a      	itet	cs
   b75bc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b75c0:	6008      	strcc	r0, [r1, #0]
   b75c2:	600b      	strcs	r3, [r1, #0]
   b75c4:	6808      	ldr	r0, [r1, #0]
   b75c6:	3001      	adds	r0, #1
   b75c8:	d501      	bpl.n	b75ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b75ca:	f7ff ff0f 	bl	b73ec <_ZSt17__throw_bad_allocv>
   b75ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b75d2:	f7fc bd60 	b.w	b4096 <_Znwj>
   b75d6:	bf00      	nop
   b75d8:	000bb00c 	.word	0x000bb00c

000b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b75dc:	f850 3b08 	ldr.w	r3, [r0], #8
   b75e0:	4283      	cmp	r3, r0
   b75e2:	d002      	beq.n	b75ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b75e4:	4618      	mov	r0, r3
   b75e6:	f7fc bd5a 	b.w	b409e <_ZdlPv>
   b75ea:	4770      	bx	lr

000b75ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b75ec:	b508      	push	{r3, lr}
   b75ee:	4603      	mov	r3, r0
   b75f0:	4608      	mov	r0, r1
   b75f2:	685b      	ldr	r3, [r3, #4]
   b75f4:	4298      	cmp	r0, r3
   b75f6:	4611      	mov	r1, r2
   b75f8:	d903      	bls.n	b7602 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b75fa:	4602      	mov	r2, r0
   b75fc:	4801      	ldr	r0, [pc, #4]	; (b7604 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b75fe:	f7ff ff04 	bl	b740a <_ZSt24__throw_out_of_range_fmtPKcz>
   b7602:	bd08      	pop	{r3, pc}
   b7604:	000bb024 	.word	0x000bb024

000b7608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b7608:	6840      	ldr	r0, [r0, #4]
   b760a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b760e:	3901      	subs	r1, #1
   b7610:	1a09      	subs	r1, r1, r0
   b7612:	4291      	cmp	r1, r2
   b7614:	b508      	push	{r3, lr}
   b7616:	d202      	bcs.n	b761e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b7618:	4618      	mov	r0, r3
   b761a:	f7ff fef0 	bl	b73fe <_ZSt20__throw_length_errorPKc>
   b761e:	bd08      	pop	{r3, pc}

000b7620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b7620:	6803      	ldr	r3, [r0, #0]
   b7622:	428b      	cmp	r3, r1
   b7624:	d806      	bhi.n	b7634 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b7626:	6840      	ldr	r0, [r0, #4]
   b7628:	4418      	add	r0, r3
   b762a:	4281      	cmp	r1, r0
   b762c:	bf94      	ite	ls
   b762e:	2000      	movls	r0, #0
   b7630:	2001      	movhi	r0, #1
   b7632:	4770      	bx	lr
   b7634:	2001      	movs	r0, #1
   b7636:	4770      	bx	lr

000b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b7638:	2a01      	cmp	r2, #1
   b763a:	b410      	push	{r4}
   b763c:	d104      	bne.n	b7648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b763e:	780a      	ldrb	r2, [r1, #0]
   b7640:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7644:	7002      	strb	r2, [r0, #0]
   b7646:	4770      	bx	lr
   b7648:	f85d 4b04 	ldr.w	r4, [sp], #4
   b764c:	f7ff bf93 	b.w	b7576 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b7650:	2a01      	cmp	r2, #1
   b7652:	b430      	push	{r4, r5}
   b7654:	d103      	bne.n	b765e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b7656:	780b      	ldrb	r3, [r1, #0]
   b7658:	7003      	strb	r3, [r0, #0]
   b765a:	bc30      	pop	{r4, r5}
   b765c:	4770      	bx	lr
   b765e:	2a00      	cmp	r2, #0
   b7660:	d0fb      	beq.n	b765a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b7662:	bc30      	pop	{r4, r5}
   b7664:	f001 b852 	b.w	b870c <memmove>

000b7668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b7668:	b508      	push	{r3, lr}
   b766a:	1a52      	subs	r2, r2, r1
   b766c:	f7ff ffe4 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7670:	bd08      	pop	{r3, pc}

000b7672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b7672:	4288      	cmp	r0, r1
   b7674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7676:	4604      	mov	r4, r0
   b7678:	460e      	mov	r6, r1
   b767a:	d01e      	beq.n	b76ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b767c:	4603      	mov	r3, r0
   b767e:	684d      	ldr	r5, [r1, #4]
   b7680:	f853 2b08 	ldr.w	r2, [r3], #8
   b7684:	429a      	cmp	r2, r3
   b7686:	bf14      	ite	ne
   b7688:	6882      	ldrne	r2, [r0, #8]
   b768a:	220f      	moveq	r2, #15
   b768c:	42aa      	cmp	r2, r5
   b768e:	d20a      	bcs.n	b76a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b7690:	a901      	add	r1, sp, #4
   b7692:	9501      	str	r5, [sp, #4]
   b7694:	f7ff ff80 	bl	b7598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b7698:	4607      	mov	r7, r0
   b769a:	4620      	mov	r0, r4
   b769c:	f7ff ff9e 	bl	b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b76a0:	9b01      	ldr	r3, [sp, #4]
   b76a2:	6027      	str	r7, [r4, #0]
   b76a4:	60a3      	str	r3, [r4, #8]
   b76a6:	b125      	cbz	r5, b76b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b76a8:	6831      	ldr	r1, [r6, #0]
   b76aa:	6820      	ldr	r0, [r4, #0]
   b76ac:	462a      	mov	r2, r5
   b76ae:	f7ff ffc3 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b76b2:	6823      	ldr	r3, [r4, #0]
   b76b4:	6065      	str	r5, [r4, #4]
   b76b6:	2200      	movs	r2, #0
   b76b8:	555a      	strb	r2, [r3, r5]
   b76ba:	b003      	add	sp, #12
   b76bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b76be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b76be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b76c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b76c4:	461f      	mov	r7, r3
   b76c6:	6843      	ldr	r3, [r0, #4]
   b76c8:	eb01 0802 	add.w	r8, r1, r2
   b76cc:	1ab2      	subs	r2, r6, r2
   b76ce:	441a      	add	r2, r3
   b76d0:	eba3 0908 	sub.w	r9, r3, r8
   b76d4:	4603      	mov	r3, r0
   b76d6:	9201      	str	r2, [sp, #4]
   b76d8:	f853 2b08 	ldr.w	r2, [r3], #8
   b76dc:	429a      	cmp	r2, r3
   b76de:	bf18      	it	ne
   b76e0:	6882      	ldrne	r2, [r0, #8]
   b76e2:	460d      	mov	r5, r1
   b76e4:	bf08      	it	eq
   b76e6:	220f      	moveq	r2, #15
   b76e8:	a901      	add	r1, sp, #4
   b76ea:	4604      	mov	r4, r0
   b76ec:	f7ff ff54 	bl	b7598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b76f0:	4682      	mov	sl, r0
   b76f2:	b11d      	cbz	r5, b76fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b76f4:	6821      	ldr	r1, [r4, #0]
   b76f6:	462a      	mov	r2, r5
   b76f8:	f7ff ff9e 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b76fc:	b137      	cbz	r7, b770c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b76fe:	b12e      	cbz	r6, b770c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b7700:	4632      	mov	r2, r6
   b7702:	4639      	mov	r1, r7
   b7704:	eb0a 0005 	add.w	r0, sl, r5
   b7708:	f7ff ff96 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b770c:	f1b9 0f00 	cmp.w	r9, #0
   b7710:	d007      	beq.n	b7722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b7712:	6821      	ldr	r1, [r4, #0]
   b7714:	4435      	add	r5, r6
   b7716:	464a      	mov	r2, r9
   b7718:	4441      	add	r1, r8
   b771a:	eb0a 0005 	add.w	r0, sl, r5
   b771e:	f7ff ff8b 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7722:	4620      	mov	r0, r4
   b7724:	f7ff ff5a 	bl	b75dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b7728:	9b01      	ldr	r3, [sp, #4]
   b772a:	f8c4 a000 	str.w	sl, [r4]
   b772e:	60a3      	str	r3, [r4, #8]
   b7730:	b002      	add	sp, #8
   b7732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000b7738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b7738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b773c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b773e:	4614      	mov	r4, r2
   b7740:	4680      	mov	r8, r0
   b7742:	462a      	mov	r2, r5
   b7744:	4689      	mov	r9, r1
   b7746:	461f      	mov	r7, r3
   b7748:	4621      	mov	r1, r4
   b774a:	4b39      	ldr	r3, [pc, #228]	; (b7830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b774c:	f7ff ff5c 	bl	b7608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b7750:	4642      	mov	r2, r8
   b7752:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7756:	f852 6b08 	ldr.w	r6, [r2], #8
   b775a:	4296      	cmp	r6, r2
   b775c:	bf18      	it	ne
   b775e:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b7762:	eba5 0b04 	sub.w	fp, r5, r4
   b7766:	eb03 0a0b 	add.w	sl, r3, fp
   b776a:	bf08      	it	eq
   b776c:	220f      	moveq	r2, #15
   b776e:	4552      	cmp	r2, sl
   b7770:	d351      	bcc.n	b7816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b7772:	444e      	add	r6, r9
   b7774:	4639      	mov	r1, r7
   b7776:	44a1      	add	r9, r4
   b7778:	4640      	mov	r0, r8
   b777a:	eba3 0909 	sub.w	r9, r3, r9
   b777e:	f7ff ff4f 	bl	b7620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b7782:	b180      	cbz	r0, b77a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b7784:	f1b9 0f00 	cmp.w	r9, #0
   b7788:	d006      	beq.n	b7798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b778a:	42ac      	cmp	r4, r5
   b778c:	d004      	beq.n	b7798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b778e:	464a      	mov	r2, r9
   b7790:	1931      	adds	r1, r6, r4
   b7792:	1970      	adds	r0, r6, r5
   b7794:	f7ff ff5c 	bl	b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b7798:	b315      	cbz	r5, b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b779a:	462a      	mov	r2, r5
   b779c:	4639      	mov	r1, r7
   b779e:	4630      	mov	r0, r6
   b77a0:	f7ff ff4a 	bl	b7638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b77a4:	e01c      	b.n	b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b77a6:	b135      	cbz	r5, b77b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b77a8:	42ac      	cmp	r4, r5
   b77aa:	d33c      	bcc.n	b7826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b77ac:	462a      	mov	r2, r5
   b77ae:	4639      	mov	r1, r7
   b77b0:	4630      	mov	r0, r6
   b77b2:	f7ff ff4d 	bl	b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b77b6:	f1b9 0f00 	cmp.w	r9, #0
   b77ba:	d011      	beq.n	b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b77bc:	42ac      	cmp	r4, r5
   b77be:	d00f      	beq.n	b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b77c0:	464a      	mov	r2, r9
   b77c2:	1931      	adds	r1, r6, r4
   b77c4:	1970      	adds	r0, r6, r5
   b77c6:	f7ff ff43 	bl	b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b77ca:	42ac      	cmp	r4, r5
   b77cc:	d208      	bcs.n	b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b77ce:	4434      	add	r4, r6
   b77d0:	197b      	adds	r3, r7, r5
   b77d2:	429c      	cmp	r4, r3
   b77d4:	d30f      	bcc.n	b77f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b77d6:	462a      	mov	r2, r5
   b77d8:	4639      	mov	r1, r7
   b77da:	4630      	mov	r0, r6
   b77dc:	f7ff ff38 	bl	b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b77e0:	f8d8 3000 	ldr.w	r3, [r8]
   b77e4:	f8c8 a004 	str.w	sl, [r8, #4]
   b77e8:	2200      	movs	r2, #0
   b77ea:	4640      	mov	r0, r8
   b77ec:	f803 200a 	strb.w	r2, [r3, sl]
   b77f0:	b003      	add	sp, #12
   b77f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b77f6:	42bc      	cmp	r4, r7
   b77f8:	d803      	bhi.n	b7802 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b77fa:	462a      	mov	r2, r5
   b77fc:	eb07 010b 	add.w	r1, r7, fp
   b7800:	e7cd      	b.n	b779e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b7802:	1be4      	subs	r4, r4, r7
   b7804:	4622      	mov	r2, r4
   b7806:	4639      	mov	r1, r7
   b7808:	4630      	mov	r0, r6
   b780a:	f7ff ff21 	bl	b7650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b780e:	1b2a      	subs	r2, r5, r4
   b7810:	1971      	adds	r1, r6, r5
   b7812:	1930      	adds	r0, r6, r4
   b7814:	e7c4      	b.n	b77a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b7816:	9500      	str	r5, [sp, #0]
   b7818:	463b      	mov	r3, r7
   b781a:	4622      	mov	r2, r4
   b781c:	4649      	mov	r1, r9
   b781e:	4640      	mov	r0, r8
   b7820:	f7ff ff4d 	bl	b76be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b7824:	e7dc      	b.n	b77e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b7826:	f1b9 0f00 	cmp.w	r9, #0
   b782a:	d0d0      	beq.n	b77ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b782c:	e7c8      	b.n	b77c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b782e:	bf00      	nop
   b7830:	000bb05b 	.word	0x000bb05b

000b7834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b7834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7838:	460e      	mov	r6, r1
   b783a:	461d      	mov	r5, r3
   b783c:	6841      	ldr	r1, [r0, #4]
   b783e:	b923      	cbnz	r3, b784a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b7840:	4291      	cmp	r1, r2
   b7842:	d221      	bcs.n	b7888 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b7844:	f04f 32ff 	mov.w	r2, #4294967295
   b7848:	e01e      	b.n	b7888 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b784a:	4291      	cmp	r1, r2
   b784c:	d9fa      	bls.n	b7844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b784e:	f8d0 8000 	ldr.w	r8, [r0]
   b7852:	7833      	ldrb	r3, [r6, #0]
   b7854:	f88d 3007 	strb.w	r3, [sp, #7]
   b7858:	eb08 0701 	add.w	r7, r8, r1
   b785c:	eb08 0002 	add.w	r0, r8, r2
   b7860:	1a89      	subs	r1, r1, r2
   b7862:	f1c5 0901 	rsb	r9, r5, #1
   b7866:	42a9      	cmp	r1, r5
   b7868:	d3ec      	bcc.n	b7844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b786a:	f10d 0207 	add.w	r2, sp, #7
   b786e:	4449      	add	r1, r9
   b7870:	f7ff fe8a 	bl	b7588 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b7874:	4604      	mov	r4, r0
   b7876:	2800      	cmp	r0, #0
   b7878:	d0e4      	beq.n	b7844 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b787a:	462a      	mov	r2, r5
   b787c:	4631      	mov	r1, r6
   b787e:	f7ff fe7e 	bl	b757e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b7882:	b928      	cbnz	r0, b7890 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b7884:	eba4 0208 	sub.w	r2, r4, r8
   b7888:	4610      	mov	r0, r2
   b788a:	b003      	add	sp, #12
   b788c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7890:	1c60      	adds	r0, r4, #1
   b7892:	1a39      	subs	r1, r7, r0
   b7894:	e7e7      	b.n	b7866 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b7896 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
   b7896:	b508      	push	{r3, lr}
   b7898:	e9d1 1300 	ldrd	r1, r3, [r1]
   b789c:	f7ff ffca 	bl	b7834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b78a0:	bd08      	pop	{r3, pc}

000b78a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b78a2:	b513      	push	{r0, r1, r4, lr}
   b78a4:	4604      	mov	r4, r0
   b78a6:	4608      	mov	r0, r1
   b78a8:	9201      	str	r2, [sp, #4]
   b78aa:	9100      	str	r1, [sp, #0]
   b78ac:	f000 ff88 	bl	b87c0 <strlen>
   b78b0:	e9dd 1200 	ldrd	r1, r2, [sp]
   b78b4:	4603      	mov	r3, r0
   b78b6:	4620      	mov	r0, r4
   b78b8:	f7ff ffbc 	bl	b7834 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b78bc:	b002      	add	sp, #8
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
   b78c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78c2:	6846      	ldr	r6, [r0, #4]
   b78c4:	9101      	str	r1, [sp, #4]
   b78c6:	4605      	mov	r5, r0
   b78c8:	4608      	mov	r0, r1
   b78ca:	f000 ff79 	bl	b87c0 <strlen>
   b78ce:	4286      	cmp	r6, r0
   b78d0:	4604      	mov	r4, r0
   b78d2:	4632      	mov	r2, r6
   b78d4:	9901      	ldr	r1, [sp, #4]
   b78d6:	bf28      	it	cs
   b78d8:	4602      	movcs	r2, r0
   b78da:	6828      	ldr	r0, [r5, #0]
   b78dc:	f7ff fe4f 	bl	b757e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b78e0:	b900      	cbnz	r0, b78e4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
   b78e2:	1b30      	subs	r0, r6, r4
   b78e4:	b002      	add	sp, #8
   b78e6:	bd70      	pop	{r4, r5, r6, pc}

000b78e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b78e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78ea:	4604      	mov	r4, r0
   b78ec:	4616      	mov	r6, r2
   b78ee:	460d      	mov	r5, r1
   b78f0:	b919      	cbnz	r1, b78fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b78f2:	b112      	cbz	r2, b78fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b78f4:	480d      	ldr	r0, [pc, #52]	; (b792c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b78f6:	f7ff fd7c 	bl	b73f2 <_ZSt19__throw_logic_errorPKc>
   b78fa:	1b73      	subs	r3, r6, r5
   b78fc:	2b0f      	cmp	r3, #15
   b78fe:	9301      	str	r3, [sp, #4]
   b7900:	d907      	bls.n	b7912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b7902:	2200      	movs	r2, #0
   b7904:	a901      	add	r1, sp, #4
   b7906:	4620      	mov	r0, r4
   b7908:	f7ff fe46 	bl	b7598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b790c:	9b01      	ldr	r3, [sp, #4]
   b790e:	6020      	str	r0, [r4, #0]
   b7910:	60a3      	str	r3, [r4, #8]
   b7912:	4632      	mov	r2, r6
   b7914:	4629      	mov	r1, r5
   b7916:	6820      	ldr	r0, [r4, #0]
   b7918:	f7ff fea6 	bl	b7668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b791c:	9b01      	ldr	r3, [sp, #4]
   b791e:	6822      	ldr	r2, [r4, #0]
   b7920:	6063      	str	r3, [r4, #4]
   b7922:	2100      	movs	r1, #0
   b7924:	54d1      	strb	r1, [r2, r3]
   b7926:	b002      	add	sp, #8
   b7928:	bd70      	pop	{r4, r5, r6, pc}
   b792a:	bf00      	nop
   b792c:	000bb074 	.word	0x000bb074

000b7930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b7930:	b508      	push	{r3, lr}
   b7932:	f04f 0300 	mov.w	r3, #0
   b7936:	f7ff ffd7 	bl	b78e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b793a:	bd08      	pop	{r3, pc}

000b793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7940:	460d      	mov	r5, r1
   b7942:	4617      	mov	r7, r2
   b7944:	4698      	mov	r8, r3
   b7946:	f100 0308 	add.w	r3, r0, #8
   b794a:	4604      	mov	r4, r0
   b794c:	6003      	str	r3, [r0, #0]
   b794e:	4639      	mov	r1, r7
   b7950:	4a09      	ldr	r2, [pc, #36]	; (b7978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b7952:	4628      	mov	r0, r5
   b7954:	f7ff fe4a 	bl	b75ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b7958:	682e      	ldr	r6, [r5, #0]
   b795a:	686a      	ldr	r2, [r5, #4]
   b795c:	1831      	adds	r1, r6, r0
   b795e:	1bd2      	subs	r2, r2, r7
   b7960:	4620      	mov	r0, r4
   b7962:	4542      	cmp	r2, r8
   b7964:	bf94      	ite	ls
   b7966:	188a      	addls	r2, r1, r2
   b7968:	eb01 0208 	addhi.w	r2, r1, r8
   b796c:	f7ff ffe0 	bl	b7930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b7970:	4620      	mov	r0, r4
   b7972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7976:	bf00      	nop
   b7978:	000bb09e 	.word	0x000bb09e

000b797c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b797c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b797e:	460d      	mov	r5, r1
   b7980:	4604      	mov	r4, r0
   b7982:	4611      	mov	r1, r2
   b7984:	4628      	mov	r0, r5
   b7986:	4a06      	ldr	r2, [pc, #24]	; (b79a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	f7ff fe2f 	bl	b75ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b798e:	9b01      	ldr	r3, [sp, #4]
   b7990:	4602      	mov	r2, r0
   b7992:	4629      	mov	r1, r5
   b7994:	4620      	mov	r0, r4
   b7996:	f7ff ffd1 	bl	b793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b799a:	4620      	mov	r0, r4
   b799c:	b003      	add	sp, #12
   b799e:	bd30      	pop	{r4, r5, pc}
   b79a0:	000bb0b9 	.word	0x000bb0b9

000b79a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b79a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b79a6:	2400      	movs	r4, #0
   b79a8:	2310      	movs	r3, #16
   b79aa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b79ae:	6803      	ldr	r3, [r0, #0]
   b79b0:	4615      	mov	r5, r2
   b79b2:	699e      	ldr	r6, [r3, #24]
   b79b4:	6812      	ldr	r2, [r2, #0]
   b79b6:	466b      	mov	r3, sp
   b79b8:	e9cd 4400 	strd	r4, r4, [sp]
   b79bc:	47b0      	blx	r6
   b79be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b79c2:	f003 0306 	and.w	r3, r3, #6
   b79c6:	2b06      	cmp	r3, #6
   b79c8:	bf03      	ittte	eq
   b79ca:	9b00      	ldreq	r3, [sp, #0]
   b79cc:	602b      	streq	r3, [r5, #0]
   b79ce:	2001      	moveq	r0, #1
   b79d0:	4620      	movne	r0, r4
   b79d2:	b004      	add	sp, #16
   b79d4:	bd70      	pop	{r4, r5, r6, pc}

000b79d6 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b79d6:	9800      	ldr	r0, [sp, #0]
   b79d8:	4290      	cmp	r0, r2
   b79da:	bf14      	ite	ne
   b79dc:	2001      	movne	r0, #1
   b79de:	2006      	moveq	r0, #6
   b79e0:	4770      	bx	lr
	...

000b79e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b79e4:	b510      	push	{r4, lr}
   b79e6:	4b03      	ldr	r3, [pc, #12]	; (b79f4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b79e8:	6003      	str	r3, [r0, #0]
   b79ea:	4604      	mov	r4, r0
   b79ec:	f000 f8cd 	bl	b7b8a <_ZNSt9type_infoD1Ev>
   b79f0:	4620      	mov	r0, r4
   b79f2:	bd10      	pop	{r4, pc}
   b79f4:	000bb108 	.word	0x000bb108

000b79f8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b79f8:	b510      	push	{r4, lr}
   b79fa:	4604      	mov	r4, r0
   b79fc:	f7ff fff2 	bl	b79e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a00:	4620      	mov	r0, r4
   b7a02:	2108      	movs	r1, #8
   b7a04:	f7fc fb4f 	bl	b40a6 <_ZdlPvj>
   b7a08:	4620      	mov	r0, r4
   b7a0a:	bd10      	pop	{r4, pc}

000b7a0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a10:	461f      	mov	r7, r3
   b7a12:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7a16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7a1a:	4598      	cmp	r8, r3
   b7a1c:	4606      	mov	r6, r0
   b7a1e:	4615      	mov	r5, r2
   b7a20:	d107      	bne.n	b7a32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a22:	9907      	ldr	r1, [sp, #28]
   b7a24:	f000 f8b4 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7a28:	b118      	cbz	r0, b7a32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a2a:	7165      	strb	r5, [r4, #5]
   b7a2c:	2000      	movs	r0, #0
   b7a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a32:	4639      	mov	r1, r7
   b7a34:	4630      	mov	r0, r6
   b7a36:	f000 f8ab 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	d0f6      	beq.n	b7a2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7a3e:	2301      	movs	r3, #1
   b7a40:	f8c4 8000 	str.w	r8, [r4]
   b7a44:	7125      	strb	r5, [r4, #4]
   b7a46:	71a3      	strb	r3, [r4, #6]
   b7a48:	e7f0      	b.n	b7a2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7a4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7a4a:	b538      	push	{r3, r4, r5, lr}
   b7a4c:	4615      	mov	r5, r2
   b7a4e:	461c      	mov	r4, r3
   b7a50:	f000 f89e 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7a54:	b120      	cbz	r0, b7a60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7a56:	2308      	movs	r3, #8
   b7a58:	60e3      	str	r3, [r4, #12]
   b7a5a:	2306      	movs	r3, #6
   b7a5c:	6025      	str	r5, [r4, #0]
   b7a5e:	7123      	strb	r3, [r4, #4]
   b7a60:	bd38      	pop	{r3, r4, r5, pc}

000b7a62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a64:	4605      	mov	r5, r0
   b7a66:	460c      	mov	r4, r1
   b7a68:	9201      	str	r2, [sp, #4]
   b7a6a:	461e      	mov	r6, r3
   b7a6c:	f000 f890 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7a70:	b950      	cbnz	r0, b7a88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a72:	2e03      	cmp	r6, #3
   b7a74:	d808      	bhi.n	b7a88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a76:	6823      	ldr	r3, [r4, #0]
   b7a78:	9a01      	ldr	r2, [sp, #4]
   b7a7a:	695b      	ldr	r3, [r3, #20]
   b7a7c:	4629      	mov	r1, r5
   b7a7e:	4620      	mov	r0, r4
   b7a80:	b002      	add	sp, #8
   b7a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a86:	4718      	bx	r3
   b7a88:	b002      	add	sp, #8
   b7a8a:	bd70      	pop	{r4, r5, r6, pc}

000b7a8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7a8c:	b510      	push	{r4, lr}
   b7a8e:	4b03      	ldr	r3, [pc, #12]	; (b7a9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7a90:	6003      	str	r3, [r0, #0]
   b7a92:	4604      	mov	r4, r0
   b7a94:	f7ff ffa6 	bl	b79e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a98:	4620      	mov	r0, r4
   b7a9a:	bd10      	pop	{r4, pc}
   b7a9c:	000bb168 	.word	0x000bb168

000b7aa0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7aa0:	b510      	push	{r4, lr}
   b7aa2:	4604      	mov	r4, r0
   b7aa4:	f7ff fff2 	bl	b7a8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	210c      	movs	r1, #12
   b7aac:	f7fc fafb 	bl	b40a6 <_ZdlPvj>
   b7ab0:	4620      	mov	r0, r4
   b7ab2:	bd10      	pop	{r4, pc}

000b7ab4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7ab6:	9f08      	ldr	r7, [sp, #32]
   b7ab8:	4297      	cmp	r7, r2
   b7aba:	4605      	mov	r5, r0
   b7abc:	460e      	mov	r6, r1
   b7abe:	4614      	mov	r4, r2
   b7ac0:	d00a      	beq.n	b7ad8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7ac2:	68a8      	ldr	r0, [r5, #8]
   b7ac4:	6802      	ldr	r2, [r0, #0]
   b7ac6:	9708      	str	r7, [sp, #32]
   b7ac8:	6a15      	ldr	r5, [r2, #32]
   b7aca:	4631      	mov	r1, r6
   b7acc:	4622      	mov	r2, r4
   b7ace:	46ac      	mov	ip, r5
   b7ad0:	b003      	add	sp, #12
   b7ad2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7ad6:	4760      	bx	ip
   b7ad8:	4619      	mov	r1, r3
   b7ada:	9301      	str	r3, [sp, #4]
   b7adc:	f000 f858 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7ae0:	9b01      	ldr	r3, [sp, #4]
   b7ae2:	2800      	cmp	r0, #0
   b7ae4:	d0ed      	beq.n	b7ac2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7ae6:	2006      	movs	r0, #6
   b7ae8:	b003      	add	sp, #12
   b7aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7aec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7aec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7af0:	460d      	mov	r5, r1
   b7af2:	4619      	mov	r1, r3
   b7af4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7af8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7afc:	4681      	mov	r9, r0
   b7afe:	4617      	mov	r7, r2
   b7b00:	4698      	mov	r8, r3
   b7b02:	f000 f845 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7b06:	b190      	cbz	r0, b7b2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7b08:	2d00      	cmp	r5, #0
   b7b0a:	6034      	str	r4, [r6, #0]
   b7b0c:	7137      	strb	r7, [r6, #4]
   b7b0e:	db09      	blt.n	b7b24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7b10:	1961      	adds	r1, r4, r5
   b7b12:	458a      	cmp	sl, r1
   b7b14:	bf0c      	ite	eq
   b7b16:	2106      	moveq	r1, #6
   b7b18:	2101      	movne	r1, #1
   b7b1a:	71b1      	strb	r1, [r6, #6]
   b7b1c:	2000      	movs	r0, #0
   b7b1e:	b001      	add	sp, #4
   b7b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b24:	3502      	adds	r5, #2
   b7b26:	d1f9      	bne.n	b7b1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b28:	2301      	movs	r3, #1
   b7b2a:	71b3      	strb	r3, [r6, #6]
   b7b2c:	e7f6      	b.n	b7b1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b2e:	4554      	cmp	r4, sl
   b7b30:	d106      	bne.n	b7b40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b32:	4659      	mov	r1, fp
   b7b34:	4648      	mov	r0, r9
   b7b36:	f000 f82b 	bl	b7b90 <_ZNKSt9type_infoeqERKS_>
   b7b3a:	b108      	cbz	r0, b7b40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b3c:	7177      	strb	r7, [r6, #5]
   b7b3e:	e7ed      	b.n	b7b1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b40:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7b44:	6803      	ldr	r3, [r0, #0]
   b7b46:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7b4a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7b4e:	69dc      	ldr	r4, [r3, #28]
   b7b50:	463a      	mov	r2, r7
   b7b52:	4643      	mov	r3, r8
   b7b54:	4629      	mov	r1, r5
   b7b56:	46a4      	mov	ip, r4
   b7b58:	b001      	add	sp, #4
   b7b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b5e:	4760      	bx	ip

000b7b60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b64:	4607      	mov	r7, r0
   b7b66:	460c      	mov	r4, r1
   b7b68:	4615      	mov	r5, r2
   b7b6a:	461e      	mov	r6, r3
   b7b6c:	f7ff ff6d 	bl	b7a4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7b70:	b948      	cbnz	r0, b7b86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7b72:	68b8      	ldr	r0, [r7, #8]
   b7b74:	6803      	ldr	r3, [r0, #0]
   b7b76:	699f      	ldr	r7, [r3, #24]
   b7b78:	462a      	mov	r2, r5
   b7b7a:	4633      	mov	r3, r6
   b7b7c:	4621      	mov	r1, r4
   b7b7e:	46bc      	mov	ip, r7
   b7b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7b84:	4760      	bx	ip
   b7b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7b8a <_ZNSt9type_infoD1Ev>:
   b7b8a:	4770      	bx	lr

000b7b8c <_ZNKSt9type_info14__is_pointer_pEv>:
   b7b8c:	2000      	movs	r0, #0
   b7b8e:	4770      	bx	lr

000b7b90 <_ZNKSt9type_infoeqERKS_>:
   b7b90:	4281      	cmp	r1, r0
   b7b92:	b508      	push	{r3, lr}
   b7b94:	d00e      	beq.n	b7bb4 <_ZNKSt9type_infoeqERKS_+0x24>
   b7b96:	6840      	ldr	r0, [r0, #4]
   b7b98:	7803      	ldrb	r3, [r0, #0]
   b7b9a:	2b2a      	cmp	r3, #42	; 0x2a
   b7b9c:	d00c      	beq.n	b7bb8 <_ZNKSt9type_infoeqERKS_+0x28>
   b7b9e:	6849      	ldr	r1, [r1, #4]
   b7ba0:	780b      	ldrb	r3, [r1, #0]
   b7ba2:	2b2a      	cmp	r3, #42	; 0x2a
   b7ba4:	bf08      	it	eq
   b7ba6:	3101      	addeq	r1, #1
   b7ba8:	f000 fe00 	bl	b87ac <strcmp>
   b7bac:	fab0 f080 	clz	r0, r0
   b7bb0:	0940      	lsrs	r0, r0, #5
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	2001      	movs	r0, #1
   b7bb6:	e7fc      	b.n	b7bb2 <_ZNKSt9type_infoeqERKS_+0x22>
   b7bb8:	2000      	movs	r0, #0
   b7bba:	e7fa      	b.n	b7bb2 <_ZNKSt9type_infoeqERKS_+0x22>

000b7bbc <__aeabi_drsub>:
   b7bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7bc0:	e002      	b.n	b7bc8 <__adddf3>
   b7bc2:	bf00      	nop

000b7bc4 <__aeabi_dsub>:
   b7bc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7bc8 <__adddf3>:
   b7bc8:	b530      	push	{r4, r5, lr}
   b7bca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7bce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7bd2:	ea94 0f05 	teq	r4, r5
   b7bd6:	bf08      	it	eq
   b7bd8:	ea90 0f02 	teqeq	r0, r2
   b7bdc:	bf1f      	itttt	ne
   b7bde:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7be2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7be6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7bea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7bee:	f000 80e2 	beq.w	b7db6 <__adddf3+0x1ee>
   b7bf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7bf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7bfa:	bfb8      	it	lt
   b7bfc:	426d      	neglt	r5, r5
   b7bfe:	dd0c      	ble.n	b7c1a <__adddf3+0x52>
   b7c00:	442c      	add	r4, r5
   b7c02:	ea80 0202 	eor.w	r2, r0, r2
   b7c06:	ea81 0303 	eor.w	r3, r1, r3
   b7c0a:	ea82 0000 	eor.w	r0, r2, r0
   b7c0e:	ea83 0101 	eor.w	r1, r3, r1
   b7c12:	ea80 0202 	eor.w	r2, r0, r2
   b7c16:	ea81 0303 	eor.w	r3, r1, r3
   b7c1a:	2d36      	cmp	r5, #54	; 0x36
   b7c1c:	bf88      	it	hi
   b7c1e:	bd30      	pophi	{r4, r5, pc}
   b7c20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7c24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7c28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7c2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7c30:	d002      	beq.n	b7c38 <__adddf3+0x70>
   b7c32:	4240      	negs	r0, r0
   b7c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7c38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7c3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7c40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7c44:	d002      	beq.n	b7c4c <__adddf3+0x84>
   b7c46:	4252      	negs	r2, r2
   b7c48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7c4c:	ea94 0f05 	teq	r4, r5
   b7c50:	f000 80a7 	beq.w	b7da2 <__adddf3+0x1da>
   b7c54:	f1a4 0401 	sub.w	r4, r4, #1
   b7c58:	f1d5 0e20 	rsbs	lr, r5, #32
   b7c5c:	db0d      	blt.n	b7c7a <__adddf3+0xb2>
   b7c5e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7c62:	fa22 f205 	lsr.w	r2, r2, r5
   b7c66:	1880      	adds	r0, r0, r2
   b7c68:	f141 0100 	adc.w	r1, r1, #0
   b7c6c:	fa03 f20e 	lsl.w	r2, r3, lr
   b7c70:	1880      	adds	r0, r0, r2
   b7c72:	fa43 f305 	asr.w	r3, r3, r5
   b7c76:	4159      	adcs	r1, r3
   b7c78:	e00e      	b.n	b7c98 <__adddf3+0xd0>
   b7c7a:	f1a5 0520 	sub.w	r5, r5, #32
   b7c7e:	f10e 0e20 	add.w	lr, lr, #32
   b7c82:	2a01      	cmp	r2, #1
   b7c84:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7c88:	bf28      	it	cs
   b7c8a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7c8e:	fa43 f305 	asr.w	r3, r3, r5
   b7c92:	18c0      	adds	r0, r0, r3
   b7c94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7c9c:	d507      	bpl.n	b7cae <__adddf3+0xe6>
   b7c9e:	f04f 0e00 	mov.w	lr, #0
   b7ca2:	f1dc 0c00 	rsbs	ip, ip, #0
   b7ca6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7caa:	eb6e 0101 	sbc.w	r1, lr, r1
   b7cae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7cb2:	d31b      	bcc.n	b7cec <__adddf3+0x124>
   b7cb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7cb8:	d30c      	bcc.n	b7cd4 <__adddf3+0x10c>
   b7cba:	0849      	lsrs	r1, r1, #1
   b7cbc:	ea5f 0030 	movs.w	r0, r0, rrx
   b7cc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7cc4:	f104 0401 	add.w	r4, r4, #1
   b7cc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7ccc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7cd0:	f080 809a 	bcs.w	b7e08 <__adddf3+0x240>
   b7cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7cd8:	bf08      	it	eq
   b7cda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7cde:	f150 0000 	adcs.w	r0, r0, #0
   b7ce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7ce6:	ea41 0105 	orr.w	r1, r1, r5
   b7cea:	bd30      	pop	{r4, r5, pc}
   b7cec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7cf0:	4140      	adcs	r0, r0
   b7cf2:	eb41 0101 	adc.w	r1, r1, r1
   b7cf6:	3c01      	subs	r4, #1
   b7cf8:	bf28      	it	cs
   b7cfa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7cfe:	d2e9      	bcs.n	b7cd4 <__adddf3+0x10c>
   b7d00:	f091 0f00 	teq	r1, #0
   b7d04:	bf04      	itt	eq
   b7d06:	4601      	moveq	r1, r0
   b7d08:	2000      	moveq	r0, #0
   b7d0a:	fab1 f381 	clz	r3, r1
   b7d0e:	bf08      	it	eq
   b7d10:	3320      	addeq	r3, #32
   b7d12:	f1a3 030b 	sub.w	r3, r3, #11
   b7d16:	f1b3 0220 	subs.w	r2, r3, #32
   b7d1a:	da0c      	bge.n	b7d36 <__adddf3+0x16e>
   b7d1c:	320c      	adds	r2, #12
   b7d1e:	dd08      	ble.n	b7d32 <__adddf3+0x16a>
   b7d20:	f102 0c14 	add.w	ip, r2, #20
   b7d24:	f1c2 020c 	rsb	r2, r2, #12
   b7d28:	fa01 f00c 	lsl.w	r0, r1, ip
   b7d2c:	fa21 f102 	lsr.w	r1, r1, r2
   b7d30:	e00c      	b.n	b7d4c <__adddf3+0x184>
   b7d32:	f102 0214 	add.w	r2, r2, #20
   b7d36:	bfd8      	it	le
   b7d38:	f1c2 0c20 	rsble	ip, r2, #32
   b7d3c:	fa01 f102 	lsl.w	r1, r1, r2
   b7d40:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7d44:	bfdc      	itt	le
   b7d46:	ea41 010c 	orrle.w	r1, r1, ip
   b7d4a:	4090      	lslle	r0, r2
   b7d4c:	1ae4      	subs	r4, r4, r3
   b7d4e:	bfa2      	ittt	ge
   b7d50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7d54:	4329      	orrge	r1, r5
   b7d56:	bd30      	popge	{r4, r5, pc}
   b7d58:	ea6f 0404 	mvn.w	r4, r4
   b7d5c:	3c1f      	subs	r4, #31
   b7d5e:	da1c      	bge.n	b7d9a <__adddf3+0x1d2>
   b7d60:	340c      	adds	r4, #12
   b7d62:	dc0e      	bgt.n	b7d82 <__adddf3+0x1ba>
   b7d64:	f104 0414 	add.w	r4, r4, #20
   b7d68:	f1c4 0220 	rsb	r2, r4, #32
   b7d6c:	fa20 f004 	lsr.w	r0, r0, r4
   b7d70:	fa01 f302 	lsl.w	r3, r1, r2
   b7d74:	ea40 0003 	orr.w	r0, r0, r3
   b7d78:	fa21 f304 	lsr.w	r3, r1, r4
   b7d7c:	ea45 0103 	orr.w	r1, r5, r3
   b7d80:	bd30      	pop	{r4, r5, pc}
   b7d82:	f1c4 040c 	rsb	r4, r4, #12
   b7d86:	f1c4 0220 	rsb	r2, r4, #32
   b7d8a:	fa20 f002 	lsr.w	r0, r0, r2
   b7d8e:	fa01 f304 	lsl.w	r3, r1, r4
   b7d92:	ea40 0003 	orr.w	r0, r0, r3
   b7d96:	4629      	mov	r1, r5
   b7d98:	bd30      	pop	{r4, r5, pc}
   b7d9a:	fa21 f004 	lsr.w	r0, r1, r4
   b7d9e:	4629      	mov	r1, r5
   b7da0:	bd30      	pop	{r4, r5, pc}
   b7da2:	f094 0f00 	teq	r4, #0
   b7da6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7daa:	bf06      	itte	eq
   b7dac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7db0:	3401      	addeq	r4, #1
   b7db2:	3d01      	subne	r5, #1
   b7db4:	e74e      	b.n	b7c54 <__adddf3+0x8c>
   b7db6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7dba:	bf18      	it	ne
   b7dbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7dc0:	d029      	beq.n	b7e16 <__adddf3+0x24e>
   b7dc2:	ea94 0f05 	teq	r4, r5
   b7dc6:	bf08      	it	eq
   b7dc8:	ea90 0f02 	teqeq	r0, r2
   b7dcc:	d005      	beq.n	b7dda <__adddf3+0x212>
   b7dce:	ea54 0c00 	orrs.w	ip, r4, r0
   b7dd2:	bf04      	itt	eq
   b7dd4:	4619      	moveq	r1, r3
   b7dd6:	4610      	moveq	r0, r2
   b7dd8:	bd30      	pop	{r4, r5, pc}
   b7dda:	ea91 0f03 	teq	r1, r3
   b7dde:	bf1e      	ittt	ne
   b7de0:	2100      	movne	r1, #0
   b7de2:	2000      	movne	r0, #0
   b7de4:	bd30      	popne	{r4, r5, pc}
   b7de6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7dea:	d105      	bne.n	b7df8 <__adddf3+0x230>
   b7dec:	0040      	lsls	r0, r0, #1
   b7dee:	4149      	adcs	r1, r1
   b7df0:	bf28      	it	cs
   b7df2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7df6:	bd30      	pop	{r4, r5, pc}
   b7df8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7dfc:	bf3c      	itt	cc
   b7dfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7e02:	bd30      	popcc	{r4, r5, pc}
   b7e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7e08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7e10:	f04f 0000 	mov.w	r0, #0
   b7e14:	bd30      	pop	{r4, r5, pc}
   b7e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7e1a:	bf1a      	itte	ne
   b7e1c:	4619      	movne	r1, r3
   b7e1e:	4610      	movne	r0, r2
   b7e20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7e24:	bf1c      	itt	ne
   b7e26:	460b      	movne	r3, r1
   b7e28:	4602      	movne	r2, r0
   b7e2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7e2e:	bf06      	itte	eq
   b7e30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7e34:	ea91 0f03 	teqeq	r1, r3
   b7e38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7e3c:	bd30      	pop	{r4, r5, pc}
   b7e3e:	bf00      	nop

000b7e40 <__aeabi_ui2d>:
   b7e40:	f090 0f00 	teq	r0, #0
   b7e44:	bf04      	itt	eq
   b7e46:	2100      	moveq	r1, #0
   b7e48:	4770      	bxeq	lr
   b7e4a:	b530      	push	{r4, r5, lr}
   b7e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e54:	f04f 0500 	mov.w	r5, #0
   b7e58:	f04f 0100 	mov.w	r1, #0
   b7e5c:	e750      	b.n	b7d00 <__adddf3+0x138>
   b7e5e:	bf00      	nop

000b7e60 <__aeabi_i2d>:
   b7e60:	f090 0f00 	teq	r0, #0
   b7e64:	bf04      	itt	eq
   b7e66:	2100      	moveq	r1, #0
   b7e68:	4770      	bxeq	lr
   b7e6a:	b530      	push	{r4, r5, lr}
   b7e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7e78:	bf48      	it	mi
   b7e7a:	4240      	negmi	r0, r0
   b7e7c:	f04f 0100 	mov.w	r1, #0
   b7e80:	e73e      	b.n	b7d00 <__adddf3+0x138>
   b7e82:	bf00      	nop

000b7e84 <__aeabi_f2d>:
   b7e84:	0042      	lsls	r2, r0, #1
   b7e86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7e8a:	ea4f 0131 	mov.w	r1, r1, rrx
   b7e8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7e92:	bf1f      	itttt	ne
   b7e94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7e9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7ea0:	4770      	bxne	lr
   b7ea2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7ea6:	bf08      	it	eq
   b7ea8:	4770      	bxeq	lr
   b7eaa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7eae:	bf04      	itt	eq
   b7eb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7eb4:	4770      	bxeq	lr
   b7eb6:	b530      	push	{r4, r5, lr}
   b7eb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7ebc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7ec4:	e71c      	b.n	b7d00 <__adddf3+0x138>
   b7ec6:	bf00      	nop

000b7ec8 <__aeabi_ul2d>:
   b7ec8:	ea50 0201 	orrs.w	r2, r0, r1
   b7ecc:	bf08      	it	eq
   b7ece:	4770      	bxeq	lr
   b7ed0:	b530      	push	{r4, r5, lr}
   b7ed2:	f04f 0500 	mov.w	r5, #0
   b7ed6:	e00a      	b.n	b7eee <__aeabi_l2d+0x16>

000b7ed8 <__aeabi_l2d>:
   b7ed8:	ea50 0201 	orrs.w	r2, r0, r1
   b7edc:	bf08      	it	eq
   b7ede:	4770      	bxeq	lr
   b7ee0:	b530      	push	{r4, r5, lr}
   b7ee2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7ee6:	d502      	bpl.n	b7eee <__aeabi_l2d+0x16>
   b7ee8:	4240      	negs	r0, r0
   b7eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7eee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7ef2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7ef6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7efa:	f43f aed8 	beq.w	b7cae <__adddf3+0xe6>
   b7efe:	f04f 0203 	mov.w	r2, #3
   b7f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f06:	bf18      	it	ne
   b7f08:	3203      	addne	r2, #3
   b7f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f0e:	bf18      	it	ne
   b7f10:	3203      	addne	r2, #3
   b7f12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7f16:	f1c2 0320 	rsb	r3, r2, #32
   b7f1a:	fa00 fc03 	lsl.w	ip, r0, r3
   b7f1e:	fa20 f002 	lsr.w	r0, r0, r2
   b7f22:	fa01 fe03 	lsl.w	lr, r1, r3
   b7f26:	ea40 000e 	orr.w	r0, r0, lr
   b7f2a:	fa21 f102 	lsr.w	r1, r1, r2
   b7f2e:	4414      	add	r4, r2
   b7f30:	e6bd      	b.n	b7cae <__adddf3+0xe6>
   b7f32:	bf00      	nop

000b7f34 <__aeabi_dmul>:
   b7f34:	b570      	push	{r4, r5, r6, lr}
   b7f36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7f3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7f3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7f42:	bf1d      	ittte	ne
   b7f44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7f48:	ea94 0f0c 	teqne	r4, ip
   b7f4c:	ea95 0f0c 	teqne	r5, ip
   b7f50:	f000 f8de 	bleq	b8110 <__aeabi_dmul+0x1dc>
   b7f54:	442c      	add	r4, r5
   b7f56:	ea81 0603 	eor.w	r6, r1, r3
   b7f5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7f5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7f62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7f66:	bf18      	it	ne
   b7f68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7f74:	d038      	beq.n	b7fe8 <__aeabi_dmul+0xb4>
   b7f76:	fba0 ce02 	umull	ip, lr, r0, r2
   b7f7a:	f04f 0500 	mov.w	r5, #0
   b7f7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7f82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7f86:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7f8a:	f04f 0600 	mov.w	r6, #0
   b7f8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7f92:	f09c 0f00 	teq	ip, #0
   b7f96:	bf18      	it	ne
   b7f98:	f04e 0e01 	orrne.w	lr, lr, #1
   b7f9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7fa0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7fa4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7fa8:	d204      	bcs.n	b7fb4 <__aeabi_dmul+0x80>
   b7faa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7fae:	416d      	adcs	r5, r5
   b7fb0:	eb46 0606 	adc.w	r6, r6, r6
   b7fb4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7fb8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7fbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7fc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7fc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7fc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7fcc:	bf88      	it	hi
   b7fce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7fd2:	d81e      	bhi.n	b8012 <__aeabi_dmul+0xde>
   b7fd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7fd8:	bf08      	it	eq
   b7fda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7fde:	f150 0000 	adcs.w	r0, r0, #0
   b7fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7fe6:	bd70      	pop	{r4, r5, r6, pc}
   b7fe8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7fec:	ea46 0101 	orr.w	r1, r6, r1
   b7ff0:	ea40 0002 	orr.w	r0, r0, r2
   b7ff4:	ea81 0103 	eor.w	r1, r1, r3
   b7ff8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7ffc:	bfc2      	ittt	gt
   b7ffe:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8002:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8006:	bd70      	popgt	{r4, r5, r6, pc}
   b8008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b800c:	f04f 0e00 	mov.w	lr, #0
   b8010:	3c01      	subs	r4, #1
   b8012:	f300 80ab 	bgt.w	b816c <__aeabi_dmul+0x238>
   b8016:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b801a:	bfde      	ittt	le
   b801c:	2000      	movle	r0, #0
   b801e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8022:	bd70      	pople	{r4, r5, r6, pc}
   b8024:	f1c4 0400 	rsb	r4, r4, #0
   b8028:	3c20      	subs	r4, #32
   b802a:	da35      	bge.n	b8098 <__aeabi_dmul+0x164>
   b802c:	340c      	adds	r4, #12
   b802e:	dc1b      	bgt.n	b8068 <__aeabi_dmul+0x134>
   b8030:	f104 0414 	add.w	r4, r4, #20
   b8034:	f1c4 0520 	rsb	r5, r4, #32
   b8038:	fa00 f305 	lsl.w	r3, r0, r5
   b803c:	fa20 f004 	lsr.w	r0, r0, r4
   b8040:	fa01 f205 	lsl.w	r2, r1, r5
   b8044:	ea40 0002 	orr.w	r0, r0, r2
   b8048:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b804c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8050:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8054:	fa21 f604 	lsr.w	r6, r1, r4
   b8058:	eb42 0106 	adc.w	r1, r2, r6
   b805c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8060:	bf08      	it	eq
   b8062:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8066:	bd70      	pop	{r4, r5, r6, pc}
   b8068:	f1c4 040c 	rsb	r4, r4, #12
   b806c:	f1c4 0520 	rsb	r5, r4, #32
   b8070:	fa00 f304 	lsl.w	r3, r0, r4
   b8074:	fa20 f005 	lsr.w	r0, r0, r5
   b8078:	fa01 f204 	lsl.w	r2, r1, r4
   b807c:	ea40 0002 	orr.w	r0, r0, r2
   b8080:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8088:	f141 0100 	adc.w	r1, r1, #0
   b808c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8090:	bf08      	it	eq
   b8092:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8096:	bd70      	pop	{r4, r5, r6, pc}
   b8098:	f1c4 0520 	rsb	r5, r4, #32
   b809c:	fa00 f205 	lsl.w	r2, r0, r5
   b80a0:	ea4e 0e02 	orr.w	lr, lr, r2
   b80a4:	fa20 f304 	lsr.w	r3, r0, r4
   b80a8:	fa01 f205 	lsl.w	r2, r1, r5
   b80ac:	ea43 0302 	orr.w	r3, r3, r2
   b80b0:	fa21 f004 	lsr.w	r0, r1, r4
   b80b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b80b8:	fa21 f204 	lsr.w	r2, r1, r4
   b80bc:	ea20 0002 	bic.w	r0, r0, r2
   b80c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b80c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b80c8:	bf08      	it	eq
   b80ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b80ce:	bd70      	pop	{r4, r5, r6, pc}
   b80d0:	f094 0f00 	teq	r4, #0
   b80d4:	d10f      	bne.n	b80f6 <__aeabi_dmul+0x1c2>
   b80d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b80da:	0040      	lsls	r0, r0, #1
   b80dc:	eb41 0101 	adc.w	r1, r1, r1
   b80e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b80e4:	bf08      	it	eq
   b80e6:	3c01      	subeq	r4, #1
   b80e8:	d0f7      	beq.n	b80da <__aeabi_dmul+0x1a6>
   b80ea:	ea41 0106 	orr.w	r1, r1, r6
   b80ee:	f095 0f00 	teq	r5, #0
   b80f2:	bf18      	it	ne
   b80f4:	4770      	bxne	lr
   b80f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b80fa:	0052      	lsls	r2, r2, #1
   b80fc:	eb43 0303 	adc.w	r3, r3, r3
   b8100:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8104:	bf08      	it	eq
   b8106:	3d01      	subeq	r5, #1
   b8108:	d0f7      	beq.n	b80fa <__aeabi_dmul+0x1c6>
   b810a:	ea43 0306 	orr.w	r3, r3, r6
   b810e:	4770      	bx	lr
   b8110:	ea94 0f0c 	teq	r4, ip
   b8114:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8118:	bf18      	it	ne
   b811a:	ea95 0f0c 	teqne	r5, ip
   b811e:	d00c      	beq.n	b813a <__aeabi_dmul+0x206>
   b8120:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8124:	bf18      	it	ne
   b8126:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b812a:	d1d1      	bne.n	b80d0 <__aeabi_dmul+0x19c>
   b812c:	ea81 0103 	eor.w	r1, r1, r3
   b8130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8134:	f04f 0000 	mov.w	r0, #0
   b8138:	bd70      	pop	{r4, r5, r6, pc}
   b813a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b813e:	bf06      	itte	eq
   b8140:	4610      	moveq	r0, r2
   b8142:	4619      	moveq	r1, r3
   b8144:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8148:	d019      	beq.n	b817e <__aeabi_dmul+0x24a>
   b814a:	ea94 0f0c 	teq	r4, ip
   b814e:	d102      	bne.n	b8156 <__aeabi_dmul+0x222>
   b8150:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8154:	d113      	bne.n	b817e <__aeabi_dmul+0x24a>
   b8156:	ea95 0f0c 	teq	r5, ip
   b815a:	d105      	bne.n	b8168 <__aeabi_dmul+0x234>
   b815c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8160:	bf1c      	itt	ne
   b8162:	4610      	movne	r0, r2
   b8164:	4619      	movne	r1, r3
   b8166:	d10a      	bne.n	b817e <__aeabi_dmul+0x24a>
   b8168:	ea81 0103 	eor.w	r1, r1, r3
   b816c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8170:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8174:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8178:	f04f 0000 	mov.w	r0, #0
   b817c:	bd70      	pop	{r4, r5, r6, pc}
   b817e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8182:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8186:	bd70      	pop	{r4, r5, r6, pc}

000b8188 <__aeabi_ddiv>:
   b8188:	b570      	push	{r4, r5, r6, lr}
   b818a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b818e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8196:	bf1d      	ittte	ne
   b8198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b819c:	ea94 0f0c 	teqne	r4, ip
   b81a0:	ea95 0f0c 	teqne	r5, ip
   b81a4:	f000 f8a7 	bleq	b82f6 <__aeabi_ddiv+0x16e>
   b81a8:	eba4 0405 	sub.w	r4, r4, r5
   b81ac:	ea81 0e03 	eor.w	lr, r1, r3
   b81b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b81b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b81b8:	f000 8088 	beq.w	b82cc <__aeabi_ddiv+0x144>
   b81bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b81c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b81c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b81c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b81cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b81d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b81d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b81d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b81dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b81e0:	429d      	cmp	r5, r3
   b81e2:	bf08      	it	eq
   b81e4:	4296      	cmpeq	r6, r2
   b81e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b81ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b81ee:	d202      	bcs.n	b81f6 <__aeabi_ddiv+0x6e>
   b81f0:	085b      	lsrs	r3, r3, #1
   b81f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b81f6:	1ab6      	subs	r6, r6, r2
   b81f8:	eb65 0503 	sbc.w	r5, r5, r3
   b81fc:	085b      	lsrs	r3, r3, #1
   b81fe:	ea4f 0232 	mov.w	r2, r2, rrx
   b8202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8206:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b820a:	ebb6 0e02 	subs.w	lr, r6, r2
   b820e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8212:	bf22      	ittt	cs
   b8214:	1ab6      	subcs	r6, r6, r2
   b8216:	4675      	movcs	r5, lr
   b8218:	ea40 000c 	orrcs.w	r0, r0, ip
   b821c:	085b      	lsrs	r3, r3, #1
   b821e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8222:	ebb6 0e02 	subs.w	lr, r6, r2
   b8226:	eb75 0e03 	sbcs.w	lr, r5, r3
   b822a:	bf22      	ittt	cs
   b822c:	1ab6      	subcs	r6, r6, r2
   b822e:	4675      	movcs	r5, lr
   b8230:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8234:	085b      	lsrs	r3, r3, #1
   b8236:	ea4f 0232 	mov.w	r2, r2, rrx
   b823a:	ebb6 0e02 	subs.w	lr, r6, r2
   b823e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8242:	bf22      	ittt	cs
   b8244:	1ab6      	subcs	r6, r6, r2
   b8246:	4675      	movcs	r5, lr
   b8248:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b824c:	085b      	lsrs	r3, r3, #1
   b824e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8252:	ebb6 0e02 	subs.w	lr, r6, r2
   b8256:	eb75 0e03 	sbcs.w	lr, r5, r3
   b825a:	bf22      	ittt	cs
   b825c:	1ab6      	subcs	r6, r6, r2
   b825e:	4675      	movcs	r5, lr
   b8260:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8264:	ea55 0e06 	orrs.w	lr, r5, r6
   b8268:	d018      	beq.n	b829c <__aeabi_ddiv+0x114>
   b826a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b826e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8272:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8276:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b827a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b827e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8282:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8286:	d1c0      	bne.n	b820a <__aeabi_ddiv+0x82>
   b8288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b828c:	d10b      	bne.n	b82a6 <__aeabi_ddiv+0x11e>
   b828e:	ea41 0100 	orr.w	r1, r1, r0
   b8292:	f04f 0000 	mov.w	r0, #0
   b8296:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b829a:	e7b6      	b.n	b820a <__aeabi_ddiv+0x82>
   b829c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b82a0:	bf04      	itt	eq
   b82a2:	4301      	orreq	r1, r0
   b82a4:	2000      	moveq	r0, #0
   b82a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b82aa:	bf88      	it	hi
   b82ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b82b0:	f63f aeaf 	bhi.w	b8012 <__aeabi_dmul+0xde>
   b82b4:	ebb5 0c03 	subs.w	ip, r5, r3
   b82b8:	bf04      	itt	eq
   b82ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   b82be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b82c2:	f150 0000 	adcs.w	r0, r0, #0
   b82c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b82ca:	bd70      	pop	{r4, r5, r6, pc}
   b82cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b82d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b82d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b82d8:	bfc2      	ittt	gt
   b82da:	ebd4 050c 	rsbsgt	r5, r4, ip
   b82de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b82e2:	bd70      	popgt	{r4, r5, r6, pc}
   b82e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b82e8:	f04f 0e00 	mov.w	lr, #0
   b82ec:	3c01      	subs	r4, #1
   b82ee:	e690      	b.n	b8012 <__aeabi_dmul+0xde>
   b82f0:	ea45 0e06 	orr.w	lr, r5, r6
   b82f4:	e68d      	b.n	b8012 <__aeabi_dmul+0xde>
   b82f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b82fa:	ea94 0f0c 	teq	r4, ip
   b82fe:	bf08      	it	eq
   b8300:	ea95 0f0c 	teqeq	r5, ip
   b8304:	f43f af3b 	beq.w	b817e <__aeabi_dmul+0x24a>
   b8308:	ea94 0f0c 	teq	r4, ip
   b830c:	d10a      	bne.n	b8324 <__aeabi_ddiv+0x19c>
   b830e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8312:	f47f af34 	bne.w	b817e <__aeabi_dmul+0x24a>
   b8316:	ea95 0f0c 	teq	r5, ip
   b831a:	f47f af25 	bne.w	b8168 <__aeabi_dmul+0x234>
   b831e:	4610      	mov	r0, r2
   b8320:	4619      	mov	r1, r3
   b8322:	e72c      	b.n	b817e <__aeabi_dmul+0x24a>
   b8324:	ea95 0f0c 	teq	r5, ip
   b8328:	d106      	bne.n	b8338 <__aeabi_ddiv+0x1b0>
   b832a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b832e:	f43f aefd 	beq.w	b812c <__aeabi_dmul+0x1f8>
   b8332:	4610      	mov	r0, r2
   b8334:	4619      	mov	r1, r3
   b8336:	e722      	b.n	b817e <__aeabi_dmul+0x24a>
   b8338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b833c:	bf18      	it	ne
   b833e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8342:	f47f aec5 	bne.w	b80d0 <__aeabi_dmul+0x19c>
   b8346:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b834a:	f47f af0d 	bne.w	b8168 <__aeabi_dmul+0x234>
   b834e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8352:	f47f aeeb 	bne.w	b812c <__aeabi_dmul+0x1f8>
   b8356:	e712      	b.n	b817e <__aeabi_dmul+0x24a>

000b8358 <__gedf2>:
   b8358:	f04f 3cff 	mov.w	ip, #4294967295
   b835c:	e006      	b.n	b836c <__cmpdf2+0x4>
   b835e:	bf00      	nop

000b8360 <__ledf2>:
   b8360:	f04f 0c01 	mov.w	ip, #1
   b8364:	e002      	b.n	b836c <__cmpdf2+0x4>
   b8366:	bf00      	nop

000b8368 <__cmpdf2>:
   b8368:	f04f 0c01 	mov.w	ip, #1
   b836c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8370:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b837c:	bf18      	it	ne
   b837e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8382:	d01b      	beq.n	b83bc <__cmpdf2+0x54>
   b8384:	b001      	add	sp, #4
   b8386:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b838a:	bf0c      	ite	eq
   b838c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8390:	ea91 0f03 	teqne	r1, r3
   b8394:	bf02      	ittt	eq
   b8396:	ea90 0f02 	teqeq	r0, r2
   b839a:	2000      	moveq	r0, #0
   b839c:	4770      	bxeq	lr
   b839e:	f110 0f00 	cmn.w	r0, #0
   b83a2:	ea91 0f03 	teq	r1, r3
   b83a6:	bf58      	it	pl
   b83a8:	4299      	cmppl	r1, r3
   b83aa:	bf08      	it	eq
   b83ac:	4290      	cmpeq	r0, r2
   b83ae:	bf2c      	ite	cs
   b83b0:	17d8      	asrcs	r0, r3, #31
   b83b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b83b6:	f040 0001 	orr.w	r0, r0, #1
   b83ba:	4770      	bx	lr
   b83bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b83c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b83c4:	d102      	bne.n	b83cc <__cmpdf2+0x64>
   b83c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b83ca:	d107      	bne.n	b83dc <__cmpdf2+0x74>
   b83cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b83d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b83d4:	d1d6      	bne.n	b8384 <__cmpdf2+0x1c>
   b83d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b83da:	d0d3      	beq.n	b8384 <__cmpdf2+0x1c>
   b83dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   b83e0:	4770      	bx	lr
   b83e2:	bf00      	nop

000b83e4 <__aeabi_cdrcmple>:
   b83e4:	4684      	mov	ip, r0
   b83e6:	4610      	mov	r0, r2
   b83e8:	4662      	mov	r2, ip
   b83ea:	468c      	mov	ip, r1
   b83ec:	4619      	mov	r1, r3
   b83ee:	4663      	mov	r3, ip
   b83f0:	e000      	b.n	b83f4 <__aeabi_cdcmpeq>
   b83f2:	bf00      	nop

000b83f4 <__aeabi_cdcmpeq>:
   b83f4:	b501      	push	{r0, lr}
   b83f6:	f7ff ffb7 	bl	b8368 <__cmpdf2>
   b83fa:	2800      	cmp	r0, #0
   b83fc:	bf48      	it	mi
   b83fe:	f110 0f00 	cmnmi.w	r0, #0
   b8402:	bd01      	pop	{r0, pc}

000b8404 <__aeabi_dcmpeq>:
   b8404:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8408:	f7ff fff4 	bl	b83f4 <__aeabi_cdcmpeq>
   b840c:	bf0c      	ite	eq
   b840e:	2001      	moveq	r0, #1
   b8410:	2000      	movne	r0, #0
   b8412:	f85d fb08 	ldr.w	pc, [sp], #8
   b8416:	bf00      	nop

000b8418 <__aeabi_dcmplt>:
   b8418:	f84d ed08 	str.w	lr, [sp, #-8]!
   b841c:	f7ff ffea 	bl	b83f4 <__aeabi_cdcmpeq>
   b8420:	bf34      	ite	cc
   b8422:	2001      	movcc	r0, #1
   b8424:	2000      	movcs	r0, #0
   b8426:	f85d fb08 	ldr.w	pc, [sp], #8
   b842a:	bf00      	nop

000b842c <__aeabi_dcmple>:
   b842c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8430:	f7ff ffe0 	bl	b83f4 <__aeabi_cdcmpeq>
   b8434:	bf94      	ite	ls
   b8436:	2001      	movls	r0, #1
   b8438:	2000      	movhi	r0, #0
   b843a:	f85d fb08 	ldr.w	pc, [sp], #8
   b843e:	bf00      	nop

000b8440 <__aeabi_dcmpge>:
   b8440:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8444:	f7ff ffce 	bl	b83e4 <__aeabi_cdrcmple>
   b8448:	bf94      	ite	ls
   b844a:	2001      	movls	r0, #1
   b844c:	2000      	movhi	r0, #0
   b844e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8452:	bf00      	nop

000b8454 <__aeabi_dcmpgt>:
   b8454:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8458:	f7ff ffc4 	bl	b83e4 <__aeabi_cdrcmple>
   b845c:	bf34      	ite	cc
   b845e:	2001      	movcc	r0, #1
   b8460:	2000      	movcs	r0, #0
   b8462:	f85d fb08 	ldr.w	pc, [sp], #8
   b8466:	bf00      	nop

000b8468 <__aeabi_dcmpun>:
   b8468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b846c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8470:	d102      	bne.n	b8478 <__aeabi_dcmpun+0x10>
   b8472:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8476:	d10a      	bne.n	b848e <__aeabi_dcmpun+0x26>
   b8478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b847c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8480:	d102      	bne.n	b8488 <__aeabi_dcmpun+0x20>
   b8482:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8486:	d102      	bne.n	b848e <__aeabi_dcmpun+0x26>
   b8488:	f04f 0000 	mov.w	r0, #0
   b848c:	4770      	bx	lr
   b848e:	f04f 0001 	mov.w	r0, #1
   b8492:	4770      	bx	lr

000b8494 <__aeabi_d2iz>:
   b8494:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8498:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b849c:	d215      	bcs.n	b84ca <__aeabi_d2iz+0x36>
   b849e:	d511      	bpl.n	b84c4 <__aeabi_d2iz+0x30>
   b84a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b84a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b84a8:	d912      	bls.n	b84d0 <__aeabi_d2iz+0x3c>
   b84aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b84ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b84b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b84b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b84ba:	fa23 f002 	lsr.w	r0, r3, r2
   b84be:	bf18      	it	ne
   b84c0:	4240      	negne	r0, r0
   b84c2:	4770      	bx	lr
   b84c4:	f04f 0000 	mov.w	r0, #0
   b84c8:	4770      	bx	lr
   b84ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b84ce:	d105      	bne.n	b84dc <__aeabi_d2iz+0x48>
   b84d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b84d4:	bf08      	it	eq
   b84d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b84da:	4770      	bx	lr
   b84dc:	f04f 0000 	mov.w	r0, #0
   b84e0:	4770      	bx	lr
   b84e2:	bf00      	nop

000b84e4 <__aeabi_d2uiz>:
   b84e4:	004a      	lsls	r2, r1, #1
   b84e6:	d211      	bcs.n	b850c <__aeabi_d2uiz+0x28>
   b84e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b84ec:	d211      	bcs.n	b8512 <__aeabi_d2uiz+0x2e>
   b84ee:	d50d      	bpl.n	b850c <__aeabi_d2uiz+0x28>
   b84f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b84f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b84f8:	d40e      	bmi.n	b8518 <__aeabi_d2uiz+0x34>
   b84fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b84fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8502:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8506:	fa23 f002 	lsr.w	r0, r3, r2
   b850a:	4770      	bx	lr
   b850c:	f04f 0000 	mov.w	r0, #0
   b8510:	4770      	bx	lr
   b8512:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8516:	d102      	bne.n	b851e <__aeabi_d2uiz+0x3a>
   b8518:	f04f 30ff 	mov.w	r0, #4294967295
   b851c:	4770      	bx	lr
   b851e:	f04f 0000 	mov.w	r0, #0
   b8522:	4770      	bx	lr

000b8524 <__aeabi_d2f>:
   b8524:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8528:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b852c:	bf24      	itt	cs
   b852e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8532:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8536:	d90d      	bls.n	b8554 <__aeabi_d2f+0x30>
   b8538:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b853c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8540:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8544:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8548:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b854c:	bf08      	it	eq
   b854e:	f020 0001 	biceq.w	r0, r0, #1
   b8552:	4770      	bx	lr
   b8554:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8558:	d121      	bne.n	b859e <__aeabi_d2f+0x7a>
   b855a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b855e:	bfbc      	itt	lt
   b8560:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8564:	4770      	bxlt	lr
   b8566:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b856a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b856e:	f1c2 0218 	rsb	r2, r2, #24
   b8572:	f1c2 0c20 	rsb	ip, r2, #32
   b8576:	fa10 f30c 	lsls.w	r3, r0, ip
   b857a:	fa20 f002 	lsr.w	r0, r0, r2
   b857e:	bf18      	it	ne
   b8580:	f040 0001 	orrne.w	r0, r0, #1
   b8584:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8588:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b858c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8590:	ea40 000c 	orr.w	r0, r0, ip
   b8594:	fa23 f302 	lsr.w	r3, r3, r2
   b8598:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b859c:	e7cc      	b.n	b8538 <__aeabi_d2f+0x14>
   b859e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b85a2:	d107      	bne.n	b85b4 <__aeabi_d2f+0x90>
   b85a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b85a8:	bf1e      	ittt	ne
   b85aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b85ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b85b2:	4770      	bxne	lr
   b85b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b85b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b85bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b85c0:	4770      	bx	lr
   b85c2:	bf00      	nop

000b85c4 <__aeabi_d2ulz>:
   b85c4:	b5d0      	push	{r4, r6, r7, lr}
   b85c6:	4b0c      	ldr	r3, [pc, #48]	; (b85f8 <__aeabi_d2ulz+0x34>)
   b85c8:	2200      	movs	r2, #0
   b85ca:	4606      	mov	r6, r0
   b85cc:	460f      	mov	r7, r1
   b85ce:	f7ff fcb1 	bl	b7f34 <__aeabi_dmul>
   b85d2:	f7ff ff87 	bl	b84e4 <__aeabi_d2uiz>
   b85d6:	4604      	mov	r4, r0
   b85d8:	f7ff fc32 	bl	b7e40 <__aeabi_ui2d>
   b85dc:	4b07      	ldr	r3, [pc, #28]	; (b85fc <__aeabi_d2ulz+0x38>)
   b85de:	2200      	movs	r2, #0
   b85e0:	f7ff fca8 	bl	b7f34 <__aeabi_dmul>
   b85e4:	4602      	mov	r2, r0
   b85e6:	460b      	mov	r3, r1
   b85e8:	4630      	mov	r0, r6
   b85ea:	4639      	mov	r1, r7
   b85ec:	f7ff faea 	bl	b7bc4 <__aeabi_dsub>
   b85f0:	f7ff ff78 	bl	b84e4 <__aeabi_d2uiz>
   b85f4:	4621      	mov	r1, r4
   b85f6:	bdd0      	pop	{r4, r6, r7, pc}
   b85f8:	3df00000 	.word	0x3df00000
   b85fc:	41f00000 	.word	0x41f00000

000b8600 <atexit>:
   b8600:	2300      	movs	r3, #0
   b8602:	4601      	mov	r1, r0
   b8604:	461a      	mov	r2, r3
   b8606:	4618      	mov	r0, r3
   b8608:	f000 bfc4 	b.w	b9594 <__register_exitproc>

000b860c <atof>:
   b860c:	2100      	movs	r1, #0
   b860e:	f000 bf29 	b.w	b9464 <strtod>

000b8612 <atoi>:
   b8612:	220a      	movs	r2, #10
   b8614:	2100      	movs	r1, #0
   b8616:	f000 bfb3 	b.w	b9580 <strtol>

000b861a <atol>:
   b861a:	220a      	movs	r2, #10
   b861c:	2100      	movs	r1, #0
   b861e:	f000 bfaf 	b.w	b9580 <strtol>
	...

000b8630 <memchr>:
   b8630:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b8634:	2a10      	cmp	r2, #16
   b8636:	db2b      	blt.n	b8690 <memchr+0x60>
   b8638:	f010 0f07 	tst.w	r0, #7
   b863c:	d008      	beq.n	b8650 <memchr+0x20>
   b863e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b8642:	3a01      	subs	r2, #1
   b8644:	428b      	cmp	r3, r1
   b8646:	d02d      	beq.n	b86a4 <memchr+0x74>
   b8648:	f010 0f07 	tst.w	r0, #7
   b864c:	b342      	cbz	r2, b86a0 <memchr+0x70>
   b864e:	d1f6      	bne.n	b863e <memchr+0xe>
   b8650:	b4f0      	push	{r4, r5, r6, r7}
   b8652:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b8656:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b865a:	f022 0407 	bic.w	r4, r2, #7
   b865e:	f07f 0700 	mvns.w	r7, #0
   b8662:	2300      	movs	r3, #0
   b8664:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b8668:	3c08      	subs	r4, #8
   b866a:	ea85 0501 	eor.w	r5, r5, r1
   b866e:	ea86 0601 	eor.w	r6, r6, r1
   b8672:	fa85 f547 	uadd8	r5, r5, r7
   b8676:	faa3 f587 	sel	r5, r3, r7
   b867a:	fa86 f647 	uadd8	r6, r6, r7
   b867e:	faa5 f687 	sel	r6, r5, r7
   b8682:	b98e      	cbnz	r6, b86a8 <memchr+0x78>
   b8684:	d1ee      	bne.n	b8664 <memchr+0x34>
   b8686:	bcf0      	pop	{r4, r5, r6, r7}
   b8688:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b868c:	f002 0207 	and.w	r2, r2, #7
   b8690:	b132      	cbz	r2, b86a0 <memchr+0x70>
   b8692:	f810 3b01 	ldrb.w	r3, [r0], #1
   b8696:	3a01      	subs	r2, #1
   b8698:	ea83 0301 	eor.w	r3, r3, r1
   b869c:	b113      	cbz	r3, b86a4 <memchr+0x74>
   b869e:	d1f8      	bne.n	b8692 <memchr+0x62>
   b86a0:	2000      	movs	r0, #0
   b86a2:	4770      	bx	lr
   b86a4:	3801      	subs	r0, #1
   b86a6:	4770      	bx	lr
   b86a8:	2d00      	cmp	r5, #0
   b86aa:	bf06      	itte	eq
   b86ac:	4635      	moveq	r5, r6
   b86ae:	3803      	subeq	r0, #3
   b86b0:	3807      	subne	r0, #7
   b86b2:	f015 0f01 	tst.w	r5, #1
   b86b6:	d107      	bne.n	b86c8 <memchr+0x98>
   b86b8:	3001      	adds	r0, #1
   b86ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   b86be:	bf02      	ittt	eq
   b86c0:	3001      	addeq	r0, #1
   b86c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b86c6:	3001      	addeq	r0, #1
   b86c8:	bcf0      	pop	{r4, r5, r6, r7}
   b86ca:	3801      	subs	r0, #1
   b86cc:	4770      	bx	lr
   b86ce:	bf00      	nop

000b86d0 <memcmp>:
   b86d0:	b510      	push	{r4, lr}
   b86d2:	3901      	subs	r1, #1
   b86d4:	4402      	add	r2, r0
   b86d6:	4290      	cmp	r0, r2
   b86d8:	d101      	bne.n	b86de <memcmp+0xe>
   b86da:	2000      	movs	r0, #0
   b86dc:	e005      	b.n	b86ea <memcmp+0x1a>
   b86de:	7803      	ldrb	r3, [r0, #0]
   b86e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b86e4:	42a3      	cmp	r3, r4
   b86e6:	d001      	beq.n	b86ec <memcmp+0x1c>
   b86e8:	1b18      	subs	r0, r3, r4
   b86ea:	bd10      	pop	{r4, pc}
   b86ec:	3001      	adds	r0, #1
   b86ee:	e7f2      	b.n	b86d6 <memcmp+0x6>

000b86f0 <memcpy>:
   b86f0:	440a      	add	r2, r1
   b86f2:	4291      	cmp	r1, r2
   b86f4:	f100 33ff 	add.w	r3, r0, #4294967295
   b86f8:	d100      	bne.n	b86fc <memcpy+0xc>
   b86fa:	4770      	bx	lr
   b86fc:	b510      	push	{r4, lr}
   b86fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8702:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8706:	4291      	cmp	r1, r2
   b8708:	d1f9      	bne.n	b86fe <memcpy+0xe>
   b870a:	bd10      	pop	{r4, pc}

000b870c <memmove>:
   b870c:	4288      	cmp	r0, r1
   b870e:	b510      	push	{r4, lr}
   b8710:	eb01 0402 	add.w	r4, r1, r2
   b8714:	d902      	bls.n	b871c <memmove+0x10>
   b8716:	4284      	cmp	r4, r0
   b8718:	4623      	mov	r3, r4
   b871a:	d807      	bhi.n	b872c <memmove+0x20>
   b871c:	1e43      	subs	r3, r0, #1
   b871e:	42a1      	cmp	r1, r4
   b8720:	d008      	beq.n	b8734 <memmove+0x28>
   b8722:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8726:	f803 2f01 	strb.w	r2, [r3, #1]!
   b872a:	e7f8      	b.n	b871e <memmove+0x12>
   b872c:	4402      	add	r2, r0
   b872e:	4601      	mov	r1, r0
   b8730:	428a      	cmp	r2, r1
   b8732:	d100      	bne.n	b8736 <memmove+0x2a>
   b8734:	bd10      	pop	{r4, pc}
   b8736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b873a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b873e:	e7f7      	b.n	b8730 <memmove+0x24>

000b8740 <memset>:
   b8740:	4402      	add	r2, r0
   b8742:	4603      	mov	r3, r0
   b8744:	4293      	cmp	r3, r2
   b8746:	d100      	bne.n	b874a <memset+0xa>
   b8748:	4770      	bx	lr
   b874a:	f803 1b01 	strb.w	r1, [r3], #1
   b874e:	e7f9      	b.n	b8744 <memset+0x4>

000b8750 <srand>:
   b8750:	b538      	push	{r3, r4, r5, lr}
   b8752:	4b10      	ldr	r3, [pc, #64]	; (b8794 <srand+0x44>)
   b8754:	681d      	ldr	r5, [r3, #0]
   b8756:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8758:	4604      	mov	r4, r0
   b875a:	b9b3      	cbnz	r3, b878a <srand+0x3a>
   b875c:	2018      	movs	r0, #24
   b875e:	f7fd fc39 	bl	b5fd4 <malloc>
   b8762:	4602      	mov	r2, r0
   b8764:	63a8      	str	r0, [r5, #56]	; 0x38
   b8766:	b920      	cbnz	r0, b8772 <srand+0x22>
   b8768:	4b0b      	ldr	r3, [pc, #44]	; (b8798 <srand+0x48>)
   b876a:	480c      	ldr	r0, [pc, #48]	; (b879c <srand+0x4c>)
   b876c:	2142      	movs	r1, #66	; 0x42
   b876e:	f7fd fc69 	bl	b6044 <__assert_func>
   b8772:	490b      	ldr	r1, [pc, #44]	; (b87a0 <srand+0x50>)
   b8774:	4b0b      	ldr	r3, [pc, #44]	; (b87a4 <srand+0x54>)
   b8776:	e9c0 1300 	strd	r1, r3, [r0]
   b877a:	4b0b      	ldr	r3, [pc, #44]	; (b87a8 <srand+0x58>)
   b877c:	6083      	str	r3, [r0, #8]
   b877e:	230b      	movs	r3, #11
   b8780:	8183      	strh	r3, [r0, #12]
   b8782:	2100      	movs	r1, #0
   b8784:	2001      	movs	r0, #1
   b8786:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b878a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b878c:	2200      	movs	r2, #0
   b878e:	611c      	str	r4, [r3, #16]
   b8790:	615a      	str	r2, [r3, #20]
   b8792:	bd38      	pop	{r3, r4, r5, pc}
   b8794:	2003e148 	.word	0x2003e148
   b8798:	000bb1a1 	.word	0x000bb1a1
   b879c:	000bb1b8 	.word	0x000bb1b8
   b87a0:	abcd330e 	.word	0xabcd330e
   b87a4:	e66d1234 	.word	0xe66d1234
   b87a8:	0005deec 	.word	0x0005deec

000b87ac <strcmp>:
   b87ac:	f810 2b01 	ldrb.w	r2, [r0], #1
   b87b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b87b4:	2a01      	cmp	r2, #1
   b87b6:	bf28      	it	cs
   b87b8:	429a      	cmpcs	r2, r3
   b87ba:	d0f7      	beq.n	b87ac <strcmp>
   b87bc:	1ad0      	subs	r0, r2, r3
   b87be:	4770      	bx	lr

000b87c0 <strlen>:
   b87c0:	4603      	mov	r3, r0
   b87c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b87c6:	2a00      	cmp	r2, #0
   b87c8:	d1fb      	bne.n	b87c2 <strlen+0x2>
   b87ca:	1a18      	subs	r0, r3, r0
   b87cc:	3801      	subs	r0, #1
   b87ce:	4770      	bx	lr

000b87d0 <strncmp>:
   b87d0:	b510      	push	{r4, lr}
   b87d2:	b17a      	cbz	r2, b87f4 <strncmp+0x24>
   b87d4:	4603      	mov	r3, r0
   b87d6:	3901      	subs	r1, #1
   b87d8:	1884      	adds	r4, r0, r2
   b87da:	f813 0b01 	ldrb.w	r0, [r3], #1
   b87de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b87e2:	4290      	cmp	r0, r2
   b87e4:	d101      	bne.n	b87ea <strncmp+0x1a>
   b87e6:	42a3      	cmp	r3, r4
   b87e8:	d101      	bne.n	b87ee <strncmp+0x1e>
   b87ea:	1a80      	subs	r0, r0, r2
   b87ec:	bd10      	pop	{r4, pc}
   b87ee:	2800      	cmp	r0, #0
   b87f0:	d1f3      	bne.n	b87da <strncmp+0xa>
   b87f2:	e7fa      	b.n	b87ea <strncmp+0x1a>
   b87f4:	4610      	mov	r0, r2
   b87f6:	e7f9      	b.n	b87ec <strncmp+0x1c>

000b87f8 <strncpy>:
   b87f8:	b510      	push	{r4, lr}
   b87fa:	3901      	subs	r1, #1
   b87fc:	4603      	mov	r3, r0
   b87fe:	b132      	cbz	r2, b880e <strncpy+0x16>
   b8800:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8804:	f803 4b01 	strb.w	r4, [r3], #1
   b8808:	3a01      	subs	r2, #1
   b880a:	2c00      	cmp	r4, #0
   b880c:	d1f7      	bne.n	b87fe <strncpy+0x6>
   b880e:	441a      	add	r2, r3
   b8810:	2100      	movs	r1, #0
   b8812:	4293      	cmp	r3, r2
   b8814:	d100      	bne.n	b8818 <strncpy+0x20>
   b8816:	bd10      	pop	{r4, pc}
   b8818:	f803 1b01 	strb.w	r1, [r3], #1
   b881c:	e7f9      	b.n	b8812 <strncpy+0x1a>

000b881e <sulp>:
   b881e:	b570      	push	{r4, r5, r6, lr}
   b8820:	4604      	mov	r4, r0
   b8822:	460d      	mov	r5, r1
   b8824:	ec45 4b10 	vmov	d0, r4, r5
   b8828:	4616      	mov	r6, r2
   b882a:	f001 fe0d 	bl	ba448 <__ulp>
   b882e:	ec51 0b10 	vmov	r0, r1, d0
   b8832:	b17e      	cbz	r6, b8854 <sulp+0x36>
   b8834:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8838:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b883c:	2b00      	cmp	r3, #0
   b883e:	dd09      	ble.n	b8854 <sulp+0x36>
   b8840:	051b      	lsls	r3, r3, #20
   b8842:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8846:	2400      	movs	r4, #0
   b8848:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b884c:	4622      	mov	r2, r4
   b884e:	462b      	mov	r3, r5
   b8850:	f7ff fb70 	bl	b7f34 <__aeabi_dmul>
   b8854:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8858 <_strtod_l>:
   b8858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b885c:	ed2d 8b02 	vpush	{d8}
   b8860:	b09d      	sub	sp, #116	; 0x74
   b8862:	461f      	mov	r7, r3
   b8864:	2300      	movs	r3, #0
   b8866:	9318      	str	r3, [sp, #96]	; 0x60
   b8868:	4ba2      	ldr	r3, [pc, #648]	; (b8af4 <_strtod_l+0x29c>)
   b886a:	9213      	str	r2, [sp, #76]	; 0x4c
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	9305      	str	r3, [sp, #20]
   b8870:	4604      	mov	r4, r0
   b8872:	4618      	mov	r0, r3
   b8874:	4688      	mov	r8, r1
   b8876:	f7ff ffa3 	bl	b87c0 <strlen>
   b887a:	f04f 0a00 	mov.w	sl, #0
   b887e:	4605      	mov	r5, r0
   b8880:	f04f 0b00 	mov.w	fp, #0
   b8884:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b888a:	781a      	ldrb	r2, [r3, #0]
   b888c:	2a2b      	cmp	r2, #43	; 0x2b
   b888e:	d04e      	beq.n	b892e <_strtod_l+0xd6>
   b8890:	d83b      	bhi.n	b890a <_strtod_l+0xb2>
   b8892:	2a0d      	cmp	r2, #13
   b8894:	d834      	bhi.n	b8900 <_strtod_l+0xa8>
   b8896:	2a08      	cmp	r2, #8
   b8898:	d834      	bhi.n	b8904 <_strtod_l+0xac>
   b889a:	2a00      	cmp	r2, #0
   b889c:	d03e      	beq.n	b891c <_strtod_l+0xc4>
   b889e:	2300      	movs	r3, #0
   b88a0:	930a      	str	r3, [sp, #40]	; 0x28
   b88a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b88a4:	7833      	ldrb	r3, [r6, #0]
   b88a6:	2b30      	cmp	r3, #48	; 0x30
   b88a8:	f040 80b0 	bne.w	b8a0c <_strtod_l+0x1b4>
   b88ac:	7873      	ldrb	r3, [r6, #1]
   b88ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b88b2:	2b58      	cmp	r3, #88	; 0x58
   b88b4:	d168      	bne.n	b8988 <_strtod_l+0x130>
   b88b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	ab18      	add	r3, sp, #96	; 0x60
   b88bc:	9702      	str	r7, [sp, #8]
   b88be:	9300      	str	r3, [sp, #0]
   b88c0:	4a8d      	ldr	r2, [pc, #564]	; (b8af8 <_strtod_l+0x2a0>)
   b88c2:	ab19      	add	r3, sp, #100	; 0x64
   b88c4:	a917      	add	r1, sp, #92	; 0x5c
   b88c6:	4620      	mov	r0, r4
   b88c8:	f000 ff2e 	bl	b9728 <__gethex>
   b88cc:	f010 0707 	ands.w	r7, r0, #7
   b88d0:	4605      	mov	r5, r0
   b88d2:	d005      	beq.n	b88e0 <_strtod_l+0x88>
   b88d4:	2f06      	cmp	r7, #6
   b88d6:	d12c      	bne.n	b8932 <_strtod_l+0xda>
   b88d8:	3601      	adds	r6, #1
   b88da:	2300      	movs	r3, #0
   b88dc:	9617      	str	r6, [sp, #92]	; 0x5c
   b88de:	930a      	str	r3, [sp, #40]	; 0x28
   b88e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b88e2:	2b00      	cmp	r3, #0
   b88e4:	f040 8590 	bne.w	b9408 <_strtod_l+0xbb0>
   b88e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b88ea:	b1eb      	cbz	r3, b8928 <_strtod_l+0xd0>
   b88ec:	4652      	mov	r2, sl
   b88ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b88f2:	ec43 2b10 	vmov	d0, r2, r3
   b88f6:	b01d      	add	sp, #116	; 0x74
   b88f8:	ecbd 8b02 	vpop	{d8}
   b88fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8900:	2a20      	cmp	r2, #32
   b8902:	d1cc      	bne.n	b889e <_strtod_l+0x46>
   b8904:	3301      	adds	r3, #1
   b8906:	9317      	str	r3, [sp, #92]	; 0x5c
   b8908:	e7be      	b.n	b8888 <_strtod_l+0x30>
   b890a:	2a2d      	cmp	r2, #45	; 0x2d
   b890c:	d1c7      	bne.n	b889e <_strtod_l+0x46>
   b890e:	2201      	movs	r2, #1
   b8910:	920a      	str	r2, [sp, #40]	; 0x28
   b8912:	1c5a      	adds	r2, r3, #1
   b8914:	9217      	str	r2, [sp, #92]	; 0x5c
   b8916:	785b      	ldrb	r3, [r3, #1]
   b8918:	2b00      	cmp	r3, #0
   b891a:	d1c2      	bne.n	b88a2 <_strtod_l+0x4a>
   b891c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b891e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8922:	2b00      	cmp	r3, #0
   b8924:	f040 856e 	bne.w	b9404 <_strtod_l+0xbac>
   b8928:	4652      	mov	r2, sl
   b892a:	465b      	mov	r3, fp
   b892c:	e7e1      	b.n	b88f2 <_strtod_l+0x9a>
   b892e:	2200      	movs	r2, #0
   b8930:	e7ee      	b.n	b8910 <_strtod_l+0xb8>
   b8932:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8934:	b13a      	cbz	r2, b8946 <_strtod_l+0xee>
   b8936:	2135      	movs	r1, #53	; 0x35
   b8938:	a81a      	add	r0, sp, #104	; 0x68
   b893a:	f001 fe90 	bl	ba65e <__copybits>
   b893e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8940:	4620      	mov	r0, r4
   b8942:	f001 fa4f 	bl	b9de4 <_Bfree>
   b8946:	3f01      	subs	r7, #1
   b8948:	2f04      	cmp	r7, #4
   b894a:	d806      	bhi.n	b895a <_strtod_l+0x102>
   b894c:	e8df f007 	tbb	[pc, r7]
   b8950:	1714030a 	.word	0x1714030a
   b8954:	0a          	.byte	0x0a
   b8955:	00          	.byte	0x00
   b8956:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b895a:	0728      	lsls	r0, r5, #28
   b895c:	d5c0      	bpl.n	b88e0 <_strtod_l+0x88>
   b895e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8962:	e7bd      	b.n	b88e0 <_strtod_l+0x88>
   b8964:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8968:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b896a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b896e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8972:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8976:	e7f0      	b.n	b895a <_strtod_l+0x102>
   b8978:	f8df b180 	ldr.w	fp, [pc, #384]	; b8afc <_strtod_l+0x2a4>
   b897c:	e7ed      	b.n	b895a <_strtod_l+0x102>
   b897e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b8982:	f04f 3aff 	mov.w	sl, #4294967295
   b8986:	e7e8      	b.n	b895a <_strtod_l+0x102>
   b8988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b898a:	1c5a      	adds	r2, r3, #1
   b898c:	9217      	str	r2, [sp, #92]	; 0x5c
   b898e:	785b      	ldrb	r3, [r3, #1]
   b8990:	2b30      	cmp	r3, #48	; 0x30
   b8992:	d0f9      	beq.n	b8988 <_strtod_l+0x130>
   b8994:	2b00      	cmp	r3, #0
   b8996:	d0a3      	beq.n	b88e0 <_strtod_l+0x88>
   b8998:	2301      	movs	r3, #1
   b899a:	f04f 0900 	mov.w	r9, #0
   b899e:	9304      	str	r3, [sp, #16]
   b89a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b89a2:	9308      	str	r3, [sp, #32]
   b89a4:	f8cd 901c 	str.w	r9, [sp, #28]
   b89a8:	464f      	mov	r7, r9
   b89aa:	220a      	movs	r2, #10
   b89ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b89ae:	7806      	ldrb	r6, [r0, #0]
   b89b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b89b4:	b2d9      	uxtb	r1, r3
   b89b6:	2909      	cmp	r1, #9
   b89b8:	d92a      	bls.n	b8a10 <_strtod_l+0x1b8>
   b89ba:	9905      	ldr	r1, [sp, #20]
   b89bc:	462a      	mov	r2, r5
   b89be:	f7ff ff07 	bl	b87d0 <strncmp>
   b89c2:	b398      	cbz	r0, b8a2c <_strtod_l+0x1d4>
   b89c4:	2000      	movs	r0, #0
   b89c6:	4632      	mov	r2, r6
   b89c8:	463d      	mov	r5, r7
   b89ca:	9005      	str	r0, [sp, #20]
   b89cc:	4603      	mov	r3, r0
   b89ce:	2a65      	cmp	r2, #101	; 0x65
   b89d0:	d001      	beq.n	b89d6 <_strtod_l+0x17e>
   b89d2:	2a45      	cmp	r2, #69	; 0x45
   b89d4:	d118      	bne.n	b8a08 <_strtod_l+0x1b0>
   b89d6:	b91d      	cbnz	r5, b89e0 <_strtod_l+0x188>
   b89d8:	9a04      	ldr	r2, [sp, #16]
   b89da:	4302      	orrs	r2, r0
   b89dc:	d09e      	beq.n	b891c <_strtod_l+0xc4>
   b89de:	2500      	movs	r5, #0
   b89e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b89e4:	f108 0201 	add.w	r2, r8, #1
   b89e8:	9217      	str	r2, [sp, #92]	; 0x5c
   b89ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   b89ee:	2a2b      	cmp	r2, #43	; 0x2b
   b89f0:	d075      	beq.n	b8ade <_strtod_l+0x286>
   b89f2:	2a2d      	cmp	r2, #45	; 0x2d
   b89f4:	d07b      	beq.n	b8aee <_strtod_l+0x296>
   b89f6:	f04f 0c00 	mov.w	ip, #0
   b89fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b89fe:	2909      	cmp	r1, #9
   b8a00:	f240 8082 	bls.w	b8b08 <_strtod_l+0x2b0>
   b8a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8a08:	2600      	movs	r6, #0
   b8a0a:	e09d      	b.n	b8b48 <_strtod_l+0x2f0>
   b8a0c:	2300      	movs	r3, #0
   b8a0e:	e7c4      	b.n	b899a <_strtod_l+0x142>
   b8a10:	2f08      	cmp	r7, #8
   b8a12:	bfd8      	it	le
   b8a14:	9907      	ldrle	r1, [sp, #28]
   b8a16:	f100 0001 	add.w	r0, r0, #1
   b8a1a:	bfda      	itte	le
   b8a1c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8a20:	9307      	strle	r3, [sp, #28]
   b8a22:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8a26:	3701      	adds	r7, #1
   b8a28:	9017      	str	r0, [sp, #92]	; 0x5c
   b8a2a:	e7bf      	b.n	b89ac <_strtod_l+0x154>
   b8a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8a2e:	195a      	adds	r2, r3, r5
   b8a30:	9217      	str	r2, [sp, #92]	; 0x5c
   b8a32:	5d5a      	ldrb	r2, [r3, r5]
   b8a34:	2f00      	cmp	r7, #0
   b8a36:	d037      	beq.n	b8aa8 <_strtod_l+0x250>
   b8a38:	9005      	str	r0, [sp, #20]
   b8a3a:	463d      	mov	r5, r7
   b8a3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8a40:	2b09      	cmp	r3, #9
   b8a42:	d912      	bls.n	b8a6a <_strtod_l+0x212>
   b8a44:	2301      	movs	r3, #1
   b8a46:	e7c2      	b.n	b89ce <_strtod_l+0x176>
   b8a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8a4a:	1c5a      	adds	r2, r3, #1
   b8a4c:	9217      	str	r2, [sp, #92]	; 0x5c
   b8a4e:	785a      	ldrb	r2, [r3, #1]
   b8a50:	3001      	adds	r0, #1
   b8a52:	2a30      	cmp	r2, #48	; 0x30
   b8a54:	d0f8      	beq.n	b8a48 <_strtod_l+0x1f0>
   b8a56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b8a5a:	2b08      	cmp	r3, #8
   b8a5c:	f200 84d9 	bhi.w	b9412 <_strtod_l+0xbba>
   b8a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8a62:	9005      	str	r0, [sp, #20]
   b8a64:	2000      	movs	r0, #0
   b8a66:	9308      	str	r3, [sp, #32]
   b8a68:	4605      	mov	r5, r0
   b8a6a:	3a30      	subs	r2, #48	; 0x30
   b8a6c:	f100 0301 	add.w	r3, r0, #1
   b8a70:	d014      	beq.n	b8a9c <_strtod_l+0x244>
   b8a72:	9905      	ldr	r1, [sp, #20]
   b8a74:	4419      	add	r1, r3
   b8a76:	9105      	str	r1, [sp, #20]
   b8a78:	462b      	mov	r3, r5
   b8a7a:	eb00 0e05 	add.w	lr, r0, r5
   b8a7e:	210a      	movs	r1, #10
   b8a80:	4573      	cmp	r3, lr
   b8a82:	d113      	bne.n	b8aac <_strtod_l+0x254>
   b8a84:	182b      	adds	r3, r5, r0
   b8a86:	2b08      	cmp	r3, #8
   b8a88:	f105 0501 	add.w	r5, r5, #1
   b8a8c:	4405      	add	r5, r0
   b8a8e:	dc1c      	bgt.n	b8aca <_strtod_l+0x272>
   b8a90:	9907      	ldr	r1, [sp, #28]
   b8a92:	230a      	movs	r3, #10
   b8a94:	fb03 2301 	mla	r3, r3, r1, r2
   b8a98:	9307      	str	r3, [sp, #28]
   b8a9a:	2300      	movs	r3, #0
   b8a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8a9e:	1c51      	adds	r1, r2, #1
   b8aa0:	9117      	str	r1, [sp, #92]	; 0x5c
   b8aa2:	7852      	ldrb	r2, [r2, #1]
   b8aa4:	4618      	mov	r0, r3
   b8aa6:	e7c9      	b.n	b8a3c <_strtod_l+0x1e4>
   b8aa8:	4638      	mov	r0, r7
   b8aaa:	e7d2      	b.n	b8a52 <_strtod_l+0x1fa>
   b8aac:	2b08      	cmp	r3, #8
   b8aae:	dc04      	bgt.n	b8aba <_strtod_l+0x262>
   b8ab0:	9e07      	ldr	r6, [sp, #28]
   b8ab2:	434e      	muls	r6, r1
   b8ab4:	9607      	str	r6, [sp, #28]
   b8ab6:	3301      	adds	r3, #1
   b8ab8:	e7e2      	b.n	b8a80 <_strtod_l+0x228>
   b8aba:	f103 0c01 	add.w	ip, r3, #1
   b8abe:	f1bc 0f10 	cmp.w	ip, #16
   b8ac2:	bfd8      	it	le
   b8ac4:	fb01 f909 	mulle.w	r9, r1, r9
   b8ac8:	e7f5      	b.n	b8ab6 <_strtod_l+0x25e>
   b8aca:	2d10      	cmp	r5, #16
   b8acc:	bfdc      	itt	le
   b8ace:	230a      	movle	r3, #10
   b8ad0:	fb03 2909 	mlale	r9, r3, r9, r2
   b8ad4:	e7e1      	b.n	b8a9a <_strtod_l+0x242>
   b8ad6:	2300      	movs	r3, #0
   b8ad8:	9305      	str	r3, [sp, #20]
   b8ada:	2301      	movs	r3, #1
   b8adc:	e77c      	b.n	b89d8 <_strtod_l+0x180>
   b8ade:	f04f 0c00 	mov.w	ip, #0
   b8ae2:	f108 0202 	add.w	r2, r8, #2
   b8ae6:	9217      	str	r2, [sp, #92]	; 0x5c
   b8ae8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b8aec:	e785      	b.n	b89fa <_strtod_l+0x1a2>
   b8aee:	f04f 0c01 	mov.w	ip, #1
   b8af2:	e7f6      	b.n	b8ae2 <_strtod_l+0x28a>
   b8af4:	000bb428 	.word	0x000bb428
   b8af8:	000bb23c 	.word	0x000bb23c
   b8afc:	7ff00000 	.word	0x7ff00000
   b8b00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8b02:	1c51      	adds	r1, r2, #1
   b8b04:	9117      	str	r1, [sp, #92]	; 0x5c
   b8b06:	7852      	ldrb	r2, [r2, #1]
   b8b08:	2a30      	cmp	r2, #48	; 0x30
   b8b0a:	d0f9      	beq.n	b8b00 <_strtod_l+0x2a8>
   b8b0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8b10:	2908      	cmp	r1, #8
   b8b12:	f63f af79 	bhi.w	b8a08 <_strtod_l+0x1b0>
   b8b16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b8b1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8b1c:	9206      	str	r2, [sp, #24]
   b8b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8b20:	1c51      	adds	r1, r2, #1
   b8b22:	9117      	str	r1, [sp, #92]	; 0x5c
   b8b24:	7852      	ldrb	r2, [r2, #1]
   b8b26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b8b2a:	2e09      	cmp	r6, #9
   b8b2c:	d937      	bls.n	b8b9e <_strtod_l+0x346>
   b8b2e:	9e06      	ldr	r6, [sp, #24]
   b8b30:	1b89      	subs	r1, r1, r6
   b8b32:	2908      	cmp	r1, #8
   b8b34:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8b38:	dc02      	bgt.n	b8b40 <_strtod_l+0x2e8>
   b8b3a:	4576      	cmp	r6, lr
   b8b3c:	bfa8      	it	ge
   b8b3e:	4676      	movge	r6, lr
   b8b40:	f1bc 0f00 	cmp.w	ip, #0
   b8b44:	d000      	beq.n	b8b48 <_strtod_l+0x2f0>
   b8b46:	4276      	negs	r6, r6
   b8b48:	2d00      	cmp	r5, #0
   b8b4a:	d14d      	bne.n	b8be8 <_strtod_l+0x390>
   b8b4c:	9904      	ldr	r1, [sp, #16]
   b8b4e:	4301      	orrs	r1, r0
   b8b50:	f47f aec6 	bne.w	b88e0 <_strtod_l+0x88>
   b8b54:	2b00      	cmp	r3, #0
   b8b56:	f47f aee1 	bne.w	b891c <_strtod_l+0xc4>
   b8b5a:	2a69      	cmp	r2, #105	; 0x69
   b8b5c:	d027      	beq.n	b8bae <_strtod_l+0x356>
   b8b5e:	dc24      	bgt.n	b8baa <_strtod_l+0x352>
   b8b60:	2a49      	cmp	r2, #73	; 0x49
   b8b62:	d024      	beq.n	b8bae <_strtod_l+0x356>
   b8b64:	2a4e      	cmp	r2, #78	; 0x4e
   b8b66:	f47f aed9 	bne.w	b891c <_strtod_l+0xc4>
   b8b6a:	499f      	ldr	r1, [pc, #636]	; (b8de8 <_strtod_l+0x590>)
   b8b6c:	a817      	add	r0, sp, #92	; 0x5c
   b8b6e:	f001 f833 	bl	b9bd8 <__match>
   b8b72:	2800      	cmp	r0, #0
   b8b74:	f43f aed2 	beq.w	b891c <_strtod_l+0xc4>
   b8b78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8b7a:	781b      	ldrb	r3, [r3, #0]
   b8b7c:	2b28      	cmp	r3, #40	; 0x28
   b8b7e:	d12d      	bne.n	b8bdc <_strtod_l+0x384>
   b8b80:	499a      	ldr	r1, [pc, #616]	; (b8dec <_strtod_l+0x594>)
   b8b82:	aa1a      	add	r2, sp, #104	; 0x68
   b8b84:	a817      	add	r0, sp, #92	; 0x5c
   b8b86:	f001 f83b 	bl	b9c00 <__hexnan>
   b8b8a:	2805      	cmp	r0, #5
   b8b8c:	d126      	bne.n	b8bdc <_strtod_l+0x384>
   b8b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b8b90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b8b94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b8b98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b8b9c:	e6a0      	b.n	b88e0 <_strtod_l+0x88>
   b8b9e:	210a      	movs	r1, #10
   b8ba0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b8ba4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b8ba8:	e7b9      	b.n	b8b1e <_strtod_l+0x2c6>
   b8baa:	2a6e      	cmp	r2, #110	; 0x6e
   b8bac:	e7db      	b.n	b8b66 <_strtod_l+0x30e>
   b8bae:	4990      	ldr	r1, [pc, #576]	; (b8df0 <_strtod_l+0x598>)
   b8bb0:	a817      	add	r0, sp, #92	; 0x5c
   b8bb2:	f001 f811 	bl	b9bd8 <__match>
   b8bb6:	2800      	cmp	r0, #0
   b8bb8:	f43f aeb0 	beq.w	b891c <_strtod_l+0xc4>
   b8bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8bbe:	498d      	ldr	r1, [pc, #564]	; (b8df4 <_strtod_l+0x59c>)
   b8bc0:	3b01      	subs	r3, #1
   b8bc2:	a817      	add	r0, sp, #92	; 0x5c
   b8bc4:	9317      	str	r3, [sp, #92]	; 0x5c
   b8bc6:	f001 f807 	bl	b9bd8 <__match>
   b8bca:	b910      	cbnz	r0, b8bd2 <_strtod_l+0x37a>
   b8bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8bce:	3301      	adds	r3, #1
   b8bd0:	9317      	str	r3, [sp, #92]	; 0x5c
   b8bd2:	f8df b230 	ldr.w	fp, [pc, #560]	; b8e04 <_strtod_l+0x5ac>
   b8bd6:	f04f 0a00 	mov.w	sl, #0
   b8bda:	e681      	b.n	b88e0 <_strtod_l+0x88>
   b8bdc:	4886      	ldr	r0, [pc, #536]	; (b8df8 <_strtod_l+0x5a0>)
   b8bde:	f001 fd93 	bl	ba708 <nan>
   b8be2:	ec5b ab10 	vmov	sl, fp, d0
   b8be6:	e67b      	b.n	b88e0 <_strtod_l+0x88>
   b8be8:	9b05      	ldr	r3, [sp, #20]
   b8bea:	9807      	ldr	r0, [sp, #28]
   b8bec:	1af3      	subs	r3, r6, r3
   b8bee:	2f00      	cmp	r7, #0
   b8bf0:	bf08      	it	eq
   b8bf2:	462f      	moveq	r7, r5
   b8bf4:	2d10      	cmp	r5, #16
   b8bf6:	9306      	str	r3, [sp, #24]
   b8bf8:	46a8      	mov	r8, r5
   b8bfa:	bfa8      	it	ge
   b8bfc:	f04f 0810 	movge.w	r8, #16
   b8c00:	f7ff f91e 	bl	b7e40 <__aeabi_ui2d>
   b8c04:	2d09      	cmp	r5, #9
   b8c06:	4682      	mov	sl, r0
   b8c08:	468b      	mov	fp, r1
   b8c0a:	dd13      	ble.n	b8c34 <_strtod_l+0x3dc>
   b8c0c:	4b7b      	ldr	r3, [pc, #492]	; (b8dfc <_strtod_l+0x5a4>)
   b8c0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8c12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8c16:	f7ff f98d 	bl	b7f34 <__aeabi_dmul>
   b8c1a:	4682      	mov	sl, r0
   b8c1c:	4648      	mov	r0, r9
   b8c1e:	468b      	mov	fp, r1
   b8c20:	f7ff f90e 	bl	b7e40 <__aeabi_ui2d>
   b8c24:	4602      	mov	r2, r0
   b8c26:	460b      	mov	r3, r1
   b8c28:	4650      	mov	r0, sl
   b8c2a:	4659      	mov	r1, fp
   b8c2c:	f7fe ffcc 	bl	b7bc8 <__adddf3>
   b8c30:	4682      	mov	sl, r0
   b8c32:	468b      	mov	fp, r1
   b8c34:	2d0f      	cmp	r5, #15
   b8c36:	dc38      	bgt.n	b8caa <_strtod_l+0x452>
   b8c38:	9b06      	ldr	r3, [sp, #24]
   b8c3a:	2b00      	cmp	r3, #0
   b8c3c:	f43f ae50 	beq.w	b88e0 <_strtod_l+0x88>
   b8c40:	dd24      	ble.n	b8c8c <_strtod_l+0x434>
   b8c42:	2b16      	cmp	r3, #22
   b8c44:	dc0b      	bgt.n	b8c5e <_strtod_l+0x406>
   b8c46:	496d      	ldr	r1, [pc, #436]	; (b8dfc <_strtod_l+0x5a4>)
   b8c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8c50:	4652      	mov	r2, sl
   b8c52:	465b      	mov	r3, fp
   b8c54:	f7ff f96e 	bl	b7f34 <__aeabi_dmul>
   b8c58:	4682      	mov	sl, r0
   b8c5a:	468b      	mov	fp, r1
   b8c5c:	e640      	b.n	b88e0 <_strtod_l+0x88>
   b8c5e:	9a06      	ldr	r2, [sp, #24]
   b8c60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8c64:	4293      	cmp	r3, r2
   b8c66:	db20      	blt.n	b8caa <_strtod_l+0x452>
   b8c68:	4c64      	ldr	r4, [pc, #400]	; (b8dfc <_strtod_l+0x5a4>)
   b8c6a:	f1c5 050f 	rsb	r5, r5, #15
   b8c6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8c72:	4652      	mov	r2, sl
   b8c74:	465b      	mov	r3, fp
   b8c76:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8c7a:	f7ff f95b 	bl	b7f34 <__aeabi_dmul>
   b8c7e:	9b06      	ldr	r3, [sp, #24]
   b8c80:	1b5d      	subs	r5, r3, r5
   b8c82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b8c86:	e9d4 2300 	ldrd	r2, r3, [r4]
   b8c8a:	e7e3      	b.n	b8c54 <_strtod_l+0x3fc>
   b8c8c:	9b06      	ldr	r3, [sp, #24]
   b8c8e:	3316      	adds	r3, #22
   b8c90:	db0b      	blt.n	b8caa <_strtod_l+0x452>
   b8c92:	9b05      	ldr	r3, [sp, #20]
   b8c94:	1b9e      	subs	r6, r3, r6
   b8c96:	4b59      	ldr	r3, [pc, #356]	; (b8dfc <_strtod_l+0x5a4>)
   b8c98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b8c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b8ca0:	4650      	mov	r0, sl
   b8ca2:	4659      	mov	r1, fp
   b8ca4:	f7ff fa70 	bl	b8188 <__aeabi_ddiv>
   b8ca8:	e7d6      	b.n	b8c58 <_strtod_l+0x400>
   b8caa:	9b06      	ldr	r3, [sp, #24]
   b8cac:	eba5 0808 	sub.w	r8, r5, r8
   b8cb0:	4498      	add	r8, r3
   b8cb2:	f1b8 0f00 	cmp.w	r8, #0
   b8cb6:	dd74      	ble.n	b8da2 <_strtod_l+0x54a>
   b8cb8:	f018 030f 	ands.w	r3, r8, #15
   b8cbc:	d00a      	beq.n	b8cd4 <_strtod_l+0x47c>
   b8cbe:	494f      	ldr	r1, [pc, #316]	; (b8dfc <_strtod_l+0x5a4>)
   b8cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b8cc4:	4652      	mov	r2, sl
   b8cc6:	465b      	mov	r3, fp
   b8cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8ccc:	f7ff f932 	bl	b7f34 <__aeabi_dmul>
   b8cd0:	4682      	mov	sl, r0
   b8cd2:	468b      	mov	fp, r1
   b8cd4:	f038 080f 	bics.w	r8, r8, #15
   b8cd8:	d04f      	beq.n	b8d7a <_strtod_l+0x522>
   b8cda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b8cde:	dd22      	ble.n	b8d26 <_strtod_l+0x4ce>
   b8ce0:	2500      	movs	r5, #0
   b8ce2:	462e      	mov	r6, r5
   b8ce4:	9507      	str	r5, [sp, #28]
   b8ce6:	9505      	str	r5, [sp, #20]
   b8ce8:	2322      	movs	r3, #34	; 0x22
   b8cea:	f8df b118 	ldr.w	fp, [pc, #280]	; b8e04 <_strtod_l+0x5ac>
   b8cee:	6023      	str	r3, [r4, #0]
   b8cf0:	f04f 0a00 	mov.w	sl, #0
   b8cf4:	9b07      	ldr	r3, [sp, #28]
   b8cf6:	2b00      	cmp	r3, #0
   b8cf8:	f43f adf2 	beq.w	b88e0 <_strtod_l+0x88>
   b8cfc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8cfe:	4620      	mov	r0, r4
   b8d00:	f001 f870 	bl	b9de4 <_Bfree>
   b8d04:	9905      	ldr	r1, [sp, #20]
   b8d06:	4620      	mov	r0, r4
   b8d08:	f001 f86c 	bl	b9de4 <_Bfree>
   b8d0c:	4631      	mov	r1, r6
   b8d0e:	4620      	mov	r0, r4
   b8d10:	f001 f868 	bl	b9de4 <_Bfree>
   b8d14:	9907      	ldr	r1, [sp, #28]
   b8d16:	4620      	mov	r0, r4
   b8d18:	f001 f864 	bl	b9de4 <_Bfree>
   b8d1c:	4629      	mov	r1, r5
   b8d1e:	4620      	mov	r0, r4
   b8d20:	f001 f860 	bl	b9de4 <_Bfree>
   b8d24:	e5dc      	b.n	b88e0 <_strtod_l+0x88>
   b8d26:	4b36      	ldr	r3, [pc, #216]	; (b8e00 <_strtod_l+0x5a8>)
   b8d28:	9304      	str	r3, [sp, #16]
   b8d2a:	2300      	movs	r3, #0
   b8d2c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8d30:	4650      	mov	r0, sl
   b8d32:	4659      	mov	r1, fp
   b8d34:	4699      	mov	r9, r3
   b8d36:	f1b8 0f01 	cmp.w	r8, #1
   b8d3a:	dc21      	bgt.n	b8d80 <_strtod_l+0x528>
   b8d3c:	b10b      	cbz	r3, b8d42 <_strtod_l+0x4ea>
   b8d3e:	4682      	mov	sl, r0
   b8d40:	468b      	mov	fp, r1
   b8d42:	4b2f      	ldr	r3, [pc, #188]	; (b8e00 <_strtod_l+0x5a8>)
   b8d44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8d48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b8d4c:	4652      	mov	r2, sl
   b8d4e:	465b      	mov	r3, fp
   b8d50:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8d54:	f7ff f8ee 	bl	b7f34 <__aeabi_dmul>
   b8d58:	4b2a      	ldr	r3, [pc, #168]	; (b8e04 <_strtod_l+0x5ac>)
   b8d5a:	460a      	mov	r2, r1
   b8d5c:	400b      	ands	r3, r1
   b8d5e:	492a      	ldr	r1, [pc, #168]	; (b8e08 <_strtod_l+0x5b0>)
   b8d60:	428b      	cmp	r3, r1
   b8d62:	4682      	mov	sl, r0
   b8d64:	d8bc      	bhi.n	b8ce0 <_strtod_l+0x488>
   b8d66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b8d6a:	428b      	cmp	r3, r1
   b8d6c:	bf86      	itte	hi
   b8d6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b8e0c <_strtod_l+0x5b4>
   b8d72:	f04f 3aff 	movhi.w	sl, #4294967295
   b8d76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b8d7a:	2300      	movs	r3, #0
   b8d7c:	9304      	str	r3, [sp, #16]
   b8d7e:	e084      	b.n	b8e8a <_strtod_l+0x632>
   b8d80:	f018 0f01 	tst.w	r8, #1
   b8d84:	d005      	beq.n	b8d92 <_strtod_l+0x53a>
   b8d86:	9b04      	ldr	r3, [sp, #16]
   b8d88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8d8c:	f7ff f8d2 	bl	b7f34 <__aeabi_dmul>
   b8d90:	2301      	movs	r3, #1
   b8d92:	9a04      	ldr	r2, [sp, #16]
   b8d94:	3208      	adds	r2, #8
   b8d96:	f109 0901 	add.w	r9, r9, #1
   b8d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b8d9e:	9204      	str	r2, [sp, #16]
   b8da0:	e7c9      	b.n	b8d36 <_strtod_l+0x4de>
   b8da2:	d0ea      	beq.n	b8d7a <_strtod_l+0x522>
   b8da4:	f1c8 0800 	rsb	r8, r8, #0
   b8da8:	f018 020f 	ands.w	r2, r8, #15
   b8dac:	d00a      	beq.n	b8dc4 <_strtod_l+0x56c>
   b8dae:	4b13      	ldr	r3, [pc, #76]	; (b8dfc <_strtod_l+0x5a4>)
   b8db0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b8db4:	4650      	mov	r0, sl
   b8db6:	4659      	mov	r1, fp
   b8db8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8dbc:	f7ff f9e4 	bl	b8188 <__aeabi_ddiv>
   b8dc0:	4682      	mov	sl, r0
   b8dc2:	468b      	mov	fp, r1
   b8dc4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b8dc8:	d0d7      	beq.n	b8d7a <_strtod_l+0x522>
   b8dca:	f1b8 0f1f 	cmp.w	r8, #31
   b8dce:	dd1f      	ble.n	b8e10 <_strtod_l+0x5b8>
   b8dd0:	2500      	movs	r5, #0
   b8dd2:	462e      	mov	r6, r5
   b8dd4:	9507      	str	r5, [sp, #28]
   b8dd6:	9505      	str	r5, [sp, #20]
   b8dd8:	2322      	movs	r3, #34	; 0x22
   b8dda:	f04f 0a00 	mov.w	sl, #0
   b8dde:	f04f 0b00 	mov.w	fp, #0
   b8de2:	6023      	str	r3, [r4, #0]
   b8de4:	e786      	b.n	b8cf4 <_strtod_l+0x49c>
   b8de6:	bf00      	nop
   b8de8:	000badb1 	.word	0x000badb1
   b8dec:	000bb250 	.word	0x000bb250
   b8df0:	000badb5 	.word	0x000badb5
   b8df4:	000bb235 	.word	0x000bb235
   b8df8:	000bb000 	.word	0x000bb000
   b8dfc:	000bb4e0 	.word	0x000bb4e0
   b8e00:	000bb4b8 	.word	0x000bb4b8
   b8e04:	7ff00000 	.word	0x7ff00000
   b8e08:	7ca00000 	.word	0x7ca00000
   b8e0c:	7fefffff 	.word	0x7fefffff
   b8e10:	f018 0310 	ands.w	r3, r8, #16
   b8e14:	bf18      	it	ne
   b8e16:	236a      	movne	r3, #106	; 0x6a
   b8e18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b91c8 <_strtod_l+0x970>
   b8e1c:	9304      	str	r3, [sp, #16]
   b8e1e:	4650      	mov	r0, sl
   b8e20:	4659      	mov	r1, fp
   b8e22:	2300      	movs	r3, #0
   b8e24:	f018 0f01 	tst.w	r8, #1
   b8e28:	d004      	beq.n	b8e34 <_strtod_l+0x5dc>
   b8e2a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b8e2e:	f7ff f881 	bl	b7f34 <__aeabi_dmul>
   b8e32:	2301      	movs	r3, #1
   b8e34:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8e38:	f109 0908 	add.w	r9, r9, #8
   b8e3c:	d1f2      	bne.n	b8e24 <_strtod_l+0x5cc>
   b8e3e:	b10b      	cbz	r3, b8e44 <_strtod_l+0x5ec>
   b8e40:	4682      	mov	sl, r0
   b8e42:	468b      	mov	fp, r1
   b8e44:	9b04      	ldr	r3, [sp, #16]
   b8e46:	b1c3      	cbz	r3, b8e7a <_strtod_l+0x622>
   b8e48:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b8e4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8e50:	2b00      	cmp	r3, #0
   b8e52:	4659      	mov	r1, fp
   b8e54:	dd11      	ble.n	b8e7a <_strtod_l+0x622>
   b8e56:	2b1f      	cmp	r3, #31
   b8e58:	f340 8124 	ble.w	b90a4 <_strtod_l+0x84c>
   b8e5c:	2b34      	cmp	r3, #52	; 0x34
   b8e5e:	bfde      	ittt	le
   b8e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8e64:	f04f 33ff 	movle.w	r3, #4294967295
   b8e68:	fa03 f202 	lslle.w	r2, r3, r2
   b8e6c:	f04f 0a00 	mov.w	sl, #0
   b8e70:	bfcc      	ite	gt
   b8e72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8e76:	ea02 0b01 	andle.w	fp, r2, r1
   b8e7a:	2200      	movs	r2, #0
   b8e7c:	2300      	movs	r3, #0
   b8e7e:	4650      	mov	r0, sl
   b8e80:	4659      	mov	r1, fp
   b8e82:	f7ff fabf 	bl	b8404 <__aeabi_dcmpeq>
   b8e86:	2800      	cmp	r0, #0
   b8e88:	d1a2      	bne.n	b8dd0 <_strtod_l+0x578>
   b8e8a:	9b07      	ldr	r3, [sp, #28]
   b8e8c:	9300      	str	r3, [sp, #0]
   b8e8e:	9908      	ldr	r1, [sp, #32]
   b8e90:	462b      	mov	r3, r5
   b8e92:	463a      	mov	r2, r7
   b8e94:	4620      	mov	r0, r4
   b8e96:	f001 f80d 	bl	b9eb4 <__s2b>
   b8e9a:	9007      	str	r0, [sp, #28]
   b8e9c:	2800      	cmp	r0, #0
   b8e9e:	f43f af1f 	beq.w	b8ce0 <_strtod_l+0x488>
   b8ea2:	9b05      	ldr	r3, [sp, #20]
   b8ea4:	1b9e      	subs	r6, r3, r6
   b8ea6:	9b06      	ldr	r3, [sp, #24]
   b8ea8:	2b00      	cmp	r3, #0
   b8eaa:	bfb4      	ite	lt
   b8eac:	4633      	movlt	r3, r6
   b8eae:	2300      	movge	r3, #0
   b8eb0:	930c      	str	r3, [sp, #48]	; 0x30
   b8eb2:	9b06      	ldr	r3, [sp, #24]
   b8eb4:	2500      	movs	r5, #0
   b8eb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b8eba:	9312      	str	r3, [sp, #72]	; 0x48
   b8ebc:	462e      	mov	r6, r5
   b8ebe:	9b07      	ldr	r3, [sp, #28]
   b8ec0:	4620      	mov	r0, r4
   b8ec2:	6859      	ldr	r1, [r3, #4]
   b8ec4:	f000 ff4e 	bl	b9d64 <_Balloc>
   b8ec8:	9005      	str	r0, [sp, #20]
   b8eca:	2800      	cmp	r0, #0
   b8ecc:	f43f af0c 	beq.w	b8ce8 <_strtod_l+0x490>
   b8ed0:	9b07      	ldr	r3, [sp, #28]
   b8ed2:	691a      	ldr	r2, [r3, #16]
   b8ed4:	3202      	adds	r2, #2
   b8ed6:	f103 010c 	add.w	r1, r3, #12
   b8eda:	0092      	lsls	r2, r2, #2
   b8edc:	300c      	adds	r0, #12
   b8ede:	f7ff fc07 	bl	b86f0 <memcpy>
   b8ee2:	ec4b ab10 	vmov	d0, sl, fp
   b8ee6:	aa1a      	add	r2, sp, #104	; 0x68
   b8ee8:	a919      	add	r1, sp, #100	; 0x64
   b8eea:	4620      	mov	r0, r4
   b8eec:	f001 fb28 	bl	ba540 <__d2b>
   b8ef0:	ec4b ab18 	vmov	d8, sl, fp
   b8ef4:	9018      	str	r0, [sp, #96]	; 0x60
   b8ef6:	2800      	cmp	r0, #0
   b8ef8:	f43f aef6 	beq.w	b8ce8 <_strtod_l+0x490>
   b8efc:	2101      	movs	r1, #1
   b8efe:	4620      	mov	r0, r4
   b8f00:	f001 f872 	bl	b9fe8 <__i2b>
   b8f04:	4606      	mov	r6, r0
   b8f06:	2800      	cmp	r0, #0
   b8f08:	f43f aeee 	beq.w	b8ce8 <_strtod_l+0x490>
   b8f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8f0e:	9904      	ldr	r1, [sp, #16]
   b8f10:	2b00      	cmp	r3, #0
   b8f12:	bfab      	itete	ge
   b8f14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8f16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8f18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8f1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8f1e:	bfac      	ite	ge
   b8f20:	eb03 0902 	addge.w	r9, r3, r2
   b8f24:	1ad7      	sublt	r7, r2, r3
   b8f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8f28:	eba3 0801 	sub.w	r8, r3, r1
   b8f2c:	4490      	add	r8, r2
   b8f2e:	4ba1      	ldr	r3, [pc, #644]	; (b91b4 <_strtod_l+0x95c>)
   b8f30:	f108 38ff 	add.w	r8, r8, #4294967295
   b8f34:	4598      	cmp	r8, r3
   b8f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8f3a:	f280 80c7 	bge.w	b90cc <_strtod_l+0x874>
   b8f3e:	eba3 0308 	sub.w	r3, r3, r8
   b8f42:	2b1f      	cmp	r3, #31
   b8f44:	eba2 0203 	sub.w	r2, r2, r3
   b8f48:	f04f 0101 	mov.w	r1, #1
   b8f4c:	f300 80b1 	bgt.w	b90b2 <_strtod_l+0x85a>
   b8f50:	fa01 f303 	lsl.w	r3, r1, r3
   b8f54:	930d      	str	r3, [sp, #52]	; 0x34
   b8f56:	2300      	movs	r3, #0
   b8f58:	9308      	str	r3, [sp, #32]
   b8f5a:	eb09 0802 	add.w	r8, r9, r2
   b8f5e:	9b04      	ldr	r3, [sp, #16]
   b8f60:	45c1      	cmp	r9, r8
   b8f62:	4417      	add	r7, r2
   b8f64:	441f      	add	r7, r3
   b8f66:	464b      	mov	r3, r9
   b8f68:	bfa8      	it	ge
   b8f6a:	4643      	movge	r3, r8
   b8f6c:	42bb      	cmp	r3, r7
   b8f6e:	bfa8      	it	ge
   b8f70:	463b      	movge	r3, r7
   b8f72:	2b00      	cmp	r3, #0
   b8f74:	bfc2      	ittt	gt
   b8f76:	eba8 0803 	subgt.w	r8, r8, r3
   b8f7a:	1aff      	subgt	r7, r7, r3
   b8f7c:	eba9 0903 	subgt.w	r9, r9, r3
   b8f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8f82:	2b00      	cmp	r3, #0
   b8f84:	dd17      	ble.n	b8fb6 <_strtod_l+0x75e>
   b8f86:	4631      	mov	r1, r6
   b8f88:	461a      	mov	r2, r3
   b8f8a:	4620      	mov	r0, r4
   b8f8c:	f001 f8ec 	bl	ba168 <__pow5mult>
   b8f90:	4606      	mov	r6, r0
   b8f92:	2800      	cmp	r0, #0
   b8f94:	f43f aea8 	beq.w	b8ce8 <_strtod_l+0x490>
   b8f98:	4601      	mov	r1, r0
   b8f9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8f9c:	4620      	mov	r0, r4
   b8f9e:	f001 f839 	bl	ba014 <__multiply>
   b8fa2:	900b      	str	r0, [sp, #44]	; 0x2c
   b8fa4:	2800      	cmp	r0, #0
   b8fa6:	f43f ae9f 	beq.w	b8ce8 <_strtod_l+0x490>
   b8faa:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8fac:	4620      	mov	r0, r4
   b8fae:	f000 ff19 	bl	b9de4 <_Bfree>
   b8fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8fb4:	9318      	str	r3, [sp, #96]	; 0x60
   b8fb6:	f1b8 0f00 	cmp.w	r8, #0
   b8fba:	f300 808c 	bgt.w	b90d6 <_strtod_l+0x87e>
   b8fbe:	9b06      	ldr	r3, [sp, #24]
   b8fc0:	2b00      	cmp	r3, #0
   b8fc2:	dd08      	ble.n	b8fd6 <_strtod_l+0x77e>
   b8fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8fc6:	9905      	ldr	r1, [sp, #20]
   b8fc8:	4620      	mov	r0, r4
   b8fca:	f001 f8cd 	bl	ba168 <__pow5mult>
   b8fce:	9005      	str	r0, [sp, #20]
   b8fd0:	2800      	cmp	r0, #0
   b8fd2:	f43f ae89 	beq.w	b8ce8 <_strtod_l+0x490>
   b8fd6:	2f00      	cmp	r7, #0
   b8fd8:	dd08      	ble.n	b8fec <_strtod_l+0x794>
   b8fda:	9905      	ldr	r1, [sp, #20]
   b8fdc:	463a      	mov	r2, r7
   b8fde:	4620      	mov	r0, r4
   b8fe0:	f001 f91c 	bl	ba21c <__lshift>
   b8fe4:	9005      	str	r0, [sp, #20]
   b8fe6:	2800      	cmp	r0, #0
   b8fe8:	f43f ae7e 	beq.w	b8ce8 <_strtod_l+0x490>
   b8fec:	f1b9 0f00 	cmp.w	r9, #0
   b8ff0:	dd08      	ble.n	b9004 <_strtod_l+0x7ac>
   b8ff2:	4631      	mov	r1, r6
   b8ff4:	464a      	mov	r2, r9
   b8ff6:	4620      	mov	r0, r4
   b8ff8:	f001 f910 	bl	ba21c <__lshift>
   b8ffc:	4606      	mov	r6, r0
   b8ffe:	2800      	cmp	r0, #0
   b9000:	f43f ae72 	beq.w	b8ce8 <_strtod_l+0x490>
   b9004:	9a05      	ldr	r2, [sp, #20]
   b9006:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9008:	4620      	mov	r0, r4
   b900a:	f001 f993 	bl	ba334 <__mdiff>
   b900e:	4605      	mov	r5, r0
   b9010:	2800      	cmp	r0, #0
   b9012:	f43f ae69 	beq.w	b8ce8 <_strtod_l+0x490>
   b9016:	68c3      	ldr	r3, [r0, #12]
   b9018:	930b      	str	r3, [sp, #44]	; 0x2c
   b901a:	2300      	movs	r3, #0
   b901c:	60c3      	str	r3, [r0, #12]
   b901e:	4631      	mov	r1, r6
   b9020:	f001 f96c 	bl	ba2fc <__mcmp>
   b9024:	2800      	cmp	r0, #0
   b9026:	da60      	bge.n	b90ea <_strtod_l+0x892>
   b9028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b902a:	ea53 030a 	orrs.w	r3, r3, sl
   b902e:	f040 8082 	bne.w	b9136 <_strtod_l+0x8de>
   b9032:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9036:	2b00      	cmp	r3, #0
   b9038:	d17d      	bne.n	b9136 <_strtod_l+0x8de>
   b903a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b903e:	0d1b      	lsrs	r3, r3, #20
   b9040:	051b      	lsls	r3, r3, #20
   b9042:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b9046:	d976      	bls.n	b9136 <_strtod_l+0x8de>
   b9048:	696b      	ldr	r3, [r5, #20]
   b904a:	b913      	cbnz	r3, b9052 <_strtod_l+0x7fa>
   b904c:	692b      	ldr	r3, [r5, #16]
   b904e:	2b01      	cmp	r3, #1
   b9050:	dd71      	ble.n	b9136 <_strtod_l+0x8de>
   b9052:	4629      	mov	r1, r5
   b9054:	2201      	movs	r2, #1
   b9056:	4620      	mov	r0, r4
   b9058:	f001 f8e0 	bl	ba21c <__lshift>
   b905c:	4631      	mov	r1, r6
   b905e:	4605      	mov	r5, r0
   b9060:	f001 f94c 	bl	ba2fc <__mcmp>
   b9064:	2800      	cmp	r0, #0
   b9066:	dd66      	ble.n	b9136 <_strtod_l+0x8de>
   b9068:	9904      	ldr	r1, [sp, #16]
   b906a:	4a53      	ldr	r2, [pc, #332]	; (b91b8 <_strtod_l+0x960>)
   b906c:	465b      	mov	r3, fp
   b906e:	2900      	cmp	r1, #0
   b9070:	f000 8081 	beq.w	b9176 <_strtod_l+0x91e>
   b9074:	ea02 010b 	and.w	r1, r2, fp
   b9078:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b907c:	dc7b      	bgt.n	b9176 <_strtod_l+0x91e>
   b907e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b9082:	f77f aea9 	ble.w	b8dd8 <_strtod_l+0x580>
   b9086:	4b4d      	ldr	r3, [pc, #308]	; (b91bc <_strtod_l+0x964>)
   b9088:	4650      	mov	r0, sl
   b908a:	4659      	mov	r1, fp
   b908c:	2200      	movs	r2, #0
   b908e:	f7fe ff51 	bl	b7f34 <__aeabi_dmul>
   b9092:	460b      	mov	r3, r1
   b9094:	4303      	orrs	r3, r0
   b9096:	bf08      	it	eq
   b9098:	2322      	moveq	r3, #34	; 0x22
   b909a:	4682      	mov	sl, r0
   b909c:	468b      	mov	fp, r1
   b909e:	bf08      	it	eq
   b90a0:	6023      	streq	r3, [r4, #0]
   b90a2:	e62b      	b.n	b8cfc <_strtod_l+0x4a4>
   b90a4:	f04f 32ff 	mov.w	r2, #4294967295
   b90a8:	fa02 f303 	lsl.w	r3, r2, r3
   b90ac:	ea03 0a0a 	and.w	sl, r3, sl
   b90b0:	e6e3      	b.n	b8e7a <_strtod_l+0x622>
   b90b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b90b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b90ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b90be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b90c2:	fa01 f308 	lsl.w	r3, r1, r8
   b90c6:	9308      	str	r3, [sp, #32]
   b90c8:	910d      	str	r1, [sp, #52]	; 0x34
   b90ca:	e746      	b.n	b8f5a <_strtod_l+0x702>
   b90cc:	2300      	movs	r3, #0
   b90ce:	9308      	str	r3, [sp, #32]
   b90d0:	2301      	movs	r3, #1
   b90d2:	930d      	str	r3, [sp, #52]	; 0x34
   b90d4:	e741      	b.n	b8f5a <_strtod_l+0x702>
   b90d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b90d8:	4642      	mov	r2, r8
   b90da:	4620      	mov	r0, r4
   b90dc:	f001 f89e 	bl	ba21c <__lshift>
   b90e0:	9018      	str	r0, [sp, #96]	; 0x60
   b90e2:	2800      	cmp	r0, #0
   b90e4:	f47f af6b 	bne.w	b8fbe <_strtod_l+0x766>
   b90e8:	e5fe      	b.n	b8ce8 <_strtod_l+0x490>
   b90ea:	465f      	mov	r7, fp
   b90ec:	d16e      	bne.n	b91cc <_strtod_l+0x974>
   b90ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b90f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b90f4:	b342      	cbz	r2, b9148 <_strtod_l+0x8f0>
   b90f6:	4a32      	ldr	r2, [pc, #200]	; (b91c0 <_strtod_l+0x968>)
   b90f8:	4293      	cmp	r3, r2
   b90fa:	d128      	bne.n	b914e <_strtod_l+0x8f6>
   b90fc:	9b04      	ldr	r3, [sp, #16]
   b90fe:	4651      	mov	r1, sl
   b9100:	b1eb      	cbz	r3, b913e <_strtod_l+0x8e6>
   b9102:	4b2d      	ldr	r3, [pc, #180]	; (b91b8 <_strtod_l+0x960>)
   b9104:	403b      	ands	r3, r7
   b9106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b910a:	f04f 32ff 	mov.w	r2, #4294967295
   b910e:	d819      	bhi.n	b9144 <_strtod_l+0x8ec>
   b9110:	0d1b      	lsrs	r3, r3, #20
   b9112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b9116:	fa02 f303 	lsl.w	r3, r2, r3
   b911a:	4299      	cmp	r1, r3
   b911c:	d117      	bne.n	b914e <_strtod_l+0x8f6>
   b911e:	4b29      	ldr	r3, [pc, #164]	; (b91c4 <_strtod_l+0x96c>)
   b9120:	429f      	cmp	r7, r3
   b9122:	d102      	bne.n	b912a <_strtod_l+0x8d2>
   b9124:	3101      	adds	r1, #1
   b9126:	f43f addf 	beq.w	b8ce8 <_strtod_l+0x490>
   b912a:	4b23      	ldr	r3, [pc, #140]	; (b91b8 <_strtod_l+0x960>)
   b912c:	403b      	ands	r3, r7
   b912e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b9132:	f04f 0a00 	mov.w	sl, #0
   b9136:	9b04      	ldr	r3, [sp, #16]
   b9138:	2b00      	cmp	r3, #0
   b913a:	d1a4      	bne.n	b9086 <_strtod_l+0x82e>
   b913c:	e5de      	b.n	b8cfc <_strtod_l+0x4a4>
   b913e:	f04f 33ff 	mov.w	r3, #4294967295
   b9142:	e7ea      	b.n	b911a <_strtod_l+0x8c2>
   b9144:	4613      	mov	r3, r2
   b9146:	e7e8      	b.n	b911a <_strtod_l+0x8c2>
   b9148:	ea53 030a 	orrs.w	r3, r3, sl
   b914c:	d08c      	beq.n	b9068 <_strtod_l+0x810>
   b914e:	9b08      	ldr	r3, [sp, #32]
   b9150:	b1db      	cbz	r3, b918a <_strtod_l+0x932>
   b9152:	423b      	tst	r3, r7
   b9154:	d0ef      	beq.n	b9136 <_strtod_l+0x8de>
   b9156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9158:	9a04      	ldr	r2, [sp, #16]
   b915a:	4650      	mov	r0, sl
   b915c:	4659      	mov	r1, fp
   b915e:	b1c3      	cbz	r3, b9192 <_strtod_l+0x93a>
   b9160:	f7ff fb5d 	bl	b881e <sulp>
   b9164:	4602      	mov	r2, r0
   b9166:	460b      	mov	r3, r1
   b9168:	ec51 0b18 	vmov	r0, r1, d8
   b916c:	f7fe fd2c 	bl	b7bc8 <__adddf3>
   b9170:	4682      	mov	sl, r0
   b9172:	468b      	mov	fp, r1
   b9174:	e7df      	b.n	b9136 <_strtod_l+0x8de>
   b9176:	4013      	ands	r3, r2
   b9178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b917c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b9180:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b9184:	f04f 3aff 	mov.w	sl, #4294967295
   b9188:	e7d5      	b.n	b9136 <_strtod_l+0x8de>
   b918a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b918c:	ea13 0f0a 	tst.w	r3, sl
   b9190:	e7e0      	b.n	b9154 <_strtod_l+0x8fc>
   b9192:	f7ff fb44 	bl	b881e <sulp>
   b9196:	4602      	mov	r2, r0
   b9198:	460b      	mov	r3, r1
   b919a:	ec51 0b18 	vmov	r0, r1, d8
   b919e:	f7fe fd11 	bl	b7bc4 <__aeabi_dsub>
   b91a2:	2200      	movs	r2, #0
   b91a4:	2300      	movs	r3, #0
   b91a6:	4682      	mov	sl, r0
   b91a8:	468b      	mov	fp, r1
   b91aa:	f7ff f92b 	bl	b8404 <__aeabi_dcmpeq>
   b91ae:	2800      	cmp	r0, #0
   b91b0:	d0c1      	beq.n	b9136 <_strtod_l+0x8de>
   b91b2:	e611      	b.n	b8dd8 <_strtod_l+0x580>
   b91b4:	fffffc02 	.word	0xfffffc02
   b91b8:	7ff00000 	.word	0x7ff00000
   b91bc:	39500000 	.word	0x39500000
   b91c0:	000fffff 	.word	0x000fffff
   b91c4:	7fefffff 	.word	0x7fefffff
   b91c8:	000bb268 	.word	0x000bb268
   b91cc:	4631      	mov	r1, r6
   b91ce:	4628      	mov	r0, r5
   b91d0:	f001 fa12 	bl	ba5f8 <__ratio>
   b91d4:	ec59 8b10 	vmov	r8, r9, d0
   b91d8:	ee10 0a10 	vmov	r0, s0
   b91dc:	2200      	movs	r2, #0
   b91de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b91e2:	4649      	mov	r1, r9
   b91e4:	f7ff f922 	bl	b842c <__aeabi_dcmple>
   b91e8:	2800      	cmp	r0, #0
   b91ea:	d07a      	beq.n	b92e2 <_strtod_l+0xa8a>
   b91ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b91ee:	2b00      	cmp	r3, #0
   b91f0:	d04a      	beq.n	b9288 <_strtod_l+0xa30>
   b91f2:	4b95      	ldr	r3, [pc, #596]	; (b9448 <_strtod_l+0xbf0>)
   b91f4:	2200      	movs	r2, #0
   b91f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b91fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; b9448 <_strtod_l+0xbf0>
   b91fe:	f04f 0800 	mov.w	r8, #0
   b9202:	4b92      	ldr	r3, [pc, #584]	; (b944c <_strtod_l+0xbf4>)
   b9204:	403b      	ands	r3, r7
   b9206:	930d      	str	r3, [sp, #52]	; 0x34
   b9208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b920a:	4b91      	ldr	r3, [pc, #580]	; (b9450 <_strtod_l+0xbf8>)
   b920c:	429a      	cmp	r2, r3
   b920e:	f040 80b0 	bne.w	b9372 <_strtod_l+0xb1a>
   b9212:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b9216:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b921a:	ec4b ab10 	vmov	d0, sl, fp
   b921e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b9222:	f001 f911 	bl	ba448 <__ulp>
   b9226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b922a:	ec53 2b10 	vmov	r2, r3, d0
   b922e:	f7fe fe81 	bl	b7f34 <__aeabi_dmul>
   b9232:	4652      	mov	r2, sl
   b9234:	465b      	mov	r3, fp
   b9236:	f7fe fcc7 	bl	b7bc8 <__adddf3>
   b923a:	460b      	mov	r3, r1
   b923c:	4983      	ldr	r1, [pc, #524]	; (b944c <_strtod_l+0xbf4>)
   b923e:	4a85      	ldr	r2, [pc, #532]	; (b9454 <_strtod_l+0xbfc>)
   b9240:	4019      	ands	r1, r3
   b9242:	4291      	cmp	r1, r2
   b9244:	4682      	mov	sl, r0
   b9246:	d960      	bls.n	b930a <_strtod_l+0xab2>
   b9248:	ee18 3a90 	vmov	r3, s17
   b924c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b9250:	4293      	cmp	r3, r2
   b9252:	d104      	bne.n	b925e <_strtod_l+0xa06>
   b9254:	ee18 3a10 	vmov	r3, s16
   b9258:	3301      	adds	r3, #1
   b925a:	f43f ad45 	beq.w	b8ce8 <_strtod_l+0x490>
   b925e:	f8df b200 	ldr.w	fp, [pc, #512]	; b9460 <_strtod_l+0xc08>
   b9262:	f04f 3aff 	mov.w	sl, #4294967295
   b9266:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9268:	4620      	mov	r0, r4
   b926a:	f000 fdbb 	bl	b9de4 <_Bfree>
   b926e:	9905      	ldr	r1, [sp, #20]
   b9270:	4620      	mov	r0, r4
   b9272:	f000 fdb7 	bl	b9de4 <_Bfree>
   b9276:	4631      	mov	r1, r6
   b9278:	4620      	mov	r0, r4
   b927a:	f000 fdb3 	bl	b9de4 <_Bfree>
   b927e:	4629      	mov	r1, r5
   b9280:	4620      	mov	r0, r4
   b9282:	f000 fdaf 	bl	b9de4 <_Bfree>
   b9286:	e61a      	b.n	b8ebe <_strtod_l+0x666>
   b9288:	f1ba 0f00 	cmp.w	sl, #0
   b928c:	d11b      	bne.n	b92c6 <_strtod_l+0xa6e>
   b928e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9292:	b9f3      	cbnz	r3, b92d2 <_strtod_l+0xa7a>
   b9294:	4b6c      	ldr	r3, [pc, #432]	; (b9448 <_strtod_l+0xbf0>)
   b9296:	2200      	movs	r2, #0
   b9298:	4640      	mov	r0, r8
   b929a:	4649      	mov	r1, r9
   b929c:	f7ff f8bc 	bl	b8418 <__aeabi_dcmplt>
   b92a0:	b9d0      	cbnz	r0, b92d8 <_strtod_l+0xa80>
   b92a2:	4640      	mov	r0, r8
   b92a4:	4649      	mov	r1, r9
   b92a6:	4b6c      	ldr	r3, [pc, #432]	; (b9458 <_strtod_l+0xc00>)
   b92a8:	2200      	movs	r2, #0
   b92aa:	f7fe fe43 	bl	b7f34 <__aeabi_dmul>
   b92ae:	4680      	mov	r8, r0
   b92b0:	4689      	mov	r9, r1
   b92b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b92b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b92ba:	9315      	str	r3, [sp, #84]	; 0x54
   b92bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b92c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b92c4:	e79d      	b.n	b9202 <_strtod_l+0x9aa>
   b92c6:	f1ba 0f01 	cmp.w	sl, #1
   b92ca:	d102      	bne.n	b92d2 <_strtod_l+0xa7a>
   b92cc:	2f00      	cmp	r7, #0
   b92ce:	f43f ad83 	beq.w	b8dd8 <_strtod_l+0x580>
   b92d2:	4b62      	ldr	r3, [pc, #392]	; (b945c <_strtod_l+0xc04>)
   b92d4:	2200      	movs	r2, #0
   b92d6:	e78e      	b.n	b91f6 <_strtod_l+0x99e>
   b92d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b9458 <_strtod_l+0xc00>
   b92dc:	f04f 0800 	mov.w	r8, #0
   b92e0:	e7e7      	b.n	b92b2 <_strtod_l+0xa5a>
   b92e2:	4b5d      	ldr	r3, [pc, #372]	; (b9458 <_strtod_l+0xc00>)
   b92e4:	4640      	mov	r0, r8
   b92e6:	4649      	mov	r1, r9
   b92e8:	2200      	movs	r2, #0
   b92ea:	f7fe fe23 	bl	b7f34 <__aeabi_dmul>
   b92ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b92f0:	4680      	mov	r8, r0
   b92f2:	4689      	mov	r9, r1
   b92f4:	b933      	cbnz	r3, b9304 <_strtod_l+0xaac>
   b92f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b92fa:	900e      	str	r0, [sp, #56]	; 0x38
   b92fc:	930f      	str	r3, [sp, #60]	; 0x3c
   b92fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b9302:	e7dd      	b.n	b92c0 <_strtod_l+0xa68>
   b9304:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b9308:	e7f9      	b.n	b92fe <_strtod_l+0xaa6>
   b930a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b930e:	9b04      	ldr	r3, [sp, #16]
   b9310:	2b00      	cmp	r3, #0
   b9312:	d1a8      	bne.n	b9266 <_strtod_l+0xa0e>
   b9314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b9318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b931a:	0d1b      	lsrs	r3, r3, #20
   b931c:	051b      	lsls	r3, r3, #20
   b931e:	429a      	cmp	r2, r3
   b9320:	d1a1      	bne.n	b9266 <_strtod_l+0xa0e>
   b9322:	4640      	mov	r0, r8
   b9324:	4649      	mov	r1, r9
   b9326:	f001 fa05 	bl	ba734 <__aeabi_d2lz>
   b932a:	f7fe fdd5 	bl	b7ed8 <__aeabi_l2d>
   b932e:	4602      	mov	r2, r0
   b9330:	460b      	mov	r3, r1
   b9332:	4640      	mov	r0, r8
   b9334:	4649      	mov	r1, r9
   b9336:	f7fe fc45 	bl	b7bc4 <__aeabi_dsub>
   b933a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b933c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b9340:	ea43 030a 	orr.w	r3, r3, sl
   b9344:	4313      	orrs	r3, r2
   b9346:	4680      	mov	r8, r0
   b9348:	4689      	mov	r9, r1
   b934a:	d055      	beq.n	b93f8 <_strtod_l+0xba0>
   b934c:	a336      	add	r3, pc, #216	; (adr r3, b9428 <_strtod_l+0xbd0>)
   b934e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9352:	f7ff f861 	bl	b8418 <__aeabi_dcmplt>
   b9356:	2800      	cmp	r0, #0
   b9358:	f47f acd0 	bne.w	b8cfc <_strtod_l+0x4a4>
   b935c:	a334      	add	r3, pc, #208	; (adr r3, b9430 <_strtod_l+0xbd8>)
   b935e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9362:	4640      	mov	r0, r8
   b9364:	4649      	mov	r1, r9
   b9366:	f7ff f875 	bl	b8454 <__aeabi_dcmpgt>
   b936a:	2800      	cmp	r0, #0
   b936c:	f43f af7b 	beq.w	b9266 <_strtod_l+0xa0e>
   b9370:	e4c4      	b.n	b8cfc <_strtod_l+0x4a4>
   b9372:	9b04      	ldr	r3, [sp, #16]
   b9374:	b333      	cbz	r3, b93c4 <_strtod_l+0xb6c>
   b9376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b9378:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b937c:	d822      	bhi.n	b93c4 <_strtod_l+0xb6c>
   b937e:	a32e      	add	r3, pc, #184	; (adr r3, b9438 <_strtod_l+0xbe0>)
   b9380:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9384:	4640      	mov	r0, r8
   b9386:	4649      	mov	r1, r9
   b9388:	f7ff f850 	bl	b842c <__aeabi_dcmple>
   b938c:	b1a0      	cbz	r0, b93b8 <_strtod_l+0xb60>
   b938e:	4649      	mov	r1, r9
   b9390:	4640      	mov	r0, r8
   b9392:	f7ff f8a7 	bl	b84e4 <__aeabi_d2uiz>
   b9396:	2801      	cmp	r0, #1
   b9398:	bf38      	it	cc
   b939a:	2001      	movcc	r0, #1
   b939c:	f7fe fd50 	bl	b7e40 <__aeabi_ui2d>
   b93a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b93a2:	4680      	mov	r8, r0
   b93a4:	4689      	mov	r9, r1
   b93a6:	bb23      	cbnz	r3, b93f2 <_strtod_l+0xb9a>
   b93a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b93ac:	9010      	str	r0, [sp, #64]	; 0x40
   b93ae:	9311      	str	r3, [sp, #68]	; 0x44
   b93b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b93b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b93b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b93ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b93bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b93c0:	1a9b      	subs	r3, r3, r2
   b93c2:	9309      	str	r3, [sp, #36]	; 0x24
   b93c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b93c8:	eeb0 0a48 	vmov.f32	s0, s16
   b93cc:	eef0 0a68 	vmov.f32	s1, s17
   b93d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b93d4:	f001 f838 	bl	ba448 <__ulp>
   b93d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b93dc:	ec53 2b10 	vmov	r2, r3, d0
   b93e0:	f7fe fda8 	bl	b7f34 <__aeabi_dmul>
   b93e4:	ec53 2b18 	vmov	r2, r3, d8
   b93e8:	f7fe fbee 	bl	b7bc8 <__adddf3>
   b93ec:	4682      	mov	sl, r0
   b93ee:	468b      	mov	fp, r1
   b93f0:	e78d      	b.n	b930e <_strtod_l+0xab6>
   b93f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b93f6:	e7db      	b.n	b93b0 <_strtod_l+0xb58>
   b93f8:	a311      	add	r3, pc, #68	; (adr r3, b9440 <_strtod_l+0xbe8>)
   b93fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b93fe:	f7ff f80b 	bl	b8418 <__aeabi_dcmplt>
   b9402:	e7b2      	b.n	b936a <_strtod_l+0xb12>
   b9404:	2300      	movs	r3, #0
   b9406:	930a      	str	r3, [sp, #40]	; 0x28
   b9408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b940a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b940c:	6013      	str	r3, [r2, #0]
   b940e:	f7ff ba6b 	b.w	b88e8 <_strtod_l+0x90>
   b9412:	2a65      	cmp	r2, #101	; 0x65
   b9414:	f43f ab5f 	beq.w	b8ad6 <_strtod_l+0x27e>
   b9418:	2a45      	cmp	r2, #69	; 0x45
   b941a:	f43f ab5c 	beq.w	b8ad6 <_strtod_l+0x27e>
   b941e:	2301      	movs	r3, #1
   b9420:	f7ff bb94 	b.w	b8b4c <_strtod_l+0x2f4>
   b9424:	f3af 8000 	nop.w
   b9428:	94a03595 	.word	0x94a03595
   b942c:	3fdfffff 	.word	0x3fdfffff
   b9430:	35afe535 	.word	0x35afe535
   b9434:	3fe00000 	.word	0x3fe00000
   b9438:	ffc00000 	.word	0xffc00000
   b943c:	41dfffff 	.word	0x41dfffff
   b9440:	94a03595 	.word	0x94a03595
   b9444:	3fcfffff 	.word	0x3fcfffff
   b9448:	3ff00000 	.word	0x3ff00000
   b944c:	7ff00000 	.word	0x7ff00000
   b9450:	7fe00000 	.word	0x7fe00000
   b9454:	7c9fffff 	.word	0x7c9fffff
   b9458:	3fe00000 	.word	0x3fe00000
   b945c:	bff00000 	.word	0xbff00000
   b9460:	7fefffff 	.word	0x7fefffff

000b9464 <strtod>:
   b9464:	460a      	mov	r2, r1
   b9466:	4601      	mov	r1, r0
   b9468:	4802      	ldr	r0, [pc, #8]	; (b9474 <strtod+0x10>)
   b946a:	4b03      	ldr	r3, [pc, #12]	; (b9478 <strtod+0x14>)
   b946c:	6800      	ldr	r0, [r0, #0]
   b946e:	f7ff b9f3 	b.w	b8858 <_strtod_l>
   b9472:	bf00      	nop
   b9474:	2003e148 	.word	0x2003e148
   b9478:	2003e1b4 	.word	0x2003e1b4

000b947c <_strtol_l.constprop.0>:
   b947c:	2b01      	cmp	r3, #1
   b947e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9482:	d001      	beq.n	b9488 <_strtol_l.constprop.0+0xc>
   b9484:	2b24      	cmp	r3, #36	; 0x24
   b9486:	d906      	bls.n	b9496 <_strtol_l.constprop.0+0x1a>
   b9488:	f7fc fdd4 	bl	b6034 <__errno>
   b948c:	2316      	movs	r3, #22
   b948e:	6003      	str	r3, [r0, #0]
   b9490:	2000      	movs	r0, #0
   b9492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9496:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b957c <_strtol_l.constprop.0+0x100>
   b949a:	460d      	mov	r5, r1
   b949c:	462e      	mov	r6, r5
   b949e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b94a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b94a6:	f017 0708 	ands.w	r7, r7, #8
   b94aa:	d1f7      	bne.n	b949c <_strtol_l.constprop.0+0x20>
   b94ac:	2c2d      	cmp	r4, #45	; 0x2d
   b94ae:	d132      	bne.n	b9516 <_strtol_l.constprop.0+0x9a>
   b94b0:	782c      	ldrb	r4, [r5, #0]
   b94b2:	2701      	movs	r7, #1
   b94b4:	1cb5      	adds	r5, r6, #2
   b94b6:	2b00      	cmp	r3, #0
   b94b8:	d05b      	beq.n	b9572 <_strtol_l.constprop.0+0xf6>
   b94ba:	2b10      	cmp	r3, #16
   b94bc:	d109      	bne.n	b94d2 <_strtol_l.constprop.0+0x56>
   b94be:	2c30      	cmp	r4, #48	; 0x30
   b94c0:	d107      	bne.n	b94d2 <_strtol_l.constprop.0+0x56>
   b94c2:	782c      	ldrb	r4, [r5, #0]
   b94c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b94c8:	2c58      	cmp	r4, #88	; 0x58
   b94ca:	d14d      	bne.n	b9568 <_strtol_l.constprop.0+0xec>
   b94cc:	786c      	ldrb	r4, [r5, #1]
   b94ce:	2310      	movs	r3, #16
   b94d0:	3502      	adds	r5, #2
   b94d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b94d6:	f108 38ff 	add.w	r8, r8, #4294967295
   b94da:	f04f 0c00 	mov.w	ip, #0
   b94de:	fbb8 f9f3 	udiv	r9, r8, r3
   b94e2:	4666      	mov	r6, ip
   b94e4:	fb03 8a19 	mls	sl, r3, r9, r8
   b94e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b94ec:	f1be 0f09 	cmp.w	lr, #9
   b94f0:	d816      	bhi.n	b9520 <_strtol_l.constprop.0+0xa4>
   b94f2:	4674      	mov	r4, lr
   b94f4:	42a3      	cmp	r3, r4
   b94f6:	dd24      	ble.n	b9542 <_strtol_l.constprop.0+0xc6>
   b94f8:	f1bc 0f00 	cmp.w	ip, #0
   b94fc:	db1e      	blt.n	b953c <_strtol_l.constprop.0+0xc0>
   b94fe:	45b1      	cmp	r9, r6
   b9500:	d31c      	bcc.n	b953c <_strtol_l.constprop.0+0xc0>
   b9502:	d101      	bne.n	b9508 <_strtol_l.constprop.0+0x8c>
   b9504:	45a2      	cmp	sl, r4
   b9506:	db19      	blt.n	b953c <_strtol_l.constprop.0+0xc0>
   b9508:	fb06 4603 	mla	r6, r6, r3, r4
   b950c:	f04f 0c01 	mov.w	ip, #1
   b9510:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9514:	e7e8      	b.n	b94e8 <_strtol_l.constprop.0+0x6c>
   b9516:	2c2b      	cmp	r4, #43	; 0x2b
   b9518:	bf04      	itt	eq
   b951a:	782c      	ldrbeq	r4, [r5, #0]
   b951c:	1cb5      	addeq	r5, r6, #2
   b951e:	e7ca      	b.n	b94b6 <_strtol_l.constprop.0+0x3a>
   b9520:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9524:	f1be 0f19 	cmp.w	lr, #25
   b9528:	d801      	bhi.n	b952e <_strtol_l.constprop.0+0xb2>
   b952a:	3c37      	subs	r4, #55	; 0x37
   b952c:	e7e2      	b.n	b94f4 <_strtol_l.constprop.0+0x78>
   b952e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9532:	f1be 0f19 	cmp.w	lr, #25
   b9536:	d804      	bhi.n	b9542 <_strtol_l.constprop.0+0xc6>
   b9538:	3c57      	subs	r4, #87	; 0x57
   b953a:	e7db      	b.n	b94f4 <_strtol_l.constprop.0+0x78>
   b953c:	f04f 3cff 	mov.w	ip, #4294967295
   b9540:	e7e6      	b.n	b9510 <_strtol_l.constprop.0+0x94>
   b9542:	f1bc 0f00 	cmp.w	ip, #0
   b9546:	da05      	bge.n	b9554 <_strtol_l.constprop.0+0xd8>
   b9548:	2322      	movs	r3, #34	; 0x22
   b954a:	6003      	str	r3, [r0, #0]
   b954c:	4646      	mov	r6, r8
   b954e:	b942      	cbnz	r2, b9562 <_strtol_l.constprop.0+0xe6>
   b9550:	4630      	mov	r0, r6
   b9552:	e79e      	b.n	b9492 <_strtol_l.constprop.0+0x16>
   b9554:	b107      	cbz	r7, b9558 <_strtol_l.constprop.0+0xdc>
   b9556:	4276      	negs	r6, r6
   b9558:	2a00      	cmp	r2, #0
   b955a:	d0f9      	beq.n	b9550 <_strtol_l.constprop.0+0xd4>
   b955c:	f1bc 0f00 	cmp.w	ip, #0
   b9560:	d000      	beq.n	b9564 <_strtol_l.constprop.0+0xe8>
   b9562:	1e69      	subs	r1, r5, #1
   b9564:	6011      	str	r1, [r2, #0]
   b9566:	e7f3      	b.n	b9550 <_strtol_l.constprop.0+0xd4>
   b9568:	2430      	movs	r4, #48	; 0x30
   b956a:	2b00      	cmp	r3, #0
   b956c:	d1b1      	bne.n	b94d2 <_strtol_l.constprop.0+0x56>
   b956e:	2308      	movs	r3, #8
   b9570:	e7af      	b.n	b94d2 <_strtol_l.constprop.0+0x56>
   b9572:	2c30      	cmp	r4, #48	; 0x30
   b9574:	d0a5      	beq.n	b94c2 <_strtol_l.constprop.0+0x46>
   b9576:	230a      	movs	r3, #10
   b9578:	e7ab      	b.n	b94d2 <_strtol_l.constprop.0+0x56>
   b957a:	bf00      	nop
   b957c:	000bb291 	.word	0x000bb291

000b9580 <strtol>:
   b9580:	4613      	mov	r3, r2
   b9582:	460a      	mov	r2, r1
   b9584:	4601      	mov	r1, r0
   b9586:	4802      	ldr	r0, [pc, #8]	; (b9590 <strtol+0x10>)
   b9588:	6800      	ldr	r0, [r0, #0]
   b958a:	f7ff bf77 	b.w	b947c <_strtol_l.constprop.0>
   b958e:	bf00      	nop
   b9590:	2003e148 	.word	0x2003e148

000b9594 <__register_exitproc>:
   b9594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9598:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9654 <__register_exitproc+0xc0>
   b959c:	4606      	mov	r6, r0
   b959e:	f8d8 0000 	ldr.w	r0, [r8]
   b95a2:	461f      	mov	r7, r3
   b95a4:	460d      	mov	r5, r1
   b95a6:	4691      	mov	r9, r2
   b95a8:	f000 fbc6 	bl	b9d38 <__retarget_lock_acquire_recursive>
   b95ac:	4b25      	ldr	r3, [pc, #148]	; (b9644 <__register_exitproc+0xb0>)
   b95ae:	681c      	ldr	r4, [r3, #0]
   b95b0:	b934      	cbnz	r4, b95c0 <__register_exitproc+0x2c>
   b95b2:	4c25      	ldr	r4, [pc, #148]	; (b9648 <__register_exitproc+0xb4>)
   b95b4:	601c      	str	r4, [r3, #0]
   b95b6:	4b25      	ldr	r3, [pc, #148]	; (b964c <__register_exitproc+0xb8>)
   b95b8:	b113      	cbz	r3, b95c0 <__register_exitproc+0x2c>
   b95ba:	681b      	ldr	r3, [r3, #0]
   b95bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b95c0:	6863      	ldr	r3, [r4, #4]
   b95c2:	2b1f      	cmp	r3, #31
   b95c4:	dd07      	ble.n	b95d6 <__register_exitproc+0x42>
   b95c6:	f8d8 0000 	ldr.w	r0, [r8]
   b95ca:	f000 fbb7 	bl	b9d3c <__retarget_lock_release_recursive>
   b95ce:	f04f 30ff 	mov.w	r0, #4294967295
   b95d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b95d6:	b34e      	cbz	r6, b962c <__register_exitproc+0x98>
   b95d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b95dc:	b988      	cbnz	r0, b9602 <__register_exitproc+0x6e>
   b95de:	4b1c      	ldr	r3, [pc, #112]	; (b9650 <__register_exitproc+0xbc>)
   b95e0:	b923      	cbnz	r3, b95ec <__register_exitproc+0x58>
   b95e2:	f8d8 0000 	ldr.w	r0, [r8]
   b95e6:	f000 fba8 	bl	b9d3a <__retarget_lock_release>
   b95ea:	e7f0      	b.n	b95ce <__register_exitproc+0x3a>
   b95ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b95f0:	f7fc fcf0 	bl	b5fd4 <malloc>
   b95f4:	2800      	cmp	r0, #0
   b95f6:	d0f4      	beq.n	b95e2 <__register_exitproc+0x4e>
   b95f8:	2300      	movs	r3, #0
   b95fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b95fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9602:	6863      	ldr	r3, [r4, #4]
   b9604:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9608:	2201      	movs	r2, #1
   b960a:	409a      	lsls	r2, r3
   b960c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9610:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9614:	4313      	orrs	r3, r2
   b9616:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b961a:	2e02      	cmp	r6, #2
   b961c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9620:	bf02      	ittt	eq
   b9622:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9626:	4313      	orreq	r3, r2
   b9628:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b962c:	6863      	ldr	r3, [r4, #4]
   b962e:	f8d8 0000 	ldr.w	r0, [r8]
   b9632:	1c5a      	adds	r2, r3, #1
   b9634:	3302      	adds	r3, #2
   b9636:	6062      	str	r2, [r4, #4]
   b9638:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b963c:	f000 fb7e 	bl	b9d3c <__retarget_lock_release_recursive>
   b9640:	2000      	movs	r0, #0
   b9642:	e7c6      	b.n	b95d2 <__register_exitproc+0x3e>
   b9644:	2003e7e8 	.word	0x2003e7e8
   b9648:	2003e75c 	.word	0x2003e75c
   b964c:	00000000 	.word	0x00000000
   b9650:	000b5fd5 	.word	0x000b5fd5
   b9654:	2003e1ac 	.word	0x2003e1ac

000b9658 <rshift>:
   b9658:	6903      	ldr	r3, [r0, #16]
   b965a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b965e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9662:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9666:	f100 0414 	add.w	r4, r0, #20
   b966a:	dd45      	ble.n	b96f8 <rshift+0xa0>
   b966c:	f011 011f 	ands.w	r1, r1, #31
   b9670:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9674:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9678:	d10c      	bne.n	b9694 <rshift+0x3c>
   b967a:	f100 0710 	add.w	r7, r0, #16
   b967e:	4629      	mov	r1, r5
   b9680:	42b1      	cmp	r1, r6
   b9682:	d334      	bcc.n	b96ee <rshift+0x96>
   b9684:	1a9b      	subs	r3, r3, r2
   b9686:	009b      	lsls	r3, r3, #2
   b9688:	1eea      	subs	r2, r5, #3
   b968a:	4296      	cmp	r6, r2
   b968c:	bf38      	it	cc
   b968e:	2300      	movcc	r3, #0
   b9690:	4423      	add	r3, r4
   b9692:	e015      	b.n	b96c0 <rshift+0x68>
   b9694:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9698:	f1c1 0820 	rsb	r8, r1, #32
   b969c:	40cf      	lsrs	r7, r1
   b969e:	f105 0e04 	add.w	lr, r5, #4
   b96a2:	46a1      	mov	r9, r4
   b96a4:	4576      	cmp	r6, lr
   b96a6:	46f4      	mov	ip, lr
   b96a8:	d815      	bhi.n	b96d6 <rshift+0x7e>
   b96aa:	1a9a      	subs	r2, r3, r2
   b96ac:	0092      	lsls	r2, r2, #2
   b96ae:	3a04      	subs	r2, #4
   b96b0:	3501      	adds	r5, #1
   b96b2:	42ae      	cmp	r6, r5
   b96b4:	bf38      	it	cc
   b96b6:	2200      	movcc	r2, #0
   b96b8:	18a3      	adds	r3, r4, r2
   b96ba:	50a7      	str	r7, [r4, r2]
   b96bc:	b107      	cbz	r7, b96c0 <rshift+0x68>
   b96be:	3304      	adds	r3, #4
   b96c0:	1b1a      	subs	r2, r3, r4
   b96c2:	42a3      	cmp	r3, r4
   b96c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b96c8:	bf08      	it	eq
   b96ca:	2300      	moveq	r3, #0
   b96cc:	6102      	str	r2, [r0, #16]
   b96ce:	bf08      	it	eq
   b96d0:	6143      	streq	r3, [r0, #20]
   b96d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b96d6:	f8dc c000 	ldr.w	ip, [ip]
   b96da:	fa0c fc08 	lsl.w	ip, ip, r8
   b96de:	ea4c 0707 	orr.w	r7, ip, r7
   b96e2:	f849 7b04 	str.w	r7, [r9], #4
   b96e6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b96ea:	40cf      	lsrs	r7, r1
   b96ec:	e7da      	b.n	b96a4 <rshift+0x4c>
   b96ee:	f851 cb04 	ldr.w	ip, [r1], #4
   b96f2:	f847 cf04 	str.w	ip, [r7, #4]!
   b96f6:	e7c3      	b.n	b9680 <rshift+0x28>
   b96f8:	4623      	mov	r3, r4
   b96fa:	e7e1      	b.n	b96c0 <rshift+0x68>

000b96fc <__hexdig_fun>:
   b96fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9700:	2b09      	cmp	r3, #9
   b9702:	d802      	bhi.n	b970a <__hexdig_fun+0xe>
   b9704:	3820      	subs	r0, #32
   b9706:	b2c0      	uxtb	r0, r0
   b9708:	4770      	bx	lr
   b970a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b970e:	2b05      	cmp	r3, #5
   b9710:	d801      	bhi.n	b9716 <__hexdig_fun+0x1a>
   b9712:	3847      	subs	r0, #71	; 0x47
   b9714:	e7f7      	b.n	b9706 <__hexdig_fun+0xa>
   b9716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b971a:	2b05      	cmp	r3, #5
   b971c:	d801      	bhi.n	b9722 <__hexdig_fun+0x26>
   b971e:	3827      	subs	r0, #39	; 0x27
   b9720:	e7f1      	b.n	b9706 <__hexdig_fun+0xa>
   b9722:	2000      	movs	r0, #0
   b9724:	4770      	bx	lr
	...

000b9728 <__gethex>:
   b9728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b972c:	ed2d 8b02 	vpush	{d8}
   b9730:	b089      	sub	sp, #36	; 0x24
   b9732:	ee08 0a10 	vmov	s16, r0
   b9736:	9304      	str	r3, [sp, #16]
   b9738:	4bb4      	ldr	r3, [pc, #720]	; (b9a0c <__gethex+0x2e4>)
   b973a:	681b      	ldr	r3, [r3, #0]
   b973c:	9301      	str	r3, [sp, #4]
   b973e:	4618      	mov	r0, r3
   b9740:	468b      	mov	fp, r1
   b9742:	4690      	mov	r8, r2
   b9744:	f7ff f83c 	bl	b87c0 <strlen>
   b9748:	9b01      	ldr	r3, [sp, #4]
   b974a:	f8db 2000 	ldr.w	r2, [fp]
   b974e:	4403      	add	r3, r0
   b9750:	4682      	mov	sl, r0
   b9752:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9756:	9305      	str	r3, [sp, #20]
   b9758:	1c93      	adds	r3, r2, #2
   b975a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b975e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9762:	32fe      	adds	r2, #254	; 0xfe
   b9764:	18d1      	adds	r1, r2, r3
   b9766:	461f      	mov	r7, r3
   b9768:	f813 0b01 	ldrb.w	r0, [r3], #1
   b976c:	9100      	str	r1, [sp, #0]
   b976e:	2830      	cmp	r0, #48	; 0x30
   b9770:	d0f8      	beq.n	b9764 <__gethex+0x3c>
   b9772:	f7ff ffc3 	bl	b96fc <__hexdig_fun>
   b9776:	4604      	mov	r4, r0
   b9778:	2800      	cmp	r0, #0
   b977a:	d13a      	bne.n	b97f2 <__gethex+0xca>
   b977c:	9901      	ldr	r1, [sp, #4]
   b977e:	4652      	mov	r2, sl
   b9780:	4638      	mov	r0, r7
   b9782:	f7ff f825 	bl	b87d0 <strncmp>
   b9786:	4605      	mov	r5, r0
   b9788:	2800      	cmp	r0, #0
   b978a:	d168      	bne.n	b985e <__gethex+0x136>
   b978c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9790:	eb07 060a 	add.w	r6, r7, sl
   b9794:	f7ff ffb2 	bl	b96fc <__hexdig_fun>
   b9798:	2800      	cmp	r0, #0
   b979a:	d062      	beq.n	b9862 <__gethex+0x13a>
   b979c:	4633      	mov	r3, r6
   b979e:	7818      	ldrb	r0, [r3, #0]
   b97a0:	2830      	cmp	r0, #48	; 0x30
   b97a2:	461f      	mov	r7, r3
   b97a4:	f103 0301 	add.w	r3, r3, #1
   b97a8:	d0f9      	beq.n	b979e <__gethex+0x76>
   b97aa:	f7ff ffa7 	bl	b96fc <__hexdig_fun>
   b97ae:	2301      	movs	r3, #1
   b97b0:	fab0 f480 	clz	r4, r0
   b97b4:	0964      	lsrs	r4, r4, #5
   b97b6:	4635      	mov	r5, r6
   b97b8:	9300      	str	r3, [sp, #0]
   b97ba:	463a      	mov	r2, r7
   b97bc:	4616      	mov	r6, r2
   b97be:	3201      	adds	r2, #1
   b97c0:	7830      	ldrb	r0, [r6, #0]
   b97c2:	f7ff ff9b 	bl	b96fc <__hexdig_fun>
   b97c6:	2800      	cmp	r0, #0
   b97c8:	d1f8      	bne.n	b97bc <__gethex+0x94>
   b97ca:	9901      	ldr	r1, [sp, #4]
   b97cc:	4652      	mov	r2, sl
   b97ce:	4630      	mov	r0, r6
   b97d0:	f7fe fffe 	bl	b87d0 <strncmp>
   b97d4:	b980      	cbnz	r0, b97f8 <__gethex+0xd0>
   b97d6:	b94d      	cbnz	r5, b97ec <__gethex+0xc4>
   b97d8:	eb06 050a 	add.w	r5, r6, sl
   b97dc:	462a      	mov	r2, r5
   b97de:	4616      	mov	r6, r2
   b97e0:	3201      	adds	r2, #1
   b97e2:	7830      	ldrb	r0, [r6, #0]
   b97e4:	f7ff ff8a 	bl	b96fc <__hexdig_fun>
   b97e8:	2800      	cmp	r0, #0
   b97ea:	d1f8      	bne.n	b97de <__gethex+0xb6>
   b97ec:	1bad      	subs	r5, r5, r6
   b97ee:	00ad      	lsls	r5, r5, #2
   b97f0:	e004      	b.n	b97fc <__gethex+0xd4>
   b97f2:	2400      	movs	r4, #0
   b97f4:	4625      	mov	r5, r4
   b97f6:	e7e0      	b.n	b97ba <__gethex+0x92>
   b97f8:	2d00      	cmp	r5, #0
   b97fa:	d1f7      	bne.n	b97ec <__gethex+0xc4>
   b97fc:	7833      	ldrb	r3, [r6, #0]
   b97fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b9802:	2b50      	cmp	r3, #80	; 0x50
   b9804:	d13b      	bne.n	b987e <__gethex+0x156>
   b9806:	7873      	ldrb	r3, [r6, #1]
   b9808:	2b2b      	cmp	r3, #43	; 0x2b
   b980a:	d02c      	beq.n	b9866 <__gethex+0x13e>
   b980c:	2b2d      	cmp	r3, #45	; 0x2d
   b980e:	d02e      	beq.n	b986e <__gethex+0x146>
   b9810:	1c71      	adds	r1, r6, #1
   b9812:	f04f 0900 	mov.w	r9, #0
   b9816:	7808      	ldrb	r0, [r1, #0]
   b9818:	f7ff ff70 	bl	b96fc <__hexdig_fun>
   b981c:	1e43      	subs	r3, r0, #1
   b981e:	b2db      	uxtb	r3, r3
   b9820:	2b18      	cmp	r3, #24
   b9822:	d82c      	bhi.n	b987e <__gethex+0x156>
   b9824:	f1a0 0210 	sub.w	r2, r0, #16
   b9828:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b982c:	f7ff ff66 	bl	b96fc <__hexdig_fun>
   b9830:	1e43      	subs	r3, r0, #1
   b9832:	b2db      	uxtb	r3, r3
   b9834:	2b18      	cmp	r3, #24
   b9836:	d91d      	bls.n	b9874 <__gethex+0x14c>
   b9838:	f1b9 0f00 	cmp.w	r9, #0
   b983c:	d000      	beq.n	b9840 <__gethex+0x118>
   b983e:	4252      	negs	r2, r2
   b9840:	4415      	add	r5, r2
   b9842:	f8cb 1000 	str.w	r1, [fp]
   b9846:	b1e4      	cbz	r4, b9882 <__gethex+0x15a>
   b9848:	9b00      	ldr	r3, [sp, #0]
   b984a:	2b00      	cmp	r3, #0
   b984c:	bf14      	ite	ne
   b984e:	2700      	movne	r7, #0
   b9850:	2706      	moveq	r7, #6
   b9852:	4638      	mov	r0, r7
   b9854:	b009      	add	sp, #36	; 0x24
   b9856:	ecbd 8b02 	vpop	{d8}
   b985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b985e:	463e      	mov	r6, r7
   b9860:	4625      	mov	r5, r4
   b9862:	2401      	movs	r4, #1
   b9864:	e7ca      	b.n	b97fc <__gethex+0xd4>
   b9866:	f04f 0900 	mov.w	r9, #0
   b986a:	1cb1      	adds	r1, r6, #2
   b986c:	e7d3      	b.n	b9816 <__gethex+0xee>
   b986e:	f04f 0901 	mov.w	r9, #1
   b9872:	e7fa      	b.n	b986a <__gethex+0x142>
   b9874:	230a      	movs	r3, #10
   b9876:	fb03 0202 	mla	r2, r3, r2, r0
   b987a:	3a10      	subs	r2, #16
   b987c:	e7d4      	b.n	b9828 <__gethex+0x100>
   b987e:	4631      	mov	r1, r6
   b9880:	e7df      	b.n	b9842 <__gethex+0x11a>
   b9882:	1bf3      	subs	r3, r6, r7
   b9884:	3b01      	subs	r3, #1
   b9886:	4621      	mov	r1, r4
   b9888:	2b07      	cmp	r3, #7
   b988a:	dc0b      	bgt.n	b98a4 <__gethex+0x17c>
   b988c:	ee18 0a10 	vmov	r0, s16
   b9890:	f000 fa68 	bl	b9d64 <_Balloc>
   b9894:	4604      	mov	r4, r0
   b9896:	b940      	cbnz	r0, b98aa <__gethex+0x182>
   b9898:	4b5d      	ldr	r3, [pc, #372]	; (b9a10 <__gethex+0x2e8>)
   b989a:	4602      	mov	r2, r0
   b989c:	21de      	movs	r1, #222	; 0xde
   b989e:	485d      	ldr	r0, [pc, #372]	; (b9a14 <__gethex+0x2ec>)
   b98a0:	f7fc fbd0 	bl	b6044 <__assert_func>
   b98a4:	3101      	adds	r1, #1
   b98a6:	105b      	asrs	r3, r3, #1
   b98a8:	e7ee      	b.n	b9888 <__gethex+0x160>
   b98aa:	f100 0914 	add.w	r9, r0, #20
   b98ae:	f04f 0b00 	mov.w	fp, #0
   b98b2:	f1ca 0301 	rsb	r3, sl, #1
   b98b6:	f8cd 9008 	str.w	r9, [sp, #8]
   b98ba:	f8cd b000 	str.w	fp, [sp]
   b98be:	9306      	str	r3, [sp, #24]
   b98c0:	42b7      	cmp	r7, r6
   b98c2:	d340      	bcc.n	b9946 <__gethex+0x21e>
   b98c4:	9802      	ldr	r0, [sp, #8]
   b98c6:	9b00      	ldr	r3, [sp, #0]
   b98c8:	f840 3b04 	str.w	r3, [r0], #4
   b98cc:	eba0 0009 	sub.w	r0, r0, r9
   b98d0:	1080      	asrs	r0, r0, #2
   b98d2:	0146      	lsls	r6, r0, #5
   b98d4:	6120      	str	r0, [r4, #16]
   b98d6:	4618      	mov	r0, r3
   b98d8:	f000 fb36 	bl	b9f48 <__hi0bits>
   b98dc:	1a30      	subs	r0, r6, r0
   b98de:	f8d8 6000 	ldr.w	r6, [r8]
   b98e2:	42b0      	cmp	r0, r6
   b98e4:	dd63      	ble.n	b99ae <__gethex+0x286>
   b98e6:	1b87      	subs	r7, r0, r6
   b98e8:	4639      	mov	r1, r7
   b98ea:	4620      	mov	r0, r4
   b98ec:	f000 feda 	bl	ba6a4 <__any_on>
   b98f0:	4682      	mov	sl, r0
   b98f2:	b1a8      	cbz	r0, b9920 <__gethex+0x1f8>
   b98f4:	1e7b      	subs	r3, r7, #1
   b98f6:	1159      	asrs	r1, r3, #5
   b98f8:	f003 021f 	and.w	r2, r3, #31
   b98fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b9900:	f04f 0a01 	mov.w	sl, #1
   b9904:	fa0a f202 	lsl.w	r2, sl, r2
   b9908:	420a      	tst	r2, r1
   b990a:	d009      	beq.n	b9920 <__gethex+0x1f8>
   b990c:	4553      	cmp	r3, sl
   b990e:	dd05      	ble.n	b991c <__gethex+0x1f4>
   b9910:	1eb9      	subs	r1, r7, #2
   b9912:	4620      	mov	r0, r4
   b9914:	f000 fec6 	bl	ba6a4 <__any_on>
   b9918:	2800      	cmp	r0, #0
   b991a:	d145      	bne.n	b99a8 <__gethex+0x280>
   b991c:	f04f 0a02 	mov.w	sl, #2
   b9920:	4639      	mov	r1, r7
   b9922:	4620      	mov	r0, r4
   b9924:	f7ff fe98 	bl	b9658 <rshift>
   b9928:	443d      	add	r5, r7
   b992a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b992e:	42ab      	cmp	r3, r5
   b9930:	da4c      	bge.n	b99cc <__gethex+0x2a4>
   b9932:	ee18 0a10 	vmov	r0, s16
   b9936:	4621      	mov	r1, r4
   b9938:	f000 fa54 	bl	b9de4 <_Bfree>
   b993c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b993e:	2300      	movs	r3, #0
   b9940:	6013      	str	r3, [r2, #0]
   b9942:	27a3      	movs	r7, #163	; 0xa3
   b9944:	e785      	b.n	b9852 <__gethex+0x12a>
   b9946:	1e73      	subs	r3, r6, #1
   b9948:	9a05      	ldr	r2, [sp, #20]
   b994a:	9303      	str	r3, [sp, #12]
   b994c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9950:	4293      	cmp	r3, r2
   b9952:	d019      	beq.n	b9988 <__gethex+0x260>
   b9954:	f1bb 0f20 	cmp.w	fp, #32
   b9958:	d107      	bne.n	b996a <__gethex+0x242>
   b995a:	9b02      	ldr	r3, [sp, #8]
   b995c:	9a00      	ldr	r2, [sp, #0]
   b995e:	f843 2b04 	str.w	r2, [r3], #4
   b9962:	9302      	str	r3, [sp, #8]
   b9964:	2300      	movs	r3, #0
   b9966:	9300      	str	r3, [sp, #0]
   b9968:	469b      	mov	fp, r3
   b996a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b996e:	f7ff fec5 	bl	b96fc <__hexdig_fun>
   b9972:	9b00      	ldr	r3, [sp, #0]
   b9974:	f000 000f 	and.w	r0, r0, #15
   b9978:	fa00 f00b 	lsl.w	r0, r0, fp
   b997c:	4303      	orrs	r3, r0
   b997e:	9300      	str	r3, [sp, #0]
   b9980:	f10b 0b04 	add.w	fp, fp, #4
   b9984:	9b03      	ldr	r3, [sp, #12]
   b9986:	e00d      	b.n	b99a4 <__gethex+0x27c>
   b9988:	9b03      	ldr	r3, [sp, #12]
   b998a:	9a06      	ldr	r2, [sp, #24]
   b998c:	4413      	add	r3, r2
   b998e:	42bb      	cmp	r3, r7
   b9990:	d3e0      	bcc.n	b9954 <__gethex+0x22c>
   b9992:	4618      	mov	r0, r3
   b9994:	9901      	ldr	r1, [sp, #4]
   b9996:	9307      	str	r3, [sp, #28]
   b9998:	4652      	mov	r2, sl
   b999a:	f7fe ff19 	bl	b87d0 <strncmp>
   b999e:	9b07      	ldr	r3, [sp, #28]
   b99a0:	2800      	cmp	r0, #0
   b99a2:	d1d7      	bne.n	b9954 <__gethex+0x22c>
   b99a4:	461e      	mov	r6, r3
   b99a6:	e78b      	b.n	b98c0 <__gethex+0x198>
   b99a8:	f04f 0a03 	mov.w	sl, #3
   b99ac:	e7b8      	b.n	b9920 <__gethex+0x1f8>
   b99ae:	da0a      	bge.n	b99c6 <__gethex+0x29e>
   b99b0:	1a37      	subs	r7, r6, r0
   b99b2:	4621      	mov	r1, r4
   b99b4:	ee18 0a10 	vmov	r0, s16
   b99b8:	463a      	mov	r2, r7
   b99ba:	f000 fc2f 	bl	ba21c <__lshift>
   b99be:	1bed      	subs	r5, r5, r7
   b99c0:	4604      	mov	r4, r0
   b99c2:	f100 0914 	add.w	r9, r0, #20
   b99c6:	f04f 0a00 	mov.w	sl, #0
   b99ca:	e7ae      	b.n	b992a <__gethex+0x202>
   b99cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b99d0:	42a8      	cmp	r0, r5
   b99d2:	dd72      	ble.n	b9aba <__gethex+0x392>
   b99d4:	1b45      	subs	r5, r0, r5
   b99d6:	42ae      	cmp	r6, r5
   b99d8:	dc36      	bgt.n	b9a48 <__gethex+0x320>
   b99da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b99de:	2b02      	cmp	r3, #2
   b99e0:	d02a      	beq.n	b9a38 <__gethex+0x310>
   b99e2:	2b03      	cmp	r3, #3
   b99e4:	d02c      	beq.n	b9a40 <__gethex+0x318>
   b99e6:	2b01      	cmp	r3, #1
   b99e8:	d11c      	bne.n	b9a24 <__gethex+0x2fc>
   b99ea:	42ae      	cmp	r6, r5
   b99ec:	d11a      	bne.n	b9a24 <__gethex+0x2fc>
   b99ee:	2e01      	cmp	r6, #1
   b99f0:	d112      	bne.n	b9a18 <__gethex+0x2f0>
   b99f2:	9a04      	ldr	r2, [sp, #16]
   b99f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b99f8:	6013      	str	r3, [r2, #0]
   b99fa:	2301      	movs	r3, #1
   b99fc:	6123      	str	r3, [r4, #16]
   b99fe:	f8c9 3000 	str.w	r3, [r9]
   b9a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9a04:	2762      	movs	r7, #98	; 0x62
   b9a06:	601c      	str	r4, [r3, #0]
   b9a08:	e723      	b.n	b9852 <__gethex+0x12a>
   b9a0a:	bf00      	nop
   b9a0c:	000bb428 	.word	0x000bb428
   b9a10:	000bb391 	.word	0x000bb391
   b9a14:	000bb3a2 	.word	0x000bb3a2
   b9a18:	1e71      	subs	r1, r6, #1
   b9a1a:	4620      	mov	r0, r4
   b9a1c:	f000 fe42 	bl	ba6a4 <__any_on>
   b9a20:	2800      	cmp	r0, #0
   b9a22:	d1e6      	bne.n	b99f2 <__gethex+0x2ca>
   b9a24:	ee18 0a10 	vmov	r0, s16
   b9a28:	4621      	mov	r1, r4
   b9a2a:	f000 f9db 	bl	b9de4 <_Bfree>
   b9a2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b9a30:	2300      	movs	r3, #0
   b9a32:	6013      	str	r3, [r2, #0]
   b9a34:	2750      	movs	r7, #80	; 0x50
   b9a36:	e70c      	b.n	b9852 <__gethex+0x12a>
   b9a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9a3a:	2b00      	cmp	r3, #0
   b9a3c:	d1f2      	bne.n	b9a24 <__gethex+0x2fc>
   b9a3e:	e7d8      	b.n	b99f2 <__gethex+0x2ca>
   b9a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9a42:	2b00      	cmp	r3, #0
   b9a44:	d1d5      	bne.n	b99f2 <__gethex+0x2ca>
   b9a46:	e7ed      	b.n	b9a24 <__gethex+0x2fc>
   b9a48:	1e6f      	subs	r7, r5, #1
   b9a4a:	f1ba 0f00 	cmp.w	sl, #0
   b9a4e:	d131      	bne.n	b9ab4 <__gethex+0x38c>
   b9a50:	b127      	cbz	r7, b9a5c <__gethex+0x334>
   b9a52:	4639      	mov	r1, r7
   b9a54:	4620      	mov	r0, r4
   b9a56:	f000 fe25 	bl	ba6a4 <__any_on>
   b9a5a:	4682      	mov	sl, r0
   b9a5c:	117b      	asrs	r3, r7, #5
   b9a5e:	2101      	movs	r1, #1
   b9a60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9a64:	f007 071f 	and.w	r7, r7, #31
   b9a68:	fa01 f707 	lsl.w	r7, r1, r7
   b9a6c:	421f      	tst	r7, r3
   b9a6e:	4629      	mov	r1, r5
   b9a70:	4620      	mov	r0, r4
   b9a72:	bf18      	it	ne
   b9a74:	f04a 0a02 	orrne.w	sl, sl, #2
   b9a78:	1b76      	subs	r6, r6, r5
   b9a7a:	f7ff fded 	bl	b9658 <rshift>
   b9a7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9a82:	2702      	movs	r7, #2
   b9a84:	f1ba 0f00 	cmp.w	sl, #0
   b9a88:	d048      	beq.n	b9b1c <__gethex+0x3f4>
   b9a8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b9a8e:	2b02      	cmp	r3, #2
   b9a90:	d015      	beq.n	b9abe <__gethex+0x396>
   b9a92:	2b03      	cmp	r3, #3
   b9a94:	d017      	beq.n	b9ac6 <__gethex+0x39e>
   b9a96:	2b01      	cmp	r3, #1
   b9a98:	d109      	bne.n	b9aae <__gethex+0x386>
   b9a9a:	f01a 0f02 	tst.w	sl, #2
   b9a9e:	d006      	beq.n	b9aae <__gethex+0x386>
   b9aa0:	f8d9 0000 	ldr.w	r0, [r9]
   b9aa4:	ea4a 0a00 	orr.w	sl, sl, r0
   b9aa8:	f01a 0f01 	tst.w	sl, #1
   b9aac:	d10e      	bne.n	b9acc <__gethex+0x3a4>
   b9aae:	f047 0710 	orr.w	r7, r7, #16
   b9ab2:	e033      	b.n	b9b1c <__gethex+0x3f4>
   b9ab4:	f04f 0a01 	mov.w	sl, #1
   b9ab8:	e7d0      	b.n	b9a5c <__gethex+0x334>
   b9aba:	2701      	movs	r7, #1
   b9abc:	e7e2      	b.n	b9a84 <__gethex+0x35c>
   b9abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9ac0:	f1c3 0301 	rsb	r3, r3, #1
   b9ac4:	9315      	str	r3, [sp, #84]	; 0x54
   b9ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9ac8:	2b00      	cmp	r3, #0
   b9aca:	d0f0      	beq.n	b9aae <__gethex+0x386>
   b9acc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9ad0:	f104 0314 	add.w	r3, r4, #20
   b9ad4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9ad8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b9adc:	f04f 0c00 	mov.w	ip, #0
   b9ae0:	4618      	mov	r0, r3
   b9ae2:	f853 2b04 	ldr.w	r2, [r3], #4
   b9ae6:	f1b2 3fff 	cmp.w	r2, #4294967295
   b9aea:	d01c      	beq.n	b9b26 <__gethex+0x3fe>
   b9aec:	3201      	adds	r2, #1
   b9aee:	6002      	str	r2, [r0, #0]
   b9af0:	2f02      	cmp	r7, #2
   b9af2:	f104 0314 	add.w	r3, r4, #20
   b9af6:	d13f      	bne.n	b9b78 <__gethex+0x450>
   b9af8:	f8d8 2000 	ldr.w	r2, [r8]
   b9afc:	3a01      	subs	r2, #1
   b9afe:	42b2      	cmp	r2, r6
   b9b00:	d10a      	bne.n	b9b18 <__gethex+0x3f0>
   b9b02:	1171      	asrs	r1, r6, #5
   b9b04:	2201      	movs	r2, #1
   b9b06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b9b0a:	f006 061f 	and.w	r6, r6, #31
   b9b0e:	fa02 f606 	lsl.w	r6, r2, r6
   b9b12:	421e      	tst	r6, r3
   b9b14:	bf18      	it	ne
   b9b16:	4617      	movne	r7, r2
   b9b18:	f047 0720 	orr.w	r7, r7, #32
   b9b1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b9b1e:	601c      	str	r4, [r3, #0]
   b9b20:	9b04      	ldr	r3, [sp, #16]
   b9b22:	601d      	str	r5, [r3, #0]
   b9b24:	e695      	b.n	b9852 <__gethex+0x12a>
   b9b26:	4299      	cmp	r1, r3
   b9b28:	f843 cc04 	str.w	ip, [r3, #-4]
   b9b2c:	d8d8      	bhi.n	b9ae0 <__gethex+0x3b8>
   b9b2e:	68a3      	ldr	r3, [r4, #8]
   b9b30:	459b      	cmp	fp, r3
   b9b32:	db19      	blt.n	b9b68 <__gethex+0x440>
   b9b34:	6861      	ldr	r1, [r4, #4]
   b9b36:	ee18 0a10 	vmov	r0, s16
   b9b3a:	3101      	adds	r1, #1
   b9b3c:	f000 f912 	bl	b9d64 <_Balloc>
   b9b40:	4681      	mov	r9, r0
   b9b42:	b918      	cbnz	r0, b9b4c <__gethex+0x424>
   b9b44:	4b1a      	ldr	r3, [pc, #104]	; (b9bb0 <__gethex+0x488>)
   b9b46:	4602      	mov	r2, r0
   b9b48:	2184      	movs	r1, #132	; 0x84
   b9b4a:	e6a8      	b.n	b989e <__gethex+0x176>
   b9b4c:	6922      	ldr	r2, [r4, #16]
   b9b4e:	3202      	adds	r2, #2
   b9b50:	f104 010c 	add.w	r1, r4, #12
   b9b54:	0092      	lsls	r2, r2, #2
   b9b56:	300c      	adds	r0, #12
   b9b58:	f7fe fdca 	bl	b86f0 <memcpy>
   b9b5c:	4621      	mov	r1, r4
   b9b5e:	ee18 0a10 	vmov	r0, s16
   b9b62:	f000 f93f 	bl	b9de4 <_Bfree>
   b9b66:	464c      	mov	r4, r9
   b9b68:	6923      	ldr	r3, [r4, #16]
   b9b6a:	1c5a      	adds	r2, r3, #1
   b9b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9b70:	6122      	str	r2, [r4, #16]
   b9b72:	2201      	movs	r2, #1
   b9b74:	615a      	str	r2, [r3, #20]
   b9b76:	e7bb      	b.n	b9af0 <__gethex+0x3c8>
   b9b78:	6922      	ldr	r2, [r4, #16]
   b9b7a:	455a      	cmp	r2, fp
   b9b7c:	dd0b      	ble.n	b9b96 <__gethex+0x46e>
   b9b7e:	2101      	movs	r1, #1
   b9b80:	4620      	mov	r0, r4
   b9b82:	f7ff fd69 	bl	b9658 <rshift>
   b9b86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b9b8a:	3501      	adds	r5, #1
   b9b8c:	42ab      	cmp	r3, r5
   b9b8e:	f6ff aed0 	blt.w	b9932 <__gethex+0x20a>
   b9b92:	2701      	movs	r7, #1
   b9b94:	e7c0      	b.n	b9b18 <__gethex+0x3f0>
   b9b96:	f016 061f 	ands.w	r6, r6, #31
   b9b9a:	d0fa      	beq.n	b9b92 <__gethex+0x46a>
   b9b9c:	4453      	add	r3, sl
   b9b9e:	f1c6 0620 	rsb	r6, r6, #32
   b9ba2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9ba6:	f000 f9cf 	bl	b9f48 <__hi0bits>
   b9baa:	42b0      	cmp	r0, r6
   b9bac:	dbe7      	blt.n	b9b7e <__gethex+0x456>
   b9bae:	e7f0      	b.n	b9b92 <__gethex+0x46a>
   b9bb0:	000bb391 	.word	0x000bb391

000b9bb4 <L_shift>:
   b9bb4:	f1c2 0208 	rsb	r2, r2, #8
   b9bb8:	0092      	lsls	r2, r2, #2
   b9bba:	b570      	push	{r4, r5, r6, lr}
   b9bbc:	f1c2 0620 	rsb	r6, r2, #32
   b9bc0:	6843      	ldr	r3, [r0, #4]
   b9bc2:	6804      	ldr	r4, [r0, #0]
   b9bc4:	fa03 f506 	lsl.w	r5, r3, r6
   b9bc8:	432c      	orrs	r4, r5
   b9bca:	40d3      	lsrs	r3, r2
   b9bcc:	6004      	str	r4, [r0, #0]
   b9bce:	f840 3f04 	str.w	r3, [r0, #4]!
   b9bd2:	4288      	cmp	r0, r1
   b9bd4:	d3f4      	bcc.n	b9bc0 <L_shift+0xc>
   b9bd6:	bd70      	pop	{r4, r5, r6, pc}

000b9bd8 <__match>:
   b9bd8:	b530      	push	{r4, r5, lr}
   b9bda:	6803      	ldr	r3, [r0, #0]
   b9bdc:	3301      	adds	r3, #1
   b9bde:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9be2:	b914      	cbnz	r4, b9bea <__match+0x12>
   b9be4:	6003      	str	r3, [r0, #0]
   b9be6:	2001      	movs	r0, #1
   b9be8:	bd30      	pop	{r4, r5, pc}
   b9bea:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9bee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b9bf2:	2d19      	cmp	r5, #25
   b9bf4:	bf98      	it	ls
   b9bf6:	3220      	addls	r2, #32
   b9bf8:	42a2      	cmp	r2, r4
   b9bfa:	d0f0      	beq.n	b9bde <__match+0x6>
   b9bfc:	2000      	movs	r0, #0
   b9bfe:	e7f3      	b.n	b9be8 <__match+0x10>

000b9c00 <__hexnan>:
   b9c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c04:	680b      	ldr	r3, [r1, #0]
   b9c06:	115e      	asrs	r6, r3, #5
   b9c08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b9c0c:	f013 031f 	ands.w	r3, r3, #31
   b9c10:	b087      	sub	sp, #28
   b9c12:	bf18      	it	ne
   b9c14:	3604      	addne	r6, #4
   b9c16:	2500      	movs	r5, #0
   b9c18:	1f37      	subs	r7, r6, #4
   b9c1a:	4690      	mov	r8, r2
   b9c1c:	6802      	ldr	r2, [r0, #0]
   b9c1e:	9301      	str	r3, [sp, #4]
   b9c20:	4682      	mov	sl, r0
   b9c22:	f846 5c04 	str.w	r5, [r6, #-4]
   b9c26:	46b9      	mov	r9, r7
   b9c28:	463c      	mov	r4, r7
   b9c2a:	9502      	str	r5, [sp, #8]
   b9c2c:	46ab      	mov	fp, r5
   b9c2e:	7851      	ldrb	r1, [r2, #1]
   b9c30:	1c53      	adds	r3, r2, #1
   b9c32:	9303      	str	r3, [sp, #12]
   b9c34:	b341      	cbz	r1, b9c88 <__hexnan+0x88>
   b9c36:	4608      	mov	r0, r1
   b9c38:	9205      	str	r2, [sp, #20]
   b9c3a:	9104      	str	r1, [sp, #16]
   b9c3c:	f7ff fd5e 	bl	b96fc <__hexdig_fun>
   b9c40:	2800      	cmp	r0, #0
   b9c42:	d14f      	bne.n	b9ce4 <__hexnan+0xe4>
   b9c44:	9904      	ldr	r1, [sp, #16]
   b9c46:	9a05      	ldr	r2, [sp, #20]
   b9c48:	2920      	cmp	r1, #32
   b9c4a:	d818      	bhi.n	b9c7e <__hexnan+0x7e>
   b9c4c:	9b02      	ldr	r3, [sp, #8]
   b9c4e:	459b      	cmp	fp, r3
   b9c50:	dd13      	ble.n	b9c7a <__hexnan+0x7a>
   b9c52:	454c      	cmp	r4, r9
   b9c54:	d206      	bcs.n	b9c64 <__hexnan+0x64>
   b9c56:	2d07      	cmp	r5, #7
   b9c58:	dc04      	bgt.n	b9c64 <__hexnan+0x64>
   b9c5a:	462a      	mov	r2, r5
   b9c5c:	4649      	mov	r1, r9
   b9c5e:	4620      	mov	r0, r4
   b9c60:	f7ff ffa8 	bl	b9bb4 <L_shift>
   b9c64:	4544      	cmp	r4, r8
   b9c66:	d950      	bls.n	b9d0a <__hexnan+0x10a>
   b9c68:	2300      	movs	r3, #0
   b9c6a:	f1a4 0904 	sub.w	r9, r4, #4
   b9c6e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9c72:	f8cd b008 	str.w	fp, [sp, #8]
   b9c76:	464c      	mov	r4, r9
   b9c78:	461d      	mov	r5, r3
   b9c7a:	9a03      	ldr	r2, [sp, #12]
   b9c7c:	e7d7      	b.n	b9c2e <__hexnan+0x2e>
   b9c7e:	2929      	cmp	r1, #41	; 0x29
   b9c80:	d156      	bne.n	b9d30 <__hexnan+0x130>
   b9c82:	3202      	adds	r2, #2
   b9c84:	f8ca 2000 	str.w	r2, [sl]
   b9c88:	f1bb 0f00 	cmp.w	fp, #0
   b9c8c:	d050      	beq.n	b9d30 <__hexnan+0x130>
   b9c8e:	454c      	cmp	r4, r9
   b9c90:	d206      	bcs.n	b9ca0 <__hexnan+0xa0>
   b9c92:	2d07      	cmp	r5, #7
   b9c94:	dc04      	bgt.n	b9ca0 <__hexnan+0xa0>
   b9c96:	462a      	mov	r2, r5
   b9c98:	4649      	mov	r1, r9
   b9c9a:	4620      	mov	r0, r4
   b9c9c:	f7ff ff8a 	bl	b9bb4 <L_shift>
   b9ca0:	4544      	cmp	r4, r8
   b9ca2:	d934      	bls.n	b9d0e <__hexnan+0x10e>
   b9ca4:	f1a8 0204 	sub.w	r2, r8, #4
   b9ca8:	4623      	mov	r3, r4
   b9caa:	f853 1b04 	ldr.w	r1, [r3], #4
   b9cae:	f842 1f04 	str.w	r1, [r2, #4]!
   b9cb2:	429f      	cmp	r7, r3
   b9cb4:	d2f9      	bcs.n	b9caa <__hexnan+0xaa>
   b9cb6:	1b3b      	subs	r3, r7, r4
   b9cb8:	f023 0303 	bic.w	r3, r3, #3
   b9cbc:	3304      	adds	r3, #4
   b9cbe:	3401      	adds	r4, #1
   b9cc0:	3e03      	subs	r6, #3
   b9cc2:	42b4      	cmp	r4, r6
   b9cc4:	bf88      	it	hi
   b9cc6:	2304      	movhi	r3, #4
   b9cc8:	4443      	add	r3, r8
   b9cca:	2200      	movs	r2, #0
   b9ccc:	f843 2b04 	str.w	r2, [r3], #4
   b9cd0:	429f      	cmp	r7, r3
   b9cd2:	d2fb      	bcs.n	b9ccc <__hexnan+0xcc>
   b9cd4:	683b      	ldr	r3, [r7, #0]
   b9cd6:	b91b      	cbnz	r3, b9ce0 <__hexnan+0xe0>
   b9cd8:	4547      	cmp	r7, r8
   b9cda:	d127      	bne.n	b9d2c <__hexnan+0x12c>
   b9cdc:	2301      	movs	r3, #1
   b9cde:	603b      	str	r3, [r7, #0]
   b9ce0:	2005      	movs	r0, #5
   b9ce2:	e026      	b.n	b9d32 <__hexnan+0x132>
   b9ce4:	3501      	adds	r5, #1
   b9ce6:	2d08      	cmp	r5, #8
   b9ce8:	f10b 0b01 	add.w	fp, fp, #1
   b9cec:	dd06      	ble.n	b9cfc <__hexnan+0xfc>
   b9cee:	4544      	cmp	r4, r8
   b9cf0:	d9c3      	bls.n	b9c7a <__hexnan+0x7a>
   b9cf2:	2300      	movs	r3, #0
   b9cf4:	f844 3c04 	str.w	r3, [r4, #-4]
   b9cf8:	2501      	movs	r5, #1
   b9cfa:	3c04      	subs	r4, #4
   b9cfc:	6822      	ldr	r2, [r4, #0]
   b9cfe:	f000 000f 	and.w	r0, r0, #15
   b9d02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b9d06:	6022      	str	r2, [r4, #0]
   b9d08:	e7b7      	b.n	b9c7a <__hexnan+0x7a>
   b9d0a:	2508      	movs	r5, #8
   b9d0c:	e7b5      	b.n	b9c7a <__hexnan+0x7a>
   b9d0e:	9b01      	ldr	r3, [sp, #4]
   b9d10:	2b00      	cmp	r3, #0
   b9d12:	d0df      	beq.n	b9cd4 <__hexnan+0xd4>
   b9d14:	f04f 32ff 	mov.w	r2, #4294967295
   b9d18:	f1c3 0320 	rsb	r3, r3, #32
   b9d1c:	fa22 f303 	lsr.w	r3, r2, r3
   b9d20:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b9d24:	401a      	ands	r2, r3
   b9d26:	f846 2c04 	str.w	r2, [r6, #-4]
   b9d2a:	e7d3      	b.n	b9cd4 <__hexnan+0xd4>
   b9d2c:	3f04      	subs	r7, #4
   b9d2e:	e7d1      	b.n	b9cd4 <__hexnan+0xd4>
   b9d30:	2004      	movs	r0, #4
   b9d32:	b007      	add	sp, #28
   b9d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9d38 <__retarget_lock_acquire_recursive>:
   b9d38:	4770      	bx	lr

000b9d3a <__retarget_lock_release>:
   b9d3a:	4770      	bx	lr

000b9d3c <__retarget_lock_release_recursive>:
   b9d3c:	4770      	bx	lr

000b9d3e <__ascii_mbtowc>:
   b9d3e:	b082      	sub	sp, #8
   b9d40:	b901      	cbnz	r1, b9d44 <__ascii_mbtowc+0x6>
   b9d42:	a901      	add	r1, sp, #4
   b9d44:	b142      	cbz	r2, b9d58 <__ascii_mbtowc+0x1a>
   b9d46:	b14b      	cbz	r3, b9d5c <__ascii_mbtowc+0x1e>
   b9d48:	7813      	ldrb	r3, [r2, #0]
   b9d4a:	600b      	str	r3, [r1, #0]
   b9d4c:	7812      	ldrb	r2, [r2, #0]
   b9d4e:	1e10      	subs	r0, r2, #0
   b9d50:	bf18      	it	ne
   b9d52:	2001      	movne	r0, #1
   b9d54:	b002      	add	sp, #8
   b9d56:	4770      	bx	lr
   b9d58:	4610      	mov	r0, r2
   b9d5a:	e7fb      	b.n	b9d54 <__ascii_mbtowc+0x16>
   b9d5c:	f06f 0001 	mvn.w	r0, #1
   b9d60:	e7f8      	b.n	b9d54 <__ascii_mbtowc+0x16>
	...

000b9d64 <_Balloc>:
   b9d64:	b570      	push	{r4, r5, r6, lr}
   b9d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9d68:	4604      	mov	r4, r0
   b9d6a:	460d      	mov	r5, r1
   b9d6c:	b976      	cbnz	r6, b9d8c <_Balloc+0x28>
   b9d6e:	2010      	movs	r0, #16
   b9d70:	f7fc f930 	bl	b5fd4 <malloc>
   b9d74:	4602      	mov	r2, r0
   b9d76:	6260      	str	r0, [r4, #36]	; 0x24
   b9d78:	b920      	cbnz	r0, b9d84 <_Balloc+0x20>
   b9d7a:	4b18      	ldr	r3, [pc, #96]	; (b9ddc <_Balloc+0x78>)
   b9d7c:	4818      	ldr	r0, [pc, #96]	; (b9de0 <_Balloc+0x7c>)
   b9d7e:	2166      	movs	r1, #102	; 0x66
   b9d80:	f7fc f960 	bl	b6044 <__assert_func>
   b9d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9d88:	6006      	str	r6, [r0, #0]
   b9d8a:	60c6      	str	r6, [r0, #12]
   b9d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9d8e:	68f3      	ldr	r3, [r6, #12]
   b9d90:	b183      	cbz	r3, b9db4 <_Balloc+0x50>
   b9d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d94:	68db      	ldr	r3, [r3, #12]
   b9d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b9d9a:	b9b8      	cbnz	r0, b9dcc <_Balloc+0x68>
   b9d9c:	2101      	movs	r1, #1
   b9d9e:	fa01 f605 	lsl.w	r6, r1, r5
   b9da2:	1d72      	adds	r2, r6, #5
   b9da4:	0092      	lsls	r2, r2, #2
   b9da6:	4620      	mov	r0, r4
   b9da8:	f000 fc9d 	bl	ba6e6 <_calloc_r>
   b9dac:	b160      	cbz	r0, b9dc8 <_Balloc+0x64>
   b9dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9db2:	e00e      	b.n	b9dd2 <_Balloc+0x6e>
   b9db4:	2221      	movs	r2, #33	; 0x21
   b9db6:	2104      	movs	r1, #4
   b9db8:	4620      	mov	r0, r4
   b9dba:	f000 fc94 	bl	ba6e6 <_calloc_r>
   b9dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9dc0:	60f0      	str	r0, [r6, #12]
   b9dc2:	68db      	ldr	r3, [r3, #12]
   b9dc4:	2b00      	cmp	r3, #0
   b9dc6:	d1e4      	bne.n	b9d92 <_Balloc+0x2e>
   b9dc8:	2000      	movs	r0, #0
   b9dca:	bd70      	pop	{r4, r5, r6, pc}
   b9dcc:	6802      	ldr	r2, [r0, #0]
   b9dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9dd2:	2300      	movs	r3, #0
   b9dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9dd8:	e7f7      	b.n	b9dca <_Balloc+0x66>
   b9dda:	bf00      	nop
   b9ddc:	000bb1a1 	.word	0x000bb1a1
   b9de0:	000bb43a 	.word	0x000bb43a

000b9de4 <_Bfree>:
   b9de4:	b570      	push	{r4, r5, r6, lr}
   b9de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9de8:	4605      	mov	r5, r0
   b9dea:	460c      	mov	r4, r1
   b9dec:	b976      	cbnz	r6, b9e0c <_Bfree+0x28>
   b9dee:	2010      	movs	r0, #16
   b9df0:	f7fc f8f0 	bl	b5fd4 <malloc>
   b9df4:	4602      	mov	r2, r0
   b9df6:	6268      	str	r0, [r5, #36]	; 0x24
   b9df8:	b920      	cbnz	r0, b9e04 <_Bfree+0x20>
   b9dfa:	4b09      	ldr	r3, [pc, #36]	; (b9e20 <_Bfree+0x3c>)
   b9dfc:	4809      	ldr	r0, [pc, #36]	; (b9e24 <_Bfree+0x40>)
   b9dfe:	218a      	movs	r1, #138	; 0x8a
   b9e00:	f7fc f920 	bl	b6044 <__assert_func>
   b9e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9e08:	6006      	str	r6, [r0, #0]
   b9e0a:	60c6      	str	r6, [r0, #12]
   b9e0c:	b13c      	cbz	r4, b9e1e <_Bfree+0x3a>
   b9e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b9e10:	6862      	ldr	r2, [r4, #4]
   b9e12:	68db      	ldr	r3, [r3, #12]
   b9e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b9e18:	6021      	str	r1, [r4, #0]
   b9e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b9e1e:	bd70      	pop	{r4, r5, r6, pc}
   b9e20:	000bb1a1 	.word	0x000bb1a1
   b9e24:	000bb43a 	.word	0x000bb43a

000b9e28 <__multadd>:
   b9e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9e2c:	690d      	ldr	r5, [r1, #16]
   b9e2e:	4607      	mov	r7, r0
   b9e30:	460c      	mov	r4, r1
   b9e32:	461e      	mov	r6, r3
   b9e34:	f101 0c14 	add.w	ip, r1, #20
   b9e38:	2000      	movs	r0, #0
   b9e3a:	f8dc 3000 	ldr.w	r3, [ip]
   b9e3e:	b299      	uxth	r1, r3
   b9e40:	fb02 6101 	mla	r1, r2, r1, r6
   b9e44:	0c1e      	lsrs	r6, r3, #16
   b9e46:	0c0b      	lsrs	r3, r1, #16
   b9e48:	fb02 3306 	mla	r3, r2, r6, r3
   b9e4c:	b289      	uxth	r1, r1
   b9e4e:	3001      	adds	r0, #1
   b9e50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9e54:	4285      	cmp	r5, r0
   b9e56:	f84c 1b04 	str.w	r1, [ip], #4
   b9e5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b9e5e:	dcec      	bgt.n	b9e3a <__multadd+0x12>
   b9e60:	b30e      	cbz	r6, b9ea6 <__multadd+0x7e>
   b9e62:	68a3      	ldr	r3, [r4, #8]
   b9e64:	42ab      	cmp	r3, r5
   b9e66:	dc19      	bgt.n	b9e9c <__multadd+0x74>
   b9e68:	6861      	ldr	r1, [r4, #4]
   b9e6a:	4638      	mov	r0, r7
   b9e6c:	3101      	adds	r1, #1
   b9e6e:	f7ff ff79 	bl	b9d64 <_Balloc>
   b9e72:	4680      	mov	r8, r0
   b9e74:	b928      	cbnz	r0, b9e82 <__multadd+0x5a>
   b9e76:	4602      	mov	r2, r0
   b9e78:	4b0c      	ldr	r3, [pc, #48]	; (b9eac <__multadd+0x84>)
   b9e7a:	480d      	ldr	r0, [pc, #52]	; (b9eb0 <__multadd+0x88>)
   b9e7c:	21b5      	movs	r1, #181	; 0xb5
   b9e7e:	f7fc f8e1 	bl	b6044 <__assert_func>
   b9e82:	6922      	ldr	r2, [r4, #16]
   b9e84:	3202      	adds	r2, #2
   b9e86:	f104 010c 	add.w	r1, r4, #12
   b9e8a:	0092      	lsls	r2, r2, #2
   b9e8c:	300c      	adds	r0, #12
   b9e8e:	f7fe fc2f 	bl	b86f0 <memcpy>
   b9e92:	4621      	mov	r1, r4
   b9e94:	4638      	mov	r0, r7
   b9e96:	f7ff ffa5 	bl	b9de4 <_Bfree>
   b9e9a:	4644      	mov	r4, r8
   b9e9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9ea0:	3501      	adds	r5, #1
   b9ea2:	615e      	str	r6, [r3, #20]
   b9ea4:	6125      	str	r5, [r4, #16]
   b9ea6:	4620      	mov	r0, r4
   b9ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9eac:	000bb391 	.word	0x000bb391
   b9eb0:	000bb43a 	.word	0x000bb43a

000b9eb4 <__s2b>:
   b9eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9eb8:	460c      	mov	r4, r1
   b9eba:	4615      	mov	r5, r2
   b9ebc:	461f      	mov	r7, r3
   b9ebe:	2209      	movs	r2, #9
   b9ec0:	3308      	adds	r3, #8
   b9ec2:	4606      	mov	r6, r0
   b9ec4:	fb93 f3f2 	sdiv	r3, r3, r2
   b9ec8:	2100      	movs	r1, #0
   b9eca:	2201      	movs	r2, #1
   b9ecc:	429a      	cmp	r2, r3
   b9ece:	db09      	blt.n	b9ee4 <__s2b+0x30>
   b9ed0:	4630      	mov	r0, r6
   b9ed2:	f7ff ff47 	bl	b9d64 <_Balloc>
   b9ed6:	b940      	cbnz	r0, b9eea <__s2b+0x36>
   b9ed8:	4602      	mov	r2, r0
   b9eda:	4b19      	ldr	r3, [pc, #100]	; (b9f40 <__s2b+0x8c>)
   b9edc:	4819      	ldr	r0, [pc, #100]	; (b9f44 <__s2b+0x90>)
   b9ede:	21ce      	movs	r1, #206	; 0xce
   b9ee0:	f7fc f8b0 	bl	b6044 <__assert_func>
   b9ee4:	0052      	lsls	r2, r2, #1
   b9ee6:	3101      	adds	r1, #1
   b9ee8:	e7f0      	b.n	b9ecc <__s2b+0x18>
   b9eea:	9b08      	ldr	r3, [sp, #32]
   b9eec:	6143      	str	r3, [r0, #20]
   b9eee:	2d09      	cmp	r5, #9
   b9ef0:	f04f 0301 	mov.w	r3, #1
   b9ef4:	6103      	str	r3, [r0, #16]
   b9ef6:	dd16      	ble.n	b9f26 <__s2b+0x72>
   b9ef8:	f104 0909 	add.w	r9, r4, #9
   b9efc:	46c8      	mov	r8, r9
   b9efe:	442c      	add	r4, r5
   b9f00:	f818 3b01 	ldrb.w	r3, [r8], #1
   b9f04:	4601      	mov	r1, r0
   b9f06:	3b30      	subs	r3, #48	; 0x30
   b9f08:	220a      	movs	r2, #10
   b9f0a:	4630      	mov	r0, r6
   b9f0c:	f7ff ff8c 	bl	b9e28 <__multadd>
   b9f10:	45a0      	cmp	r8, r4
   b9f12:	d1f5      	bne.n	b9f00 <__s2b+0x4c>
   b9f14:	f1a5 0408 	sub.w	r4, r5, #8
   b9f18:	444c      	add	r4, r9
   b9f1a:	1b2d      	subs	r5, r5, r4
   b9f1c:	1963      	adds	r3, r4, r5
   b9f1e:	42bb      	cmp	r3, r7
   b9f20:	db04      	blt.n	b9f2c <__s2b+0x78>
   b9f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9f26:	340a      	adds	r4, #10
   b9f28:	2509      	movs	r5, #9
   b9f2a:	e7f6      	b.n	b9f1a <__s2b+0x66>
   b9f2c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b9f30:	4601      	mov	r1, r0
   b9f32:	3b30      	subs	r3, #48	; 0x30
   b9f34:	220a      	movs	r2, #10
   b9f36:	4630      	mov	r0, r6
   b9f38:	f7ff ff76 	bl	b9e28 <__multadd>
   b9f3c:	e7ee      	b.n	b9f1c <__s2b+0x68>
   b9f3e:	bf00      	nop
   b9f40:	000bb391 	.word	0x000bb391
   b9f44:	000bb43a 	.word	0x000bb43a

000b9f48 <__hi0bits>:
   b9f48:	0c03      	lsrs	r3, r0, #16
   b9f4a:	041b      	lsls	r3, r3, #16
   b9f4c:	b9d3      	cbnz	r3, b9f84 <__hi0bits+0x3c>
   b9f4e:	0400      	lsls	r0, r0, #16
   b9f50:	2310      	movs	r3, #16
   b9f52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9f56:	bf04      	itt	eq
   b9f58:	0200      	lsleq	r0, r0, #8
   b9f5a:	3308      	addeq	r3, #8
   b9f5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9f60:	bf04      	itt	eq
   b9f62:	0100      	lsleq	r0, r0, #4
   b9f64:	3304      	addeq	r3, #4
   b9f66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9f6a:	bf04      	itt	eq
   b9f6c:	0080      	lsleq	r0, r0, #2
   b9f6e:	3302      	addeq	r3, #2
   b9f70:	2800      	cmp	r0, #0
   b9f72:	db05      	blt.n	b9f80 <__hi0bits+0x38>
   b9f74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9f78:	f103 0301 	add.w	r3, r3, #1
   b9f7c:	bf08      	it	eq
   b9f7e:	2320      	moveq	r3, #32
   b9f80:	4618      	mov	r0, r3
   b9f82:	4770      	bx	lr
   b9f84:	2300      	movs	r3, #0
   b9f86:	e7e4      	b.n	b9f52 <__hi0bits+0xa>

000b9f88 <__lo0bits>:
   b9f88:	6803      	ldr	r3, [r0, #0]
   b9f8a:	f013 0207 	ands.w	r2, r3, #7
   b9f8e:	4601      	mov	r1, r0
   b9f90:	d00b      	beq.n	b9faa <__lo0bits+0x22>
   b9f92:	07da      	lsls	r2, r3, #31
   b9f94:	d423      	bmi.n	b9fde <__lo0bits+0x56>
   b9f96:	0798      	lsls	r0, r3, #30
   b9f98:	bf49      	itett	mi
   b9f9a:	085b      	lsrmi	r3, r3, #1
   b9f9c:	089b      	lsrpl	r3, r3, #2
   b9f9e:	2001      	movmi	r0, #1
   b9fa0:	600b      	strmi	r3, [r1, #0]
   b9fa2:	bf5c      	itt	pl
   b9fa4:	600b      	strpl	r3, [r1, #0]
   b9fa6:	2002      	movpl	r0, #2
   b9fa8:	4770      	bx	lr
   b9faa:	b298      	uxth	r0, r3
   b9fac:	b9a8      	cbnz	r0, b9fda <__lo0bits+0x52>
   b9fae:	0c1b      	lsrs	r3, r3, #16
   b9fb0:	2010      	movs	r0, #16
   b9fb2:	b2da      	uxtb	r2, r3
   b9fb4:	b90a      	cbnz	r2, b9fba <__lo0bits+0x32>
   b9fb6:	3008      	adds	r0, #8
   b9fb8:	0a1b      	lsrs	r3, r3, #8
   b9fba:	071a      	lsls	r2, r3, #28
   b9fbc:	bf04      	itt	eq
   b9fbe:	091b      	lsreq	r3, r3, #4
   b9fc0:	3004      	addeq	r0, #4
   b9fc2:	079a      	lsls	r2, r3, #30
   b9fc4:	bf04      	itt	eq
   b9fc6:	089b      	lsreq	r3, r3, #2
   b9fc8:	3002      	addeq	r0, #2
   b9fca:	07da      	lsls	r2, r3, #31
   b9fcc:	d403      	bmi.n	b9fd6 <__lo0bits+0x4e>
   b9fce:	085b      	lsrs	r3, r3, #1
   b9fd0:	f100 0001 	add.w	r0, r0, #1
   b9fd4:	d005      	beq.n	b9fe2 <__lo0bits+0x5a>
   b9fd6:	600b      	str	r3, [r1, #0]
   b9fd8:	4770      	bx	lr
   b9fda:	4610      	mov	r0, r2
   b9fdc:	e7e9      	b.n	b9fb2 <__lo0bits+0x2a>
   b9fde:	2000      	movs	r0, #0
   b9fe0:	4770      	bx	lr
   b9fe2:	2020      	movs	r0, #32
   b9fe4:	4770      	bx	lr
	...

000b9fe8 <__i2b>:
   b9fe8:	b510      	push	{r4, lr}
   b9fea:	460c      	mov	r4, r1
   b9fec:	2101      	movs	r1, #1
   b9fee:	f7ff feb9 	bl	b9d64 <_Balloc>
   b9ff2:	4602      	mov	r2, r0
   b9ff4:	b928      	cbnz	r0, ba002 <__i2b+0x1a>
   b9ff6:	4b05      	ldr	r3, [pc, #20]	; (ba00c <__i2b+0x24>)
   b9ff8:	4805      	ldr	r0, [pc, #20]	; (ba010 <__i2b+0x28>)
   b9ffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9ffe:	f7fc f821 	bl	b6044 <__assert_func>
   ba002:	2301      	movs	r3, #1
   ba004:	6144      	str	r4, [r0, #20]
   ba006:	6103      	str	r3, [r0, #16]
   ba008:	bd10      	pop	{r4, pc}
   ba00a:	bf00      	nop
   ba00c:	000bb391 	.word	0x000bb391
   ba010:	000bb43a 	.word	0x000bb43a

000ba014 <__multiply>:
   ba014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba018:	4691      	mov	r9, r2
   ba01a:	690a      	ldr	r2, [r1, #16]
   ba01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba020:	429a      	cmp	r2, r3
   ba022:	bfb8      	it	lt
   ba024:	460b      	movlt	r3, r1
   ba026:	460c      	mov	r4, r1
   ba028:	bfbc      	itt	lt
   ba02a:	464c      	movlt	r4, r9
   ba02c:	4699      	movlt	r9, r3
   ba02e:	6927      	ldr	r7, [r4, #16]
   ba030:	f8d9 a010 	ldr.w	sl, [r9, #16]
   ba034:	68a3      	ldr	r3, [r4, #8]
   ba036:	6861      	ldr	r1, [r4, #4]
   ba038:	eb07 060a 	add.w	r6, r7, sl
   ba03c:	42b3      	cmp	r3, r6
   ba03e:	b085      	sub	sp, #20
   ba040:	bfb8      	it	lt
   ba042:	3101      	addlt	r1, #1
   ba044:	f7ff fe8e 	bl	b9d64 <_Balloc>
   ba048:	b930      	cbnz	r0, ba058 <__multiply+0x44>
   ba04a:	4602      	mov	r2, r0
   ba04c:	4b44      	ldr	r3, [pc, #272]	; (ba160 <__multiply+0x14c>)
   ba04e:	4845      	ldr	r0, [pc, #276]	; (ba164 <__multiply+0x150>)
   ba050:	f240 115d 	movw	r1, #349	; 0x15d
   ba054:	f7fb fff6 	bl	b6044 <__assert_func>
   ba058:	f100 0514 	add.w	r5, r0, #20
   ba05c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   ba060:	462b      	mov	r3, r5
   ba062:	2200      	movs	r2, #0
   ba064:	4543      	cmp	r3, r8
   ba066:	d321      	bcc.n	ba0ac <__multiply+0x98>
   ba068:	f104 0314 	add.w	r3, r4, #20
   ba06c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ba070:	f109 0314 	add.w	r3, r9, #20
   ba074:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   ba078:	9202      	str	r2, [sp, #8]
   ba07a:	1b3a      	subs	r2, r7, r4
   ba07c:	3a15      	subs	r2, #21
   ba07e:	f022 0203 	bic.w	r2, r2, #3
   ba082:	3204      	adds	r2, #4
   ba084:	f104 0115 	add.w	r1, r4, #21
   ba088:	428f      	cmp	r7, r1
   ba08a:	bf38      	it	cc
   ba08c:	2204      	movcc	r2, #4
   ba08e:	9201      	str	r2, [sp, #4]
   ba090:	9a02      	ldr	r2, [sp, #8]
   ba092:	9303      	str	r3, [sp, #12]
   ba094:	429a      	cmp	r2, r3
   ba096:	d80c      	bhi.n	ba0b2 <__multiply+0x9e>
   ba098:	2e00      	cmp	r6, #0
   ba09a:	dd03      	ble.n	ba0a4 <__multiply+0x90>
   ba09c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ba0a0:	2b00      	cmp	r3, #0
   ba0a2:	d05a      	beq.n	ba15a <__multiply+0x146>
   ba0a4:	6106      	str	r6, [r0, #16]
   ba0a6:	b005      	add	sp, #20
   ba0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba0ac:	f843 2b04 	str.w	r2, [r3], #4
   ba0b0:	e7d8      	b.n	ba064 <__multiply+0x50>
   ba0b2:	f8b3 a000 	ldrh.w	sl, [r3]
   ba0b6:	f1ba 0f00 	cmp.w	sl, #0
   ba0ba:	d024      	beq.n	ba106 <__multiply+0xf2>
   ba0bc:	f104 0e14 	add.w	lr, r4, #20
   ba0c0:	46a9      	mov	r9, r5
   ba0c2:	f04f 0c00 	mov.w	ip, #0
   ba0c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   ba0ca:	f8d9 1000 	ldr.w	r1, [r9]
   ba0ce:	fa1f fb82 	uxth.w	fp, r2
   ba0d2:	b289      	uxth	r1, r1
   ba0d4:	fb0a 110b 	mla	r1, sl, fp, r1
   ba0d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   ba0dc:	f8d9 2000 	ldr.w	r2, [r9]
   ba0e0:	4461      	add	r1, ip
   ba0e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba0e6:	fb0a c20b 	mla	r2, sl, fp, ip
   ba0ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   ba0ee:	b289      	uxth	r1, r1
   ba0f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   ba0f4:	4577      	cmp	r7, lr
   ba0f6:	f849 1b04 	str.w	r1, [r9], #4
   ba0fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   ba0fe:	d8e2      	bhi.n	ba0c6 <__multiply+0xb2>
   ba100:	9a01      	ldr	r2, [sp, #4]
   ba102:	f845 c002 	str.w	ip, [r5, r2]
   ba106:	9a03      	ldr	r2, [sp, #12]
   ba108:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   ba10c:	3304      	adds	r3, #4
   ba10e:	f1b9 0f00 	cmp.w	r9, #0
   ba112:	d020      	beq.n	ba156 <__multiply+0x142>
   ba114:	6829      	ldr	r1, [r5, #0]
   ba116:	f104 0c14 	add.w	ip, r4, #20
   ba11a:	46ae      	mov	lr, r5
   ba11c:	f04f 0a00 	mov.w	sl, #0
   ba120:	f8bc b000 	ldrh.w	fp, [ip]
   ba124:	f8be 2002 	ldrh.w	r2, [lr, #2]
   ba128:	fb09 220b 	mla	r2, r9, fp, r2
   ba12c:	4492      	add	sl, r2
   ba12e:	b289      	uxth	r1, r1
   ba130:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   ba134:	f84e 1b04 	str.w	r1, [lr], #4
   ba138:	f85c 2b04 	ldr.w	r2, [ip], #4
   ba13c:	f8be 1000 	ldrh.w	r1, [lr]
   ba140:	0c12      	lsrs	r2, r2, #16
   ba142:	fb09 1102 	mla	r1, r9, r2, r1
   ba146:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   ba14a:	4567      	cmp	r7, ip
   ba14c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   ba150:	d8e6      	bhi.n	ba120 <__multiply+0x10c>
   ba152:	9a01      	ldr	r2, [sp, #4]
   ba154:	50a9      	str	r1, [r5, r2]
   ba156:	3504      	adds	r5, #4
   ba158:	e79a      	b.n	ba090 <__multiply+0x7c>
   ba15a:	3e01      	subs	r6, #1
   ba15c:	e79c      	b.n	ba098 <__multiply+0x84>
   ba15e:	bf00      	nop
   ba160:	000bb391 	.word	0x000bb391
   ba164:	000bb43a 	.word	0x000bb43a

000ba168 <__pow5mult>:
   ba168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba16c:	4615      	mov	r5, r2
   ba16e:	f012 0203 	ands.w	r2, r2, #3
   ba172:	4606      	mov	r6, r0
   ba174:	460f      	mov	r7, r1
   ba176:	d007      	beq.n	ba188 <__pow5mult+0x20>
   ba178:	4c25      	ldr	r4, [pc, #148]	; (ba210 <__pow5mult+0xa8>)
   ba17a:	3a01      	subs	r2, #1
   ba17c:	2300      	movs	r3, #0
   ba17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ba182:	f7ff fe51 	bl	b9e28 <__multadd>
   ba186:	4607      	mov	r7, r0
   ba188:	10ad      	asrs	r5, r5, #2
   ba18a:	d03d      	beq.n	ba208 <__pow5mult+0xa0>
   ba18c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ba18e:	b97c      	cbnz	r4, ba1b0 <__pow5mult+0x48>
   ba190:	2010      	movs	r0, #16
   ba192:	f7fb ff1f 	bl	b5fd4 <malloc>
   ba196:	4602      	mov	r2, r0
   ba198:	6270      	str	r0, [r6, #36]	; 0x24
   ba19a:	b928      	cbnz	r0, ba1a8 <__pow5mult+0x40>
   ba19c:	4b1d      	ldr	r3, [pc, #116]	; (ba214 <__pow5mult+0xac>)
   ba19e:	481e      	ldr	r0, [pc, #120]	; (ba218 <__pow5mult+0xb0>)
   ba1a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   ba1a4:	f7fb ff4e 	bl	b6044 <__assert_func>
   ba1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ba1ac:	6004      	str	r4, [r0, #0]
   ba1ae:	60c4      	str	r4, [r0, #12]
   ba1b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ba1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ba1b8:	b94c      	cbnz	r4, ba1ce <__pow5mult+0x66>
   ba1ba:	f240 2171 	movw	r1, #625	; 0x271
   ba1be:	4630      	mov	r0, r6
   ba1c0:	f7ff ff12 	bl	b9fe8 <__i2b>
   ba1c4:	2300      	movs	r3, #0
   ba1c6:	f8c8 0008 	str.w	r0, [r8, #8]
   ba1ca:	4604      	mov	r4, r0
   ba1cc:	6003      	str	r3, [r0, #0]
   ba1ce:	f04f 0900 	mov.w	r9, #0
   ba1d2:	07eb      	lsls	r3, r5, #31
   ba1d4:	d50a      	bpl.n	ba1ec <__pow5mult+0x84>
   ba1d6:	4639      	mov	r1, r7
   ba1d8:	4622      	mov	r2, r4
   ba1da:	4630      	mov	r0, r6
   ba1dc:	f7ff ff1a 	bl	ba014 <__multiply>
   ba1e0:	4639      	mov	r1, r7
   ba1e2:	4680      	mov	r8, r0
   ba1e4:	4630      	mov	r0, r6
   ba1e6:	f7ff fdfd 	bl	b9de4 <_Bfree>
   ba1ea:	4647      	mov	r7, r8
   ba1ec:	106d      	asrs	r5, r5, #1
   ba1ee:	d00b      	beq.n	ba208 <__pow5mult+0xa0>
   ba1f0:	6820      	ldr	r0, [r4, #0]
   ba1f2:	b938      	cbnz	r0, ba204 <__pow5mult+0x9c>
   ba1f4:	4622      	mov	r2, r4
   ba1f6:	4621      	mov	r1, r4
   ba1f8:	4630      	mov	r0, r6
   ba1fa:	f7ff ff0b 	bl	ba014 <__multiply>
   ba1fe:	6020      	str	r0, [r4, #0]
   ba200:	f8c0 9000 	str.w	r9, [r0]
   ba204:	4604      	mov	r4, r0
   ba206:	e7e4      	b.n	ba1d2 <__pow5mult+0x6a>
   ba208:	4638      	mov	r0, r7
   ba20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba20e:	bf00      	nop
   ba210:	000bb5a8 	.word	0x000bb5a8
   ba214:	000bb1a1 	.word	0x000bb1a1
   ba218:	000bb43a 	.word	0x000bb43a

000ba21c <__lshift>:
   ba21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba220:	460c      	mov	r4, r1
   ba222:	6849      	ldr	r1, [r1, #4]
   ba224:	6923      	ldr	r3, [r4, #16]
   ba226:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ba22a:	68a3      	ldr	r3, [r4, #8]
   ba22c:	4607      	mov	r7, r0
   ba22e:	4691      	mov	r9, r2
   ba230:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ba234:	f108 0601 	add.w	r6, r8, #1
   ba238:	42b3      	cmp	r3, r6
   ba23a:	db0b      	blt.n	ba254 <__lshift+0x38>
   ba23c:	4638      	mov	r0, r7
   ba23e:	f7ff fd91 	bl	b9d64 <_Balloc>
   ba242:	4605      	mov	r5, r0
   ba244:	b948      	cbnz	r0, ba25a <__lshift+0x3e>
   ba246:	4602      	mov	r2, r0
   ba248:	4b2a      	ldr	r3, [pc, #168]	; (ba2f4 <__lshift+0xd8>)
   ba24a:	482b      	ldr	r0, [pc, #172]	; (ba2f8 <__lshift+0xdc>)
   ba24c:	f240 11d9 	movw	r1, #473	; 0x1d9
   ba250:	f7fb fef8 	bl	b6044 <__assert_func>
   ba254:	3101      	adds	r1, #1
   ba256:	005b      	lsls	r3, r3, #1
   ba258:	e7ee      	b.n	ba238 <__lshift+0x1c>
   ba25a:	2300      	movs	r3, #0
   ba25c:	f100 0114 	add.w	r1, r0, #20
   ba260:	f100 0210 	add.w	r2, r0, #16
   ba264:	4618      	mov	r0, r3
   ba266:	4553      	cmp	r3, sl
   ba268:	db37      	blt.n	ba2da <__lshift+0xbe>
   ba26a:	6920      	ldr	r0, [r4, #16]
   ba26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ba270:	f104 0314 	add.w	r3, r4, #20
   ba274:	f019 091f 	ands.w	r9, r9, #31
   ba278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ba27c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   ba280:	d02f      	beq.n	ba2e2 <__lshift+0xc6>
   ba282:	f1c9 0e20 	rsb	lr, r9, #32
   ba286:	468a      	mov	sl, r1
   ba288:	f04f 0c00 	mov.w	ip, #0
   ba28c:	681a      	ldr	r2, [r3, #0]
   ba28e:	fa02 f209 	lsl.w	r2, r2, r9
   ba292:	ea42 020c 	orr.w	r2, r2, ip
   ba296:	f84a 2b04 	str.w	r2, [sl], #4
   ba29a:	f853 2b04 	ldr.w	r2, [r3], #4
   ba29e:	4298      	cmp	r0, r3
   ba2a0:	fa22 fc0e 	lsr.w	ip, r2, lr
   ba2a4:	d8f2      	bhi.n	ba28c <__lshift+0x70>
   ba2a6:	1b03      	subs	r3, r0, r4
   ba2a8:	3b15      	subs	r3, #21
   ba2aa:	f023 0303 	bic.w	r3, r3, #3
   ba2ae:	3304      	adds	r3, #4
   ba2b0:	f104 0215 	add.w	r2, r4, #21
   ba2b4:	4290      	cmp	r0, r2
   ba2b6:	bf38      	it	cc
   ba2b8:	2304      	movcc	r3, #4
   ba2ba:	f841 c003 	str.w	ip, [r1, r3]
   ba2be:	f1bc 0f00 	cmp.w	ip, #0
   ba2c2:	d001      	beq.n	ba2c8 <__lshift+0xac>
   ba2c4:	f108 0602 	add.w	r6, r8, #2
   ba2c8:	3e01      	subs	r6, #1
   ba2ca:	4638      	mov	r0, r7
   ba2cc:	612e      	str	r6, [r5, #16]
   ba2ce:	4621      	mov	r1, r4
   ba2d0:	f7ff fd88 	bl	b9de4 <_Bfree>
   ba2d4:	4628      	mov	r0, r5
   ba2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba2da:	f842 0f04 	str.w	r0, [r2, #4]!
   ba2de:	3301      	adds	r3, #1
   ba2e0:	e7c1      	b.n	ba266 <__lshift+0x4a>
   ba2e2:	3904      	subs	r1, #4
   ba2e4:	f853 2b04 	ldr.w	r2, [r3], #4
   ba2e8:	f841 2f04 	str.w	r2, [r1, #4]!
   ba2ec:	4298      	cmp	r0, r3
   ba2ee:	d8f9      	bhi.n	ba2e4 <__lshift+0xc8>
   ba2f0:	e7ea      	b.n	ba2c8 <__lshift+0xac>
   ba2f2:	bf00      	nop
   ba2f4:	000bb391 	.word	0x000bb391
   ba2f8:	000bb43a 	.word	0x000bb43a

000ba2fc <__mcmp>:
   ba2fc:	b530      	push	{r4, r5, lr}
   ba2fe:	6902      	ldr	r2, [r0, #16]
   ba300:	690c      	ldr	r4, [r1, #16]
   ba302:	1b12      	subs	r2, r2, r4
   ba304:	d10e      	bne.n	ba324 <__mcmp+0x28>
   ba306:	f100 0314 	add.w	r3, r0, #20
   ba30a:	3114      	adds	r1, #20
   ba30c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ba310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ba314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ba318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ba31c:	42a5      	cmp	r5, r4
   ba31e:	d003      	beq.n	ba328 <__mcmp+0x2c>
   ba320:	d305      	bcc.n	ba32e <__mcmp+0x32>
   ba322:	2201      	movs	r2, #1
   ba324:	4610      	mov	r0, r2
   ba326:	bd30      	pop	{r4, r5, pc}
   ba328:	4283      	cmp	r3, r0
   ba32a:	d3f3      	bcc.n	ba314 <__mcmp+0x18>
   ba32c:	e7fa      	b.n	ba324 <__mcmp+0x28>
   ba32e:	f04f 32ff 	mov.w	r2, #4294967295
   ba332:	e7f7      	b.n	ba324 <__mcmp+0x28>

000ba334 <__mdiff>:
   ba334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba338:	460c      	mov	r4, r1
   ba33a:	4606      	mov	r6, r0
   ba33c:	4611      	mov	r1, r2
   ba33e:	4620      	mov	r0, r4
   ba340:	4690      	mov	r8, r2
   ba342:	f7ff ffdb 	bl	ba2fc <__mcmp>
   ba346:	1e05      	subs	r5, r0, #0
   ba348:	d110      	bne.n	ba36c <__mdiff+0x38>
   ba34a:	4629      	mov	r1, r5
   ba34c:	4630      	mov	r0, r6
   ba34e:	f7ff fd09 	bl	b9d64 <_Balloc>
   ba352:	b930      	cbnz	r0, ba362 <__mdiff+0x2e>
   ba354:	4b3a      	ldr	r3, [pc, #232]	; (ba440 <__mdiff+0x10c>)
   ba356:	4602      	mov	r2, r0
   ba358:	f240 2132 	movw	r1, #562	; 0x232
   ba35c:	4839      	ldr	r0, [pc, #228]	; (ba444 <__mdiff+0x110>)
   ba35e:	f7fb fe71 	bl	b6044 <__assert_func>
   ba362:	2301      	movs	r3, #1
   ba364:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ba368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba36c:	bfa4      	itt	ge
   ba36e:	4643      	movge	r3, r8
   ba370:	46a0      	movge	r8, r4
   ba372:	4630      	mov	r0, r6
   ba374:	f8d8 1004 	ldr.w	r1, [r8, #4]
   ba378:	bfa6      	itte	ge
   ba37a:	461c      	movge	r4, r3
   ba37c:	2500      	movge	r5, #0
   ba37e:	2501      	movlt	r5, #1
   ba380:	f7ff fcf0 	bl	b9d64 <_Balloc>
   ba384:	b920      	cbnz	r0, ba390 <__mdiff+0x5c>
   ba386:	4b2e      	ldr	r3, [pc, #184]	; (ba440 <__mdiff+0x10c>)
   ba388:	4602      	mov	r2, r0
   ba38a:	f44f 7110 	mov.w	r1, #576	; 0x240
   ba38e:	e7e5      	b.n	ba35c <__mdiff+0x28>
   ba390:	f8d8 7010 	ldr.w	r7, [r8, #16]
   ba394:	6926      	ldr	r6, [r4, #16]
   ba396:	60c5      	str	r5, [r0, #12]
   ba398:	f104 0914 	add.w	r9, r4, #20
   ba39c:	f108 0514 	add.w	r5, r8, #20
   ba3a0:	f100 0e14 	add.w	lr, r0, #20
   ba3a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   ba3a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   ba3ac:	f108 0210 	add.w	r2, r8, #16
   ba3b0:	46f2      	mov	sl, lr
   ba3b2:	2100      	movs	r1, #0
   ba3b4:	f859 3b04 	ldr.w	r3, [r9], #4
   ba3b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ba3bc:	fa1f f883 	uxth.w	r8, r3
   ba3c0:	fa11 f18b 	uxtah	r1, r1, fp
   ba3c4:	0c1b      	lsrs	r3, r3, #16
   ba3c6:	eba1 0808 	sub.w	r8, r1, r8
   ba3ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ba3ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ba3d2:	fa1f f888 	uxth.w	r8, r8
   ba3d6:	1419      	asrs	r1, r3, #16
   ba3d8:	454e      	cmp	r6, r9
   ba3da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ba3de:	f84a 3b04 	str.w	r3, [sl], #4
   ba3e2:	d8e7      	bhi.n	ba3b4 <__mdiff+0x80>
   ba3e4:	1b33      	subs	r3, r6, r4
   ba3e6:	3b15      	subs	r3, #21
   ba3e8:	f023 0303 	bic.w	r3, r3, #3
   ba3ec:	3304      	adds	r3, #4
   ba3ee:	3415      	adds	r4, #21
   ba3f0:	42a6      	cmp	r6, r4
   ba3f2:	bf38      	it	cc
   ba3f4:	2304      	movcc	r3, #4
   ba3f6:	441d      	add	r5, r3
   ba3f8:	4473      	add	r3, lr
   ba3fa:	469e      	mov	lr, r3
   ba3fc:	462e      	mov	r6, r5
   ba3fe:	4566      	cmp	r6, ip
   ba400:	d30e      	bcc.n	ba420 <__mdiff+0xec>
   ba402:	f10c 0203 	add.w	r2, ip, #3
   ba406:	1b52      	subs	r2, r2, r5
   ba408:	f022 0203 	bic.w	r2, r2, #3
   ba40c:	3d03      	subs	r5, #3
   ba40e:	45ac      	cmp	ip, r5
   ba410:	bf38      	it	cc
   ba412:	2200      	movcc	r2, #0
   ba414:	441a      	add	r2, r3
   ba416:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ba41a:	b17b      	cbz	r3, ba43c <__mdiff+0x108>
   ba41c:	6107      	str	r7, [r0, #16]
   ba41e:	e7a3      	b.n	ba368 <__mdiff+0x34>
   ba420:	f856 8b04 	ldr.w	r8, [r6], #4
   ba424:	fa11 f288 	uxtah	r2, r1, r8
   ba428:	1414      	asrs	r4, r2, #16
   ba42a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   ba42e:	b292      	uxth	r2, r2
   ba430:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   ba434:	f84e 2b04 	str.w	r2, [lr], #4
   ba438:	1421      	asrs	r1, r4, #16
   ba43a:	e7e0      	b.n	ba3fe <__mdiff+0xca>
   ba43c:	3f01      	subs	r7, #1
   ba43e:	e7ea      	b.n	ba416 <__mdiff+0xe2>
   ba440:	000bb391 	.word	0x000bb391
   ba444:	000bb43a 	.word	0x000bb43a

000ba448 <__ulp>:
   ba448:	b082      	sub	sp, #8
   ba44a:	ed8d 0b00 	vstr	d0, [sp]
   ba44e:	9b01      	ldr	r3, [sp, #4]
   ba450:	4912      	ldr	r1, [pc, #72]	; (ba49c <__ulp+0x54>)
   ba452:	4019      	ands	r1, r3
   ba454:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ba458:	2900      	cmp	r1, #0
   ba45a:	dd05      	ble.n	ba468 <__ulp+0x20>
   ba45c:	2200      	movs	r2, #0
   ba45e:	460b      	mov	r3, r1
   ba460:	ec43 2b10 	vmov	d0, r2, r3
   ba464:	b002      	add	sp, #8
   ba466:	4770      	bx	lr
   ba468:	4249      	negs	r1, r1
   ba46a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ba46e:	ea4f 5021 	mov.w	r0, r1, asr #20
   ba472:	f04f 0200 	mov.w	r2, #0
   ba476:	f04f 0300 	mov.w	r3, #0
   ba47a:	da04      	bge.n	ba486 <__ulp+0x3e>
   ba47c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ba480:	fa41 f300 	asr.w	r3, r1, r0
   ba484:	e7ec      	b.n	ba460 <__ulp+0x18>
   ba486:	f1a0 0114 	sub.w	r1, r0, #20
   ba48a:	291e      	cmp	r1, #30
   ba48c:	bfda      	itte	le
   ba48e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   ba492:	fa20 f101 	lsrle.w	r1, r0, r1
   ba496:	2101      	movgt	r1, #1
   ba498:	460a      	mov	r2, r1
   ba49a:	e7e1      	b.n	ba460 <__ulp+0x18>
   ba49c:	7ff00000 	.word	0x7ff00000

000ba4a0 <__b2d>:
   ba4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba4a2:	6905      	ldr	r5, [r0, #16]
   ba4a4:	f100 0714 	add.w	r7, r0, #20
   ba4a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   ba4ac:	1f2e      	subs	r6, r5, #4
   ba4ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   ba4b2:	4620      	mov	r0, r4
   ba4b4:	f7ff fd48 	bl	b9f48 <__hi0bits>
   ba4b8:	f1c0 0320 	rsb	r3, r0, #32
   ba4bc:	280a      	cmp	r0, #10
   ba4be:	f8df c07c 	ldr.w	ip, [pc, #124]	; ba53c <__b2d+0x9c>
   ba4c2:	600b      	str	r3, [r1, #0]
   ba4c4:	dc14      	bgt.n	ba4f0 <__b2d+0x50>
   ba4c6:	f1c0 0e0b 	rsb	lr, r0, #11
   ba4ca:	fa24 f10e 	lsr.w	r1, r4, lr
   ba4ce:	42b7      	cmp	r7, r6
   ba4d0:	ea41 030c 	orr.w	r3, r1, ip
   ba4d4:	bf34      	ite	cc
   ba4d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba4da:	2100      	movcs	r1, #0
   ba4dc:	3015      	adds	r0, #21
   ba4de:	fa04 f000 	lsl.w	r0, r4, r0
   ba4e2:	fa21 f10e 	lsr.w	r1, r1, lr
   ba4e6:	ea40 0201 	orr.w	r2, r0, r1
   ba4ea:	ec43 2b10 	vmov	d0, r2, r3
   ba4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   ba4f0:	42b7      	cmp	r7, r6
   ba4f2:	bf3a      	itte	cc
   ba4f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   ba4f8:	f1a5 0608 	subcc.w	r6, r5, #8
   ba4fc:	2100      	movcs	r1, #0
   ba4fe:	380b      	subs	r0, #11
   ba500:	d017      	beq.n	ba532 <__b2d+0x92>
   ba502:	f1c0 0c20 	rsb	ip, r0, #32
   ba506:	fa04 f500 	lsl.w	r5, r4, r0
   ba50a:	42be      	cmp	r6, r7
   ba50c:	fa21 f40c 	lsr.w	r4, r1, ip
   ba510:	ea45 0504 	orr.w	r5, r5, r4
   ba514:	bf8c      	ite	hi
   ba516:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   ba51a:	2400      	movls	r4, #0
   ba51c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   ba520:	fa01 f000 	lsl.w	r0, r1, r0
   ba524:	fa24 f40c 	lsr.w	r4, r4, ip
   ba528:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   ba52c:	ea40 0204 	orr.w	r2, r0, r4
   ba530:	e7db      	b.n	ba4ea <__b2d+0x4a>
   ba532:	ea44 030c 	orr.w	r3, r4, ip
   ba536:	460a      	mov	r2, r1
   ba538:	e7d7      	b.n	ba4ea <__b2d+0x4a>
   ba53a:	bf00      	nop
   ba53c:	3ff00000 	.word	0x3ff00000

000ba540 <__d2b>:
   ba540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba544:	4689      	mov	r9, r1
   ba546:	2101      	movs	r1, #1
   ba548:	ec57 6b10 	vmov	r6, r7, d0
   ba54c:	4690      	mov	r8, r2
   ba54e:	f7ff fc09 	bl	b9d64 <_Balloc>
   ba552:	4604      	mov	r4, r0
   ba554:	b930      	cbnz	r0, ba564 <__d2b+0x24>
   ba556:	4602      	mov	r2, r0
   ba558:	4b25      	ldr	r3, [pc, #148]	; (ba5f0 <__d2b+0xb0>)
   ba55a:	4826      	ldr	r0, [pc, #152]	; (ba5f4 <__d2b+0xb4>)
   ba55c:	f240 310a 	movw	r1, #778	; 0x30a
   ba560:	f7fb fd70 	bl	b6044 <__assert_func>
   ba564:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba568:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba56c:	bb35      	cbnz	r5, ba5bc <__d2b+0x7c>
   ba56e:	2e00      	cmp	r6, #0
   ba570:	9301      	str	r3, [sp, #4]
   ba572:	d028      	beq.n	ba5c6 <__d2b+0x86>
   ba574:	4668      	mov	r0, sp
   ba576:	9600      	str	r6, [sp, #0]
   ba578:	f7ff fd06 	bl	b9f88 <__lo0bits>
   ba57c:	9900      	ldr	r1, [sp, #0]
   ba57e:	b300      	cbz	r0, ba5c2 <__d2b+0x82>
   ba580:	9a01      	ldr	r2, [sp, #4]
   ba582:	f1c0 0320 	rsb	r3, r0, #32
   ba586:	fa02 f303 	lsl.w	r3, r2, r3
   ba58a:	430b      	orrs	r3, r1
   ba58c:	40c2      	lsrs	r2, r0
   ba58e:	6163      	str	r3, [r4, #20]
   ba590:	9201      	str	r2, [sp, #4]
   ba592:	9b01      	ldr	r3, [sp, #4]
   ba594:	61a3      	str	r3, [r4, #24]
   ba596:	2b00      	cmp	r3, #0
   ba598:	bf14      	ite	ne
   ba59a:	2202      	movne	r2, #2
   ba59c:	2201      	moveq	r2, #1
   ba59e:	6122      	str	r2, [r4, #16]
   ba5a0:	b1d5      	cbz	r5, ba5d8 <__d2b+0x98>
   ba5a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba5a6:	4405      	add	r5, r0
   ba5a8:	f8c9 5000 	str.w	r5, [r9]
   ba5ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba5b0:	f8c8 0000 	str.w	r0, [r8]
   ba5b4:	4620      	mov	r0, r4
   ba5b6:	b003      	add	sp, #12
   ba5b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba5c0:	e7d5      	b.n	ba56e <__d2b+0x2e>
   ba5c2:	6161      	str	r1, [r4, #20]
   ba5c4:	e7e5      	b.n	ba592 <__d2b+0x52>
   ba5c6:	a801      	add	r0, sp, #4
   ba5c8:	f7ff fcde 	bl	b9f88 <__lo0bits>
   ba5cc:	9b01      	ldr	r3, [sp, #4]
   ba5ce:	6163      	str	r3, [r4, #20]
   ba5d0:	2201      	movs	r2, #1
   ba5d2:	6122      	str	r2, [r4, #16]
   ba5d4:	3020      	adds	r0, #32
   ba5d6:	e7e3      	b.n	ba5a0 <__d2b+0x60>
   ba5d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba5dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba5e0:	f8c9 0000 	str.w	r0, [r9]
   ba5e4:	6918      	ldr	r0, [r3, #16]
   ba5e6:	f7ff fcaf 	bl	b9f48 <__hi0bits>
   ba5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba5ee:	e7df      	b.n	ba5b0 <__d2b+0x70>
   ba5f0:	000bb391 	.word	0x000bb391
   ba5f4:	000bb43a 	.word	0x000bb43a

000ba5f8 <__ratio>:
   ba5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5fc:	4688      	mov	r8, r1
   ba5fe:	4669      	mov	r1, sp
   ba600:	4681      	mov	r9, r0
   ba602:	f7ff ff4d 	bl	ba4a0 <__b2d>
   ba606:	a901      	add	r1, sp, #4
   ba608:	4640      	mov	r0, r8
   ba60a:	ec55 4b10 	vmov	r4, r5, d0
   ba60e:	f7ff ff47 	bl	ba4a0 <__b2d>
   ba612:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba616:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba61a:	eba3 0c02 	sub.w	ip, r3, r2
   ba61e:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba622:	1a9b      	subs	r3, r3, r2
   ba624:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba628:	ec51 0b10 	vmov	r0, r1, d0
   ba62c:	2b00      	cmp	r3, #0
   ba62e:	bfd6      	itet	le
   ba630:	460a      	movle	r2, r1
   ba632:	462a      	movgt	r2, r5
   ba634:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba638:	468b      	mov	fp, r1
   ba63a:	462f      	mov	r7, r5
   ba63c:	bfd4      	ite	le
   ba63e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba642:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba646:	4620      	mov	r0, r4
   ba648:	ee10 2a10 	vmov	r2, s0
   ba64c:	465b      	mov	r3, fp
   ba64e:	4639      	mov	r1, r7
   ba650:	f7fd fd9a 	bl	b8188 <__aeabi_ddiv>
   ba654:	ec41 0b10 	vmov	d0, r0, r1
   ba658:	b003      	add	sp, #12
   ba65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba65e <__copybits>:
   ba65e:	3901      	subs	r1, #1
   ba660:	b570      	push	{r4, r5, r6, lr}
   ba662:	1149      	asrs	r1, r1, #5
   ba664:	6914      	ldr	r4, [r2, #16]
   ba666:	3101      	adds	r1, #1
   ba668:	f102 0314 	add.w	r3, r2, #20
   ba66c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba670:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba674:	1f05      	subs	r5, r0, #4
   ba676:	42a3      	cmp	r3, r4
   ba678:	d30c      	bcc.n	ba694 <__copybits+0x36>
   ba67a:	1aa3      	subs	r3, r4, r2
   ba67c:	3b11      	subs	r3, #17
   ba67e:	f023 0303 	bic.w	r3, r3, #3
   ba682:	3211      	adds	r2, #17
   ba684:	42a2      	cmp	r2, r4
   ba686:	bf88      	it	hi
   ba688:	2300      	movhi	r3, #0
   ba68a:	4418      	add	r0, r3
   ba68c:	2300      	movs	r3, #0
   ba68e:	4288      	cmp	r0, r1
   ba690:	d305      	bcc.n	ba69e <__copybits+0x40>
   ba692:	bd70      	pop	{r4, r5, r6, pc}
   ba694:	f853 6b04 	ldr.w	r6, [r3], #4
   ba698:	f845 6f04 	str.w	r6, [r5, #4]!
   ba69c:	e7eb      	b.n	ba676 <__copybits+0x18>
   ba69e:	f840 3b04 	str.w	r3, [r0], #4
   ba6a2:	e7f4      	b.n	ba68e <__copybits+0x30>

000ba6a4 <__any_on>:
   ba6a4:	f100 0214 	add.w	r2, r0, #20
   ba6a8:	6900      	ldr	r0, [r0, #16]
   ba6aa:	114b      	asrs	r3, r1, #5
   ba6ac:	4298      	cmp	r0, r3
   ba6ae:	b510      	push	{r4, lr}
   ba6b0:	db11      	blt.n	ba6d6 <__any_on+0x32>
   ba6b2:	dd0a      	ble.n	ba6ca <__any_on+0x26>
   ba6b4:	f011 011f 	ands.w	r1, r1, #31
   ba6b8:	d007      	beq.n	ba6ca <__any_on+0x26>
   ba6ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba6be:	fa24 f001 	lsr.w	r0, r4, r1
   ba6c2:	fa00 f101 	lsl.w	r1, r0, r1
   ba6c6:	428c      	cmp	r4, r1
   ba6c8:	d10b      	bne.n	ba6e2 <__any_on+0x3e>
   ba6ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba6ce:	4293      	cmp	r3, r2
   ba6d0:	d803      	bhi.n	ba6da <__any_on+0x36>
   ba6d2:	2000      	movs	r0, #0
   ba6d4:	bd10      	pop	{r4, pc}
   ba6d6:	4603      	mov	r3, r0
   ba6d8:	e7f7      	b.n	ba6ca <__any_on+0x26>
   ba6da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba6de:	2900      	cmp	r1, #0
   ba6e0:	d0f5      	beq.n	ba6ce <__any_on+0x2a>
   ba6e2:	2001      	movs	r0, #1
   ba6e4:	e7f6      	b.n	ba6d4 <__any_on+0x30>

000ba6e6 <_calloc_r>:
   ba6e6:	b513      	push	{r0, r1, r4, lr}
   ba6e8:	434a      	muls	r2, r1
   ba6ea:	4611      	mov	r1, r2
   ba6ec:	9201      	str	r2, [sp, #4]
   ba6ee:	f7fb fc99 	bl	b6024 <_malloc_r>
   ba6f2:	4604      	mov	r4, r0
   ba6f4:	b118      	cbz	r0, ba6fe <_calloc_r+0x18>
   ba6f6:	9a01      	ldr	r2, [sp, #4]
   ba6f8:	2100      	movs	r1, #0
   ba6fa:	f7fe f821 	bl	b8740 <memset>
   ba6fe:	4620      	mov	r0, r4
   ba700:	b002      	add	sp, #8
   ba702:	bd10      	pop	{r4, pc}
   ba704:	0000      	movs	r0, r0
	...

000ba708 <nan>:
   ba708:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba710 <nan+0x8>
   ba70c:	4770      	bx	lr
   ba70e:	bf00      	nop
   ba710:	00000000 	.word	0x00000000
   ba714:	7ff80000 	.word	0x7ff80000

000ba718 <__ascii_wctomb>:
   ba718:	b149      	cbz	r1, ba72e <__ascii_wctomb+0x16>
   ba71a:	2aff      	cmp	r2, #255	; 0xff
   ba71c:	bf85      	ittet	hi
   ba71e:	238a      	movhi	r3, #138	; 0x8a
   ba720:	6003      	strhi	r3, [r0, #0]
   ba722:	700a      	strbls	r2, [r1, #0]
   ba724:	f04f 30ff 	movhi.w	r0, #4294967295
   ba728:	bf98      	it	ls
   ba72a:	2001      	movls	r0, #1
   ba72c:	4770      	bx	lr
   ba72e:	4608      	mov	r0, r1
   ba730:	4770      	bx	lr
	...

000ba734 <__aeabi_d2lz>:
   ba734:	b538      	push	{r3, r4, r5, lr}
   ba736:	2200      	movs	r2, #0
   ba738:	2300      	movs	r3, #0
   ba73a:	4604      	mov	r4, r0
   ba73c:	460d      	mov	r5, r1
   ba73e:	f7fd fe6b 	bl	b8418 <__aeabi_dcmplt>
   ba742:	b928      	cbnz	r0, ba750 <__aeabi_d2lz+0x1c>
   ba744:	4620      	mov	r0, r4
   ba746:	4629      	mov	r1, r5
   ba748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba74c:	f7fd bf3a 	b.w	b85c4 <__aeabi_d2ulz>
   ba750:	4620      	mov	r0, r4
   ba752:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   ba756:	f7fd ff35 	bl	b85c4 <__aeabi_d2ulz>
   ba75a:	4240      	negs	r0, r0
   ba75c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   ba760:	bd38      	pop	{r3, r4, r5, pc}
   ba762:	bf00      	nop

000ba764 <dynalib_user>:
   ba764:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba774:	0000 0000 6925 2500 696c 7100 6677 4541     ....%i.%li.qwfAE
   ba784:	4452 4d47 4647 004c 4353 0054 4b53 0043     RDGMGFL.SCT.SKC.
   ba794:	4546 0057 4b42 004e 564f 0043 7473 696f     FEW.BKN.OVC.stoi
   ba7a4:	4d00 0053 494c 5246 4d00 4656 0052 6e69     .MS.LIFR.MVFR.in
   ba7b4:	6f00 7475 7000 6d77 6400 0077 7761 6100     .out.pwm.dw.aw.a
   ba7c4:	7269 6f70 7472 722f 6365 6965 6576 6100     irport/receive.a
   ba7d4:	7269 6f70 7472 722f 7165 6575 7473 6300     irport/request.c
   ba7e4:	6e6f 656e 7463 6465 6577 0072 6f63 6e6e     onnectedwer.conn
   ba7f4:	6365 6574 0064 6664 6468 7564 4e00 306a     ected.dfhddu.Nj0
   ba804:	7a5f 6473 424c 4b6b 4f62 7573 695f 6279     _zsdLBkKbOsu_iyb
   ba814:	4646 614e 6344 4472 7268 6633 0051 6c62     FFNaDcrDhr3fQ.bl
   ba824:	6e79 2e6b 6c63 756f 0064 6c25 756c 6200     ynk.cloud.%llu.b
   ba834:	7400 706d 006c 4d54 4c50 3332 5437 3968     .tmpl.TMPL237Th9
   ba844:	4c45 0045 5441 004c 4f42 0053 5742 0049     ELE.ATL.BOS.BWI.
   ba854:	4c43 0045 4c43 0054 5643 0047 4344 0041     CLE.CLT.CVG.DCA.
   ba864:	4544 004e 4644 0057 5444 0057 5745 0052     DEN.DFW.DTW.EWR.
   ba874:	4c46 004c 4149 0044 4149 0048 464a 004b     FLL.IAD.IAH.JFK.
   ba884:	414c 0053 414c 0058 474c 0041 434d 004f     LAS.LAX.LGA.MCO.
   ba894:	444d 0057 454d 004d 494d 0041 534d 0050     MDW.MEM.MIA.MSP.
   ba8a4:	524f 0044 4450 0058 4850 004c 4850 0058     ORD.PDX.PHL.PHX.
   ba8b4:	4950 0054 4153 004e 4553 0041 4653 004f     PIT.SAN.SEA.SFO.
   ba8c4:	4c53 0043 5453 004c 5054 0041 616c 2e62     SLC.STL.TPA.lab.
   ba8d4:	6874 7765 6c63 632e 6d6f                     thewcl.com.

000ba8df <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   ba8df:	6c62 6b6e 6e69 0066 636d 0075 2e30 2e30     blnkinf.mcu.0.0.
   ba8ef:	0030 7766 742d 7079 0065 4d54 4c50 3332     0.fw-type.TMPL23
   ba8ff:	5437 3968 4c45 0045 7562 6c69 0064 634f     7Th9ELE.build.Oc
   ba90f:	2074 3331 3220 3230 2033 3031 343a 3a33     t 13 2023 10:43:
   ba91f:	3033 6200 796c 6b6e 3100 332e 322e 6800     30.blynk.1.3.2.h
   ba92f:	622d 6165 0074 3534 6200 6675 2d66 6e69     -beat.45.buff-in
   ba93f:	3100 3230 0034 6564 0076 6150 7472 6369     .1024.dev.Partic
   ba94f:	656c 4120 6772 6e6f 0000 0000 4d04 5451     le Argon.....MQT
   ba95f:	0454 0600 514d 7349 7064 0003                T...MQIsdp...

000ba96c <_ZL22BlynkReadHandlerVector>:
   ba96c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba97c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba98c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba99c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9ac:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9bc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9cc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9dc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9ec:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   ba9fc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa0c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa1c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa2c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa3c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa4c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa5c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa6c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa7c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa8c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baa9c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baaac:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baabc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baacc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baadc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baaec:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   baafc:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab0c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab1c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab2c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab3c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab4c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..
   bab5c:	5b3d 000b 5b3d 000b 5b3d 000b 5b3d 000b     =[..=[..=[..=[..

000bab6c <_ZL23BlynkWriteHandlerVector>:
   bab6c:	5b3f 000b 4249 000b 5b3f 000b 5b3f 000b     ?[..IB..?[..?[..
   bab7c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bab8c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bab9c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babac:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babbc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babcc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babdc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babec:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   babfc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac0c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac1c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac2c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac3c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac4c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac5c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac6c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac7c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac8c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bac9c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bacac:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bacbc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   baccc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bacdc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bacec:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bacfc:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad0c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad1c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad2c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad3c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad4c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..
   bad5c:	5b3f 000b 5b3f 000b 5b3f 000b 5b3f 000b     ?[..?[..?[..?[..

000bad6c <_ZTVN5spark13EthernetClassE>:
	...
   bad74:	60c3 000b 60b9 000b 60af 000b 60a5 000b     .`...`...`...`..
   bad84:	6099 000b 608d 000b 705d 000b 7065 000b     .`...`..]p..ep..
   bad94:	6081 000b 6079 000b 606f 000b 6065 000b     .`..y`..o`..e`..
   bada4:	7095 000b                                   .p..

000bada8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   badb0:	616e 006e 6e69 0066 766f 0066 002e 7061     nan.inf.ovf...ap
   badc0:	0070 5925 252d 2d6d 6425 2554 3a48 4d25     p.%Y-%m-%dT%H:%M
   badd0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000bade0 <_ZTV9IPAddress>:
	...
   bade8:	66d5 000b 66c5 000b 66c7 000b               .f...f...f..

000badf4 <_ZTV9USBSerial>:
	...
   badfc:	67e7 000b 684f 000b 6825 000b 6251 000b     .g..Oh..%h..Qb..
   bae0c:	6817 000b 67e9 000b 67f9 000b 6849 000b     .h...g...g..Ih..
   bae1c:	6809 000b 67e1 000b                         .h...g..

000bae24 <_ZTV11USARTSerial>:
	...
   bae2c:	68e9 000b 6955 000b 692d 000b 6251 000b     .h..Ui..-i..Qb..
   bae3c:	68fd 000b 6919 000b 690b 000b 6927 000b     .h...i...i..'i..
   bae4c:	68eb 000b 68ef 000b                         .h...h..

000bae54 <_ZTV7TwoWire>:
	...
   bae5c:	698d 000b 69d7 000b 69af 000b 698f 000b     .i...i...i...i..
   bae6c:	69b7 000b 69bf 000b 69c7 000b 69cf 000b     .i...i...i...i..
   bae7c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bae8c:	2072 203d 6425 0000                         r = %d..

000bae94 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bae9c:	6a8d 000b 6ab1 000b 6f9b 000b 6abf 000b     .j...j...o...j..
   baeac:	6a91 000b                                   .j..

000baeb0 <_ZTV9TCPClient>:
	...
   baeb8:	6555 000b 656d 000b 6a09 000b 6a23 000b     Ue..me...j..#j..
   baec8:	6e31 000b 6a4d 000b 6ca7 000b 6a81 000b     1n..Mj...l...j..
   baed8:	6d39 000b 6b79 000b 6cd5 000b 6ee5 000b     9m..yk...l...n..
   baee8:	6c75 000b 6a83 000b 6a35 000b 6ac5 000b     ul...j..5j...j..
   baef8:	6b59 000b                                   Yk..

000baefc <_ZTVN5spark9WiFiClassE>:
	...
   baf04:	6fff 000b 6ff5 000b 6feb 000b 6fa1 000b     .o...o...o...o..
   baf14:	6fdf 000b 6fd3 000b 705d 000b 7065 000b     .o...o..]p..ep..
   baf24:	6fc7 000b 6fbf 000b 6fb5 000b 6fab 000b     .o...o...o...o..
   baf34:	7095 000b                                   .p..

000baf38 <_ZTVN5spark12NetworkClassE>:
	...
   baf40:	701d 000b 7027 000b 7031 000b 703b 000b     .p..'p..1p..;p..
   baf50:	7045 000b 7051 000b 705d 000b 7065 000b     Ep..Qp..]p..ep..
   baf60:	706d 000b 7079 000b 7081 000b 708b 000b     mp..yp...p...p..
   baf70:	7095 000b                                   .p..

000baf74 <_ZSt7nothrow>:
	...

000baf75 <_ZTSSt19_Sp_make_shared_tag>:
   baf75:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   baf85:	6572 5f64 6174 0067 0000                     red_tag....

000baf90 <_ZTISt19_Sp_make_shared_tag>:
   baf90:	b108 000b af75 000b 6f6e 2074 6e65 756f     ....u...not enou
   bafa0:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bafb0:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bafc0:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bafd0:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bafe0:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   baff0:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bb000:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   bb010:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   bb020:	7461 0065 7325 203a 5f5f 6f70 2073 7728     ate.%s: __pos (w
   bb030:	6968 6863 6920 2073 7a25 2975 3e20 7420     hich is %zu) > t
   bb040:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   bb050:	6863 6920 2073 7a25 2975 6200 7361 6369     ch is %zu).basic
   bb060:	735f 7274 6e69 3a67 5f3a 5f4d 6572 6c70     _string::_M_repl
   bb070:	6361 0065 6162 6973 5f63 7473 6972 676e     ace.basic_string
   bb080:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bb090:	6c75 206c 6f6e 2074 6176 696c 0064 6162     ull not valid.ba
   bb0a0:	6973 5f63 7473 6972 676e 3a3a 6162 6973     sic_string::basi
   bb0b0:	5f63 7473 6972 676e 6200 7361 6369 735f     c_string.basic_s
   bb0c0:	7274 6e69 3a67 733a 6275 7473 0072 0000     tring::substr...

000bb0d0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bb0d0:	b168 000b b0dc 000b b18c 000b               h...........

000bb0dc <_ZTSN10__cxxabiv117__class_type_infoE>:
   bb0dc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bb0ec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bb0fc:	0045 0000                                   E...

000bb100 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bb100:	0000 0000 b0d0 000b 79e5 000b 79f9 000b     .........y...y..
   bb110:	7b8d 000b 7b8d 000b 7a63 000b 79a5 000b     .{...{..cz...y..
   bb120:	7a4b 000b 7a0d 000b 79d7 000b               Kz...z...y..

000bb12c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bb12c:	b168 000b b138 000b b0d0 000b               h...8.......

000bb138 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bb138:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bb148:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bb158:	666e 456f 0000 0000                         nfoE....

000bb160 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bb160:	0000 0000 b12c 000b 7a8d 000b 7aa1 000b     ....,....z...z..
   bb170:	7b8d 000b 7b8d 000b 7a63 000b 79a5 000b     .{...{..cz...y..
   bb180:	7b61 000b 7aed 000b 7ab5 000b               a{...z...z..

000bb18c <_ZTISt9type_info>:
   bb18c:	b108 000b b194 000b                         ........

000bb194 <_ZTSSt9type_info>:
   bb194:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bb1a4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bb1b4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bb1c4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bb1d4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bb1e4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bb1f4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bb204:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bb214:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bb224:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bb234:	6900 696e 7974 0000                         .inity..

000bb23c <fpi.1>:
   bb23c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bb24c:	0000 0000                                   ....

000bb250 <fpinan.0>:
   bb250:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bb268 <tinytens>:
   bb268:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bb278:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bb288:	6f43 64ac 0628 1168                         Co.d(.h.

000bb290 <_ctype_>:
   bb290:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bb2a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bb2b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bb2c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bb2d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bb2e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bb2f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bb300:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bb310:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bb390:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bb3a0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bb3b0:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bb3c0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bb3d0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bb3e0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bb3f0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bb400:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bb410:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bb420:	6874 7865 632e 0000                         thex.c..

000bb428 <_C_numeric_locale>:
   bb428:	adbc 000b b000 000b e1b0 2003 4f50 4953     ........... POSI
   bb438:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   bb448:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bb458:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bb468:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bb478:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bb488:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bb498:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bb4a8:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000bb4b8 <__mprec_bigtens>:
   bb4b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bb4c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bb4d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bb4e0 <__mprec_tens>:
   bb4e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bb4f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bb500:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bb510:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bb520:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bb530:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bb540:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bb550:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bb560:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bb570:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bb580:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bb590:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bb5a0:	9db4 79d9 7843 44ea                         ...yCx.D

000bb5a8 <p05.0>:
   bb5a8:	0005 0000 0019 0000 007d 0000               ........}...

000bb5b4 <link_const_variable_data_end>:
   bb5b4:	000b4ff9 	.word	0x000b4ff9
   bb5b8:	000b60cd 	.word	0x000b60cd
   bb5bc:	000b60f5 	.word	0x000b60f5
   bb5c0:	000b6241 	.word	0x000b6241
   bb5c4:	000b6529 	.word	0x000b6529
   bb5c8:	000b6539 	.word	0x000b6539
   bb5cc:	000b6581 	.word	0x000b6581
   bb5d0:	000b7009 	.word	0x000b7009
   bb5d4:	000b716d 	.word	0x000b716d

000bb5d8 <link_constructors_end>:
	...
