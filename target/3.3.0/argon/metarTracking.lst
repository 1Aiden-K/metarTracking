
c:/Users/aiden/Desktop/IoT-Engineering/metarTracking/target/3.3.0/argon/metarTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003c84  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7ca0  000b7ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7cc4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e2bc  000b7cc8  0001e2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c8  2003e328  2003e328  0002e328  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b7d34  000b7d34  00027d34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7d5c  000b7d5c  00027d5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014d04b  00000000  00000000  00027d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000168af  00000000  00000000  00174dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000416e9  00000000  00000000  0018b65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003218  00000000  00000000  001ccd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b6a0  00000000  00000000  001cff5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040996  00000000  00000000  001db5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004afb2  00000000  00000000  0021bf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f448  00000000  00000000  00266f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a290  00000000  00000000  003a638c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 ff91 	bl	b6f54 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 ff99 	bl	b6f70 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e2bc 	.word	0x2003e2bc
   b4048:	000b7cc8 	.word	0x000b7cc8
   b404c:	2003e328 	.word	0x2003e328
   b4050:	2003e328 	.word	0x2003e328
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ff29 	bl	b5eb4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7c70 	.word	0x000b7c70
   b407c:	000b7c94 	.word	0x000b7c94

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bdb2 	b.w	b4be8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fc61 	bl	b494c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bec9 	b.w	b5e24 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bcb3 	b.w	b59fc <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bcb1 	b.w	b59fc <malloc>

000b409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409a:	f001 bcb7 	b.w	b5a0c <free>

000b409e <_ZdaPv>:
   b409e:	f001 bcb5 	b.w	b5a0c <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f001 bcb3 	b.w	b5a0c <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr
	...

000b40b8 <_Z8callbackPcPhj>:
  analogWrite(blue, b);
  analogWrite(green, g);
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b40b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    char p[length + 1];
   b40bc:	f102 0308 	add.w	r3, r2, #8
   b40c0:	f023 0307 	bic.w	r3, r3, #7
{
   b40c4:	b089      	sub	sp, #36	; 0x24
   b40c6:	4614      	mov	r4, r2
   b40c8:	af00      	add	r7, sp, #0
    char p[length + 1];
   b40ca:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
   b40ce:	4668      	mov	r0, sp
    p[length] = NULL;
   b40d0:	f04f 0900 	mov.w	r9, #0
    memcpy(p, payload, length);
   b40d4:	f002 ff3e 	bl	b6f54 <memcpy>
    p[length] = NULL;
   b40d8:	f80d 9004 	strb.w	r9, [sp, r4]

    Serial.println(String(p));
   b40dc:	f002 f808 	bl	b60f0 <_Z16_fetch_usbserialv>
   b40e0:	4669      	mov	r1, sp
   b40e2:	4604      	mov	r4, r0
   b40e4:	f107 0008 	add.w	r0, r7, #8
   b40e8:	f001 fd6d 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b40ec:	68b9      	ldr	r1, [r7, #8]
   b40ee:	4620      	mov	r0, r4
   b40f0:	f001 fdf1 	bl	b5cd6 <_ZN5Print7printlnEPKc>
   b40f4:	f107 0008 	add.w	r0, r7, #8
   b40f8:	f001 fd1a 	bl	b5b30 <_ZN6StringD1Ev>
#if __cplusplus < 201103L
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
#else
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }
   b40fc:	f107 0510 	add.w	r5, r7, #16
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4100:	4668      	mov	r0, sp
   b4102:	60bd      	str	r5, [r7, #8]
   b4104:	f002 ff74 	bl	b6ff0 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4108:	280f      	cmp	r0, #15
    char p[length + 1];
   b410a:	46e8      	mov	r8, sp
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b410c:	eb0d 0400 	add.w	r4, sp, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4110:	6078      	str	r0, [r7, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4112:	d908      	bls.n	b4126 <_Z8callbackPcPhj+0x6e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b4114:	464a      	mov	r2, r9
   b4116:	1d39      	adds	r1, r7, #4
   b4118:	f107 0008 	add.w	r0, r7, #8
   b411c:	f002 fd9a 	bl	b6c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4120:	687b      	ldr	r3, [r7, #4]
      { _M_dataplus._M_p = __p; }
   b4122:	60b8      	str	r0, [r7, #8]
      { _M_allocated_capacity = __capacity; }
   b4124:	613b      	str	r3, [r7, #16]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b4126:	4622      	mov	r2, r4
   b4128:	68b8      	ldr	r0, [r7, #8]
      { return _M_dataplus._M_p; }
   b412a:	4c26      	ldr	r4, [pc, #152]	; (b41c4 <_Z8callbackPcPhj+0x10c>)
   b412c:	4641      	mov	r1, r8
   b412e:	f002 fdc7 	bl	b6cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4132:	687b      	ldr	r3, [r7, #4]
      { __c1 = __c2; }
   b4134:	68ba      	ldr	r2, [r7, #8]
      { _M_string_length = __length; }
   b4136:	60fb      	str	r3, [r7, #12]
   b4138:	2100      	movs	r1, #0
   b413a:	54d1      	strb	r1, [r2, r3]
      { return _M_dataplus._M_p; }
   b413c:	68bb      	ldr	r3, [r7, #8]
   b413e:	6820      	ldr	r0, [r4, #0]
      _M_local_data() const
   b4140:	68fa      	ldr	r2, [r7, #12]
	    _M_set_length(0);
	  }
	// Replace allocator if POCMA is true.
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

	if (__str._M_is_local())
   b4142:	42ab      	cmp	r3, r5
   b4144:	d124      	bne.n	b4190 <_Z8callbackPcPhj+0xd8>
	  {
	    // We've always got room for a short string, just copy it.
	    if (__str.size())
   b4146:	b112      	cbz	r2, b414e <_Z8callbackPcPhj+0x96>
	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
   b4148:	4629      	mov	r1, r5
   b414a:	f002 fdad 	bl	b6ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b414e:	68fb      	ldr	r3, [r7, #12]
   b4150:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4152:	6063      	str	r3, [r4, #4]
   b4154:	2100      	movs	r1, #0
   b4156:	54d1      	strb	r1, [r2, r3]
      { return _M_dataplus._M_p; }
   b4158:	68ba      	ldr	r2, [r7, #8]
		  }
	      }
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
	  }
#endif
	this->_M_assign(__str);
   b415a:	4d1b      	ldr	r5, [pc, #108]	; (b41c8 <_Z8callbackPcPhj+0x110>)
      { _M_string_length = __length; }
   b415c:	2300      	movs	r3, #0
   b415e:	60fb      	str	r3, [r7, #12]
      { _M_dispose(); }
   b4160:	f107 0008 	add.w	r0, r7, #8
   b4164:	7013      	strb	r3, [r2, #0]
   b4166:	f002 fd97 	bl	b6c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	this->_M_assign(__str);
   b416a:	4916      	ldr	r1, [pc, #88]	; (b41c4 <_Z8callbackPcPhj+0x10c>)
   b416c:	4628      	mov	r0, r5
   b416e:	f002 fdac 	bl	b6cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      { return iterator(_M_data() + this->size()); }
   b4172:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4176:	4413      	add	r3, r2
    _GLIBCXX20_CONSTEXPR
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      random_access_iterator_tag)
    {
      if (__first == __last)
   b4178:	4293      	cmp	r3, r2
   b417a:	d01a      	beq.n	b41b2 <_Z8callbackPcPhj+0xfa>
      // Bidirectional iterator requirements
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator--() _GLIBCXX_NOEXCEPT
      {
	--_M_current;
   b417c:	3b01      	subs	r3, #1
	return;
      --__last;
      while (__first < __last)
   b417e:	429a      	cmp	r2, r3
   b4180:	d217      	bcs.n	b41b2 <_Z8callbackPcPhj+0xfa>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4182:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b4184:	7818      	ldrb	r0, [r3, #0]
   b4186:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b418a:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b418e:	e7f6      	b.n	b417e <_Z8callbackPcPhj+0xc6>
	    if (!_M_is_local())
   b4190:	f104 0c08 	add.w	ip, r4, #8
   b4194:	4560      	cmp	r0, ip
      { _M_string_length = __length; }
   b4196:	e9c4 3200 	strd	r3, r2, [r4]
	    pointer __data = nullptr;
   b419a:	bf08      	it	eq
   b419c:	4608      	moveq	r0, r1
      { _M_allocated_capacity = __capacity; }
   b419e:	693b      	ldr	r3, [r7, #16]
		    __capacity = _M_allocated_capacity;
   b41a0:	bf18      	it	ne
   b41a2:	68a6      	ldrne	r6, [r4, #8]
      { _M_allocated_capacity = __capacity; }
   b41a4:	60a3      	str	r3, [r4, #8]
	    if (__data)
   b41a6:	b110      	cbz	r0, b41ae <_Z8callbackPcPhj+0xf6>
      { _M_dataplus._M_p = __p; }
   b41a8:	60b8      	str	r0, [r7, #8]
      { _M_allocated_capacity = __capacity; }
   b41aa:	613e      	str	r6, [r7, #16]
   b41ac:	e7d4      	b.n	b4158 <_Z8callbackPcPhj+0xa0>
      { _M_dataplus._M_p = __p; }
   b41ae:	60bd      	str	r5, [r7, #8]
   b41b0:	e7d2      	b.n	b4158 <_Z8callbackPcPhj+0xa0>

    //takes the recieved code and reverses it
    metarCode = std::string(p);
    metarCodeReversed = metarCode;
    reverse(metarCodeReversed.begin(), metarCodeReversed.end());
    Serial.println(metarCode.c_str());
   b41b2:	f001 ff9d 	bl	b60f0 <_Z16_fetch_usbserialv>
   b41b6:	6821      	ldr	r1, [r4, #0]
   b41b8:	f001 fd8d 	bl	b5cd6 <_ZN5Print7printlnEPKc>
    LED(0,0,255);
    Serial.println("VFR");
  }*/

  
}
   b41bc:	3724      	adds	r7, #36	; 0x24
   b41be:	46bd      	mov	sp, r7
   b41c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b41c4:	2003e3d0 	.word	0x2003e3d0
   b41c8:	2003e3a0 	.word	0x2003e3a0

000b41cc <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b41cc:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b41ce:	f001 fa39 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b41d2:	4b03      	ldr	r3, [pc, #12]	; (b41e0 <_ZN10CloudClass7processEv+0x14>)
   b41d4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b41d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b41da:	f001 bbf7 	b.w	b59cc <spark_process>
   b41de:	bf00      	nop
   b41e0:	2003e740 	.word	0x2003e740

000b41e4 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	b12b      	cbz	r3, b41f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b41e8:	6842      	ldr	r2, [r0, #4]
   b41ea:	4293      	cmp	r3, r2
   b41ec:	d202      	bcs.n	b41f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b41ee:	4618      	mov	r0, r3
   b41f0:	f002 bea8 	b.w	b6f44 <atoi>
   b41f4:	2000      	movs	r0, #0
   b41f6:	4770      	bx	lr

000b41f8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b41f8:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41fa:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b41fc:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41fe:	b145      	cbz	r5, b4212 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4200:	6843      	ldr	r3, [r0, #4]
   b4202:	429d      	cmp	r5, r3
   b4204:	d205      	bcs.n	b4212 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4206:	4628      	mov	r0, r5
   b4208:	f002 fef2 	bl	b6ff0 <strlen>
   b420c:	3001      	adds	r0, #1
   b420e:	4405      	add	r5, r0
   b4210:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4212:	4620      	mov	r0, r4
   b4214:	bd38      	pop	{r3, r4, r5, pc}

000b4216 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4218:	4604      	mov	r4, r0
   b421a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b421c:	460d      	mov	r5, r1
   b421e:	b921      	cbnz	r1, b422a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4220:	6803      	ldr	r3, [r0, #0]
   b4222:	1c7a      	adds	r2, r7, #1
   b4224:	6042      	str	r2, [r0, #4]
   b4226:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add_raw(str, strlen(str)+1);
}
   b4228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add_raw(str, strlen(str)+1);
   b422a:	4608      	mov	r0, r1
   b422c:	f002 fee0 	bl	b6ff0 <strlen>
    if (len + l > buff_size)
   b4230:	68a3      	ldr	r3, [r4, #8]
    add_raw(str, strlen(str)+1);
   b4232:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4234:	19f2      	adds	r2, r6, r7
   b4236:	429a      	cmp	r2, r3
   b4238:	d8f6      	bhi.n	b4228 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b423a:	6820      	ldr	r0, [r4, #0]
   b423c:	4632      	mov	r2, r6
   b423e:	4629      	mov	r1, r5
   b4240:	4438      	add	r0, r7
   b4242:	f002 fe87 	bl	b6f54 <memcpy>
    len += l;
   b4246:	6860      	ldr	r0, [r4, #4]
   b4248:	4430      	add	r0, r6
   b424a:	6060      	str	r0, [r4, #4]
   b424c:	e7ec      	b.n	b4228 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4250 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4250:	b538      	push	{r3, r4, r5, lr}
   b4252:	4604      	mov	r4, r0
   b4254:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4256:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b425a:	6825      	ldr	r5, [r4, #0]
   b425c:	4a04      	ldr	r2, [pc, #16]	; (b4270 <_ZN10BlynkParam3addEi+0x20>)
   b425e:	1a09      	subs	r1, r1, r0
   b4260:	4428      	add	r0, r5
   b4262:	f001 fbe3 	bl	b5a2c <snprintf>
   b4266:	6863      	ldr	r3, [r4, #4]
   b4268:	3001      	adds	r0, #1
   b426a:	4403      	add	r3, r0
   b426c:	6063      	str	r3, [r4, #4]
    }
   b426e:	bd38      	pop	{r3, r4, r5, pc}
   b4270:	000b7220 	.word	0x000b7220

000b4274 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4274:	b538      	push	{r3, r4, r5, lr}
   b4276:	4604      	mov	r4, r0
   b4278:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b427a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b427e:	6825      	ldr	r5, [r4, #0]
   b4280:	4a04      	ldr	r2, [pc, #16]	; (b4294 <_ZN10BlynkParam3addEl+0x20>)
   b4282:	1a09      	subs	r1, r1, r0
   b4284:	4428      	add	r0, r5
   b4286:	f001 fbd1 	bl	b5a2c <snprintf>
   b428a:	6863      	ldr	r3, [r4, #4]
   b428c:	3001      	adds	r0, #1
   b428e:	4403      	add	r3, r0
   b4290:	6063      	str	r3, [r4, #4]
    }
   b4292:	bd38      	pop	{r3, r4, r5, pc}
   b4294:	000b7223 	.word	0x000b7223

000b4298 <_ZN22BlynkTransportParticle14_connectToPortEt>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool _connectToPort(uint16_t p) {
   b4298:	b5f0      	push	{r4, r5, r6, r7, lr}
        bool isConn = false;
        if (domain) {
   b429a:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    bool _connectToPort(uint16_t p) {
   b429e:	b087      	sub	sp, #28
   b42a0:	4606      	mov	r6, r0
   b42a2:	460f      	mov	r7, r1
        if (domain) {
   b42a4:	f1bc 0f00 	cmp.w	ip, #0
   b42a8:	d00c      	beq.n	b42c4 <_ZN22BlynkTransportParticle14_connectToPortEt+0x2c>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', p);
            isConn = (1 == client.connect(domain, p));
   b42aa:	460a      	mov	r2, r1
   b42ac:	2300      	movs	r3, #0
   b42ae:	4661      	mov	r1, ip
   b42b0:	f002 f88c 	bl	b63cc <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            isConn = (1 == client.connect(addr, p));
        }
        actual_port = isConn ? p : 0;
   b42b4:	2801      	cmp	r0, #1
            isConn = (1 == client.connect(domain, p));
   b42b6:	bf16      	itet	ne
   b42b8:	2000      	movne	r0, #0
   b42ba:	2001      	moveq	r0, #1
        actual_port = isConn ? p : 0;
   b42bc:	4607      	movne	r7, r0
   b42be:	8777      	strh	r7, [r6, #58]	; 0x3a
        return isConn;
    }
   b42c0:	b007      	add	sp, #28
   b42c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b42c4:	4b07      	ldr	r3, [pc, #28]	; (b42e4 <_ZN22BlynkTransportParticle14_connectToPortEt+0x4c>)
   b42c6:	9300      	str	r3, [sp, #0]
   b42c8:	f100 0520 	add.w	r5, r0, #32
   b42cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42ce:	ac01      	add	r4, sp, #4
   b42d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b42d2:	682b      	ldr	r3, [r5, #0]
   b42d4:	7023      	strb	r3, [r4, #0]
            isConn = (1 == client.connect(addr, p));
   b42d6:	463a      	mov	r2, r7
   b42d8:	4663      	mov	r3, ip
   b42da:	4669      	mov	r1, sp
   b42dc:	4630      	mov	r0, r6
   b42de:	f002 f955 	bl	b658c <_ZN9TCPClient7connectE9IPAddresstm>
   b42e2:	e7e7      	b.n	b42b4 <_ZN22BlynkTransportParticle14_connectToPortEt+0x1c>
   b42e4:	000b7840 	.word	0x000b7840

000b42e8 <BlynkWidgetWrite1>:
BLYNK_WRITE(V1) {
   b42e8:	b510      	push	{r4, lr}
    int         asInt() const       { return atoi(buff); }
   b42ea:	6808      	ldr	r0, [r1, #0]
  airport = airports[param.asInt() - 1];
   b42ec:	4c08      	ldr	r4, [pc, #32]	; (b4310 <BlynkWidgetWrite1+0x28>)
   b42ee:	f002 fe29 	bl	b6f44 <atoi>
   b42f2:	4908      	ldr	r1, [pc, #32]	; (b4314 <BlynkWidgetWrite1+0x2c>)
   b42f4:	3801      	subs	r0, #1
   b42f6:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b42fa:	4620      	mov	r0, r4
   b42fc:	f001 fc77 	bl	b5bee <_ZN6StringaSERKS_>
  Serial.println(airport);
   b4300:	f001 fef6 	bl	b60f0 <_Z16_fetch_usbserialv>
   b4304:	6821      	ldr	r1, [r4, #0]
}
   b4306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println(airport);
   b430a:	f001 bce4 	b.w	b5cd6 <_ZN5Print7printlnEPKc>
   b430e:	bf00      	nop
   b4310:	2003e424 	.word	0x2003e424
   b4314:	2003e434 	.word	0x2003e434

000b4318 <_Z3LEDiii>:
{
   b4318:	b538      	push	{r3, r4, r5, lr}
   b431a:	460d      	mov	r5, r1
  analogWrite(red, r);
   b431c:	4601      	mov	r1, r0
   b431e:	2013      	movs	r0, #19
{
   b4320:	4614      	mov	r4, r2
  analogWrite(red, r);
   b4322:	f002 fbe9 	bl	b6af8 <_Z11analogWritetm>
  analogWrite(blue, b);
   b4326:	4629      	mov	r1, r5
   b4328:	2012      	movs	r0, #18
   b432a:	f002 fbe5 	bl	b6af8 <_Z11analogWritetm>
  analogWrite(green, g);
   b432e:	4621      	mov	r1, r4
   b4330:	2011      	movs	r0, #17
}
   b4332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  analogWrite(green, g);
   b4336:	f002 bbdf 	b.w	b6af8 <_Z11analogWritetm>

000b433a <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:

    uint16_t getNextMsgId();

private:

    void internalReconnect() {
   b433a:	b508      	push	{r3, lr}
        state = CONNECTING;
   b433c:	2300      	movs	r3, #0
   b433e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

    uint16_t getActualPort() const {
        return actual_port;
    }

    void disconnect() { client.stop(); }
   b4342:	6900      	ldr	r0, [r0, #16]
   b4344:	f002 f9f8 	bl	b6738 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b434c:	f001 b904 	b.w	b5558 <BlynkNoOpCbk>

000b4350 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4354:	eb01 0902 	add.w	r9, r1, r2
   b4358:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b435a:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b435c:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4360:	4680      	mov	r8, r0
   b4362:	460d      	mov	r5, r1
   b4364:	4616      	mov	r6, r2
    if (it >= param.end())
   b4366:	f080 8092 	bcs.w	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b436a:	a805      	add	r0, sp, #20
   b436c:	880f      	ldrh	r7, [r1, #0]
   b436e:	f7ff ff43 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
   b4372:	6803      	ldr	r3, [r0, #0]
   b4374:	454b      	cmp	r3, r9
   b4376:	f080 808a 	bcs.w	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b437a:	a805      	add	r0, sp, #20
   b437c:	f7ff ff32 	bl	b41e4 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4380:	f247 2376 	movw	r3, #29302	; 0x7276
   b4384:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4386:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b4388:	f000 80a9 	beq.w	b44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b438c:	d827      	bhi.n	b43de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b438e:	f247 2361 	movw	r3, #29281	; 0x7261
   b4392:	429f      	cmp	r7, r3
   b4394:	d07e      	beq.n	b4494 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b4396:	f247 2364 	movw	r3, #29284	; 0x7264
   b439a:	429f      	cmp	r7, r3
   b439c:	d042      	beq.n	b4424 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b439e:	f646 5370 	movw	r3, #28016	; 0x6d70
   b43a2:	429f      	cmp	r7, r3
   b43a4:	d128      	bne.n	b43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b43a6:	4e63      	ldr	r6, [pc, #396]	; (b4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b43a8:	4f63      	ldr	r7, [pc, #396]	; (b4538 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b43aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b43ae:	9b05      	ldr	r3, [sp, #20]
   b43b0:	4599      	cmp	r9, r3
   b43b2:	d96c      	bls.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b43b4:	a805      	add	r0, sp, #20
   b43b6:	f7ff ff15 	bl	b41e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b43ba:	b2c4      	uxtb	r4, r0
            ++it;
   b43bc:	a805      	add	r0, sp, #20
   b43be:	f7ff ff1b 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b43c2:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b43c4:	4631      	mov	r1, r6
   b43c6:	4628      	mov	r0, r5
   b43c8:	f002 fe08 	bl	b6fdc <strcmp>
   b43cc:	4601      	mov	r1, r0
   b43ce:	b9e0      	cbnz	r0, b440a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b43d0:	4620      	mov	r0, r4
   b43d2:	f002 fb3d 	bl	b6a50 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b43d6:	a805      	add	r0, sp, #20
   b43d8:	f7ff ff0e 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b43dc:	e7e7      	b.n	b43ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b43de:	f247 7364 	movw	r3, #30564	; 0x7764
   b43e2:	429f      	cmp	r7, r3
   b43e4:	d03f      	beq.n	b4466 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b43e6:	f247 7376 	movw	r3, #30582	; 0x7776
   b43ea:	429f      	cmp	r7, r3
   b43ec:	f000 8087 	beq.w	b44fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b43f0:	f247 7361 	movw	r3, #30561	; 0x7761
   b43f4:	429f      	cmp	r7, r3
   b43f6:	d05f      	beq.n	b44b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkReq req = { pin };
        callWriteHandler(req, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b43f8:	2300      	movs	r3, #0
   b43fa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b43fe:	2202      	movs	r2, #2
   b4400:	9200      	str	r2, [sp, #0]
   b4402:	f8b8 202a 	ldrh.w	r2, [r8, #42]	; 0x2a
   b4406:	4619      	mov	r1, r3
   b4408:	e029      	b.n	b445e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b440a:	4639      	mov	r1, r7
   b440c:	4628      	mov	r0, r5
   b440e:	f002 fde5 	bl	b6fdc <strcmp>
   b4412:	b128      	cbz	r0, b4420 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4414:	4641      	mov	r1, r8
   b4416:	4628      	mov	r0, r5
   b4418:	f002 fde0 	bl	b6fdc <strcmp>
   b441c:	2800      	cmp	r0, #0
   b441e:	d1da      	bne.n	b43d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b4420:	2101      	movs	r1, #1
   b4422:	e7d5      	b.n	b43d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4424:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4426:	4945      	ldr	r1, [pc, #276]	; (b453c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b4428:	9307      	str	r3, [sp, #28]
   b442a:	a807      	add	r0, sp, #28
   b442c:	2310      	movs	r3, #16
   b442e:	2500      	movs	r5, #0
   b4430:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4434:	f7ff feef 	bl	b4216 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4438:	a807      	add	r0, sp, #28
   b443a:	4621      	mov	r1, r4
   b443c:	f7ff ff08 	bl	b4250 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4440:	4620      	mov	r0, r4
   b4442:	f002 fb2f 	bl	b6aa4 <digitalRead>
        rsp.add(analogRead(pin));
   b4446:	4601      	mov	r1, r0
   b4448:	a807      	add	r0, sp, #28
   b444a:	f7ff ff13 	bl	b4274 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b444e:	9b08      	ldr	r3, [sp, #32]
   b4450:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4454:	3b01      	subs	r3, #1
   b4456:	9300      	str	r3, [sp, #0]
   b4458:	9b07      	ldr	r3, [sp, #28]
   b445a:	462a      	mov	r2, r5
   b445c:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b445e:	4640      	mov	r0, r8
   b4460:	f000 fa9e 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4464:	e013      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b4466:	a805      	add	r0, sp, #20
   b4468:	f7ff fec6 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
   b446c:	6803      	ldr	r3, [r0, #0]
   b446e:	4599      	cmp	r9, r3
   b4470:	d90d      	bls.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4472:	b2a4      	uxth	r4, r4
   b4474:	2101      	movs	r1, #1
   b4476:	4620      	mov	r0, r4
   b4478:	f002 faea 	bl	b6a50 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b447c:	a805      	add	r0, sp, #20
   b447e:	f7ff feb1 	bl	b41e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b4482:	1e01      	subs	r1, r0, #0
   b4484:	bf18      	it	ne
   b4486:	2101      	movne	r1, #1
   b4488:	4620      	mov	r0, r4
   b448a:	f002 faf2 	bl	b6a72 <digitalWrite>
    }
}
   b448e:	b00f      	add	sp, #60	; 0x3c
   b4490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4494:	ab0a      	add	r3, sp, #40	; 0x28
   b4496:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4498:	a807      	add	r0, sp, #28
   b449a:	2310      	movs	r3, #16
   b449c:	4928      	ldr	r1, [pc, #160]	; (b4540 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b449e:	2500      	movs	r5, #0
   b44a0:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b44a4:	f7ff feb7 	bl	b4216 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b44a8:	a807      	add	r0, sp, #28
   b44aa:	4621      	mov	r1, r4
   b44ac:	f7ff fed0 	bl	b4250 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b44b0:	4620      	mov	r0, r4
   b44b2:	f002 fb0a 	bl	b6aca <analogRead>
   b44b6:	e7c6      	b.n	b4446 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b44b8:	a805      	add	r0, sp, #20
   b44ba:	f7ff fe9d 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
   b44be:	6803      	ldr	r3, [r0, #0]
   b44c0:	4599      	cmp	r9, r3
   b44c2:	d9e4      	bls.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b44c4:	b2a4      	uxth	r4, r4
   b44c6:	2101      	movs	r1, #1
   b44c8:	4620      	mov	r0, r4
   b44ca:	f002 fac1 	bl	b6a50 <pinMode>
        analogWrite(pin, it.asInt());
   b44ce:	a805      	add	r0, sp, #20
   b44d0:	f7ff fe88 	bl	b41e4 <_ZNK10BlynkParam8iterator5asIntEv>
   b44d4:	4601      	mov	r1, r0
   b44d6:	4620      	mov	r0, r4
   b44d8:	f002 fb0e 	bl	b6af8 <_Z11analogWritetm>
    } break;
   b44dc:	e7d7      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
        }
    }

    void callReadHandler(BlynkReq& req) {
        WidgetReadHandler handler = GetReadHandler(req.pin);
   b44de:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   b44e0:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
   b44e4:	f001 f83a 	bl	b555c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b44e8:	4603      	mov	r3, r0
            handler(req);
   b44ea:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b44ec:	b123      	cbz	r3, b44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b44ee:	4a15      	ldr	r2, [pc, #84]	; (b4544 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b44f0:	4293      	cmp	r3, r2
   b44f2:	d001      	beq.n	b44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b44f4:	4798      	blx	r3
   b44f6:	e7ca      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b44f8:	f001 f82c 	bl	b5554 <BlynkWidgetRead>
    } break;
   b44fc:	e7c7      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b44fe:	a805      	add	r0, sp, #20
   b4500:	f7ff fe7a 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4504:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   b4506:	f8ad 401c 	strh.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b450a:	1b5d      	subs	r5, r3, r5
   b450c:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(req.pin);
   b450e:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4510:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4514:	950c      	str	r5, [sp, #48]	; 0x30
   b4516:	f001 f82b 	bl	b5570 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b451a:	4603      	mov	r3, r0
            handler(req, param);
   b451c:	a90a      	add	r1, sp, #40	; 0x28
   b451e:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4520:	b123      	cbz	r3, b452c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b4522:	4a09      	ldr	r2, [pc, #36]	; (b4548 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4524:	4293      	cmp	r3, r2
   b4526:	d001      	beq.n	b452c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b4528:	4798      	blx	r3
   b452a:	e7b0      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b452c:	f001 f813 	bl	b5556 <BlynkWidgetWrite>
    } break;
   b4530:	e7ad      	b.n	b448e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4532:	bf00      	nop
   b4534:	000b7227 	.word	0x000b7227
   b4538:	000b722a 	.word	0x000b722a
   b453c:	000b7232 	.word	0x000b7232
   b4540:	000b7235 	.word	0x000b7235
   b4544:	000b5555 	.word	0x000b5555
   b4548:	000b5557 	.word	0x000b5557
   b454c:	000b722e 	.word	0x000b722e

000b4550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4554:	b08c      	sub	sp, #48	; 0x30
   b4556:	af04      	add	r7, sp, #16
   b4558:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b455a:	2205      	movs	r2, #5
   b455c:	6900      	ldr	r0, [r0, #16]
   b455e:	1d39      	adds	r1, r7, #4
   b4560:	f001 fbf6 	bl	b5d50 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4564:	b3a8      	cbz	r0, b45d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4566:	2805      	cmp	r0, #5
   b4568:	d004      	beq.n	b4574 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b456a:	2000      	movs	r0, #0
}
   b456c:	3720      	adds	r7, #32
   b456e:	46bd      	mov	sp, r7
   b4570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4574:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4578:	ba5b      	rev16	r3, r3
   b457a:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b457c:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4580:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4584:	ba5b      	rev16	r3, r3
   b4586:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b458a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b458e:	2a00      	cmp	r2, #0
   b4590:	d0eb      	beq.n	b456a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4592:	793b      	ldrb	r3, [r7, #4]
   b4594:	bb3b      	cbnz	r3, b45e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x96>
        lastActivityIn = BlynkMillis();
   b4596:	f000 ffdb 	bl	b5550 <_Z11BlynkMillisv>
   b459a:	4602      	mov	r2, r0
   b459c:	61e0      	str	r0, [r4, #28]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b459e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   b45a2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b45a6:	b9d0      	cbnz	r0, b45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
   b45a8:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b45ac:	2901      	cmp	r1, #1
   b45ae:	d116      	bne.n	b45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
            switch (hdr.length) {
   b45b0:	2b09      	cmp	r3, #9
   b45b2:	d010      	beq.n	b45d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b45b4:	2bc8      	cmp	r3, #200	; 0xc8
   b45b6:	d001      	beq.n	b45bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6c>
   b45b8:	2b04      	cmp	r3, #4
   b45ba:	d1d7      	bne.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b45bc:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b45be:	6262      	str	r2, [r4, #36]	; 0x24
                this->sendInfo();
   b45c0:	4620      	mov	r0, r4
                state = CONNECTED;
   b45c2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
                this->sendInfo();
   b45c6:	f000 fae9 	bl	b4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b45ca:	f7ff fdff 	bl	b41cc <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b45ce:	f000 ffc3 	bl	b5558 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b45d2:	2001      	movs	r0, #1
   b45d4:	e7ca      	b.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b45d6:	2303      	movs	r3, #3
   b45d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                break;
   b45dc:	e7c6      	b.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b45de:	1f58      	subs	r0, r3, #5
   b45e0:	bf18      	it	ne
   b45e2:	2001      	movne	r0, #1
   b45e4:	e7c2      	b.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b45e6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b45ea:	d903      	bls.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
        internalReconnect();
   b45ec:	4620      	mov	r0, r4
   b45ee:	f7ff fea4 	bl	b433a <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b45f2:	e7ee      	b.n	b45d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b45f4:	f108 0308 	add.w	r3, r8, #8
   b45f8:	466e      	mov	r6, sp
   b45fa:	08db      	lsrs	r3, r3, #3
   b45fc:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b4600:	469d      	mov	sp, r3
   b4602:	ad04      	add	r5, sp, #16
   b4604:	6920      	ldr	r0, [r4, #16]
   b4606:	4642      	mov	r2, r8
   b4608:	4629      	mov	r1, r5
   b460a:	f001 fba1 	bl	b5d50 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b460e:	4580      	cmp	r8, r0
   b4610:	f04f 0000 	mov.w	r0, #0
   b4614:	d141      	bne.n	b469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
    inputBuffer[hdr.length] = '\0';
   b4616:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b461a:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b461c:	f000 ff98 	bl	b5550 <_Z11BlynkMillisv>
    switch (hdr.type)
   b4620:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4622:	61e0      	str	r0, [r4, #28]
    switch (hdr.type)
   b4624:	2b14      	cmp	r3, #20
   b4626:	d069      	beq.n	b46fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b4628:	d809      	bhi.n	b463e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b462a:	2b0f      	cmp	r3, #15
   b462c:	d066      	beq.n	b46fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b462e:	2b11      	cmp	r3, #17
   b4630:	d071      	beq.n	b4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
   b4632:	2b06      	cmp	r3, #6
   b4634:	d016      	beq.n	b4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
        internalReconnect();
   b4636:	4620      	mov	r0, r4
   b4638:	f7ff fe7f 	bl	b433a <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b463c:	e01d      	b.n	b467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
    switch (hdr.type)
   b463e:	2b29      	cmp	r3, #41	; 0x29
   b4640:	d01d      	beq.n	b467e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   b4642:	2b37      	cmp	r3, #55	; 0x37
   b4644:	d019      	beq.n	b467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b4646:	2b1d      	cmp	r3, #29
   b4648:	d1f5      	bne.n	b4636 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b464a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b464e:	b94b      	cbnz	r3, b4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
            state = CONNECTED;
   b4650:	2301      	movs	r3, #1
   b4652:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
            this->sendInfo();
   b4656:	4620      	mov	r0, r4
   b4658:	f000 faa0 	bl	b4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b465c:	f7ff fdb6 	bl	b41cc <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b4660:	f000 ff7a 	bl	b5558 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b4664:	2300      	movs	r3, #0
   b4666:	21c8      	movs	r1, #200	; 0xc8
   b4668:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b466c:	9100      	str	r1, [sp, #0]
   b466e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4672:	4619      	mov	r1, r3
   b4674:	4620      	mov	r0, r4
   b4676:	f000 f993 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b467a:	2001      	movs	r0, #1
   b467c:	e00d      	b.n	b469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
        if (!redir_serv) {
   b467e:	69a3      	ldr	r3, [r4, #24]
   b4680:	b91b      	cbnz	r3, b468a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(64);
   b4682:	2040      	movs	r0, #64	; 0x40
   b4684:	f001 f9ba 	bl	b59fc <malloc>
   b4688:	61a0      	str	r0, [r4, #24]
        BlynkParam param(inputBuffer, hdr.length);
   b468a:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b468e:	44a8      	add	r8, r5
        if (it >= param.end())
   b4690:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4692:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4696:	d302      	bcc.n	b469e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14e>
            return false;
   b4698:	2000      	movs	r0, #0
   b469a:	46b5      	mov	sp, r6
   b469c:	e766      	b.n	b456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b469e:	4629      	mov	r1, r5
   b46a0:	2240      	movs	r2, #64	; 0x40
   b46a2:	69a0      	ldr	r0, [r4, #24]
   b46a4:	f002 fcac 	bl	b7000 <strncpy>
        redir_serv[63] = '\0';
   b46a8:	69a3      	ldr	r3, [r4, #24]
   b46aa:	2500      	movs	r5, #0
   b46ac:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b46b0:	f107 0014 	add.w	r0, r7, #20
   b46b4:	f7ff fda0 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
   b46b8:	6803      	ldr	r3, [r0, #0]
   b46ba:	4598      	cmp	r8, r3
   b46bc:	d91c      	bls.n	b46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b46be:	6978      	ldr	r0, [r7, #20]
   b46c0:	b120      	cbz	r0, b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   b46c2:	69bb      	ldr	r3, [r7, #24]
   b46c4:	4298      	cmp	r0, r3
   b46c6:	d215      	bcs.n	b46f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b46c8:	f002 fc40 	bl	b6f4c <atol>
            redir_port = it.asLong();
   b46cc:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b46ce:	6920      	ldr	r0, [r4, #16]
   b46d0:	f002 f832 	bl	b6738 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b46d4:	6923      	ldr	r3, [r4, #16]
   b46d6:	69a2      	ldr	r2, [r4, #24]
        domain = d;
   b46d8:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b46da:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b46dc:	2300      	movs	r3, #0
   b46de:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b46e2:	f000 ff35 	bl	b5550 <_Z11BlynkMillisv>
   b46e6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b46ea:	3808      	subs	r0, #8
   b46ec:	e9c4 0007 	strd	r0, r0, [r4, #28]
   b46f0:	6260      	str	r0, [r4, #36]	; 0x24
   b46f2:	e7c2      	b.n	b467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b46f4:	4628      	mov	r0, r5
   b46f6:	e7e9      	b.n	b46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b46f8:	2550      	movs	r5, #80	; 0x50
   b46fa:	e7e8      	b.n	b46ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17e>
        msgIdOutOverride = hdr.msg_id;
   b46fc:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b46fe:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4702:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4706:	8563      	strh	r3, [r4, #42]	; 0x2a
        this->processCmd(inputBuffer, hdr.length);
   b4708:	4629      	mov	r1, r5
   b470a:	4620      	mov	r0, r4
   b470c:	f7ff fe20 	bl	b4350 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4710:	2300      	movs	r3, #0
   b4712:	8563      	strh	r3, [r4, #42]	; 0x2a
   b4714:	e7b1      	b.n	b467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        BlynkReq req = { 0 };
   b4716:	2300      	movs	r3, #0
   b4718:	803b      	strh	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b471a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b471e:	442b      	add	r3, r5
        if (it >= param.end())
   b4720:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4722:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4726:	d2a8      	bcs.n	b467a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        ++it;
   b4728:	f107 000c 	add.w	r0, r7, #12
   b472c:	f8d5 8000 	ldr.w	r8, [r5]
   b4730:	f7ff fd62 	bl	b41f8 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4734:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4736:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b473a:	1b5d      	subs	r5, r3, r5
   b473c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b473e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4742:	687b      	ldr	r3, [r7, #4]
   b4744:	61fd      	str	r5, [r7, #28]
   b4746:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b474a:	8563      	strh	r3, [r4, #42]	; 0x2a
   b474c:	4b2d      	ldr	r3, [pc, #180]	; (b4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b4>)
   b474e:	4598      	cmp	r8, r3
   b4750:	d052      	beq.n	b47f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a8>
   b4752:	d820      	bhi.n	b4796 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x246>
   b4754:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4758:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b475c:	4413      	add	r3, r2
   b475e:	4598      	cmp	r8, r3
   b4760:	d032      	beq.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>
   b4762:	d80f      	bhi.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4764:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b4768:	3b06      	subs	r3, #6
   b476a:	4598      	cmp	r8, r3
   b476c:	d032      	beq.n	b47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x284>
   b476e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4772:	3303      	adds	r3, #3
   b4774:	4598      	cmp	r8, r3
   b4776:	d1cb      	bne.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4778:	f107 0114 	add.w	r1, r7, #20
   b477c:	4638      	mov	r0, r7
   b477e:	f000 feea 	bl	b5556 <BlynkWidgetWrite>
   b4782:	e7c5      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4784:	4b20      	ldr	r3, [pc, #128]	; (b4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b4786:	4598      	cmp	r8, r3
   b4788:	d1c2      	bne.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b478a:	f107 0114 	add.w	r1, r7, #20
   b478e:	4638      	mov	r0, r7
   b4790:	f000 fee1 	bl	b5556 <BlynkWidgetWrite>
   b4794:	e7bc      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4796:	4b1d      	ldr	r3, [pc, #116]	; (b480c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b4798:	4598      	cmp	r8, r3
   b479a:	d021      	beq.n	b47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
   b479c:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b47a0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b47a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b47a8:	4598      	cmp	r8, r3
   b47aa:	d01f      	beq.n	b47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29c>
   b47ac:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b47b0:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b47b4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b47b8:	4598      	cmp	r8, r3
   b47ba:	d1a9      	bne.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b47bc:	f107 0114 	add.w	r1, r7, #20
   b47c0:	4638      	mov	r0, r7
   b47c2:	f000 fec8 	bl	b5556 <BlynkWidgetWrite>
   b47c6:	e7a3      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b47c8:	f107 0114 	add.w	r1, r7, #20
   b47cc:	4638      	mov	r0, r7
   b47ce:	f000 fec2 	bl	b5556 <BlynkWidgetWrite>
   b47d2:	e79d      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b47d4:	f107 0114 	add.w	r1, r7, #20
   b47d8:	4638      	mov	r0, r7
   b47da:	f000 febc 	bl	b5556 <BlynkWidgetWrite>
   b47de:	e797      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b47e0:	f107 0114 	add.w	r1, r7, #20
   b47e4:	4638      	mov	r0, r7
   b47e6:	f000 feb6 	bl	b5556 <BlynkWidgetWrite>
   b47ea:	e791      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b47ec:	f107 0114 	add.w	r1, r7, #20
   b47f0:	4638      	mov	r0, r7
   b47f2:	f000 feb0 	bl	b5556 <BlynkWidgetWrite>
   b47f6:	e78b      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b47f8:	f107 0114 	add.w	r1, r7, #20
   b47fc:	4638      	mov	r0, r7
   b47fe:	f000 feaa 	bl	b5556 <BlynkWidgetWrite>
   b4802:	e785      	b.n	b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4804:	00736676 	.word	0x00736676
   b4808:	00676264 	.word	0x00676264
   b480c:	6e6f6361 	.word	0x6e6f6361

000b4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4810:	b570      	push	{r4, r5, r6, lr}
   b4812:	4604      	mov	r4, r0
   b4814:	b086      	sub	sp, #24
   b4816:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4818:	f7ff fcd8 	bl	b41cc <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b481c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4820:	2b02      	cmp	r3, #2
   b4822:	d022      	beq.n	b486a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5a>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4824:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (msgIdOutOverride || nesting > 2) {
   b4828:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   b482a:	3301      	adds	r3, #1
   b482c:	b2db      	uxtb	r3, r3
   b482e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   b4832:	b9aa      	cbnz	r2, b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b4834:	2b02      	cmp	r3, #2
   b4836:	d813      	bhi.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4838:	6920      	ldr	r0, [r4, #16]
   b483a:	f001 fe45 	bl	b64c8 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b483e:	b1b0      	cbz	r0, b486e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
        while (avail || conn.available() > 0) {
   b4840:	b925      	cbnz	r5, b484c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x3c>
    int available() { return client.available(); }
   b4842:	6920      	ldr	r0, [r4, #16]
   b4844:	f001 ff1e 	bl	b6684 <_ZN9TCPClient9availableEv>
   b4848:	2800      	cmp	r0, #0
   b484a:	dd10      	ble.n	b486e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
            if (!processInput()) {
   b484c:	4620      	mov	r0, r4
   b484e:	f7ff fe7f 	bl	b4550 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4852:	2800      	cmp	r0, #0
   b4854:	d1f5      	bne.n	b4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x32>
    void disconnect() { client.stop(); }
   b4856:	6920      	ldr	r0, [r4, #16]
   b4858:	f001 ff6e 	bl	b6738 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b485c:	f000 fe7c 	bl	b5558 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4860:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4864:	3b01      	subs	r3, #1
   b4866:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   b486a:	b006      	add	sp, #24
   b486c:	bd70      	pop	{r4, r5, r6, pc}
    const millis_time_t t = BlynkMillis();
   b486e:	f000 fe6f 	bl	b5550 <_Z11BlynkMillisv>
   b4872:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4874:	6920      	ldr	r0, [r4, #16]
   b4876:	f001 fe27 	bl	b64c8 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b487a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   b487e:	2e01      	cmp	r6, #1
   b4880:	d124      	bne.n	b48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbc>
        if (!tconn) {
   b4882:	b920      	cbnz	r0, b488e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x7e>
            lastHeartbeat = t;
   b4884:	6265      	str	r5, [r4, #36]	; 0x24
            internalReconnect();
   b4886:	4620      	mov	r0, r4
   b4888:	f7ff fd57 	bl	b433a <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b488c:	e7e8      	b.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b488e:	69e3      	ldr	r3, [r4, #28]
   b4890:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4894:	1aeb      	subs	r3, r5, r3
   b4896:	4293      	cmp	r3, r2
   b4898:	d8f5      	bhi.n	b4886 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x76>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b489a:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b489e:	4293      	cmp	r3, r2
   b48a0:	d803      	bhi.n	b48aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x9a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b48a2:	6a23      	ldr	r3, [r4, #32]
   b48a4:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b48a6:	4293      	cmp	r3, r2
   b48a8:	d9da      	bls.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b48aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b48ac:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b48b0:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b48b2:	4293      	cmp	r3, r2
   b48b4:	d9d4      	bls.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            sendCmd(BLYNK_CMD_PING);
   b48b6:	2300      	movs	r3, #0
   b48b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b48bc:	9300      	str	r3, [sp, #0]
   b48be:	461a      	mov	r2, r3
   b48c0:	2106      	movs	r1, #6
   b48c2:	4620      	mov	r0, r4
   b48c4:	f000 f86c 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b48c8:	6265      	str	r5, [r4, #36]	; 0x24
                return false;
   b48ca:	e7c9      	b.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    } else if (state == CONNECTING) {
   b48cc:	2e00      	cmp	r6, #0
   b48ce:	d1c7      	bne.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b48d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b48d2:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b48d4:	b148      	cbz	r0, b48ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xda>
   b48d6:	f241 7270 	movw	r2, #6000	; 0x1770
   b48da:	4293      	cmp	r3, r2
   b48dc:	d9c0      	bls.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    void disconnect() { client.stop(); }
   b48de:	6920      	ldr	r0, [r4, #16]
   b48e0:	f001 ff2a 	bl	b6738 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b48e4:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            return false;
   b48e8:	e7ba      	b.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b48ea:	f241 3288 	movw	r2, #5000	; 0x1388
   b48ee:	4293      	cmp	r3, r2
   b48f0:	d9b6      	bls.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b48f2:	6920      	ldr	r0, [r4, #16]
   b48f4:	f001 ff20 	bl	b6738 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b48f8:	6926      	ldr	r6, [r4, #16]
        bool isConn = _connectToPort(port);
   b48fa:	8f31      	ldrh	r1, [r6, #56]	; 0x38
   b48fc:	4630      	mov	r0, r6
   b48fe:	f7ff fccb 	bl	b4298 <_ZN22BlynkTransportParticle14_connectToPortEt>
        if (!isConn) {
   b4902:	b948      	cbnz	r0, b4918 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x108>
            if (port == 80) {
   b4904:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   b4906:	2b50      	cmp	r3, #80	; 0x50
   b4908:	d11a      	bne.n	b4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x130>
                isConn = _connectToPort(8080);
   b490a:	f641 7190 	movw	r1, #8080	; 0x1f90
                isConn = _connectToPort(80);
   b490e:	4630      	mov	r0, r6
   b4910:	f7ff fcc2 	bl	b4298 <_ZN22BlynkTransportParticle14_connectToPortEt>
   b4914:	2800      	cmp	r0, #0
   b4916:	d0d7      	beq.n	b48c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4918:	6963      	ldr	r3, [r4, #20]
   b491a:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b491c:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b491e:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4920:	8525      	strh	r5, [r4, #40]	; 0x28
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4922:	f002 fb65 	bl	b6ff0 <strlen>
   b4926:	2200      	movs	r2, #0
   b4928:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b492c:	9b05      	ldr	r3, [sp, #20]
   b492e:	9000      	str	r0, [sp, #0]
   b4930:	462a      	mov	r2, r5
   b4932:	211d      	movs	r1, #29
   b4934:	4620      	mov	r0, r4
   b4936:	f000 f833 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b493a:	6a23      	ldr	r3, [r4, #32]
   b493c:	6263      	str	r3, [r4, #36]	; 0x24
            return true;
   b493e:	e78f      	b.n	b4860 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            } else if (port == 8080) {
   b4940:	f641 7290 	movw	r2, #8080	; 0x1f90
   b4944:	4293      	cmp	r3, r2
   b4946:	d1bf      	bne.n	b48c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
                isConn = _connectToPort(80);
   b4948:	2150      	movs	r1, #80	; 0x50
   b494a:	e7e0      	b.n	b490e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>

000b494c <loop>:
  //connecting and subscribing to airport/request and airport/receive
  client.connect(System.deviceID());
  client.subscribe("airport/#");
}

void loop() {
   b494c:	b538      	push	{r3, r4, r5, lr}
  Blynk.run();
  //gets new metar code every 10 seconds
  if (moment + 10000 <= millis()){
   b494e:	4d0e      	ldr	r5, [pc, #56]	; (b4988 <loop+0x3c>)
  Blynk.run();
   b4950:	480e      	ldr	r0, [pc, #56]	; (b498c <loop+0x40>)
   b4952:	2100      	movs	r1, #0
   b4954:	f7ff ff5c 	bl	b4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (moment + 10000 <= millis()){
   b4958:	682c      	ldr	r4, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b495a:	f000 fe73 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
   b495e:	f504 541c 	add.w	r4, r4, #9984	; 0x2700
   b4962:	3410      	adds	r4, #16
   b4964:	4284      	cmp	r4, r0
   b4966:	d80d      	bhi.n	b4984 <loop+0x38>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4968:	4b09      	ldr	r3, [pc, #36]	; (b4990 <loop+0x44>)
    client.publish("airport/request", airport);
   b496a:	490a      	ldr	r1, [pc, #40]	; (b4994 <loop+0x48>)
   b496c:	681a      	ldr	r2, [r3, #0]
   b496e:	480a      	ldr	r0, [pc, #40]	; (b4998 <loop+0x4c>)
   b4970:	f000 fda5 	bl	b54be <_ZN4MQTT7publishEPKcS1_>
    Serial.println("connectedwer");
   b4974:	f001 fbbc 	bl	b60f0 <_Z16_fetch_usbserialv>
   b4978:	4908      	ldr	r1, [pc, #32]	; (b499c <loop+0x50>)
   b497a:	f001 f9ac 	bl	b5cd6 <_ZN5Print7printlnEPKc>
   b497e:	f000 fe61 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
    moment = millis();
   b4982:	6028      	str	r0, [r5, #0]
  }
   b4984:	bd38      	pop	{r3, r4, r5, pc}
   b4986:	bf00      	nop
   b4988:	2003e6b4 	.word	0x2003e6b4
   b498c:	2003e328 	.word	0x2003e328
   b4990:	2003e424 	.word	0x2003e424
   b4994:	000b7238 	.word	0x000b7238
   b4998:	2003e654 	.word	0x2003e654
   b499c:	000b7248 	.word	0x000b7248

000b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b49a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49a4:	b091      	sub	sp, #68	; 0x44
   b49a6:	af04      	add	r7, sp, #16
   b49a8:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b49aa:	6900      	ldr	r0, [r0, #16]
   b49ac:	6dbd      	ldr	r5, [r7, #88]	; 0x58
   b49ae:	4689      	mov	r9, r1
   b49b0:	4616      	mov	r6, r2
   b49b2:	469a      	mov	sl, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b49b4:	46eb      	mov	fp, sp
   b49b6:	f001 fd87 	bl	b64c8 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b49ba:	2800      	cmp	r0, #0
   b49bc:	f000 80b5 	beq.w	b4b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b49c0:	f1b9 0f1d 	cmp.w	r9, #29
   b49c4:	d804      	bhi.n	b49d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b49c6:	4b71      	ldr	r3, [pc, #452]	; (b4b8c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ec>)
   b49c8:	fa23 f309 	lsr.w	r3, r3, r9
   b49cc:	07db      	lsls	r3, r3, #31
   b49ce:	d420      	bmi.n	b4a12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
   b49d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b49d4:	2b01      	cmp	r3, #1
   b49d6:	f040 80a8 	bne.w	b4b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    if (cmd >= BLYNK_CMD_BRIDGE && cmd <= BLYNK_CMD_HARDWARE) {
   b49da:	f1a9 030f 	sub.w	r3, r9, #15
   b49de:	2b05      	cmp	r3, #5
   b49e0:	d817      	bhi.n	b4a12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b49e2:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   b49e6:	4293      	cmp	r3, r2
   b49e8:	bf38      	it	cc
   b49ea:	4613      	movcc	r3, r2
   b49ec:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b49f0:	f000 fdae 	bl	b5550 <_Z11BlynkMillisv>
   b49f4:	eba8 0000 	sub.w	r0, r8, r0
        if (wait_time >= 0) {
   b49f8:	2800      	cmp	r0, #0
   b49fa:	f2c0 809b 	blt.w	b4b34 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x194>
                run();
   b49fe:	2100      	movs	r1, #0
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff ff05 	bl	b4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4a06:	f000 fda3 	bl	b5550 <_Z11BlynkMillisv>
   b4a0a:	eba8 0000 	sub.w	r0, r8, r0
            while (wait_time >= 0) {
   b4a0e:	2800      	cmp	r0, #0
   b4a10:	daf5      	bge.n	b49fe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x5e>
protected:
    void processCmd(const void* buff, size_t len);
    void sendInfo();

    void sendPendingGroup() {
        if (GROUP_PENDING == groupState) {
   b4a12:	7823      	ldrb	r3, [r4, #0]
   b4a14:	2b01      	cmp	r3, #1
   b4a16:	d12d      	bne.n	b4a74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd4>
            // Set groupState here as sendCmd is recursive
            groupState = GROUP_STARTED;
   b4a18:	2302      	movs	r3, #2
   b4a1a:	7023      	strb	r3, [r4, #0]
            if (groupTs) {
   b4a1c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4a20:	4313      	orrs	r3, r2
   b4a22:	f107 0018 	add.w	r0, r7, #24
   b4a26:	f04f 0800 	mov.w	r8, #0
   b4a2a:	f000 808c 	beq.w	b4b46 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1a6>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4a2e:	2318      	movs	r3, #24
   b4a30:	e9c7 0803 	strd	r0, r8, [r7, #12]
                char mem[24];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("t");
   b4a34:	4956      	ldr	r1, [pc, #344]	; (b4b90 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f0>)
   b4a36:	617b      	str	r3, [r7, #20]
   b4a38:	f107 000c 	add.w	r0, r7, #12
   b4a3c:	f7ff fbeb 	bl	b4216 <_ZN10BlynkParam3addEPKc>
    }

    inline
    void BlynkParam::add(unsigned long long value)
    {
        len += snprintf(buff+len, buff_size-len, "%llu", value)+1;
   b4a40:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
   b4a44:	ed94 7b02 	vldr	d7, [r4, #8]
   b4a48:	68f8      	ldr	r0, [r7, #12]
   b4a4a:	4a52      	ldr	r2, [pc, #328]	; (b4b94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f4>)
   b4a4c:	1ac9      	subs	r1, r1, r3
   b4a4e:	4418      	add	r0, r3
   b4a50:	ed8d 7b00 	vstr	d7, [sp]
   b4a54:	f000 ffea 	bl	b5a2c <snprintf>
   b4a58:	693b      	ldr	r3, [r7, #16]
   b4a5a:	3001      	adds	r0, #1
   b4a5c:	4418      	add	r0, r3
   b4a5e:	6138      	str	r0, [r7, #16]
                cmd.add(groupTs);
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4a60:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4a64:	3801      	subs	r0, #1
   b4a66:	9000      	str	r0, [sp, #0]
   b4a68:	68fb      	ldr	r3, [r7, #12]
            } else {
                char mem[4];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("b");
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4a6a:	4642      	mov	r2, r8
   b4a6c:	2115      	movs	r1, #21
   b4a6e:	4620      	mov	r0, r4
   b4a70:	f7ff ff96 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    if (0 == id) {
   b4a74:	b946      	cbnz	r6, b4a88 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4a76:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
   b4a78:	b936      	cbnz	r6, b4a88 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4a7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   b4a7c:	3301      	adds	r3, #1
   b4a7e:	b29b      	uxth	r3, r3
   b4a80:	2b00      	cmp	r3, #0
   b4a82:	d070      	beq.n	b4b66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c6>
        msgIdOut = 1;
   b4a84:	8523      	strh	r3, [r4, #40]	; 0x28
    return msgIdOut;
   b4a86:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a88:	f1ba 0f00 	cmp.w	sl, #0
   b4a8c:	d06d      	beq.n	b4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ca>
   b4a8e:	f105 0805 	add.w	r8, r5, #5
                               (data2 ? length2 : 0);
   b4a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4a94:	2b00      	cmp	r3, #0
   b4a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4a98:	bf08      	it	eq
   b4a9a:	2300      	moveq	r3, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a9c:	4498      	add	r8, r3
    uint8_t buff[full_length];
   b4a9e:	f108 0307 	add.w	r3, r8, #7
   b4aa2:	f023 0307 	bic.w	r3, r3, #7
   b4aa6:	ebad 0d03 	sub.w	sp, sp, r3
   b4aaa:	ab04      	add	r3, sp, #16
   b4aac:	607b      	str	r3, [r7, #4]
    hdr->length = htons(length+length2);
   b4aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    hdr->type = cmd;
   b4ab0:	f88d 9010 	strb.w	r9, [sp, #16]
    hdr->length = htons(length+length2);
   b4ab4:	18ea      	adds	r2, r5, r3
   b4ab6:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4aba:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->msg_id = htons(id);
   b4ac0:	f8ad 6011 	strh.w	r6, [sp, #17]
    hdr->length = htons(length+length2);
   b4ac4:	f8ad 3013 	strh.w	r3, [sp, #19]
    if (data && length) {
   b4ac8:	f1ba 0f00 	cmp.w	sl, #0
   b4acc:	d050      	beq.n	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
   b4ace:	2d00      	cmp	r5, #0
   b4ad0:	d04e      	beq.n	b4b70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
        memcpy(buff + pos, data, length);
   b4ad2:	462a      	mov	r2, r5
   b4ad4:	4651      	mov	r1, sl
   b4ad6:	f10d 0015 	add.w	r0, sp, #21
   b4ada:	f002 fa3b 	bl	b6f54 <memcpy>
        pos += length;
   b4ade:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4ae2:	b13b      	cbz	r3, b4af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
   b4ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4ae6:	b12b      	cbz	r3, b4af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        memcpy(buff + pos, data2, length2);
   b4ae8:	461a      	mov	r2, r3
   b4aea:	687b      	ldr	r3, [r7, #4]
   b4aec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   b4aee:	4418      	add	r0, r3
   b4af0:	f002 fa30 	bl	b6f54 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4af4:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4af6:	4545      	cmp	r5, r8
   b4af8:	d23e      	bcs.n	b4b78 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d8>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4afa:	eba8 0205 	sub.w	r2, r8, r5
        return client.write((const uint8_t*)buf, len);
   b4afe:	687b      	ldr	r3, [r7, #4]
   b4b00:	6920      	ldr	r0, [r4, #16]
   b4b02:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4b06:	bf28      	it	cs
   b4b08:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4b0c:	1959      	adds	r1, r3, r5
   b4b0e:	f001 fbb2 	bl	b6276 <_ZN9TCPClient5writeEPKhj>
   b4b12:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4b14:	2000      	movs	r0, #0
   b4b16:	f000 fd19 	bl	b554c <_Z10BlynkDelaym>
        if (w == 0) {
   b4b1a:	bb5e      	cbnz	r6, b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d4>
    void disconnect() { client.stop(); }
   b4b1c:	6920      	ldr	r0, [r4, #16]
   b4b1e:	f001 fe0b 	bl	b6738 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4b22:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            BlynkOnDisconnected();
   b4b26:	f000 fd17 	bl	b5558 <BlynkNoOpCbk>
}
   b4b2a:	3734      	adds	r7, #52	; 0x34
   b4b2c:	46dd      	mov	sp, fp
   b4b2e:	46bd      	mov	sp, r7
   b4b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (nesting == 0) {
   b4b34:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   b4b38:	2900      	cmp	r1, #0
   b4b3a:	f47f af6a 	bne.w	b4a12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
            run();
   b4b3e:	4620      	mov	r0, r4
   b4b40:	f7ff fe66 	bl	b4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4b44:	e765      	b.n	b4a12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4b46:	f107 030c 	add.w	r3, r7, #12
   b4b4a:	e9c7 3806 	strd	r3, r8, [r7, #24]
                cmd.add("b");
   b4b4e:	4912      	ldr	r1, [pc, #72]	; (b4b98 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f8>)
   b4b50:	2304      	movs	r3, #4
   b4b52:	623b      	str	r3, [r7, #32]
   b4b54:	f7ff fb5f 	bl	b4216 <_ZN10BlynkParam3addEPKc>
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4b58:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4b5c:	69fb      	ldr	r3, [r7, #28]
   b4b5e:	3b01      	subs	r3, #1
   b4b60:	9300      	str	r3, [sp, #0]
   b4b62:	69bb      	ldr	r3, [r7, #24]
   b4b64:	e781      	b.n	b4a6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xca>
        msgIdOut = 1;
   b4b66:	2301      	movs	r3, #1
   b4b68:	e78c      	b.n	b4a84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4b6a:	f04f 0805 	mov.w	r8, #5
   b4b6e:	e790      	b.n	b4a92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf2>
    size_t pos = sizeof(BlynkHeader);
   b4b70:	2005      	movs	r0, #5
   b4b72:	e7b5      	b.n	b4ae0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x140>
        wlen += w;
   b4b74:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4b76:	e7be      	b.n	b4af6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
    if (wlen != full_length) {
   b4b78:	d003      	beq.n	b4b82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1e2>
        internalReconnect();
   b4b7a:	4620      	mov	r0, r4
   b4b7c:	f7ff fbdd 	bl	b433a <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4b80:	e7d3      	b.n	b4b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    lastActivityOut = BlynkMillis();
   b4b82:	f000 fce5 	bl	b5550 <_Z11BlynkMillisv>
   b4b86:	6220      	str	r0, [r4, #32]
   b4b88:	e7cf      	b.n	b4b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b4b8a:	bf00      	nop
   b4b8c:	20000041 	.word	0x20000041
   b4b90:	000b7246 	.word	0x000b7246
   b4b94:	000b7255 	.word	0x000b7255
   b4b98:	000b725a 	.word	0x000b725a

000b4b9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4b9c:	b530      	push	{r4, r5, lr}
   b4b9e:	b099      	sub	sp, #100	; 0x64
   b4ba0:	ab08      	add	r3, sp, #32
   b4ba2:	4604      	mov	r4, r0
   b4ba4:	9305      	str	r3, [sp, #20]
   b4ba6:	2500      	movs	r5, #0
   b4ba8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b4baa:	a805      	add	r0, sp, #20
   b4bac:	490b      	ldr	r1, [pc, #44]	; (b4bdc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4bae:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b4bb2:	f7ff fb30 	bl	b4216 <_ZN10BlynkParam3addEPKc>
        add(val);
   b4bb6:	a805      	add	r0, sp, #20
   b4bb8:	4909      	ldr	r1, [pc, #36]	; (b4be0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b4bba:	f7ff fb2c 	bl	b4216 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength()-1);
   b4bbe:	9b06      	ldr	r3, [sp, #24]
   b4bc0:	3b01      	subs	r3, #1
   b4bc2:	9302      	str	r3, [sp, #8]
   b4bc4:	9b05      	ldr	r3, [sp, #20]
   b4bc6:	9301      	str	r3, [sp, #4]
   b4bc8:	2371      	movs	r3, #113	; 0x71
   b4bca:	9300      	str	r3, [sp, #0]
   b4bcc:	462a      	mov	r2, r5
   b4bce:	4b05      	ldr	r3, [pc, #20]	; (b4be4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b4bd0:	2111      	movs	r1, #17
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	f7ff fee4 	bl	b49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4bd8:	b019      	add	sp, #100	; 0x64
   b4bda:	bd30      	pop	{r4, r5, pc}
   b4bdc:	000b725c 	.word	0x000b725c
   b4be0:	000b7261 	.word	0x000b7261
   b4be4:	000b734f 	.word	0x000b734f

000b4be8 <setup>:
void setup() {
   b4be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4bea:	b085      	sub	sp, #20
  Serial.begin(9600);
   b4bec:	f001 fa80 	bl	b60f0 <_Z16_fetch_usbserialv>
   b4bf0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4bf4:	f001 fa70 	bl	b60d8 <_ZN9USBSerial5beginEl>
  Serial.println("connected");
   b4bf8:	f001 fa7a 	bl	b60f0 <_Z16_fetch_usbserialv>
   b4bfc:	492c      	ldr	r1, [pc, #176]	; (b4cb0 <setup+0xc8>)
        this->authkey = auth;
   b4bfe:	4c2d      	ldr	r4, [pc, #180]	; (b4cb4 <setup+0xcc>)
   b4c00:	f001 f869 	bl	b5cd6 <_ZN5Print7printlnEPKc>
  delay(5000); // Allow board to settle
   b4c04:	f241 3088 	movw	r0, #5000	; 0x1388
   b4c08:	f001 f8ca 	bl	b5da0 <delay>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4c0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4c10:	f000 fc9c 	bl	b554c <_Z10BlynkDelaym>
   b4c14:	4b28      	ldr	r3, [pc, #160]	; (b4cb8 <setup+0xd0>)
   b4c16:	6163      	str	r3, [r4, #20]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4c18:	f000 fc9a 	bl	b5550 <_Z11BlynkMillisv>
   b4c1c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b4c20:	6923      	ldr	r3, [r4, #16]
        domain = d;
   b4c22:	4a26      	ldr	r2, [pc, #152]	; (b4cbc <setup+0xd4>)
   b4c24:	635a      	str	r2, [r3, #52]	; 0x34
   b4c26:	3808      	subs	r0, #8
   b4c28:	e9c4 0007 	strd	r0, r0, [r4, #28]
        port = p;
   b4c2c:	2250      	movs	r2, #80	; 0x50
   b4c2e:	6260      	str	r0, [r4, #36]	; 0x24
   b4c30:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b4c32:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b4c34:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4c38:	6920      	ldr	r0, [r4, #16]
   b4c3a:	f001 fd7d 	bl	b6738 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4c3e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
        millis_time_t started = BlynkMillis();
   b4c42:	f000 fc85 	bl	b5550 <_Z11BlynkMillisv>
   b4c46:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b4c48:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4c4c:	2b01      	cmp	r3, #1
   b4c4e:	d00d      	beq.n	b4c6c <setup+0x84>
               (BlynkMillis() - started < timeout))
   b4c50:	f000 fc7e 	bl	b5550 <_Z11BlynkMillisv>
   b4c54:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b4c56:	42b8      	cmp	r0, r7
   b4c58:	d804      	bhi.n	b4c64 <setup+0x7c>
            run();
   b4c5a:	2100      	movs	r1, #0
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	f7ff fdd7 	bl	b4810 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4c62:	e7f1      	b.n	b4c48 <setup+0x60>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b4c64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4c68:	2b01      	cmp	r3, #1
   b4c6a:	d1e5      	bne.n	b4c38 <setup+0x50>
  pinMode(red,OUTPUT);
   b4c6c:	2101      	movs	r1, #1
   b4c6e:	2013      	movs	r0, #19
   b4c70:	f001 feee 	bl	b6a50 <pinMode>
  pinMode(blue,OUTPUT);
   b4c74:	2101      	movs	r1, #1
   b4c76:	2012      	movs	r0, #18
   b4c78:	f001 feea 	bl	b6a50 <pinMode>
  pinMode(green,OUTPUT);
   b4c7c:	2101      	movs	r1, #1
   b4c7e:	2011      	movs	r0, #17
   b4c80:	f001 fee6 	bl	b6a50 <pinMode>
  LED(255,255,255);//just setting the LED to white
   b4c84:	22ff      	movs	r2, #255	; 0xff
   b4c86:	4611      	mov	r1, r2
   b4c88:	4610      	mov	r0, r2
   b4c8a:	f7ff fb45 	bl	b4318 <_Z3LEDiii>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4c8e:	4668      	mov	r0, sp
   b4c90:	f000 fea4 	bl	b59dc <spark_deviceID>
  client.connect(System.deviceID());
   b4c94:	9900      	ldr	r1, [sp, #0]
   b4c96:	480a      	ldr	r0, [pc, #40]	; (b4cc0 <setup+0xd8>)
   b4c98:	f000 fb86 	bl	b53a8 <_ZN4MQTT7connectEPKc>
   b4c9c:	4668      	mov	r0, sp
   b4c9e:	f000 ff47 	bl	b5b30 <_ZN6StringD1Ev>
  client.subscribe("airport/#");
   b4ca2:	4908      	ldr	r1, [pc, #32]	; (b4cc4 <setup+0xdc>)
   b4ca4:	4806      	ldr	r0, [pc, #24]	; (b4cc0 <setup+0xd8>)
}
   b4ca6:	b005      	add	sp, #20
   b4ca8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  client.subscribe("airport/#");
   b4cac:	f000 bc4b 	b.w	b5546 <_ZN4MQTT9subscribeEPKc>
   b4cb0:	000b726f 	.word	0x000b726f
   b4cb4:	2003e328 	.word	0x2003e328
   b4cb8:	000b7279 	.word	0x000b7279
   b4cbc:	000b729a 	.word	0x000b729a
   b4cc0:	2003e654 	.word	0x2003e654
   b4cc4:	000b72a6 	.word	0x000b72a6

000b4cc8 <_GLOBAL__sub_I_Blynk>:
   b4cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0), actual_port(0)
   b4cca:	4c7e      	ldr	r4, [pc, #504]	; (b4ec4 <_GLOBAL__sub_I_Blynk+0x1fc>)
SYSTEM_THREAD(ENABLED);
   b4ccc:	2100      	movs	r1, #0
   b4cce:	2001      	movs	r0, #1
   b4cd0:	f000 fe00 	bl	b58d4 <system_thread_set_state>
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	f001 fd79 	bl	b67cc <_ZN9TCPClientC1Ev>
   b4cda:	f104 001c 	add.w	r0, r4, #28
   b4cde:	f001 f955 	bl	b5f8c <_ZN9IPAddressC1Ev>
        , groupTs(0)
   b4ce2:	4b79      	ldr	r3, [pc, #484]	; (b4ec8 <_GLOBAL__sub_I_Blynk+0x200>)
   b4ce4:	2500      	movs	r5, #0
   b4ce6:	2100      	movs	r1, #0
   b4ce8:	2000      	movs	r0, #0
   b4cea:	e9c3 0102 	strd	r0, r1, [r3, #8]
        , state(CONNECTING)
   b4cee:	e9c3 4504 	strd	r4, r5, [r3, #16]
   b4cf2:	701d      	strb	r5, [r3, #0]
   b4cf4:	e9c3 5506 	strd	r5, r5, [r3, #24]
   b4cf8:	e9c3 5508 	strd	r5, r5, [r3, #32]
   b4cfc:	629d      	str	r5, [r3, #40]	; 0x28
   b4cfe:	859d      	strh	r5, [r3, #44]	; 0x2c
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4d00:	4b72      	ldr	r3, [pc, #456]	; (b4ecc <_GLOBAL__sub_I_Blynk+0x204>)
   b4d02:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4d06:	e9c3 2500 	strd	r2, r5, [r3]
   b4d0a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   b4d0e:	721d      	strb	r5, [r3, #8]
   b4d10:	f000 fc98 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
unsigned long moment = millis();
   b4d14:	4b6e      	ldr	r3, [pc, #440]	; (b4ed0 <_GLOBAL__sub_I_Blynk+0x208>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4d16:	4c6f      	ldr	r4, [pc, #444]	; (b4ed4 <_GLOBAL__sub_I_Blynk+0x20c>)
unsigned long moment = millis();
   b4d18:	6018      	str	r0, [r3, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4d1a:	4b6f      	ldr	r3, [pc, #444]	; (b4ed8 <_GLOBAL__sub_I_Blynk+0x210>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4d1c:	496f      	ldr	r1, [pc, #444]	; (b4edc <_GLOBAL__sub_I_Blynk+0x214>)
   b4d1e:	721d      	strb	r5, [r3, #8]
   b4d20:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4d24:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4d28:	4b6d      	ldr	r3, [pc, #436]	; (b4ee0 <_GLOBAL__sub_I_Blynk+0x218>)
   b4d2a:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4d2e:	e9c3 2500 	strd	r2, r5, [r3]
   b4d32:	721d      	strb	r5, [r3, #8]
   b4d34:	4620      	mov	r0, r4
   b4d36:	f000 ff46 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d3a:	496a      	ldr	r1, [pc, #424]	; (b4ee4 <_GLOBAL__sub_I_Blynk+0x21c>)
   b4d3c:	f104 0010 	add.w	r0, r4, #16
   b4d40:	f000 ff41 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d44:	4968      	ldr	r1, [pc, #416]	; (b4ee8 <_GLOBAL__sub_I_Blynk+0x220>)
   b4d46:	f104 0020 	add.w	r0, r4, #32
   b4d4a:	f000 ff3c 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d4e:	4967      	ldr	r1, [pc, #412]	; (b4eec <_GLOBAL__sub_I_Blynk+0x224>)
   b4d50:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4d54:	f000 ff37 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d58:	4965      	ldr	r1, [pc, #404]	; (b4ef0 <_GLOBAL__sub_I_Blynk+0x228>)
   b4d5a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4d5e:	f000 ff32 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d62:	4964      	ldr	r1, [pc, #400]	; (b4ef4 <_GLOBAL__sub_I_Blynk+0x22c>)
   b4d64:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4d68:	f000 ff2d 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d6c:	4962      	ldr	r1, [pc, #392]	; (b4ef8 <_GLOBAL__sub_I_Blynk+0x230>)
   b4d6e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4d72:	f000 ff28 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d76:	4961      	ldr	r1, [pc, #388]	; (b4efc <_GLOBAL__sub_I_Blynk+0x234>)
   b4d78:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4d7c:	f000 ff23 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d80:	495f      	ldr	r1, [pc, #380]	; (b4f00 <_GLOBAL__sub_I_Blynk+0x238>)
   b4d82:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b4d86:	f000 ff1e 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d8a:	495e      	ldr	r1, [pc, #376]	; (b4f04 <_GLOBAL__sub_I_Blynk+0x23c>)
   b4d8c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4d90:	f000 ff19 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d94:	495c      	ldr	r1, [pc, #368]	; (b4f08 <_GLOBAL__sub_I_Blynk+0x240>)
   b4d96:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4d9a:	f000 ff14 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4d9e:	495b      	ldr	r1, [pc, #364]	; (b4f0c <_GLOBAL__sub_I_Blynk+0x244>)
   b4da0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b4da4:	f000 ff0f 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4da8:	4959      	ldr	r1, [pc, #356]	; (b4f10 <_GLOBAL__sub_I_Blynk+0x248>)
   b4daa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b4dae:	f000 ff0a 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4db2:	4958      	ldr	r1, [pc, #352]	; (b4f14 <_GLOBAL__sub_I_Blynk+0x24c>)
   b4db4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   b4db8:	f000 ff05 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4dbc:	4956      	ldr	r1, [pc, #344]	; (b4f18 <_GLOBAL__sub_I_Blynk+0x250>)
   b4dbe:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   b4dc2:	f000 ff00 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4dc6:	4955      	ldr	r1, [pc, #340]	; (b4f1c <_GLOBAL__sub_I_Blynk+0x254>)
   b4dc8:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   b4dcc:	f000 fefb 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4dd0:	4953      	ldr	r1, [pc, #332]	; (b4f20 <_GLOBAL__sub_I_Blynk+0x258>)
   b4dd2:	f504 7080 	add.w	r0, r4, #256	; 0x100
   b4dd6:	f000 fef6 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4dda:	4952      	ldr	r1, [pc, #328]	; (b4f24 <_GLOBAL__sub_I_Blynk+0x25c>)
   b4ddc:	f504 7088 	add.w	r0, r4, #272	; 0x110
   b4de0:	f000 fef1 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4de4:	4950      	ldr	r1, [pc, #320]	; (b4f28 <_GLOBAL__sub_I_Blynk+0x260>)
   b4de6:	f504 7090 	add.w	r0, r4, #288	; 0x120
   b4dea:	f000 feec 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4dee:	494f      	ldr	r1, [pc, #316]	; (b4f2c <_GLOBAL__sub_I_Blynk+0x264>)
   b4df0:	f504 7098 	add.w	r0, r4, #304	; 0x130
   b4df4:	f000 fee7 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4df8:	494d      	ldr	r1, [pc, #308]	; (b4f30 <_GLOBAL__sub_I_Blynk+0x268>)
   b4dfa:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   b4dfe:	f000 fee2 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e02:	494c      	ldr	r1, [pc, #304]	; (b4f34 <_GLOBAL__sub_I_Blynk+0x26c>)
   b4e04:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   b4e08:	f000 fedd 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e0c:	494a      	ldr	r1, [pc, #296]	; (b4f38 <_GLOBAL__sub_I_Blynk+0x270>)
   b4e0e:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   b4e12:	f000 fed8 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e16:	4949      	ldr	r1, [pc, #292]	; (b4f3c <_GLOBAL__sub_I_Blynk+0x274>)
   b4e18:	f504 70b8 	add.w	r0, r4, #368	; 0x170
   b4e1c:	f000 fed3 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e20:	4947      	ldr	r1, [pc, #284]	; (b4f40 <_GLOBAL__sub_I_Blynk+0x278>)
   b4e22:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   b4e26:	f000 fece 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e2a:	4946      	ldr	r1, [pc, #280]	; (b4f44 <_GLOBAL__sub_I_Blynk+0x27c>)
   b4e2c:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   b4e30:	f000 fec9 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e34:	4944      	ldr	r1, [pc, #272]	; (b4f48 <_GLOBAL__sub_I_Blynk+0x280>)
   b4e36:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   b4e3a:	f000 fec4 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e3e:	4943      	ldr	r1, [pc, #268]	; (b4f4c <_GLOBAL__sub_I_Blynk+0x284>)
   b4e40:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   b4e44:	f000 febf 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e48:	4941      	ldr	r1, [pc, #260]	; (b4f50 <_GLOBAL__sub_I_Blynk+0x288>)
   b4e4a:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   b4e4e:	f000 feba 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e52:	4940      	ldr	r1, [pc, #256]	; (b4f54 <_GLOBAL__sub_I_Blynk+0x28c>)
   b4e54:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   b4e58:	f000 feb5 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e5c:	493e      	ldr	r1, [pc, #248]	; (b4f58 <_GLOBAL__sub_I_Blynk+0x290>)
   b4e5e:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   b4e62:	f000 feb0 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e66:	493d      	ldr	r1, [pc, #244]	; (b4f5c <_GLOBAL__sub_I_Blynk+0x294>)
   b4e68:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   b4e6c:	f000 feab 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e70:	493b      	ldr	r1, [pc, #236]	; (b4f60 <_GLOBAL__sub_I_Blynk+0x298>)
   b4e72:	f504 7000 	add.w	r0, r4, #512	; 0x200
   b4e76:	f000 fea6 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4e7a:	493a      	ldr	r1, [pc, #232]	; (b4f64 <_GLOBAL__sub_I_Blynk+0x29c>)
   b4e7c:	f504 7004 	add.w	r0, r4, #528	; 0x210
   b4e80:	f000 fea1 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
String airport;
   b4e84:	4938      	ldr	r1, [pc, #224]	; (b4f68 <_GLOBAL__sub_I_Blynk+0x2a0>)
   b4e86:	4839      	ldr	r0, [pc, #228]	; (b4f6c <_GLOBAL__sub_I_Blynk+0x2a4>)
   b4e88:	f000 fe9d 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4e8c:	4b38      	ldr	r3, [pc, #224]	; (b4f70 <_GLOBAL__sub_I_Blynk+0x2a8>)
MQTT client("lab.thewcl.com", 1883, callback);
   b4e8e:	4939      	ldr	r1, [pc, #228]	; (b4f74 <_GLOBAL__sub_I_Blynk+0x2ac>)
   b4e90:	721d      	strb	r5, [r3, #8]
   b4e92:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4e96:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4e9a:	4b37      	ldr	r3, [pc, #220]	; (b4f78 <_GLOBAL__sub_I_Blynk+0x2b0>)
   b4e9c:	4837      	ldr	r0, [pc, #220]	; (b4f7c <_GLOBAL__sub_I_Blynk+0x2b4>)
   b4e9e:	721d      	strb	r5, [r3, #8]
   b4ea0:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4ea4:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4ea8:	4b35      	ldr	r3, [pc, #212]	; (b4f80 <_GLOBAL__sub_I_Blynk+0x2b8>)
   b4eaa:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4eae:	e9c3 2500 	strd	r2, r5, [r3]
   b4eb2:	721d      	strb	r5, [r3, #8]
   b4eb4:	f240 725b 	movw	r2, #1883	; 0x75b
   b4eb8:	4b32      	ldr	r3, [pc, #200]	; (b4f84 <_GLOBAL__sub_I_Blynk+0x2bc>)
   b4eba:	9500      	str	r5, [sp, #0]
   b4ebc:	f000 f8a8 	bl	b5010 <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b4ec0:	b003      	add	sp, #12
   b4ec2:	bd30      	pop	{r4, r5, pc}
   b4ec4:	2003e3e8 	.word	0x2003e3e8
   b4ec8:	2003e328 	.word	0x2003e328
   b4ecc:	2003e3b8 	.word	0x2003e3b8
   b4ed0:	2003e6b4 	.word	0x2003e6b4
   b4ed4:	2003e434 	.word	0x2003e434
   b4ed8:	2003e388 	.word	0x2003e388
   b4edc:	000b72b0 	.word	0x000b72b0
   b4ee0:	2003e358 	.word	0x2003e358
   b4ee4:	000b72b4 	.word	0x000b72b4
   b4ee8:	000b72b8 	.word	0x000b72b8
   b4eec:	000b72bc 	.word	0x000b72bc
   b4ef0:	000b72c0 	.word	0x000b72c0
   b4ef4:	000b72c4 	.word	0x000b72c4
   b4ef8:	000b72c8 	.word	0x000b72c8
   b4efc:	000b72cc 	.word	0x000b72cc
   b4f00:	000b72d0 	.word	0x000b72d0
   b4f04:	000b72d4 	.word	0x000b72d4
   b4f08:	000b72d8 	.word	0x000b72d8
   b4f0c:	000b72dc 	.word	0x000b72dc
   b4f10:	000b72e0 	.word	0x000b72e0
   b4f14:	000b72e4 	.word	0x000b72e4
   b4f18:	000b72e8 	.word	0x000b72e8
   b4f1c:	000b72ec 	.word	0x000b72ec
   b4f20:	000b72f0 	.word	0x000b72f0
   b4f24:	000b72f4 	.word	0x000b72f4
   b4f28:	000b72f8 	.word	0x000b72f8
   b4f2c:	000b72fc 	.word	0x000b72fc
   b4f30:	000b7300 	.word	0x000b7300
   b4f34:	000b7304 	.word	0x000b7304
   b4f38:	000b7308 	.word	0x000b7308
   b4f3c:	000b730c 	.word	0x000b730c
   b4f40:	000b7310 	.word	0x000b7310
   b4f44:	000b7314 	.word	0x000b7314
   b4f48:	000b7318 	.word	0x000b7318
   b4f4c:	000b731c 	.word	0x000b731c
   b4f50:	000b7320 	.word	0x000b7320
   b4f54:	000b7324 	.word	0x000b7324
   b4f58:	000b7328 	.word	0x000b7328
   b4f5c:	000b732c 	.word	0x000b732c
   b4f60:	000b7330 	.word	0x000b7330
   b4f64:	000b7334 	.word	0x000b7334
   b4f68:	000b72af 	.word	0x000b72af
   b4f6c:	2003e424 	.word	0x2003e424
   b4f70:	2003e370 	.word	0x2003e370
   b4f74:	000b7338 	.word	0x000b7338
   b4f78:	2003e3d0 	.word	0x2003e3d0
   b4f7c:	2003e654 	.word	0x2003e654
   b4f80:	2003e3a0 	.word	0x2003e3a0
   b4f84:	000b40b9 	.word	0x000b40b9

000b4f88 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4f88:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b4f8c:	b510      	push	{r4, lr}
   b4f8e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4f90:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4f92:	b113      	cbz	r3, b4f9a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4f94:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4f96:	f000 fb65 	bl	b5664 <os_mutex_lock>
#endif
#endif
#endif
        }
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	bd10      	pop	{r4, pc}

000b4f9e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b4f9e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4fa0:	6803      	ldr	r3, [r0, #0]
   b4fa2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4fa6:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4fa8:	b112      	cbz	r2, b4fb0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b4faa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b4fac:	f000 fb62 	bl	b5674 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b4fb0:	4620      	mov	r0, r4
   b4fb2:	bd10      	pop	{r4, pc}

000b4fb4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b4fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4fb6:	461f      	mov	r7, r3
   b4fb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b4fbc:	4604      	mov	r4, r0
   b4fbe:	460d      	mov	r5, r1
   b4fc0:	4616      	mov	r6, r2
    if (thread) {
   b4fc2:	b12b      	cbz	r3, b4fd0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b4fc4:	2301      	movs	r3, #1
   b4fc6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b4fca:	3058      	adds	r0, #88	; 0x58
   b4fcc:	f000 fb42 	bl	b5654 <os_mutex_create>
    }
    this->callback = callback;
   b4fd0:	9b08      	ldr	r3, [sp, #32]
   b4fd2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b4fd4:	2300      	movs	r3, #0
   b4fd6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b4fd8:	b106      	cbz	r6, b4fdc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b4fda:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b4fdc:	b125      	cbz	r5, b4fe8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b4fde:	4629      	mov	r1, r5
   b4fe0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b4fe4:	f000 fe12 	bl	b5c0c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b4fe8:	9b06      	ldr	r3, [sp, #24]
   b4fea:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4fec:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b4fee:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b4ff0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b4ff4:	2bff      	cmp	r3, #255	; 0xff
   b4ff6:	bfb8      	it	lt
   b4ff8:	23ff      	movlt	r3, #255	; 0xff
   b4ffa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b4ffe:	b108      	cbz	r0, b5004 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5000:	f7ff f84d 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5004:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5008:	f7ff f845 	bl	b4096 <_Znaj>
   b500c:	61e0      	str	r0, [r4, #28]
}
   b500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5010 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5014:	4604      	mov	r4, r0
            bool thread) {
   b5016:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5018:	4617      	mov	r7, r2
   b501a:	4698      	mov	r8, r3
   b501c:	460e      	mov	r6, r1
            bool thread) {
   b501e:	f001 fbd5 	bl	b67cc <_ZN9TCPClientC1Ev>
   b5022:	490d      	ldr	r1, [pc, #52]	; (b5058 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5024:	61e5      	str	r5, [r4, #28]
   b5026:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b502a:	f000 fdcc 	bl	b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b502e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5032:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5034:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5038:	22ff      	movs	r2, #255	; 0xff
   b503a:	230f      	movs	r3, #15
   b503c:	e9cd 3200 	strd	r3, r2, [sp]
   b5040:	4620      	mov	r0, r4
            bool thread) {
   b5042:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5046:	463b      	mov	r3, r7
   b5048:	462a      	mov	r2, r5
   b504a:	4631      	mov	r1, r6
   b504c:	f7ff ffb2 	bl	b4fb4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5050:	4620      	mov	r0, r4
   b5052:	b004      	add	sp, #16
   b5054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5058:	000b72af 	.word	0x000b72af

000b505c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b505c:	b510      	push	{r4, lr}
   b505e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5060:	4620      	mov	r0, r4
   b5062:	f001 fb0f 	bl	b6684 <_ZN9TCPClient9availableEv>
   b5066:	2800      	cmp	r0, #0
   b5068:	d0fa      	beq.n	b5060 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b506a:	4620      	mov	r0, r4
   b506c:	f001 f918 	bl	b62a0 <_ZN9TCPClient4readEv>
}
   b5070:	b2c0      	uxtb	r0, r0
   b5072:	bd10      	pop	{r4, pc}

000b5074 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5078:	4605      	mov	r5, r0
   b507a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b507c:	f7ff ffee 	bl	b505c <_ZN4MQTT8readByteEv>
   b5080:	69eb      	ldr	r3, [r5, #28]
   b5082:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5084:	69eb      	ldr	r3, [r5, #28]
   b5086:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b508a:	f04f 0901 	mov.w	r9, #1
   b508e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5092:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5094:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5096:	4628      	mov	r0, r5
   b5098:	f7ff ffe0 	bl	b505c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b509c:	4626      	mov	r6, r4
   b509e:	69eb      	ldr	r3, [r5, #28]
   b50a0:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b50a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b50a6:	fb13 f309 	smulbb	r3, r3, r9
   b50aa:	441f      	add	r7, r3
        buffer[len++] = digit;
   b50ac:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b50ae:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b50b0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b50b2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b50b4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b50b8:	d4ed      	bmi.n	b5096 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b50ba:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b50bc:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b50c0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b50c4:	d11e      	bne.n	b5104 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b50c6:	4628      	mov	r0, r5
   b50c8:	f7ff ffc8 	bl	b505c <_ZN4MQTT8readByteEv>
   b50cc:	69eb      	ldr	r3, [r5, #28]
   b50ce:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b50d0:	4628      	mov	r0, r5
   b50d2:	f7ff ffc3 	bl	b505c <_ZN4MQTT8readByteEv>
   b50d6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b50d8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b50da:	b2b6      	uxth	r6, r6
   b50dc:	69eb      	ldr	r3, [r5, #28]
   b50de:	b2a4      	uxth	r4, r4
   b50e0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b50e2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b50e4:	b2b6      	uxth	r6, r6
   b50e6:	42be      	cmp	r6, r7
   b50e8:	d20e      	bcs.n	b5108 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b50ea:	4628      	mov	r0, r5
   b50ec:	f7ff ffb6 	bl	b505c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b50f0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b50f4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b50f6:	bf84      	itt	hi
   b50f8:	69eb      	ldrhi	r3, [r5, #28]
   b50fa:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b50fc:	3401      	adds	r4, #1
   b50fe:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5100:	3601      	adds	r6, #1
   b5102:	e7ef      	b.n	b50e4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5104:	2600      	movs	r6, #0
   b5106:	e7ed      	b.n	b50e4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5108:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b510c:	42a3      	cmp	r3, r4
   b510e:	bf2c      	ite	cs
   b5110:	4620      	movcs	r0, r4
   b5112:	2000      	movcc	r0, #0
   b5114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5118 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b511c:	4615      	mov	r5, r2
   b511e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5120:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5122:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5124:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5126:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5128:	a802      	add	r0, sp, #8
        digit = len % 128;
   b512a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b512e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5132:	f103 0401 	add.w	r4, r3, #1
   b5136:	4403      	add	r3, r0
            digit |= 0x80;
   b5138:	bf88      	it	hi
   b513a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b513e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5142:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5146:	b2e4      	uxtb	r4, r4
   b5148:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b514c:	d81e      	bhi.n	b518c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b514e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5152:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5156:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5158:	4622      	mov	r2, r4
   b515a:	a901      	add	r1, sp, #4
   b515c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b515e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5162:	f001 fef7 	bl	b6f54 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5166:	1c72      	adds	r2, r6, #1
   b5168:	4422      	add	r2, r4
   b516a:	4641      	mov	r1, r8
   b516c:	4638      	mov	r0, r7
   b516e:	f001 f882 	bl	b6276 <_ZN9TCPClient5writeEPKhj>
   b5172:	4605      	mov	r5, r0
   b5174:	f000 fa66 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5178:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b517a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b517c:	4432      	add	r2, r6
   b517e:	b2a8      	uxth	r0, r5
}
   b5180:	1a13      	subs	r3, r2, r0
   b5182:	4258      	negs	r0, r3
   b5184:	4158      	adcs	r0, r3
   b5186:	b002      	add	sp, #8
   b5188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b518c:	4623      	mov	r3, r4
   b518e:	e7ca      	b.n	b5126 <_ZN4MQTT5writeEhPht+0xe>

000b5190 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5190:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5192:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5194:	4605      	mov	r5, r0
    pos += 2;
   b5196:	b298      	uxth	r0, r3
   b5198:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b519a:	5cce      	ldrb	r6, [r1, r3]
   b519c:	b29c      	uxth	r4, r3
   b519e:	b156      	cbz	r6, b51b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b51a0:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b51a4:	4584      	cmp	ip, r0
   b51a6:	f103 0701 	add.w	r7, r3, #1
   b51aa:	d904      	bls.n	b51b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b51ac:	1c44      	adds	r4, r0, #1
   b51ae:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b51b0:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b51b2:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b51b4:	e7f1      	b.n	b519a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b51b6:	b299      	uxth	r1, r3
   b51b8:	1a41      	subs	r1, r0, r1
   b51ba:	440a      	add	r2, r1
   b51bc:	0a21      	lsrs	r1, r4, #8
   b51be:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b51c2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b51c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b51c8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b51c8:	b538      	push	{r3, r4, r5, lr}
   b51ca:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b51cc:	f001 f97c 	bl	b64c8 <_ZN9TCPClient9connectedEv>
   b51d0:	2800      	cmp	r0, #0
   b51d2:	bf14      	ite	ne
   b51d4:	2501      	movne	r5, #1
   b51d6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b51d8:	d102      	bne.n	b51e0 <_ZN4MQTT11isConnectedEv+0x18>
   b51da:	4620      	mov	r0, r4
   b51dc:	f001 faac 	bl	b6738 <_ZN9TCPClient4stopEv>
    return rc;
}
   b51e0:	4628      	mov	r0, r5
   b51e2:	bd38      	pop	{r3, r4, r5, pc}

000b51e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b51e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b51e8:	b088      	sub	sp, #32
   b51ea:	4604      	mov	r4, r0
   b51ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b51f0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b51f4:	4689      	mov	r9, r1
   b51f6:	4617      	mov	r7, r2
   b51f8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b51fa:	f7ff ffe5 	bl	b51c8 <_ZN4MQTT11isConnectedEv>
   b51fe:	4605      	mov	r5, r0
   b5200:	2800      	cmp	r0, #0
   b5202:	f040 80cd 	bne.w	b53a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b5206:	4621      	mov	r1, r4
   b5208:	a801      	add	r0, sp, #4
   b520a:	f7ff febd 	bl	b4f88 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b520e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5210:	2900      	cmp	r1, #0
   b5212:	f040 8088 	bne.w	b5326 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b5216:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b521a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b521c:	462b      	mov	r3, r5
   b521e:	4620      	mov	r0, r4
   b5220:	f001 f8d4 	bl	b63cc <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5224:	2800      	cmp	r0, #0
   b5226:	d07a      	beq.n	b531e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5228:	2301      	movs	r3, #1
   b522a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b522c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5230:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5232:	2b04      	cmp	r3, #4
   b5234:	4b5b      	ldr	r3, [pc, #364]	; (b53a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5236:	f040 8081 	bne.w	b533c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b523a:	6818      	ldr	r0, [r3, #0]
   b523c:	8899      	ldrh	r1, [r3, #4]
   b523e:	799b      	ldrb	r3, [r3, #6]
   b5240:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5244:	f88d 300e 	strb.w	r3, [sp, #14]
   b5248:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b524a:	f8c2 0005 	str.w	r0, [r2, #5]
   b524e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5252:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5256:	f8a2 1009 	strh.w	r1, [r2, #9]
   b525a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b525c:	230c      	movs	r3, #12
            if (willTopic) {
   b525e:	f1b8 0f00 	cmp.w	r8, #0
   b5262:	f000 8081 	beq.w	b5368 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5266:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b526a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b526e:	0140      	lsls	r0, r0, #5
   b5270:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5274:	f040 0006 	orr.w	r0, r0, #6
   b5278:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b527a:	f1ba 0f00 	cmp.w	sl, #0
   b527e:	d101      	bne.n	b5284 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5280:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5284:	b11f      	cbz	r7, b528e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5286:	2e00      	cmp	r6, #0
   b5288:	d170      	bne.n	b536c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b528a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b528e:	69e2      	ldr	r2, [r4, #28]
   b5290:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5292:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5294:	69e1      	ldr	r1, [r4, #28]
   b5296:	1c58      	adds	r0, r3, #1
   b5298:	1212      	asrs	r2, r2, #8
   b529a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b529c:	1c9a      	adds	r2, r3, #2
   b529e:	69e1      	ldr	r1, [r4, #28]
   b52a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b52a2:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b52a4:	3303      	adds	r3, #3
   b52a6:	69e2      	ldr	r2, [r4, #28]
   b52a8:	4649      	mov	r1, r9
   b52aa:	4620      	mov	r0, r4
   b52ac:	f7ff ff70 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
   b52b0:	4603      	mov	r3, r0
            if (willTopic) {
   b52b2:	f1b8 0f00 	cmp.w	r8, #0
   b52b6:	d00b      	beq.n	b52d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b52b8:	69e2      	ldr	r2, [r4, #28]
   b52ba:	4641      	mov	r1, r8
   b52bc:	4620      	mov	r0, r4
   b52be:	f7ff ff67 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b52c2:	69e2      	ldr	r2, [r4, #28]
   b52c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b52c6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b52c8:	4620      	mov	r0, r4
   b52ca:	f7ff ff61 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
   b52ce:	4603      	mov	r3, r0
            if(user != NULL) {
   b52d0:	b167      	cbz	r7, b52ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b52d2:	69e2      	ldr	r2, [r4, #28]
   b52d4:	4639      	mov	r1, r7
   b52d6:	4620      	mov	r0, r4
   b52d8:	f7ff ff5a 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
   b52dc:	4603      	mov	r3, r0
                if(pass != NULL) {
   b52de:	b12e      	cbz	r6, b52ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b52e0:	69e2      	ldr	r2, [r4, #28]
   b52e2:	4631      	mov	r1, r6
   b52e4:	4620      	mov	r0, r4
   b52e6:	f7ff ff53 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
   b52ea:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b52ec:	3b05      	subs	r3, #5
   b52ee:	69e2      	ldr	r2, [r4, #28]
   b52f0:	b29b      	uxth	r3, r3
   b52f2:	2110      	movs	r1, #16
   b52f4:	4620      	mov	r0, r4
   b52f6:	f7ff ff0f 	bl	b5118 <_ZN4MQTT5writeEhPht>
   b52fa:	f000 f9a3 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b52fe:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5302:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5306:	4620      	mov	r0, r4
   b5308:	f001 f9bc 	bl	b6684 <_ZN9TCPClient9availableEv>
   b530c:	bb88      	cbnz	r0, b5372 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b530e:	f000 f999 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5312:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5314:	1ac0      	subs	r0, r0, r3
   b5316:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5318:	4373      	muls	r3, r6
   b531a:	4298      	cmp	r0, r3
   b531c:	d9f3      	bls.n	b5306 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b531e:	4620      	mov	r0, r4
   b5320:	f001 fa0a 	bl	b6738 <_ZN9TCPClient4stopEv>
   b5324:	e035      	b.n	b5392 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5326:	a802      	add	r0, sp, #8
   b5328:	f000 fe74 	bl	b6014 <_ZN9IPAddressC1EPKh>
   b532c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5330:	462b      	mov	r3, r5
   b5332:	a902      	add	r1, sp, #8
   b5334:	4620      	mov	r0, r4
   b5336:	f001 f929 	bl	b658c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b533a:	e773      	b.n	b5224 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b533c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5340:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5344:	7bdb      	ldrb	r3, [r3, #15]
   b5346:	f10d 0c08 	add.w	ip, sp, #8
   b534a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b534e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5352:	ab02      	add	r3, sp, #8
   b5354:	cb03      	ldmia	r3!, {r0, r1}
   b5356:	f8c2 0005 	str.w	r0, [r2, #5]
   b535a:	f8c2 1009 	str.w	r1, [r2, #9]
   b535e:	f89c 3000 	ldrb.w	r3, [ip]
   b5362:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5364:	230e      	movs	r3, #14
   b5366:	e77a      	b.n	b525e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5368:	2002      	movs	r0, #2
   b536a:	e786      	b.n	b527a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b536c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5370:	e78d      	b.n	b528e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5372:	a902      	add	r1, sp, #8
   b5374:	4620      	mov	r0, r4
   b5376:	f7ff fe7d 	bl	b5074 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b537a:	2804      	cmp	r0, #4
   b537c:	d1cf      	bne.n	b531e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b537e:	69e3      	ldr	r3, [r4, #28]
   b5380:	78de      	ldrb	r6, [r3, #3]
   b5382:	2e00      	cmp	r6, #0
   b5384:	d1cb      	bne.n	b531e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5386:	f000 f95d 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b538a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b538c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b538e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5392:	a801      	add	r0, sp, #4
   b5394:	f7ff fe03 	bl	b4f9e <_ZN4MQTT11MutexLockerD1Ev>
}
   b5398:	4628      	mov	r0, r5
   b539a:	b008      	add	sp, #32
   b539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b53a0:	2500      	movs	r5, #0
   b53a2:	e7f9      	b.n	b5398 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b53a4:	000b73c2 	.word	0x000b73c2

000b53a8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b53a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b53aa:	2301      	movs	r3, #1
   b53ac:	2204      	movs	r2, #4
   b53ae:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b53b2:	2300      	movs	r3, #0
   b53b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b53b8:	e9cd 3300 	strd	r3, r3, [sp]
   b53bc:	461a      	mov	r2, r3
   b53be:	f7ff ff11 	bl	b51e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b53c2:	b007      	add	sp, #28
   b53c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b53c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b53c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53cc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b53d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b53d4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b53d8:	4604      	mov	r4, r0
   b53da:	468b      	mov	fp, r1
   b53dc:	4616      	mov	r6, r2
   b53de:	461f      	mov	r7, r3
    if (isConnected()) {
   b53e0:	f7ff fef2 	bl	b51c8 <_ZN4MQTT11isConnectedEv>
   b53e4:	4682      	mov	sl, r0
   b53e6:	2800      	cmp	r0, #0
   b53e8:	d051      	beq.n	b548e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b53ea:	4621      	mov	r1, r4
   b53ec:	a801      	add	r0, sp, #4
   b53ee:	f7ff fdcb 	bl	b4f88 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b53f2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b53f6:	69e0      	ldr	r0, [r4, #28]
   b53f8:	2100      	movs	r1, #0
   b53fa:	f001 fdb9 	bl	b6f70 <memset>
        length = writeString(topic, buffer, length);
   b53fe:	2305      	movs	r3, #5
   b5400:	69e2      	ldr	r2, [r4, #28]
   b5402:	4659      	mov	r1, fp
   b5404:	4620      	mov	r0, r4
   b5406:	f7ff fec3 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b540a:	1e6b      	subs	r3, r5, #1
   b540c:	2b01      	cmp	r3, #1
   b540e:	d815      	bhi.n	b543c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b5410:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5412:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b5414:	3101      	adds	r1, #1
   b5416:	b289      	uxth	r1, r1
   b5418:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b541a:	0a09      	lsrs	r1, r1, #8
   b541c:	5419      	strb	r1, [r3, r0]
   b541e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b5420:	69e3      	ldr	r3, [r4, #28]
   b5422:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5424:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5426:	3002      	adds	r0, #2
   b5428:	5499      	strb	r1, [r3, r2]
   b542a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b542c:	f1b8 0f00 	cmp.w	r8, #0
   b5430:	d004      	beq.n	b543c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b5432:	8c23      	ldrh	r3, [r4, #32]
   b5434:	1c5a      	adds	r2, r3, #1
   b5436:	8422      	strh	r2, [r4, #32]
   b5438:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b543c:	2100      	movs	r1, #0
   b543e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5440:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b5442:	69e2      	ldr	r2, [r4, #28]
   b5444:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5446:	d90a      	bls.n	b545e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5448:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b544c:	459c      	cmp	ip, r3
   b544e:	d906      	bls.n	b545e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b5450:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5454:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5458:	3101      	adds	r1, #1
   b545a:	b289      	uxth	r1, r1
   b545c:	e7ef      	b.n	b543e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b545e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b5462:	2900      	cmp	r1, #0
   b5464:	bf0c      	ite	eq
   b5466:	2130      	moveq	r1, #48	; 0x30
   b5468:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b546a:	f1b9 0f00 	cmp.w	r9, #0
   b546e:	d001      	beq.n	b5474 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5470:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5474:	2d02      	cmp	r5, #2
   b5476:	d10e      	bne.n	b5496 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5478:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b547c:	3b05      	subs	r3, #5
   b547e:	b29b      	uxth	r3, r3
   b5480:	4620      	mov	r0, r4
   b5482:	f7ff fe49 	bl	b5118 <_ZN4MQTT5writeEhPht>
   b5486:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5488:	a801      	add	r0, sp, #4
   b548a:	f7ff fd88 	bl	b4f9e <_ZN4MQTT11MutexLockerD1Ev>
}
   b548e:	4650      	mov	r0, sl
   b5490:	b003      	add	sp, #12
   b5492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b5496:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5498:	bf08      	it	eq
   b549a:	f041 0102 	orreq.w	r1, r1, #2
   b549e:	e7ed      	b.n	b547c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b54a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b54a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b54a2:	9c08      	ldr	r4, [sp, #32]
   b54a4:	9403      	str	r4, [sp, #12]
   b54a6:	2400      	movs	r4, #0
   b54a8:	9402      	str	r4, [sp, #8]
   b54aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b54ae:	9401      	str	r4, [sp, #4]
   b54b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b54b4:	9400      	str	r4, [sp, #0]
   b54b6:	f7ff ff87 	bl	b53c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b54ba:	b004      	add	sp, #16
   b54bc:	bd10      	pop	{r4, pc}

000b54be <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b54be:	b530      	push	{r4, r5, lr}
   b54c0:	b087      	sub	sp, #28
   b54c2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b54c4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b54c6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b54c8:	9204      	str	r2, [sp, #16]
   b54ca:	f001 fd91 	bl	b6ff0 <strlen>
   b54ce:	2500      	movs	r5, #0
   b54d0:	4603      	mov	r3, r0
   b54d2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b54d6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b54da:	9500      	str	r5, [sp, #0]
   b54dc:	4620      	mov	r0, r4
   b54de:	f7ff ffdf 	bl	b54a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b54e2:	b007      	add	sp, #28
   b54e4:	bd30      	pop	{r4, r5, pc}

000b54e6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b54e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b54e8:	4604      	mov	r4, r0
   b54ea:	460f      	mov	r7, r1
   b54ec:	4616      	mov	r6, r2
    if (isConnected()) {
   b54ee:	f7ff fe6b 	bl	b51c8 <_ZN4MQTT11isConnectedEv>
   b54f2:	4605      	mov	r5, r0
   b54f4:	b310      	cbz	r0, b553c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b54f6:	4621      	mov	r1, r4
   b54f8:	a801      	add	r0, sp, #4
   b54fa:	f7ff fd45 	bl	b4f88 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b54fe:	8c23      	ldrh	r3, [r4, #32]
   b5500:	3301      	adds	r3, #1
   b5502:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5504:	b1eb      	cbz	r3, b5542 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5506:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5508:	8c23      	ldrh	r3, [r4, #32]
   b550a:	69e2      	ldr	r2, [r4, #28]
   b550c:	0a1b      	lsrs	r3, r3, #8
   b550e:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5510:	69e3      	ldr	r3, [r4, #28]
   b5512:	8c22      	ldrh	r2, [r4, #32]
   b5514:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5516:	69e2      	ldr	r2, [r4, #28]
   b5518:	2307      	movs	r3, #7
   b551a:	4639      	mov	r1, r7
   b551c:	4620      	mov	r0, r4
   b551e:	f7ff fe37 	bl	b5190 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5522:	69e3      	ldr	r3, [r4, #28]
   b5524:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5526:	3804      	subs	r0, #4
   b5528:	b283      	uxth	r3, r0
   b552a:	69e2      	ldr	r2, [r4, #28]
   b552c:	2182      	movs	r1, #130	; 0x82
   b552e:	4620      	mov	r0, r4
   b5530:	f7ff fdf2 	bl	b5118 <_ZN4MQTT5writeEhPht>
   b5534:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5536:	a801      	add	r0, sp, #4
   b5538:	f7ff fd31 	bl	b4f9e <_ZN4MQTT11MutexLockerD1Ev>
}
   b553c:	4628      	mov	r0, r5
   b553e:	b003      	add	sp, #12
   b5540:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5542:	2301      	movs	r3, #1
   b5544:	e7df      	b.n	b5506 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5546 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5546:	2200      	movs	r2, #0
   b5548:	f7ff bfcd 	b.w	b54e6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b554c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b554c:	f000 bc28 	b.w	b5da0 <delay>

000b5550 <_Z11BlynkMillisv>:
   b5550:	f000 b878 	b.w	b5644 <HAL_Timer_Get_Milli_Seconds>

000b5554 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b5554:	4770      	bx	lr

000b5556 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b5556:	4770      	bx	lr

000b5558 <BlynkNoOpCbk>:
{}
   b5558:	4770      	bx	lr
	...

000b555c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b555c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b555e:	bf5a      	itte	pl
   b5560:	4b02      	ldrpl	r3, [pc, #8]	; (b556c <GetReadHandler+0x10>)
   b5562:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b5566:	2000      	movmi	r0, #0
#endif
}
   b5568:	4770      	bx	lr
   b556a:	bf00      	nop
   b556c:	000b73d4 	.word	0x000b73d4

000b5570 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b5570:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b5572:	bf5a      	itte	pl
   b5574:	4b02      	ldrpl	r3, [pc, #8]	; (b5580 <GetWriteHandler+0x10>)
   b5576:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b557a:	2000      	movmi	r0, #0
#endif
}
   b557c:	4770      	bx	lr
   b557e:	bf00      	nop
   b5580:	000b75d4 	.word	0x000b75d4

000b5584 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <netdb_freeaddrinfo+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	689b      	ldr	r3, [r3, #8]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030268 	.word	0x00030268

000b5594 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <netdb_getaddrinfo+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	68db      	ldr	r3, [r3, #12]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030268 	.word	0x00030268

000b55a4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <HAL_Validate_Pin_Function+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	685b      	ldr	r3, [r3, #4]
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	0003022c 	.word	0x0003022c

000b55b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <HAL_Pin_Mode+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	689b      	ldr	r3, [r3, #8]
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	0003022c 	.word	0x0003022c

000b55c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <HAL_Get_Pin_Mode+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	68db      	ldr	r3, [r3, #12]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	0003022c 	.word	0x0003022c

000b55d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <HAL_GPIO_Write+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	691b      	ldr	r3, [r3, #16]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	0003022c 	.word	0x0003022c

000b55e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <HAL_GPIO_Read+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	695b      	ldr	r3, [r3, #20]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	0003022c 	.word	0x0003022c

000b55f4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <HAL_DAC_Write+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	0003022c 	.word	0x0003022c

000b5604 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_adc_read+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	0003022c 	.word	0x0003022c

000b5614 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_pwm_write_ext+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	0003022c 	.word	0x0003022c

000b5624 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <if_index_to_name+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	695b      	ldr	r3, [r3, #20]
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	0003026c 	.word	0x0003026c

000b5634 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <HAL_RNG_GetRandomNumber+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	685b      	ldr	r3, [r3, #4]
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030218 	.word	0x00030218

000b5644 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	695b      	ldr	r3, [r3, #20]
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030218 	.word	0x00030218

000b5654 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <os_mutex_create+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030248 	.word	0x00030248

000b5664 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <os_mutex_lock+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030248 	.word	0x00030248

000b5674 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <os_mutex_unlock+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030248 	.word	0x00030248

000b5684 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <os_mutex_recursive_create+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	00030248 	.word	0x00030248

000b5694 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <inet_inet_ntop+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	695b      	ldr	r3, [r3, #20]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	00030264 	.word	0x00030264

000b56a4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <inet_htonl+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	6a1b      	ldr	r3, [r3, #32]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	00030264 	.word	0x00030264

000b56b4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <inet_htons+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030264 	.word	0x00030264

000b56c4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <hal_usart_write+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	68db      	ldr	r3, [r3, #12]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	0003023c 	.word	0x0003023c

000b56d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <hal_usart_available+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	691b      	ldr	r3, [r3, #16]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	0003023c 	.word	0x0003023c

000b56e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <hal_usart_read+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	695b      	ldr	r3, [r3, #20]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	0003023c 	.word	0x0003023c

000b56f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <hal_usart_peek+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	699b      	ldr	r3, [r3, #24]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	0003023c 	.word	0x0003023c

000b5704 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <hal_usart_flush+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	69db      	ldr	r3, [r3, #28]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	0003023c 	.word	0x0003023c

000b5714 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <hal_usart_is_enabled+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	6a1b      	ldr	r3, [r3, #32]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	0003023c 	.word	0x0003023c

000b5724 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <hal_usart_available_data_for_write+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	0003023c 	.word	0x0003023c

000b5734 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <hal_usart_init_ex+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003023c 	.word	0x0003023c

000b5744 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <hal_i2c_write+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	6a1b      	ldr	r3, [r3, #32]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	00030228 	.word	0x00030228

000b5754 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <hal_i2c_available+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	00030228 	.word	0x00030228

000b5764 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <hal_i2c_read+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030228 	.word	0x00030228

000b5774 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <hal_i2c_peek+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030228 	.word	0x00030228

000b5784 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <hal_i2c_flush+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030228 	.word	0x00030228

000b5794 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <hal_i2c_is_enabled+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030228 	.word	0x00030228

000b57a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <hal_i2c_init+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030228 	.word	0x00030228

000b57b4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <sock_setsockopt+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	699b      	ldr	r3, [r3, #24]
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030238 	.word	0x00030238

000b57c4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <sock_close+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	69db      	ldr	r3, [r3, #28]
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030238 	.word	0x00030238

000b57d4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <sock_connect+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	6a1b      	ldr	r3, [r3, #32]
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030238 	.word	0x00030238

000b57e4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <sock_recv+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030238 	.word	0x00030238

000b57f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <sock_send+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030238 	.word	0x00030238

000b5804 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <sock_socket+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030238 	.word	0x00030238

000b5814 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <hal_spi_init+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	69db      	ldr	r3, [r3, #28]
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030230 	.word	0x00030230

000b5824 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <hal_spi_is_enabled+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	6a1b      	ldr	r3, [r3, #32]
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	00030230 	.word	0x00030230

000b5834 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <HAL_USB_USART_Init+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	681b      	ldr	r3, [r3, #0]
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	0003024c 	.word	0x0003024c

000b5844 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b02      	ldr	r3, [pc, #8]	; (b5850 <HAL_USB_USART_Begin+0xc>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	685b      	ldr	r3, [r3, #4]
   b584c:	9301      	str	r3, [sp, #4]
   b584e:	bd08      	pop	{r3, pc}
   b5850:	0003024c 	.word	0x0003024c

000b5854 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5854:	b508      	push	{r3, lr}
   b5856:	4b02      	ldr	r3, [pc, #8]	; (b5860 <HAL_USB_USART_Available_Data+0xc>)
   b5858:	681b      	ldr	r3, [r3, #0]
   b585a:	691b      	ldr	r3, [r3, #16]
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	bd08      	pop	{r3, pc}
   b5860:	0003024c 	.word	0x0003024c

000b5864 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	695b      	ldr	r3, [r3, #20]
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	0003024c 	.word	0x0003024c

000b5874 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <HAL_USB_USART_Receive_Data+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	699b      	ldr	r3, [r3, #24]
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	0003024c 	.word	0x0003024c

000b5884 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <HAL_USB_USART_Send_Data+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	69db      	ldr	r3, [r3, #28]
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	0003024c 	.word	0x0003024c

000b5894 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <HAL_USB_USART_Flush_Data+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	6a1b      	ldr	r3, [r3, #32]
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	0003024c 	.word	0x0003024c

000b58a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <log_message+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	00030260 	.word	0x00030260

000b58b4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <set_system_mode+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	685b      	ldr	r3, [r3, #4]
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	00030220 	.word	0x00030220

000b58c4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b58c4:	b508      	push	{r3, lr}
   b58c6:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <system_delay_ms+0xc>)
   b58c8:	681b      	ldr	r3, [r3, #0]
   b58ca:	695b      	ldr	r3, [r3, #20]
   b58cc:	9301      	str	r3, [sp, #4]
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	00030220 	.word	0x00030220

000b58d4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b58d4:	b508      	push	{r3, lr}
   b58d6:	4b02      	ldr	r3, [pc, #8]	; (b58e0 <system_thread_set_state+0xc>)
   b58d8:	681b      	ldr	r3, [r3, #0]
   b58da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58dc:	9301      	str	r3, [sp, #4]
   b58de:	bd08      	pop	{r3, pc}
   b58e0:	00030220 	.word	0x00030220

000b58e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b58e4:	b508      	push	{r3, lr}
   b58e6:	4b03      	ldr	r3, [pc, #12]	; (b58f4 <system_ctrl_set_app_request_handler+0x10>)
   b58e8:	681b      	ldr	r3, [r3, #0]
   b58ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b58ee:	9301      	str	r3, [sp, #4]
   b58f0:	bd08      	pop	{r3, pc}
   b58f2:	0000      	.short	0x0000
   b58f4:	00030220 	.word	0x00030220

000b58f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b03      	ldr	r3, [pc, #12]	; (b5908 <system_ctrl_set_result+0x10>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5902:	9301      	str	r3, [sp, #4]
   b5904:	bd08      	pop	{r3, pc}
   b5906:	0000      	.short	0x0000
   b5908:	00030220 	.word	0x00030220

000b590c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <network_connect+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	685b      	ldr	r3, [r3, #4]
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	00030240 	.word	0x00030240

000b591c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <network_connecting+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	689b      	ldr	r3, [r3, #8]
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	00030240 	.word	0x00030240

000b592c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <network_disconnect+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	68db      	ldr	r3, [r3, #12]
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	00030240 	.word	0x00030240

000b593c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <network_ready+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	691b      	ldr	r3, [r3, #16]
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	00030240 	.word	0x00030240

000b594c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <network_on+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	695b      	ldr	r3, [r3, #20]
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	00030240 	.word	0x00030240

000b595c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <network_off+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	699b      	ldr	r3, [r3, #24]
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	00030240 	.word	0x00030240

000b596c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <network_listen+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	69db      	ldr	r3, [r3, #28]
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	00030240 	.word	0x00030240

000b597c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <network_listening+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	6a1b      	ldr	r3, [r3, #32]
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	00030240 	.word	0x00030240

000b598c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b598c:	b508      	push	{r3, lr}
   b598e:	4b02      	ldr	r3, [pc, #8]	; (b5998 <network_set_listen_timeout+0xc>)
   b5990:	681b      	ldr	r3, [r3, #0]
   b5992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5994:	9301      	str	r3, [sp, #4]
   b5996:	bd08      	pop	{r3, pc}
   b5998:	00030240 	.word	0x00030240

000b599c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b599c:	b508      	push	{r3, lr}
   b599e:	4b02      	ldr	r3, [pc, #8]	; (b59a8 <network_get_listen_timeout+0xc>)
   b59a0:	681b      	ldr	r3, [r3, #0]
   b59a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59a4:	9301      	str	r3, [sp, #4]
   b59a6:	bd08      	pop	{r3, pc}
   b59a8:	00030240 	.word	0x00030240

000b59ac <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b59ac:	b508      	push	{r3, lr}
   b59ae:	4b02      	ldr	r3, [pc, #8]	; (b59b8 <network_is_on+0xc>)
   b59b0:	681b      	ldr	r3, [r3, #0]
   b59b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59b4:	9301      	str	r3, [sp, #4]
   b59b6:	bd08      	pop	{r3, pc}
   b59b8:	00030240 	.word	0x00030240

000b59bc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b59bc:	b508      	push	{r3, lr}
   b59be:	4b02      	ldr	r3, [pc, #8]	; (b59c8 <network_is_off+0xc>)
   b59c0:	681b      	ldr	r3, [r3, #0]
   b59c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b59c4:	9301      	str	r3, [sp, #4]
   b59c6:	bd08      	pop	{r3, pc}
   b59c8:	00030240 	.word	0x00030240

000b59cc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b59cc:	b508      	push	{r3, lr}
   b59ce:	4b02      	ldr	r3, [pc, #8]	; (b59d8 <spark_process+0xc>)
   b59d0:	681b      	ldr	r3, [r3, #0]
   b59d2:	689b      	ldr	r3, [r3, #8]
   b59d4:	9301      	str	r3, [sp, #4]
   b59d6:	bd08      	pop	{r3, pc}
   b59d8:	00030244 	.word	0x00030244

000b59dc <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <spark_deviceID+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	69db      	ldr	r3, [r3, #28]
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	00030244 	.word	0x00030244

000b59ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	00030244 	.word	0x00030244

000b59fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <malloc+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	681b      	ldr	r3, [r3, #0]
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	0003021c 	.word	0x0003021c

000b5a0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <free+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	685b      	ldr	r3, [r3, #4]
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	0003021c 	.word	0x0003021c

000b5a1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <realloc+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	689b      	ldr	r3, [r3, #8]
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	0003021c 	.word	0x0003021c

000b5a2c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <snprintf+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	69db      	ldr	r3, [r3, #28]
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	0003021c 	.word	0x0003021c

000b5a3c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <abort+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	0003021c 	.word	0x0003021c

000b5a4c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <__errno+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	0003021c 	.word	0x0003021c

000b5a5c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <__assert_func+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	0003021c 	.word	0x0003021c

000b5a6c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <newlib_impure_ptr_callback+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	0003021c 	.word	0x0003021c

000b5a7c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5a7c:	2200      	movs	r2, #0
   b5a7e:	6840      	ldr	r0, [r0, #4]
   b5a80:	4611      	mov	r1, r2
   b5a82:	f7ff bf7b 	b.w	b597c <network_listening>

000b5a86 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5a86:	2200      	movs	r2, #0
   b5a88:	6840      	ldr	r0, [r0, #4]
   b5a8a:	4611      	mov	r1, r2
   b5a8c:	f7ff bf86 	b.w	b599c <network_get_listen_timeout>

000b5a90 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5a90:	6840      	ldr	r0, [r0, #4]
   b5a92:	2200      	movs	r2, #0
   b5a94:	f7ff bf7a 	b.w	b598c <network_set_listen_timeout>

000b5a98 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5a98:	6840      	ldr	r0, [r0, #4]
   b5a9a:	2200      	movs	r2, #0
   b5a9c:	f081 0101 	eor.w	r1, r1, #1
   b5aa0:	f7ff bf64 	b.w	b596c <network_listen>

000b5aa4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5aa4:	2300      	movs	r3, #0
   b5aa6:	6840      	ldr	r0, [r0, #4]
   b5aa8:	461a      	mov	r2, r3
   b5aaa:	4619      	mov	r1, r3
   b5aac:	f7ff bf56 	b.w	b595c <network_off>

000b5ab0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5ab0:	2300      	movs	r3, #0
   b5ab2:	6840      	ldr	r0, [r0, #4]
   b5ab4:	461a      	mov	r2, r3
   b5ab6:	4619      	mov	r1, r3
   b5ab8:	f7ff bf48 	b.w	b594c <network_on>

000b5abc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5abc:	2200      	movs	r2, #0
   b5abe:	6840      	ldr	r0, [r0, #4]
   b5ac0:	4611      	mov	r1, r2
   b5ac2:	f7ff bf3b 	b.w	b593c <network_ready>

000b5ac6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ac6:	2200      	movs	r2, #0
   b5ac8:	6840      	ldr	r0, [r0, #4]
   b5aca:	4611      	mov	r1, r2
   b5acc:	f7ff bf26 	b.w	b591c <network_connecting>

000b5ad0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5ad0:	6840      	ldr	r0, [r0, #4]
   b5ad2:	2200      	movs	r2, #0
   b5ad4:	2102      	movs	r1, #2
   b5ad6:	f7ff bf29 	b.w	b592c <network_disconnect>

000b5ada <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5ada:	2300      	movs	r3, #0
   b5adc:	6840      	ldr	r0, [r0, #4]
   b5ade:	461a      	mov	r2, r3
   b5ae0:	f7ff bf14 	b.w	b590c <network_connect>

000b5ae4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5ae4:	4b02      	ldr	r3, [pc, #8]	; (b5af0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5ae6:	2203      	movs	r2, #3
   b5ae8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5aea:	4a02      	ldr	r2, [pc, #8]	; (b5af4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5aec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5aee:	4770      	bx	lr
   b5af0:	2003e6c4 	.word	0x2003e6c4
   b5af4:	000b77dc 	.word	0x000b77dc

000b5af8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5af8:	b510      	push	{r4, lr}
   b5afa:	4604      	mov	r4, r0
   b5afc:	4608      	mov	r0, r1
{
    _spi = spi;
   b5afe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5b00:	f7ff fe88 	bl	b5814 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5b04:	2300      	movs	r3, #0
   b5b06:	6063      	str	r3, [r4, #4]
}
   b5b08:	4620      	mov	r0, r4
   b5b0a:	bd10      	pop	{r4, pc}

000b5b0c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5b0c:	4b05      	ldr	r3, [pc, #20]	; (b5b24 <_GLOBAL__sub_I_System+0x18>)
   b5b0e:	2202      	movs	r2, #2
   b5b10:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5b12:	4b05      	ldr	r3, [pc, #20]	; (b5b28 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5b14:	4a05      	ldr	r2, [pc, #20]	; (b5b2c <_GLOBAL__sub_I_System+0x20>)
   b5b16:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5b18:	2000      	movs	r0, #0
   b5b1a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5b1e:	f7ff bec9 	b.w	b58b4 <set_system_mode>
   b5b22:	bf00      	nop
   b5b24:	2003e6d8 	.word	0x2003e6d8
   b5b28:	2003e6cc 	.word	0x2003e6cc
   b5b2c:	ffff0000 	.word	0xffff0000

000b5b30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5b30:	b510      	push	{r4, lr}
   b5b32:	4604      	mov	r4, r0
{
	free(buffer);
   b5b34:	6800      	ldr	r0, [r0, #0]
   b5b36:	f7ff ff69 	bl	b5a0c <free>
}
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	bd10      	pop	{r4, pc}

000b5b3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5b3e:	b510      	push	{r4, lr}
   b5b40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5b42:	6800      	ldr	r0, [r0, #0]
   b5b44:	b108      	cbz	r0, b5b4a <_ZN6String10invalidateEv+0xc>
   b5b46:	f7ff ff61 	bl	b5a0c <free>
	buffer = NULL;
   b5b4a:	2300      	movs	r3, #0
	capacity = len = 0;
   b5b4c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5b50:	6023      	str	r3, [r4, #0]
}
   b5b52:	bd10      	pop	{r4, pc}

000b5b54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5b54:	b538      	push	{r3, r4, r5, lr}
   b5b56:	4604      	mov	r4, r0
   b5b58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5b5a:	6800      	ldr	r0, [r0, #0]
   b5b5c:	3101      	adds	r1, #1
   b5b5e:	f7ff ff5d 	bl	b5a1c <realloc>
	if (newbuffer) {
   b5b62:	b110      	cbz	r0, b5b6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5b64:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5b68:	2001      	movs	r0, #1
	}
	return 0;
}
   b5b6a:	bd38      	pop	{r3, r4, r5, pc}

000b5b6c <_ZN6String7reserveEj>:
{
   b5b6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5b6e:	6803      	ldr	r3, [r0, #0]
{
   b5b70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5b72:	b123      	cbz	r3, b5b7e <_ZN6String7reserveEj+0x12>
   b5b74:	6843      	ldr	r3, [r0, #4]
   b5b76:	428b      	cmp	r3, r1
   b5b78:	d301      	bcc.n	b5b7e <_ZN6String7reserveEj+0x12>
   b5b7a:	2001      	movs	r0, #1
}
   b5b7c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5b7e:	4620      	mov	r0, r4
   b5b80:	f7ff ffe8 	bl	b5b54 <_ZN6String12changeBufferEj>
   b5b84:	2800      	cmp	r0, #0
   b5b86:	d0f9      	beq.n	b5b7c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5b88:	68a3      	ldr	r3, [r4, #8]
   b5b8a:	2b00      	cmp	r3, #0
   b5b8c:	d1f5      	bne.n	b5b7a <_ZN6String7reserveEj+0xe>
   b5b8e:	6822      	ldr	r2, [r4, #0]
   b5b90:	7013      	strb	r3, [r2, #0]
   b5b92:	e7f2      	b.n	b5b7a <_ZN6String7reserveEj+0xe>

000b5b94 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5b96:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5b98:	4611      	mov	r1, r2
   b5b9a:	9201      	str	r2, [sp, #4]
{
   b5b9c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5b9e:	f7ff ffe5 	bl	b5b6c <_ZN6String7reserveEj>
   b5ba2:	9a01      	ldr	r2, [sp, #4]
   b5ba4:	b928      	cbnz	r0, b5bb2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f7ff ffc9 	bl	b5b3e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5bac:	4620      	mov	r0, r4
   b5bae:	b003      	add	sp, #12
   b5bb0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5bb2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5bb4:	4629      	mov	r1, r5
   b5bb6:	6820      	ldr	r0, [r4, #0]
   b5bb8:	f001 f9cc 	bl	b6f54 <memcpy>
	buffer[len] = 0;
   b5bbc:	6822      	ldr	r2, [r4, #0]
   b5bbe:	68a3      	ldr	r3, [r4, #8]
   b5bc0:	2100      	movs	r1, #0
   b5bc2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5bc4:	e7f2      	b.n	b5bac <_ZN6String4copyEPKcj+0x18>

000b5bc6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5bc6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5bc8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5bca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5bce:	4604      	mov	r4, r0
	len = 0;
   b5bd0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5bd2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5bd4:	b141      	cbz	r1, b5be8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5bd6:	4608      	mov	r0, r1
   b5bd8:	9101      	str	r1, [sp, #4]
   b5bda:	f001 fa09 	bl	b6ff0 <strlen>
   b5bde:	9901      	ldr	r1, [sp, #4]
   b5be0:	4602      	mov	r2, r0
   b5be2:	4620      	mov	r0, r4
   b5be4:	f7ff ffd6 	bl	b5b94 <_ZN6String4copyEPKcj>
}
   b5be8:	4620      	mov	r0, r4
   b5bea:	b002      	add	sp, #8
   b5bec:	bd10      	pop	{r4, pc}

000b5bee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5bee:	4288      	cmp	r0, r1
{
   b5bf0:	b510      	push	{r4, lr}
   b5bf2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5bf4:	d005      	beq.n	b5c02 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5bf6:	680b      	ldr	r3, [r1, #0]
   b5bf8:	b12b      	cbz	r3, b5c06 <_ZN6StringaSERKS_+0x18>
   b5bfa:	688a      	ldr	r2, [r1, #8]
   b5bfc:	4619      	mov	r1, r3
   b5bfe:	f7ff ffc9 	bl	b5b94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5c02:	4620      	mov	r0, r4
   b5c04:	bd10      	pop	{r4, pc}
	else invalidate();
   b5c06:	f7ff ff9a 	bl	b5b3e <_ZN6String10invalidateEv>
   b5c0a:	e7fa      	b.n	b5c02 <_ZN6StringaSERKS_+0x14>

000b5c0c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5c0c:	b513      	push	{r0, r1, r4, lr}
   b5c0e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5c10:	b159      	cbz	r1, b5c2a <_ZN6StringaSEPKc+0x1e>
   b5c12:	4608      	mov	r0, r1
   b5c14:	9101      	str	r1, [sp, #4]
   b5c16:	f001 f9eb 	bl	b6ff0 <strlen>
   b5c1a:	9901      	ldr	r1, [sp, #4]
   b5c1c:	4602      	mov	r2, r0
   b5c1e:	4620      	mov	r0, r4
   b5c20:	f7ff ffb8 	bl	b5b94 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5c24:	4620      	mov	r0, r4
   b5c26:	b002      	add	sp, #8
   b5c28:	bd10      	pop	{r4, pc}
	else invalidate();
   b5c2a:	f7ff ff88 	bl	b5b3e <_ZN6String10invalidateEv>
   b5c2e:	e7f9      	b.n	b5c24 <_ZN6StringaSEPKc+0x18>

000b5c30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5c30:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5c32:	6843      	ldr	r3, [r0, #4]
   b5c34:	3b01      	subs	r3, #1
    {
   b5c36:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5c38:	6043      	str	r3, [r0, #4]
   b5c3a:	b963      	cbnz	r3, b5c56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5c3c:	6803      	ldr	r3, [r0, #0]
   b5c3e:	689b      	ldr	r3, [r3, #8]
   b5c40:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5c42:	68a3      	ldr	r3, [r4, #8]
   b5c44:	3b01      	subs	r3, #1
   b5c46:	60a3      	str	r3, [r4, #8]
   b5c48:	b92b      	cbnz	r3, b5c56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5c4a:	6823      	ldr	r3, [r4, #0]
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5c54:	4718      	bx	r3
    }
   b5c56:	bd10      	pop	{r4, pc}

000b5c58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5c58:	4802      	ldr	r0, [pc, #8]	; (b5c64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5c5a:	2300      	movs	r3, #0
   b5c5c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5c5e:	f7ff bd11 	b.w	b5684 <os_mutex_recursive_create>
   b5c62:	bf00      	nop
   b5c64:	2003e6dc 	.word	0x2003e6dc

000b5c68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c6a:	4606      	mov	r6, r0
   b5c6c:	460d      	mov	r5, r1
  size_t n = 0;
   b5c6e:	188f      	adds	r7, r1, r2
   b5c70:	2400      	movs	r4, #0
  while (size--) {
   b5c72:	42bd      	cmp	r5, r7
   b5c74:	d00c      	beq.n	b5c90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5c76:	6833      	ldr	r3, [r6, #0]
   b5c78:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5c7c:	689b      	ldr	r3, [r3, #8]
   b5c7e:	4630      	mov	r0, r6
   b5c80:	4798      	blx	r3
     if (chunk>=0)
   b5c82:	1e03      	subs	r3, r0, #0
   b5c84:	db01      	blt.n	b5c8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5c86:	441c      	add	r4, r3
  while (size--) {
   b5c88:	e7f3      	b.n	b5c72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5c8a:	2c00      	cmp	r4, #0
   b5c8c:	bf08      	it	eq
   b5c8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5c90:	4620      	mov	r0, r4
   b5c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5c94:	b513      	push	{r0, r1, r4, lr}
   b5c96:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5c98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5c9a:	b159      	cbz	r1, b5cb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5c9c:	9101      	str	r1, [sp, #4]
   b5c9e:	f001 f9a7 	bl	b6ff0 <strlen>
   b5ca2:	6823      	ldr	r3, [r4, #0]
   b5ca4:	9901      	ldr	r1, [sp, #4]
   b5ca6:	68db      	ldr	r3, [r3, #12]
   b5ca8:	4602      	mov	r2, r0
   b5caa:	4620      	mov	r0, r4
    }
   b5cac:	b002      	add	sp, #8
   b5cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5cb2:	4718      	bx	r3
    }
   b5cb4:	b002      	add	sp, #8
   b5cb6:	bd10      	pop	{r4, pc}

000b5cb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5cb8:	6803      	ldr	r3, [r0, #0]
   b5cba:	689b      	ldr	r3, [r3, #8]
   b5cbc:	4718      	bx	r3

000b5cbe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5cbe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5cc0:	210d      	movs	r1, #13
{
   b5cc2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5cc4:	f7ff fff8 	bl	b5cb8 <_ZN5Print5printEc>
  n += print('\n');
   b5cc8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5cca:	4604      	mov	r4, r0
  n += print('\n');
   b5ccc:	4628      	mov	r0, r5
   b5cce:	f7ff fff3 	bl	b5cb8 <_ZN5Print5printEc>
  return n;
}
   b5cd2:	4420      	add	r0, r4
   b5cd4:	bd38      	pop	{r3, r4, r5, pc}

000b5cd6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5cd6:	b538      	push	{r3, r4, r5, lr}
   b5cd8:	4605      	mov	r5, r0
  return write(str);
   b5cda:	f7ff ffdb 	bl	b5c94 <_ZN5Print5writeEPKc>
   b5cde:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5ce0:	4628      	mov	r0, r5
   b5ce2:	f7ff ffec 	bl	b5cbe <_ZN5Print7printlnEv>
  return n;
}
   b5ce6:	4420      	add	r0, r4
   b5ce8:	bd38      	pop	{r3, r4, r5, pc}

000b5cea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5cea:	b530      	push	{r4, r5, lr}
   b5cec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5cee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5cf0:	2a01      	cmp	r2, #1
  *str = '\0';
   b5cf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5cf6:	bf98      	it	ls
   b5cf8:	220a      	movls	r2, #10
   b5cfa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5cfc:	460d      	mov	r5, r1
   b5cfe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5d02:	fb01 5312 	mls	r3, r1, r2, r5
   b5d06:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d0a:	2b09      	cmp	r3, #9
   b5d0c:	bf94      	ite	ls
   b5d0e:	3330      	addls	r3, #48	; 0x30
   b5d10:	3337      	addhi	r3, #55	; 0x37
   b5d12:	b2db      	uxtb	r3, r3
  } while(n);
   b5d14:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5d16:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5d1a:	d9ef      	bls.n	b5cfc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5d1c:	4621      	mov	r1, r4
   b5d1e:	f7ff ffb9 	bl	b5c94 <_ZN5Print5writeEPKc>
}
   b5d22:	b00b      	add	sp, #44	; 0x2c
   b5d24:	bd30      	pop	{r4, r5, pc}

000b5d26 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5d26:	b510      	push	{r4, lr}
   b5d28:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5d2a:	f7ff fc8b 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5d2e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b5d30:	6823      	ldr	r3, [r4, #0]
   b5d32:	4620      	mov	r0, r4
   b5d34:	695b      	ldr	r3, [r3, #20]
   b5d36:	4798      	blx	r3
    if (c >= 0) return c;
   b5d38:	2800      	cmp	r0, #0
   b5d3a:	da08      	bge.n	b5d4e <_ZN6Stream9timedReadEv+0x28>
   b5d3c:	f7ff fc82 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b5d40:	68e3      	ldr	r3, [r4, #12]
   b5d42:	1ac0      	subs	r0, r0, r3
   b5d44:	68a3      	ldr	r3, [r4, #8]
   b5d46:	4298      	cmp	r0, r3
   b5d48:	d3f2      	bcc.n	b5d30 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5d4a:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5d4e:	bd10      	pop	{r4, pc}

000b5d50 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d54:	4607      	mov	r7, r0
   b5d56:	460c      	mov	r4, r1
   b5d58:	188e      	adds	r6, r1, r2
   b5d5a:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5d5c:	42b5      	cmp	r5, r6
   b5d5e:	eba5 0804 	sub.w	r8, r5, r4
   b5d62:	d007      	beq.n	b5d74 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5d64:	4638      	mov	r0, r7
   b5d66:	f7ff ffde 	bl	b5d26 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5d6a:	1e03      	subs	r3, r0, #0
   b5d6c:	db02      	blt.n	b5d74 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5d6e:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5d72:	e7f3      	b.n	b5d5c <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5d74:	4640      	mov	r0, r8
   b5d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5d7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5d7c:	4b01      	ldr	r3, [pc, #4]	; (b5d84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5d7e:	4a02      	ldr	r2, [pc, #8]	; (b5d88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5d80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5d82:	4770      	bx	lr
   b5d84:	2003e6e0 	.word	0x2003e6e0
   b5d88:	000b7818 	.word	0x000b7818

000b5d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5d8c:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5d8e:	681a      	ldr	r2, [r3, #0]
   b5d90:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5d92:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5d94:	4770      	bx	lr
   b5d96:	bf00      	nop
   b5d98:	2003e2bc 	.word	0x2003e2bc
   b5d9c:	2003e6e4 	.word	0x2003e6e4

000b5da0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5da0:	2100      	movs	r1, #0
   b5da2:	f7ff bd8f 	b.w	b58c4 <system_delay_ms>
	...

000b5da8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5da8:	b510      	push	{r4, lr}
   b5daa:	4b04      	ldr	r3, [pc, #16]	; (b5dbc <_ZN9TCPClientD1Ev+0x14>)
   b5dac:	6003      	str	r3, [r0, #0]
   b5dae:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5db0:	6980      	ldr	r0, [r0, #24]
   b5db2:	b108      	cbz	r0, b5db8 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5db4:	f7ff ff3c 	bl	b5c30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5db8:	4620      	mov	r0, r4
   b5dba:	bd10      	pop	{r4, pc}
   b5dbc:	000b7910 	.word	0x000b7910

000b5dc0 <_ZN9TCPClientD0Ev>:
   b5dc0:	b510      	push	{r4, lr}
   b5dc2:	4604      	mov	r4, r0
   b5dc4:	f7ff fff0 	bl	b5da8 <_ZN9TCPClientD1Ev>
   b5dc8:	4620      	mov	r0, r4
   b5dca:	211c      	movs	r1, #28
   b5dcc:	f7fe f969 	bl	b40a2 <_ZdlPvj>
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	bd10      	pop	{r4, pc}

000b5dd4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5dd4:	4b01      	ldr	r3, [pc, #4]	; (b5ddc <_GLOBAL__sub_I_RGB+0x8>)
   b5dd6:	2200      	movs	r2, #0
   b5dd8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5dda:	4770      	bx	lr
   b5ddc:	2003e6e8 	.word	0x2003e6e8

000b5de0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5de0:	4b01      	ldr	r3, [pc, #4]	; (b5de8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5de2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5de4:	4770      	bx	lr
   b5de6:	bf00      	nop
   b5de8:	2003e2c0 	.word	0x2003e2c0

000b5dec <serialEventRun>:
{
   b5dec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5dee:	4b0b      	ldr	r3, [pc, #44]	; (b5e1c <serialEventRun+0x30>)
   b5df0:	b143      	cbz	r3, b5e04 <serialEventRun+0x18>
   b5df2:	f000 f97d 	bl	b60f0 <_Z16_fetch_usbserialv>
   b5df6:	6803      	ldr	r3, [r0, #0]
   b5df8:	691b      	ldr	r3, [r3, #16]
   b5dfa:	4798      	blx	r3
   b5dfc:	2800      	cmp	r0, #0
   b5dfe:	dd01      	ble.n	b5e04 <serialEventRun+0x18>
        serialEvent();
   b5e00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5e04:	4b06      	ldr	r3, [pc, #24]	; (b5e20 <serialEventRun+0x34>)
   b5e06:	b143      	cbz	r3, b5e1a <serialEventRun+0x2e>
   b5e08:	f000 feb8 	bl	b6b7c <_Z22__fetch_global_Serial1v>
   b5e0c:	6803      	ldr	r3, [r0, #0]
   b5e0e:	691b      	ldr	r3, [r3, #16]
   b5e10:	4798      	blx	r3
   b5e12:	2800      	cmp	r0, #0
   b5e14:	dd01      	ble.n	b5e1a <serialEventRun+0x2e>
        serialEvent1();
   b5e16:	f3af 8000 	nop.w
}
   b5e1a:	bd08      	pop	{r3, pc}
	...

000b5e24 <_post_loop>:
{
   b5e24:	b508      	push	{r3, lr}
	serialEventRun();
   b5e26:	f7ff ffe1 	bl	b5dec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5e2a:	f7ff fc0b 	bl	b5644 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5e2e:	4b01      	ldr	r3, [pc, #4]	; (b5e34 <_post_loop+0x10>)
   b5e30:	6018      	str	r0, [r3, #0]
}
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	2003e740 	.word	0x2003e740

000b5e38 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e38:	4805      	ldr	r0, [pc, #20]	; (b5e50 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e3a:	4a06      	ldr	r2, [pc, #24]	; (b5e54 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e3c:	4906      	ldr	r1, [pc, #24]	; (b5e58 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e3e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e40:	1a12      	subs	r2, r2, r0
   b5e42:	f001 f887 	bl	b6f54 <memcpy>
    __backup_sram_signature = signature;
   b5e46:	4b05      	ldr	r3, [pc, #20]	; (b5e5c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e48:	4a05      	ldr	r2, [pc, #20]	; (b5e60 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e4a:	601a      	str	r2, [r3, #0]
}
   b5e4c:	bd08      	pop	{r3, pc}
   b5e4e:	bf00      	nop
   b5e50:	2003f400 	.word	0x2003f400
   b5e54:	2003f404 	.word	0x2003f404
   b5e58:	000b7cc4 	.word	0x000b7cc4
   b5e5c:	2003f400 	.word	0x2003f400
   b5e60:	9a271c1e 	.word	0x9a271c1e

000b5e64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5e64:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e66:	2300      	movs	r3, #0
   b5e68:	9300      	str	r3, [sp, #0]
   b5e6a:	461a      	mov	r2, r3
   b5e6c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e70:	f7ff fd42 	bl	b58f8 <system_ctrl_set_result>
}
   b5e74:	b003      	add	sp, #12
   b5e76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e7e:	8843      	ldrh	r3, [r0, #2]
   b5e80:	2b0a      	cmp	r3, #10
   b5e82:	d008      	beq.n	b5e96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e84:	2b50      	cmp	r3, #80	; 0x50
   b5e86:	d10b      	bne.n	b5ea0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e88:	4b09      	ldr	r3, [pc, #36]	; (b5eb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e8a:	681b      	ldr	r3, [r3, #0]
   b5e8c:	b14b      	cbz	r3, b5ea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e8e:	b003      	add	sp, #12
   b5e90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e96:	f7ff ffe5 	bl	b5e64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e9a:	b003      	add	sp, #12
   b5e9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5ea0:	2300      	movs	r3, #0
   b5ea2:	9300      	str	r3, [sp, #0]
   b5ea4:	461a      	mov	r2, r3
   b5ea6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5eaa:	f7ff fd25 	bl	b58f8 <system_ctrl_set_result>
}
   b5eae:	e7f4      	b.n	b5e9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5eb0:	2003e6fc 	.word	0x2003e6fc

000b5eb4 <module_user_init_hook>:
{
   b5eb4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5eb6:	4812      	ldr	r0, [pc, #72]	; (b5f00 <module_user_init_hook+0x4c>)
   b5eb8:	2100      	movs	r1, #0
   b5eba:	f7ff fdd7 	bl	b5a6c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5ebe:	4b11      	ldr	r3, [pc, #68]	; (b5f04 <module_user_init_hook+0x50>)
   b5ec0:	681a      	ldr	r2, [r3, #0]
   b5ec2:	4b11      	ldr	r3, [pc, #68]	; (b5f08 <module_user_init_hook+0x54>)
   b5ec4:	429a      	cmp	r2, r3
   b5ec6:	4b11      	ldr	r3, [pc, #68]	; (b5f0c <module_user_init_hook+0x58>)
   b5ec8:	bf0c      	ite	eq
   b5eca:	2201      	moveq	r2, #1
   b5ecc:	2200      	movne	r2, #0
   b5ece:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5ed0:	d001      	beq.n	b5ed6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5ed2:	f7ff ffb1 	bl	b5e38 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5ed6:	f7ff fbad 	bl	b5634 <HAL_RNG_GetRandomNumber>
   b5eda:	4604      	mov	r4, r0
    srand(seed);
   b5edc:	f001 f850 	bl	b6f80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ee0:	4b0b      	ldr	r3, [pc, #44]	; (b5f10 <module_user_init_hook+0x5c>)
   b5ee2:	b113      	cbz	r3, b5eea <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5eea:	2100      	movs	r1, #0
   b5eec:	4808      	ldr	r0, [pc, #32]	; (b5f10 <module_user_init_hook+0x5c>)
   b5eee:	f7ff fd7d 	bl	b59ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ef6:	4807      	ldr	r0, [pc, #28]	; (b5f14 <module_user_init_hook+0x60>)
   b5ef8:	2100      	movs	r1, #0
   b5efa:	f7ff bcf3 	b.w	b58e4 <system_ctrl_set_app_request_handler>
   b5efe:	bf00      	nop
   b5f00:	000b5de1 	.word	0x000b5de1
   b5f04:	2003f400 	.word	0x2003f400
   b5f08:	9a271c1e 	.word	0x9a271c1e
   b5f0c:	2003e6f8 	.word	0x2003e6f8
   b5f10:	00000000 	.word	0x00000000
   b5f14:	000b5e7d 	.word	0x000b5e7d

000b5f18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5f18:	4770      	bx	lr

000b5f1a <_ZN9IPAddressD0Ev>:
   b5f1a:	b510      	push	{r4, lr}
   b5f1c:	2118      	movs	r1, #24
   b5f1e:	4604      	mov	r4, r0
   b5f20:	f7fe f8bf 	bl	b40a2 <_ZdlPvj>
   b5f24:	4620      	mov	r0, r4
   b5f26:	bd10      	pop	{r4, pc}

000b5f28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5f28:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5f2a:	7d03      	ldrb	r3, [r0, #20]
   b5f2c:	2b06      	cmp	r3, #6
{
   b5f2e:	b08d      	sub	sp, #52	; 0x34
   b5f30:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f32:	f100 0704 	add.w	r7, r0, #4
   b5f36:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5f3a:	d012      	beq.n	b5f62 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5f3c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5f40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5f44:	220a      	movs	r2, #10
   b5f46:	4630      	mov	r0, r6
   b5f48:	f7ff fecf 	bl	b5cea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5f4c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5f4e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5f50:	d019      	beq.n	b5f86 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5f52:	2c00      	cmp	r4, #0
   b5f54:	d0f4      	beq.n	b5f40 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5f56:	212e      	movs	r1, #46	; 0x2e
   b5f58:	4630      	mov	r0, r6
   b5f5a:	f7ff fead 	bl	b5cb8 <_ZN5Print5printEc>
   b5f5e:	4404      	add	r4, r0
   b5f60:	e7ee      	b.n	b5f40 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f62:	232f      	movs	r3, #47	; 0x2f
   b5f64:	466a      	mov	r2, sp
   b5f66:	4639      	mov	r1, r7
   b5f68:	200a      	movs	r0, #10
		buf[0] = 0;
   b5f6a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f6e:	f7ff fb91 	bl	b5694 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5f72:	4668      	mov	r0, sp
   b5f74:	f001 f83c 	bl	b6ff0 <strlen>
   b5f78:	6833      	ldr	r3, [r6, #0]
   b5f7a:	4602      	mov	r2, r0
   b5f7c:	68db      	ldr	r3, [r3, #12]
   b5f7e:	4669      	mov	r1, sp
   b5f80:	4630      	mov	r0, r6
   b5f82:	4798      	blx	r3
   b5f84:	4604      	mov	r4, r0
    }
    return n;
}
   b5f86:	4620      	mov	r0, r4
   b5f88:	b00d      	add	sp, #52	; 0x34
   b5f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5f8c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5f8c:	b510      	push	{r4, lr}
   b5f8e:	4b05      	ldr	r3, [pc, #20]	; (b5fa4 <_ZN9IPAddressC1Ev+0x18>)
   b5f90:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5f92:	2211      	movs	r2, #17
   b5f94:	f840 3b04 	str.w	r3, [r0], #4
   b5f98:	2100      	movs	r1, #0
   b5f9a:	f000 ffe9 	bl	b6f70 <memset>
}
   b5f9e:	4620      	mov	r0, r4
   b5fa0:	bd10      	pop	{r4, pc}
   b5fa2:	bf00      	nop
   b5fa4:	000b7840 	.word	0x000b7840

000b5fa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5fa8:	4603      	mov	r3, r0
   b5faa:	4a07      	ldr	r2, [pc, #28]	; (b5fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5fac:	b510      	push	{r4, lr}
   b5fae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5fb2:	f101 0210 	add.w	r2, r1, #16
   b5fb6:	f851 4b04 	ldr.w	r4, [r1], #4
   b5fba:	f843 4b04 	str.w	r4, [r3], #4
   b5fbe:	4291      	cmp	r1, r2
   b5fc0:	d1f9      	bne.n	b5fb6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5fc2:	780a      	ldrb	r2, [r1, #0]
   b5fc4:	701a      	strb	r2, [r3, #0]
}
   b5fc6:	bd10      	pop	{r4, pc}
   b5fc8:	000b7840 	.word	0x000b7840

000b5fcc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5fcc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5fce:	2b04      	cmp	r3, #4
   b5fd0:	d104      	bne.n	b5fdc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5fd2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5fd4:	3800      	subs	r0, #0
   b5fd6:	bf18      	it	ne
   b5fd8:	2001      	movne	r0, #1
   b5fda:	4770      	bx	lr
    } else if (version() == 6) {
   b5fdc:	2b06      	cmp	r3, #6
   b5fde:	d107      	bne.n	b5ff0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5fe0:	6843      	ldr	r3, [r0, #4]
   b5fe2:	b93b      	cbnz	r3, b5ff4 <_ZNK9IPAddresscvbEv+0x28>
   b5fe4:	6883      	ldr	r3, [r0, #8]
   b5fe6:	b92b      	cbnz	r3, b5ff4 <_ZNK9IPAddresscvbEv+0x28>
   b5fe8:	68c3      	ldr	r3, [r0, #12]
   b5fea:	b91b      	cbnz	r3, b5ff4 <_ZNK9IPAddresscvbEv+0x28>
   b5fec:	6900      	ldr	r0, [r0, #16]
   b5fee:	e7f1      	b.n	b5fd4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5ff0:	2000      	movs	r0, #0
   b5ff2:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5ff4:	2001      	movs	r0, #1
}
   b5ff6:	4770      	bx	lr

000b5ff8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5ff8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5ffa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5ffe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6002:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6006:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b600a:	2304      	movs	r3, #4
   b600c:	6041      	str	r1, [r0, #4]
   b600e:	7503      	strb	r3, [r0, #20]
}
   b6010:	bd10      	pop	{r4, pc}
	...

000b6014 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6014:	b507      	push	{r0, r1, r2, lr}
   b6016:	4b06      	ldr	r3, [pc, #24]	; (b6030 <_ZN9IPAddressC1EPKh+0x1c>)
   b6018:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b601a:	78cb      	ldrb	r3, [r1, #3]
   b601c:	9300      	str	r3, [sp, #0]
   b601e:	788b      	ldrb	r3, [r1, #2]
   b6020:	784a      	ldrb	r2, [r1, #1]
   b6022:	7809      	ldrb	r1, [r1, #0]
   b6024:	f7ff ffe8 	bl	b5ff8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6028:	b003      	add	sp, #12
   b602a:	f85d fb04 	ldr.w	pc, [sp], #4
   b602e:	bf00      	nop
   b6030:	000b7840 	.word	0x000b7840

000b6034 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6034:	7441      	strb	r1, [r0, #17]
}
   b6036:	4770      	bx	lr

000b6038 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6038:	4770      	bx	lr

000b603a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b603a:	4770      	bx	lr

000b603c <_ZN9USBSerial4readEv>:
{
   b603c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b603e:	2100      	movs	r1, #0
   b6040:	7c00      	ldrb	r0, [r0, #16]
   b6042:	f7ff fc17 	bl	b5874 <HAL_USB_USART_Receive_Data>
}
   b6046:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b604a:	bd08      	pop	{r3, pc}

000b604c <_ZN9USBSerial4peekEv>:
{
   b604c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b604e:	2101      	movs	r1, #1
   b6050:	7c00      	ldrb	r0, [r0, #16]
   b6052:	f7ff fc0f 	bl	b5874 <HAL_USB_USART_Receive_Data>
}
   b6056:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b605a:	bd08      	pop	{r3, pc}

000b605c <_ZN9USBSerial17availableForWriteEv>:
{
   b605c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b605e:	7c00      	ldrb	r0, [r0, #16]
   b6060:	f7ff fc00 	bl	b5864 <HAL_USB_USART_Available_Data_For_Write>
}
   b6064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6068:	bd08      	pop	{r3, pc}

000b606a <_ZN9USBSerial9availableEv>:
{
   b606a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b606c:	7c00      	ldrb	r0, [r0, #16]
   b606e:	f7ff fbf1 	bl	b5854 <HAL_USB_USART_Available_Data>
}
   b6072:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6076:	bd08      	pop	{r3, pc}

000b6078 <_ZN9USBSerial5writeEh>:
{
   b6078:	b513      	push	{r0, r1, r4, lr}
   b607a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b607c:	7c00      	ldrb	r0, [r0, #16]
{
   b607e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6080:	f7ff fbf0 	bl	b5864 <HAL_USB_USART_Available_Data_For_Write>
   b6084:	2800      	cmp	r0, #0
   b6086:	9901      	ldr	r1, [sp, #4]
   b6088:	dc01      	bgt.n	b608e <_ZN9USBSerial5writeEh+0x16>
   b608a:	7c60      	ldrb	r0, [r4, #17]
   b608c:	b120      	cbz	r0, b6098 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b608e:	7c20      	ldrb	r0, [r4, #16]
   b6090:	f7ff fbf8 	bl	b5884 <HAL_USB_USART_Send_Data>
   b6094:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6098:	b002      	add	sp, #8
   b609a:	bd10      	pop	{r4, pc}

000b609c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b609c:	7c00      	ldrb	r0, [r0, #16]
   b609e:	f7ff bbf9 	b.w	b5894 <HAL_USB_USART_Flush_Data>

000b60a2 <_ZN9USBSerialD0Ev>:
   b60a2:	b510      	push	{r4, lr}
   b60a4:	2114      	movs	r1, #20
   b60a6:	4604      	mov	r4, r0
   b60a8:	f7fd fffb 	bl	b40a2 <_ZdlPvj>
   b60ac:	4620      	mov	r0, r4
   b60ae:	bd10      	pop	{r4, pc}

000b60b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b60b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b60b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b60b6:	4604      	mov	r4, r0
   b60b8:	4608      	mov	r0, r1
   b60ba:	2100      	movs	r1, #0
   b60bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b60c0:	4b04      	ldr	r3, [pc, #16]	; (b60d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b60c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b60c4:	2301      	movs	r3, #1
  _serial = serial;
   b60c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b60c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b60ca:	4611      	mov	r1, r2
   b60cc:	f7ff fbb2 	bl	b5834 <HAL_USB_USART_Init>
}
   b60d0:	4620      	mov	r0, r4
   b60d2:	bd10      	pop	{r4, pc}
   b60d4:	000b7854 	.word	0x000b7854

000b60d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b60d8:	7c00      	ldrb	r0, [r0, #16]
   b60da:	2200      	movs	r2, #0
   b60dc:	f7ff bbb2 	b.w	b5844 <HAL_USB_USART_Begin>

000b60e0 <_Z19acquireSerialBufferv>:
{
   b60e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b60e2:	2214      	movs	r2, #20
{
   b60e4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b60e6:	2100      	movs	r1, #0
   b60e8:	f000 ff42 	bl	b6f70 <memset>
}
   b60ec:	4620      	mov	r0, r4
   b60ee:	bd10      	pop	{r4, pc}

000b60f0 <_Z16_fetch_usbserialv>:
{
   b60f0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60f2:	4c0f      	ldr	r4, [pc, #60]	; (b6130 <_Z16_fetch_usbserialv+0x40>)
{
   b60f4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b60f6:	a803      	add	r0, sp, #12
   b60f8:	f7ff fff2 	bl	b60e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b60fc:	7821      	ldrb	r1, [r4, #0]
   b60fe:	f3bf 8f5b 	dmb	ish
   b6102:	f011 0101 	ands.w	r1, r1, #1
   b6106:	d10f      	bne.n	b6128 <_Z16_fetch_usbserialv+0x38>
   b6108:	4620      	mov	r0, r4
   b610a:	9101      	str	r1, [sp, #4]
   b610c:	f7fd ffcb 	bl	b40a6 <__cxa_guard_acquire>
   b6110:	9901      	ldr	r1, [sp, #4]
   b6112:	b148      	cbz	r0, b6128 <_Z16_fetch_usbserialv+0x38>
   b6114:	aa03      	add	r2, sp, #12
   b6116:	4807      	ldr	r0, [pc, #28]	; (b6134 <_Z16_fetch_usbserialv+0x44>)
   b6118:	f7ff ffca 	bl	b60b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b611c:	4620      	mov	r0, r4
   b611e:	f7fd ffc7 	bl	b40b0 <__cxa_guard_release>
   b6122:	4805      	ldr	r0, [pc, #20]	; (b6138 <_Z16_fetch_usbserialv+0x48>)
   b6124:	f000 ff08 	bl	b6f38 <atexit>
	return _usbserial;
}
   b6128:	4802      	ldr	r0, [pc, #8]	; (b6134 <_Z16_fetch_usbserialv+0x44>)
   b612a:	b008      	add	sp, #32
   b612c:	bd10      	pop	{r4, pc}
   b612e:	bf00      	nop
   b6130:	2003e700 	.word	0x2003e700
   b6134:	2003e704 	.word	0x2003e704
   b6138:	000b6039 	.word	0x000b6039

000b613c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b613c:	4770      	bx	lr

000b613e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b613e:	7441      	strb	r1, [r0, #17]
}
   b6140:	4770      	bx	lr

000b6142 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6142:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6144:	7c00      	ldrb	r0, [r0, #16]
   b6146:	f7ff faed 	bl	b5724 <hal_usart_available_data_for_write>
}
   b614a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b614e:	bd08      	pop	{r3, pc}

000b6150 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6150:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6152:	7c00      	ldrb	r0, [r0, #16]
   b6154:	f7ff fabe 	bl	b56d4 <hal_usart_available>
}
   b6158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b615c:	bd08      	pop	{r3, pc}

000b615e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b615e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6160:	7c00      	ldrb	r0, [r0, #16]
   b6162:	f7ff fac7 	bl	b56f4 <hal_usart_peek>
}
   b6166:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b616a:	bd08      	pop	{r3, pc}

000b616c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b616c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b616e:	7c00      	ldrb	r0, [r0, #16]
   b6170:	f7ff fab8 	bl	b56e4 <hal_usart_read>
}
   b6174:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6178:	bd08      	pop	{r3, pc}

000b617a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b617a:	7c00      	ldrb	r0, [r0, #16]
   b617c:	f7ff bac2 	b.w	b5704 <hal_usart_flush>

000b6180 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6180:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6182:	7c45      	ldrb	r5, [r0, #17]
{
   b6184:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6186:	b12d      	cbz	r5, b6194 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6188:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b618a:	b003      	add	sp, #12
   b618c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6190:	f7ff ba98 	b.w	b56c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6194:	7c00      	ldrb	r0, [r0, #16]
   b6196:	9101      	str	r1, [sp, #4]
   b6198:	f7ff fac4 	bl	b5724 <hal_usart_available_data_for_write>
   b619c:	2800      	cmp	r0, #0
   b619e:	9901      	ldr	r1, [sp, #4]
   b61a0:	dcf2      	bgt.n	b6188 <_ZN11USARTSerial5writeEh+0x8>
}
   b61a2:	4628      	mov	r0, r5
   b61a4:	b003      	add	sp, #12
   b61a6:	bd30      	pop	{r4, r5, pc}

000b61a8 <_ZN11USARTSerialD0Ev>:
   b61a8:	b510      	push	{r4, lr}
   b61aa:	2114      	movs	r1, #20
   b61ac:	4604      	mov	r4, r0
   b61ae:	f7fd ff78 	bl	b40a2 <_ZdlPvj>
   b61b2:	4620      	mov	r0, r4
   b61b4:	bd10      	pop	{r4, pc}
	...

000b61b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b61b8:	b510      	push	{r4, lr}
   b61ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61be:	4604      	mov	r4, r0
   b61c0:	4608      	mov	r0, r1
   b61c2:	4611      	mov	r1, r2
   b61c4:	2200      	movs	r2, #0
   b61c6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b61ca:	4b04      	ldr	r3, [pc, #16]	; (b61dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b61cc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61ce:	2301      	movs	r3, #1
  _serial = serial;
   b61d0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61d2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b61d4:	f7ff faae 	bl	b5734 <hal_usart_init_ex>
}
   b61d8:	4620      	mov	r0, r4
   b61da:	bd10      	pop	{r4, pc}
   b61dc:	000b7884 	.word	0x000b7884

000b61e0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b61e0:	4770      	bx	lr

000b61e2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b61e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61e4:	4606      	mov	r6, r0
   b61e6:	4615      	mov	r5, r2
   b61e8:	460c      	mov	r4, r1
   b61ea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b61ec:	42bc      	cmp	r4, r7
   b61ee:	d006      	beq.n	b61fe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b61f0:	6833      	ldr	r3, [r6, #0]
   b61f2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b61f6:	689b      	ldr	r3, [r3, #8]
   b61f8:	4630      	mov	r0, r6
   b61fa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b61fc:	e7f6      	b.n	b61ec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b61fe:	4628      	mov	r0, r5
   b6200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6202 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6202:	7c00      	ldrb	r0, [r0, #16]
   b6204:	2200      	movs	r2, #0
   b6206:	f7ff ba9d 	b.w	b5744 <hal_i2c_write>

000b620a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b620a:	7c00      	ldrb	r0, [r0, #16]
   b620c:	2100      	movs	r1, #0
   b620e:	f7ff baa1 	b.w	b5754 <hal_i2c_available>

000b6212 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6212:	7c00      	ldrb	r0, [r0, #16]
   b6214:	2100      	movs	r1, #0
   b6216:	f7ff baa5 	b.w	b5764 <hal_i2c_read>

000b621a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b621a:	7c00      	ldrb	r0, [r0, #16]
   b621c:	2100      	movs	r1, #0
   b621e:	f7ff baa9 	b.w	b5774 <hal_i2c_peek>

000b6222 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6222:	7c00      	ldrb	r0, [r0, #16]
   b6224:	2100      	movs	r1, #0
   b6226:	f7ff baad 	b.w	b5784 <hal_i2c_flush>

000b622a <_ZN7TwoWireD0Ev>:
   b622a:	b510      	push	{r4, lr}
   b622c:	2114      	movs	r1, #20
   b622e:	4604      	mov	r4, r0
   b6230:	f7fd ff37 	bl	b40a2 <_ZdlPvj>
   b6234:	4620      	mov	r0, r4
   b6236:	bd10      	pop	{r4, pc}

000b6238 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6238:	b510      	push	{r4, lr}
   b623a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b623e:	4604      	mov	r4, r0
   b6240:	4608      	mov	r0, r1
   b6242:	2100      	movs	r1, #0
   b6244:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6248:	4b03      	ldr	r3, [pc, #12]	; (b6258 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b624a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b624c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b624e:	4611      	mov	r1, r2
   b6250:	f7ff faa8 	bl	b57a4 <hal_i2c_init>
}
   b6254:	4620      	mov	r0, r4
   b6256:	bd10      	pop	{r4, pc}
   b6258:	000b78b4 	.word	0x000b78b4

000b625c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b625c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b625e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6260:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6264:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6266:	2201      	movs	r2, #1
   b6268:	f04f 33ff 	mov.w	r3, #4294967295
   b626c:	f10d 0107 	add.w	r1, sp, #7
   b6270:	47a0      	blx	r4
}
   b6272:	b002      	add	sp, #8
   b6274:	bd10      	pop	{r4, pc}

000b6276 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6276:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6278:	6803      	ldr	r3, [r0, #0]
   b627a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b627c:	f04f 33ff 	mov.w	r3, #4294967295
   b6280:	46a4      	mov	ip, r4
}
   b6282:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6286:	4760      	bx	ip

000b6288 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6288:	b513      	push	{r0, r1, r4, lr}
   b628a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b628c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b628e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6292:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6294:	f10d 0107 	add.w	r1, sp, #7
   b6298:	2201      	movs	r2, #1
   b629a:	47a0      	blx	r4
}
   b629c:	b002      	add	sp, #8
   b629e:	bd10      	pop	{r4, pc}

000b62a0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b62a0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b62a2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b62a4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b62a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b62ac:	429a      	cmp	r2, r3
int TCPClient::read() {
   b62ae:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b62b0:	d008      	beq.n	b62c4 <_ZN9TCPClient4readEv+0x24>
   b62b2:	6963      	ldr	r3, [r4, #20]
   b62b4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b62b8:	1c51      	adds	r1, r2, #1
   b62ba:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b62be:	4413      	add	r3, r2
   b62c0:	7918      	ldrb	r0, [r3, #4]
}
   b62c2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b62c4:	6803      	ldr	r3, [r0, #0]
   b62c6:	691b      	ldr	r3, [r3, #16]
   b62c8:	4798      	blx	r3
   b62ca:	2800      	cmp	r0, #0
   b62cc:	d1f1      	bne.n	b62b2 <_ZN9TCPClient4readEv+0x12>
   b62ce:	f04f 30ff 	mov.w	r0, #4294967295
   b62d2:	e7f6      	b.n	b62c2 <_ZN9TCPClient4readEv+0x22>

000b62d4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b62d4:	4770      	bx	lr

000b62d6 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b62d6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b62d8:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b62da:	43c0      	mvns	r0, r0
   b62dc:	0fc0      	lsrs	r0, r0, #31
   b62de:	4770      	bx	lr

000b62e0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b62e0:	4770      	bx	lr
	...

000b62e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b62e4:	4b06      	ldr	r3, [pc, #24]	; (b6300 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b62e6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b62e8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b62ea:	f100 040c 	add.w	r4, r0, #12
	    ||
   b62ee:	d005      	beq.n	b62fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b62f0:	4608      	mov	r0, r1
   b62f2:	f000 fca5 	bl	b6c40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b62f6:	2800      	cmp	r0, #0
   b62f8:	bf08      	it	eq
   b62fa:	2400      	moveq	r4, #0
      }
   b62fc:	4620      	mov	r0, r4
   b62fe:	bd10      	pop	{r4, pc}
   b6300:	000b7810 	.word	0x000b7810

000b6304 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6304:	b510      	push	{r4, lr}
   b6306:	21ac      	movs	r1, #172	; 0xac
   b6308:	4604      	mov	r4, r0
   b630a:	f7fd feca 	bl	b40a2 <_ZdlPvj>
   b630e:	4620      	mov	r0, r4
   b6310:	bd10      	pop	{r4, pc}

000b6312 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6312:	21ac      	movs	r1, #172	; 0xac
   b6314:	f7fd bec5 	b.w	b40a2 <_ZdlPvj>

000b6318 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b631c:	f04f 0800 	mov.w	r8, #0
   b6320:	b086      	sub	sp, #24
   b6322:	461c      	mov	r4, r3
   b6324:	f8c0 8004 	str.w	r8, [r0, #4]
   b6328:	4605      	mov	r5, r0
   b632a:	460e      	mov	r6, r1
   b632c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b632e:	4641      	mov	r1, r8
   b6330:	2210      	movs	r2, #16
   b6332:	a802      	add	r0, sp, #8
   b6334:	f000 fe1c 	bl	b6f70 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6338:	1c63      	adds	r3, r4, #1
   b633a:	d009      	beq.n	b6350 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b633c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6340:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6344:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6348:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b634c:	435c      	muls	r4, r3
   b634e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6350:	6968      	ldr	r0, [r5, #20]
   b6352:	2310      	movs	r3, #16
   b6354:	9300      	str	r3, [sp, #0]
   b6356:	6800      	ldr	r0, [r0, #0]
   b6358:	ab02      	add	r3, sp, #8
   b635a:	f241 0205 	movw	r2, #4101	; 0x1005
   b635e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6362:	f7ff fa27 	bl	b57b4 <sock_setsockopt>
    if (ret < 0) {
   b6366:	2800      	cmp	r0, #0
   b6368:	da07      	bge.n	b637a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b636a:	f7ff fb6f 	bl	b5a4c <__errno>
   b636e:	6803      	ldr	r3, [r0, #0]
   b6370:	606b      	str	r3, [r5, #4]
        return 0;
   b6372:	2000      	movs	r0, #0
}
   b6374:	b006      	add	sp, #24
   b6376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b637a:	6968      	ldr	r0, [r5, #20]
   b637c:	2300      	movs	r3, #0
   b637e:	6800      	ldr	r0, [r0, #0]
   b6380:	463a      	mov	r2, r7
   b6382:	4631      	mov	r1, r6
   b6384:	f7ff fa36 	bl	b57f4 <sock_send>
    if (ret < 0) {
   b6388:	1e03      	subs	r3, r0, #0
   b638a:	dbee      	blt.n	b636a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b638c:	4618      	mov	r0, r3
   b638e:	e7f1      	b.n	b6374 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6390 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6390:	b530      	push	{r4, r5, lr}
   b6392:	b087      	sub	sp, #28
   b6394:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6396:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6398:	4668      	mov	r0, sp
   b639a:	f7ff fe3b 	bl	b6014 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b639e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63a0:	3404      	adds	r4, #4
   b63a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63a4:	682b      	ldr	r3, [r5, #0]
   b63a6:	7023      	strb	r3, [r4, #0]
    }
   b63a8:	b007      	add	sp, #28
   b63aa:	bd30      	pop	{r4, r5, pc}

000b63ac <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b63ac:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b63ae:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b63b0:	4b05      	ldr	r3, [pc, #20]	; (b63c8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b63b2:	4604      	mov	r4, r0
   b63b4:	358c      	adds	r5, #140	; 0x8c
   b63b6:	f844 3b04 	str.w	r3, [r4], #4
   b63ba:	4606      	mov	r6, r0
   b63bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b63be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b63c0:	682b      	ldr	r3, [r5, #0]
   b63c2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b63c4:	4630      	mov	r0, r6
   b63c6:	bd70      	pop	{r4, r5, r6, pc}
   b63c8:	000b7840 	.word	0x000b7840

000b63cc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b63cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b63d0:	4698      	mov	r8, r3
    stop();
   b63d2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b63d4:	b093      	sub	sp, #76	; 0x4c
   b63d6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b63d8:	2400      	movs	r4, #0
    stop();
   b63da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b63dc:	4606      	mov	r6, r0
   b63de:	4617      	mov	r7, r2
    stop();
   b63e0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b63e2:	4628      	mov	r0, r5
   b63e4:	466b      	mov	r3, sp
   b63e6:	4622      	mov	r2, r4
   b63e8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b63ea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b63ec:	f7ff f8d2 	bl	b5594 <netdb_getaddrinfo>
   b63f0:	4605      	mov	r5, r0
   b63f2:	2800      	cmp	r0, #0
   b63f4:	d163      	bne.n	b64be <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b63f6:	9b00      	ldr	r3, [sp, #0]
   b63f8:	2b00      	cmp	r3, #0
   b63fa:	d04b      	beq.n	b6494 <_ZN9TCPClient7connectEPKctm+0xc8>
   b63fc:	695b      	ldr	r3, [r3, #20]
   b63fe:	2b00      	cmp	r3, #0
   b6400:	d048      	beq.n	b6494 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6402:	a806      	add	r0, sp, #24
   b6404:	f7ff fdc2 	bl	b5f8c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6408:	9b00      	ldr	r3, [sp, #0]
   b640a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b640c:	7863      	ldrb	r3, [r4, #1]
   b640e:	2b02      	cmp	r3, #2
   b6410:	d104      	bne.n	b641c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6412:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6414:	a806      	add	r0, sp, #24
   b6416:	f7ff ffbb 	bl	b6390 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b641a:	e026      	b.n	b646a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b641c:	2b0a      	cmp	r3, #10
   b641e:	d124      	bne.n	b646a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6420:	2211      	movs	r2, #17
   b6422:	4629      	mov	r1, r5
   b6424:	a801      	add	r0, sp, #4
   b6426:	f000 fda3 	bl	b6f70 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b642a:	68a3      	ldr	r3, [r4, #8]
   b642c:	2b00      	cmp	r3, #0
   b642e:	d038      	beq.n	b64a2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6430:	f104 0308 	add.w	r3, r4, #8
   b6434:	f10d 0c04 	add.w	ip, sp, #4
   b6438:	3418      	adds	r4, #24
   b643a:	6818      	ldr	r0, [r3, #0]
   b643c:	6859      	ldr	r1, [r3, #4]
   b643e:	4662      	mov	r2, ip
   b6440:	c203      	stmia	r2!, {r0, r1}
   b6442:	3308      	adds	r3, #8
   b6444:	42a3      	cmp	r3, r4
   b6446:	4694      	mov	ip, r2
   b6448:	d1f7      	bne.n	b643a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b644a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b644c:	a901      	add	r1, sp, #4
   b644e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6450:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6454:	f7ff fda8 	bl	b5fa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6458:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b645c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6460:	ac07      	add	r4, sp, #28
   b6462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6464:	f8dc 3000 	ldr.w	r3, [ip]
   b6468:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b646a:	a806      	add	r0, sp, #24
   b646c:	f7ff fdae 	bl	b5fcc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6470:	b180      	cbz	r0, b6494 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6472:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6474:	ad07      	add	r5, sp, #28
   b6476:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b647a:	4b12      	ldr	r3, [pc, #72]	; (b64c4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b647c:	930c      	str	r3, [sp, #48]	; 0x30
   b647e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6480:	ac0d      	add	r4, sp, #52	; 0x34
   b6482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6484:	682b      	ldr	r3, [r5, #0]
   b6486:	7023      	strb	r3, [r4, #0]
   b6488:	463a      	mov	r2, r7
   b648a:	4643      	mov	r3, r8
   b648c:	a90c      	add	r1, sp, #48	; 0x30
   b648e:	4630      	mov	r0, r6
   b6490:	47c8      	blx	r9
   b6492:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6494:	9800      	ldr	r0, [sp, #0]
   b6496:	f7ff f875 	bl	b5584 <netdb_freeaddrinfo>
}
   b649a:	4628      	mov	r0, r5
   b649c:	b013      	add	sp, #76	; 0x4c
   b649e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b64a2:	68e3      	ldr	r3, [r4, #12]
   b64a4:	2b00      	cmp	r3, #0
   b64a6:	d1c3      	bne.n	b6430 <_ZN9TCPClient7connectEPKctm+0x64>
   b64a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b64ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b64b0:	f7ff f8f8 	bl	b56a4 <inet_htonl>
   b64b4:	4581      	cmp	r9, r0
   b64b6:	d1bb      	bne.n	b6430 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b64b8:	f104 0114 	add.w	r1, r4, #20
   b64bc:	e7aa      	b.n	b6414 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b64be:	4625      	mov	r5, r4
   b64c0:	e7e8      	b.n	b6494 <_ZN9TCPClient7connectEPKctm+0xc8>
   b64c2:	bf00      	nop
   b64c4:	000b7840 	.word	0x000b7840

000b64c8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b64c8:	b538      	push	{r3, r4, r5, lr}
   b64ca:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b64cc:	681a      	ldr	r2, [r3, #0]
   b64ce:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b64d0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b64d2:	da10      	bge.n	b64f6 <_ZN9TCPClient9connectedEv+0x2e>
   b64d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b64d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b64dc:	429a      	cmp	r2, r3
   b64de:	d10a      	bne.n	b64f6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b64e0:	6803      	ldr	r3, [r0, #0]
   b64e2:	691b      	ldr	r3, [r3, #16]
   b64e4:	4798      	blx	r3
        if (!rv) {
   b64e6:	4604      	mov	r4, r0
   b64e8:	b928      	cbnz	r0, b64f6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b64ea:	682b      	ldr	r3, [r5, #0]
   b64ec:	4628      	mov	r0, r5
   b64ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b64f0:	4798      	blx	r3
        rv = available();
   b64f2:	4620      	mov	r0, r4
}
   b64f4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b64f6:	2001      	movs	r0, #1
   b64f8:	e7fc      	b.n	b64f4 <_ZN9TCPClient9connectedEv+0x2c>

000b64fa <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b64fa:	b510      	push	{r4, lr}
   b64fc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b64fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6502:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6506:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6508:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b650a:	d005      	beq.n	b6518 <_ZN9TCPClient4peekEv+0x1e>
   b650c:	6963      	ldr	r3, [r4, #20]
   b650e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6512:	4413      	add	r3, r2
   b6514:	7918      	ldrb	r0, [r3, #4]
}
   b6516:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6518:	6803      	ldr	r3, [r0, #0]
   b651a:	691b      	ldr	r3, [r3, #16]
   b651c:	4798      	blx	r3
   b651e:	2800      	cmp	r0, #0
   b6520:	d1f4      	bne.n	b650c <_ZN9TCPClient4peekEv+0x12>
   b6522:	f04f 30ff 	mov.w	r0, #4294967295
   b6526:	e7f6      	b.n	b6516 <_ZN9TCPClient4peekEv+0x1c>

000b6528 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b652a:	6943      	ldr	r3, [r0, #20]
   b652c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b652e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6532:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6536:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6538:	4605      	mov	r5, r0
   b653a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b653c:	d016      	beq.n	b656c <_ZN9TCPClient4readEPhj+0x44>
   b653e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6540:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6544:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6548:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b654a:	42bc      	cmp	r4, r7
   b654c:	bf28      	it	cs
   b654e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6550:	3304      	adds	r3, #4
   b6552:	4622      	mov	r2, r4
   b6554:	4419      	add	r1, r3
   b6556:	4630      	mov	r0, r6
   b6558:	f000 fcfc 	bl	b6f54 <memcpy>
   b655c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b655e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b6562:	4423      	add	r3, r4
   b6564:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6568:	4620      	mov	r0, r4
   b656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b656c:	6803      	ldr	r3, [r0, #0]
   b656e:	691b      	ldr	r3, [r3, #16]
   b6570:	4798      	blx	r3
   b6572:	2800      	cmp	r0, #0
   b6574:	d1e3      	bne.n	b653e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b6576:	f04f 34ff 	mov.w	r4, #4294967295
   b657a:	e7f5      	b.n	b6568 <_ZN9TCPClient4readEPhj+0x40>

000b657c <_ZN9TCPClient12flush_bufferEv>:
   b657c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b657e:	2300      	movs	r3, #0
   b6580:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b6584:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b6586:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b658a:	4770      	bx	lr

000b658c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6590:	461f      	mov	r7, r3
    stop();
   b6592:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6594:	460c      	mov	r4, r1
    stop();
   b6596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6598:	b08a      	sub	sp, #40	; 0x28
   b659a:	4605      	mov	r5, r0
   b659c:	4616      	mov	r6, r2
    stop();
   b659e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b65a0:	7d23      	ldrb	r3, [r4, #20]
   b65a2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b65a6:	2b04      	cmp	r3, #4
   b65a8:	bf0c      	ite	eq
   b65aa:	2002      	moveq	r0, #2
   b65ac:	200a      	movne	r0, #10
   b65ae:	2206      	movs	r2, #6
   b65b0:	2101      	movs	r1, #1
   b65b2:	f7ff f927 	bl	b5804 <sock_socket>
   b65b6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b65ba:	696b      	ldr	r3, [r5, #20]
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	2b00      	cmp	r3, #0
   b65c0:	da08      	bge.n	b65d4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b65c2:	682b      	ldr	r3, [r5, #0]
   b65c4:	4628      	mov	r0, r5
   b65c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b65c8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b65ca:	4798      	blx	r3
}
   b65cc:	4620      	mov	r0, r4
   b65ce:	b00a      	add	sp, #40	; 0x28
   b65d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b65d4:	4628      	mov	r0, r5
   b65d6:	f7ff ffd1 	bl	b657c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b65da:	b1b7      	cbz	r7, b660a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b65dc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b65de:	a903      	add	r1, sp, #12
   b65e0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b65e2:	9303      	str	r3, [sp, #12]
   b65e4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b65e8:	f7ff f81c 	bl	b5624 <if_index_to_name>
   b65ec:	2800      	cmp	r0, #0
   b65ee:	d1e8      	bne.n	b65c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b65f0:	6968      	ldr	r0, [r5, #20]
   b65f2:	2306      	movs	r3, #6
   b65f4:	9300      	str	r3, [sp, #0]
   b65f6:	6800      	ldr	r0, [r0, #0]
   b65f8:	ab03      	add	r3, sp, #12
   b65fa:	f241 020b 	movw	r2, #4107	; 0x100b
   b65fe:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6602:	f7ff f8d7 	bl	b57b4 <sock_setsockopt>
   b6606:	2800      	cmp	r0, #0
   b6608:	d1db      	bne.n	b65c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b660a:	221c      	movs	r2, #28
   b660c:	2100      	movs	r1, #0
   b660e:	a803      	add	r0, sp, #12
   b6610:	f000 fcae 	bl	b6f70 <memset>
    if (ip.version() == 4) {
   b6614:	7d23      	ldrb	r3, [r4, #20]
   b6616:	2b04      	cmp	r3, #4
   b6618:	d11d      	bne.n	b6656 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b661a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b661e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6620:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6624:	f7ff f846 	bl	b56b4 <inet_htons>
   b6628:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b662c:	6860      	ldr	r0, [r4, #4]
   b662e:	f7ff f839 	bl	b56a4 <inet_htonl>
   b6632:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6634:	696b      	ldr	r3, [r5, #20]
   b6636:	221c      	movs	r2, #28
   b6638:	6818      	ldr	r0, [r3, #0]
   b663a:	a903      	add	r1, sp, #12
   b663c:	f7ff f8ca 	bl	b57d4 <sock_connect>
   b6640:	2800      	cmp	r0, #0
   b6642:	d1be      	bne.n	b65c2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6644:	3404      	adds	r4, #4
   b6646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6648:	696d      	ldr	r5, [r5, #20]
   b664a:	358c      	adds	r5, #140	; 0x8c
   b664c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b664e:	6823      	ldr	r3, [r4, #0]
   b6650:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6652:	2401      	movs	r4, #1
   b6654:	e7ba      	b.n	b65cc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6656:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b665a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b665c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6660:	f7ff f828 	bl	b56b4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6664:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6666:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b666a:	1d23      	adds	r3, r4, #4
   b666c:	f104 0714 	add.w	r7, r4, #20
   b6670:	6818      	ldr	r0, [r3, #0]
   b6672:	6859      	ldr	r1, [r3, #4]
   b6674:	4632      	mov	r2, r6
   b6676:	c203      	stmia	r2!, {r0, r1}
   b6678:	3308      	adds	r3, #8
   b667a:	42bb      	cmp	r3, r7
   b667c:	4616      	mov	r6, r2
   b667e:	d1f7      	bne.n	b6670 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6680:	e7d8      	b.n	b6634 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b6684 <_ZN9TCPClient9availableEv>:
{
   b6684:	b530      	push	{r4, r5, lr}
   b6686:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6688:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b668c:	b08b      	sub	sp, #44	; 0x2c
   b668e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6690:	b12b      	cbz	r3, b669e <_ZN9TCPClient9availableEv+0x1a>
   b6692:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6696:	429a      	cmp	r2, r3
   b6698:	d101      	bne.n	b669e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b669a:	f7ff ff6f 	bl	b657c <_ZN9TCPClient12flush_bufferEv>
   b669e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b66a0:	6808      	ldr	r0, [r1, #0]
   b66a2:	2800      	cmp	r0, #0
   b66a4:	db18      	blt.n	b66d8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b66a6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b66aa:	2d7f      	cmp	r5, #127	; 0x7f
   b66ac:	d814      	bhi.n	b66d8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b66ae:	3104      	adds	r1, #4
   b66b0:	2308      	movs	r3, #8
   b66b2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b66b6:	4429      	add	r1, r5
   b66b8:	f7ff f894 	bl	b57e4 <sock_recv>
            if (ret > 0) {
   b66bc:	2800      	cmp	r0, #0
   b66be:	dd13      	ble.n	b66e8 <_ZN9TCPClient9availableEv+0x64>
   b66c0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b66c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66c6:	b90a      	cbnz	r2, b66cc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b66c8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b66cc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b66ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66d2:	4410      	add	r0, r2
   b66d4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b66d8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b66da:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b66de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b66e2:	1ac0      	subs	r0, r0, r3
   b66e4:	b00b      	add	sp, #44	; 0x2c
   b66e6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b66e8:	f7ff f9b0 	bl	b5a4c <__errno>
   b66ec:	6803      	ldr	r3, [r0, #0]
   b66ee:	2b0b      	cmp	r3, #11
   b66f0:	d0f2      	beq.n	b66d8 <_ZN9TCPClient9availableEv+0x54>
   b66f2:	f7ff f9ab 	bl	b5a4c <__errno>
   b66f6:	6803      	ldr	r3, [r0, #0]
   b66f8:	2b0b      	cmp	r3, #11
   b66fa:	d0ed      	beq.n	b66d8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b66fc:	2320      	movs	r3, #32
   b66fe:	2500      	movs	r5, #0
   b6700:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6704:	f7ff f9a2 	bl	b5a4c <__errno>
   b6708:	6803      	ldr	r3, [r0, #0]
   b670a:	9301      	str	r3, [sp, #4]
   b670c:	4b08      	ldr	r3, [pc, #32]	; (b6730 <_ZN9TCPClient9availableEv+0xac>)
   b670e:	4909      	ldr	r1, [pc, #36]	; (b6734 <_ZN9TCPClient9availableEv+0xb0>)
   b6710:	9300      	str	r3, [sp, #0]
   b6712:	aa02      	add	r2, sp, #8
   b6714:	462b      	mov	r3, r5
   b6716:	2032      	movs	r0, #50	; 0x32
   b6718:	f7ff f8c4 	bl	b58a4 <log_message>
                    sock_close(d_->sock);
   b671c:	6963      	ldr	r3, [r4, #20]
   b671e:	6818      	ldr	r0, [r3, #0]
   b6720:	f7ff f850 	bl	b57c4 <sock_close>
   b6724:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6726:	f04f 32ff 	mov.w	r2, #4294967295
   b672a:	601a      	str	r2, [r3, #0]
   b672c:	e7d4      	b.n	b66d8 <_ZN9TCPClient9availableEv+0x54>
   b672e:	bf00      	nop
   b6730:	000b78db 	.word	0x000b78db
   b6734:	000b78d4 	.word	0x000b78d4

000b6738 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6738:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b673a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b673c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b673e:	6818      	ldr	r0, [r3, #0]
   b6740:	2800      	cmp	r0, #0
   b6742:	db01      	blt.n	b6748 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6744:	f7ff f83e 	bl	b57c4 <sock_close>
   b6748:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b674a:	f04f 32ff 	mov.w	r2, #4294967295
   b674e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6750:	6960      	ldr	r0, [r4, #20]
   b6752:	2211      	movs	r2, #17
   b6754:	2100      	movs	r1, #0
   b6756:	308c      	adds	r0, #140	; 0x8c
   b6758:	f000 fc0a 	bl	b6f70 <memset>
    flush_buffer();
   b675c:	4620      	mov	r0, r4
}
   b675e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6762:	f7ff bf0b 	b.w	b657c <_ZN9TCPClient12flush_bufferEv>

000b6766 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6766:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6768:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b676a:	4604      	mov	r4, r0
          total(0) {
   b676c:	6001      	str	r1, [r0, #0]
   b676e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6772:	3088      	adds	r0, #136	; 0x88
   b6774:	f7ff fc0a 	bl	b5f8c <_ZN9IPAddressC1Ev>
}
   b6778:	4620      	mov	r0, r4
   b677a:	bd10      	pop	{r4, pc}

000b677c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b677c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b677e:	2300      	movs	r3, #0
   b6780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6784:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6788:	4a0e      	ldr	r2, [pc, #56]	; (b67c4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b678a:	6103      	str	r3, [r0, #16]
   b678c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b678e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6790:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6792:	20ac      	movs	r0, #172	; 0xac
   b6794:	9101      	str	r1, [sp, #4]
   b6796:	f7fd fc7c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b679a:	1e05      	subs	r5, r0, #0
   b679c:	f105 060c 	add.w	r6, r5, #12
   b67a0:	d008      	beq.n	b67b4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b67a2:	2301      	movs	r3, #1
   b67a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b67a8:	4b07      	ldr	r3, [pc, #28]	; (b67c8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b67aa:	9901      	ldr	r1, [sp, #4]
   b67ac:	602b      	str	r3, [r5, #0]
   b67ae:	4630      	mov	r0, r6
   b67b0:	f7ff ffd9 	bl	b6766 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b67b4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b67b6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b67ba:	f7ff fedf 	bl	b657c <_ZN9TCPClient12flush_bufferEv>
}
   b67be:	b002      	add	sp, #8
   b67c0:	bd70      	pop	{r4, r5, r6, pc}
   b67c2:	bf00      	nop
   b67c4:	000b7910 	.word	0x000b7910
   b67c8:	000b78f4 	.word	0x000b78f4

000b67cc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b67cc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b67ce:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b67d2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b67d4:	f7ff ffd2 	bl	b677c <_ZN9TCPClientC1Ei>
}
   b67d8:	4620      	mov	r0, r4
   b67da:	bd10      	pop	{r4, pc}

000b67dc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b67dc:	b510      	push	{r4, lr}
   b67de:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b67e0:	6800      	ldr	r0, [r0, #0]
   b67e2:	2800      	cmp	r0, #0
   b67e4:	db01      	blt.n	b67ea <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b67e6:	f7fe ffed 	bl	b57c4 <sock_close>
    }
}
   b67ea:	4620      	mov	r0, r4
   b67ec:	bd10      	pop	{r4, pc}

000b67ee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b67ee:	300c      	adds	r0, #12
   b67f0:	f7ff bff4 	b.w	b67dc <_ZN9TCPClient4DataD1Ev>

000b67f4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b67f4:	2200      	movs	r2, #0
   b67f6:	6840      	ldr	r0, [r0, #4]
   b67f8:	4611      	mov	r1, r2
   b67fa:	f7ff b89f 	b.w	b593c <network_ready>

000b67fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b67fe:	2200      	movs	r2, #0
   b6800:	6840      	ldr	r0, [r0, #4]
   b6802:	4611      	mov	r1, r2
   b6804:	f7ff b8ba 	b.w	b597c <network_listening>

000b6808 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6808:	2200      	movs	r2, #0
   b680a:	6840      	ldr	r0, [r0, #4]
   b680c:	4611      	mov	r1, r2
   b680e:	f7ff b8c5 	b.w	b599c <network_get_listen_timeout>

000b6812 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6812:	6840      	ldr	r0, [r0, #4]
   b6814:	2200      	movs	r2, #0
   b6816:	f7ff b8b9 	b.w	b598c <network_set_listen_timeout>

000b681a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b681a:	6840      	ldr	r0, [r0, #4]
   b681c:	2200      	movs	r2, #0
   b681e:	f081 0101 	eor.w	r1, r1, #1
   b6822:	f7ff b8a3 	b.w	b596c <network_listen>

000b6826 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6826:	2300      	movs	r3, #0
   b6828:	6840      	ldr	r0, [r0, #4]
   b682a:	461a      	mov	r2, r3
   b682c:	4619      	mov	r1, r3
   b682e:	f7ff b895 	b.w	b595c <network_off>

000b6832 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6832:	2300      	movs	r3, #0
   b6834:	6840      	ldr	r0, [r0, #4]
   b6836:	461a      	mov	r2, r3
   b6838:	4619      	mov	r1, r3
   b683a:	f7ff b887 	b.w	b594c <network_on>

000b683e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b683e:	2200      	movs	r2, #0
   b6840:	6840      	ldr	r0, [r0, #4]
   b6842:	4611      	mov	r1, r2
   b6844:	f7ff b86a 	b.w	b591c <network_connecting>

000b6848 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6848:	6840      	ldr	r0, [r0, #4]
   b684a:	2200      	movs	r2, #0
   b684c:	2102      	movs	r1, #2
   b684e:	f7ff b86d 	b.w	b592c <network_disconnect>

000b6852 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6852:	2300      	movs	r3, #0
   b6854:	6840      	ldr	r0, [r0, #4]
   b6856:	461a      	mov	r2, r3
   b6858:	f7ff b858 	b.w	b590c <network_connect>

000b685c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b685c:	4b02      	ldr	r3, [pc, #8]	; (b6868 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b685e:	2204      	movs	r2, #4
   b6860:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6862:	4a02      	ldr	r2, [pc, #8]	; (b686c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6864:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6866:	4770      	bx	lr
   b6868:	2003e718 	.word	0x2003e718
   b686c:	000b795c 	.word	0x000b795c

000b6870 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6870:	2300      	movs	r3, #0
   b6872:	6840      	ldr	r0, [r0, #4]
   b6874:	461a      	mov	r2, r3
   b6876:	f7ff b849 	b.w	b590c <network_connect>

000b687a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b687a:	6840      	ldr	r0, [r0, #4]
   b687c:	2200      	movs	r2, #0
   b687e:	2102      	movs	r1, #2
   b6880:	f7ff b854 	b.w	b592c <network_disconnect>

000b6884 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6884:	2200      	movs	r2, #0
   b6886:	6840      	ldr	r0, [r0, #4]
   b6888:	4611      	mov	r1, r2
   b688a:	f7ff b847 	b.w	b591c <network_connecting>

000b688e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b688e:	2200      	movs	r2, #0
   b6890:	6840      	ldr	r0, [r0, #4]
   b6892:	4611      	mov	r1, r2
   b6894:	f7ff b852 	b.w	b593c <network_ready>

000b6898 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6898:	2300      	movs	r3, #0
   b689a:	6840      	ldr	r0, [r0, #4]
   b689c:	461a      	mov	r2, r3
   b689e:	4619      	mov	r1, r3
   b68a0:	f7ff b854 	b.w	b594c <network_on>

000b68a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b68a4:	2300      	movs	r3, #0
   b68a6:	6840      	ldr	r0, [r0, #4]
   b68a8:	461a      	mov	r2, r3
   b68aa:	4619      	mov	r1, r3
   b68ac:	f7ff b856 	b.w	b595c <network_off>

000b68b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b68b0:	6840      	ldr	r0, [r0, #4]
   b68b2:	2100      	movs	r1, #0
   b68b4:	f7ff b87a 	b.w	b59ac <network_is_on>

000b68b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b68b8:	6840      	ldr	r0, [r0, #4]
   b68ba:	2100      	movs	r1, #0
   b68bc:	f7ff b87e 	b.w	b59bc <network_is_off>

000b68c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b68c0:	6840      	ldr	r0, [r0, #4]
   b68c2:	2200      	movs	r2, #0
   b68c4:	f081 0101 	eor.w	r1, r1, #1
   b68c8:	f7ff b850 	b.w	b596c <network_listen>

000b68cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b68cc:	6840      	ldr	r0, [r0, #4]
   b68ce:	2200      	movs	r2, #0
   b68d0:	f7ff b85c 	b.w	b598c <network_set_listen_timeout>

000b68d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b68d4:	2200      	movs	r2, #0
   b68d6:	6840      	ldr	r0, [r0, #4]
   b68d8:	4611      	mov	r1, r2
   b68da:	f7ff b85f 	b.w	b599c <network_get_listen_timeout>

000b68de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b68de:	2200      	movs	r2, #0
   b68e0:	6840      	ldr	r0, [r0, #4]
   b68e2:	4611      	mov	r1, r2
   b68e4:	f7ff b84a 	b.w	b597c <network_listening>

000b68e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b68e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b68ec:	b095      	sub	sp, #84	; 0x54
   b68ee:	4614      	mov	r4, r2
   b68f0:	460d      	mov	r5, r1
   b68f2:	4607      	mov	r7, r0
    IPAddress addr;
   b68f4:	f7ff fb4a 	bl	b5f8c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b68f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b68fa:	221c      	movs	r2, #28
   b68fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b68fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6900:	f000 fb36 	bl	b6f70 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6904:	2340      	movs	r3, #64	; 0x40
   b6906:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6908:	4620      	mov	r0, r4
   b690a:	466b      	mov	r3, sp
   b690c:	aa0c      	add	r2, sp, #48	; 0x30
   b690e:	2100      	movs	r1, #0
   b6910:	f7fe fe40 	bl	b5594 <netdb_getaddrinfo>
    if (!r) {
   b6914:	4604      	mov	r4, r0
   b6916:	2800      	cmp	r0, #0
   b6918:	d14b      	bne.n	b69b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b691a:	4602      	mov	r2, r0
   b691c:	2101      	movs	r1, #1
   b691e:	6868      	ldr	r0, [r5, #4]
   b6920:	f7ff f80c 	bl	b593c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6924:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6926:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6928:	4622      	mov	r2, r4
   b692a:	6868      	ldr	r0, [r5, #4]
   b692c:	f7ff f806 	bl	b593c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6930:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6932:	4681      	mov	r9, r0
        bool ok = false;
   b6934:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6936:	2e00      	cmp	r6, #0
   b6938:	d03b      	beq.n	b69b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b693a:	2900      	cmp	r1, #0
   b693c:	d139      	bne.n	b69b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b693e:	6873      	ldr	r3, [r6, #4]
   b6940:	2b02      	cmp	r3, #2
   b6942:	d003      	beq.n	b694c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6944:	2b0a      	cmp	r3, #10
   b6946:	d011      	beq.n	b696c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6948:	69f6      	ldr	r6, [r6, #28]
   b694a:	e7f4      	b.n	b6936 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b694c:	f1b8 0f00 	cmp.w	r8, #0
   b6950:	d0fa      	beq.n	b6948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6952:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6954:	a806      	add	r0, sp, #24
   b6956:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6958:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b695a:	f7ff fb5b 	bl	b6014 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b695e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6960:	1d3c      	adds	r4, r7, #4
   b6962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6964:	682b      	ldr	r3, [r5, #0]
   b6966:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6968:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b696a:	e7ed      	b.n	b6948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b696c:	f1b9 0f00 	cmp.w	r9, #0
   b6970:	d0ea      	beq.n	b6948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6972:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6974:	2210      	movs	r2, #16
   b6976:	a801      	add	r0, sp, #4
   b6978:	f000 fafa 	bl	b6f70 <memset>
                    a.v = 6;
   b697c:	2306      	movs	r3, #6
   b697e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6982:	ad01      	add	r5, sp, #4
   b6984:	f104 0308 	add.w	r3, r4, #8
   b6988:	3418      	adds	r4, #24
   b698a:	6818      	ldr	r0, [r3, #0]
   b698c:	6859      	ldr	r1, [r3, #4]
   b698e:	462a      	mov	r2, r5
   b6990:	c203      	stmia	r2!, {r0, r1}
   b6992:	3308      	adds	r3, #8
   b6994:	42a3      	cmp	r3, r4
   b6996:	4615      	mov	r5, r2
   b6998:	d1f7      	bne.n	b698a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b699a:	a901      	add	r1, sp, #4
   b699c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b699e:	ad07      	add	r5, sp, #28
   b69a0:	f7ff fb02 	bl	b5fa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b69a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69a6:	1d3c      	adds	r4, r7, #4
   b69a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69aa:	682b      	ldr	r3, [r5, #0]
   b69ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b69ae:	4649      	mov	r1, r9
   b69b0:	e7ca      	b.n	b6948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b69b2:	9800      	ldr	r0, [sp, #0]
   b69b4:	f7fe fde6 	bl	b5584 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b69b8:	4638      	mov	r0, r7
   b69ba:	b015      	add	sp, #84	; 0x54
   b69bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b69c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b69c0:	4b02      	ldr	r3, [pc, #8]	; (b69cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b69c2:	4a03      	ldr	r2, [pc, #12]	; (b69d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b69c4:	601a      	str	r2, [r3, #0]
   b69c6:	2200      	movs	r2, #0
   b69c8:	605a      	str	r2, [r3, #4]

} // spark
   b69ca:	4770      	bx	lr
   b69cc:	2003e720 	.word	0x2003e720
   b69d0:	000b7998 	.word	0x000b7998

000b69d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b69d4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b69d6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b69d8:	d902      	bls.n	b69e0 <pinAvailable+0xc>
    return false;
   b69da:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b69dc:	b002      	add	sp, #8
   b69de:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b69e0:	f1a0 030b 	sub.w	r3, r0, #11
   b69e4:	2b02      	cmp	r3, #2
   b69e6:	d81a      	bhi.n	b6a1e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b69e8:	4c17      	ldr	r4, [pc, #92]	; (b6a48 <pinAvailable+0x74>)
   b69ea:	7821      	ldrb	r1, [r4, #0]
   b69ec:	f3bf 8f5b 	dmb	ish
   b69f0:	f011 0101 	ands.w	r1, r1, #1
   b69f4:	d10b      	bne.n	b6a0e <pinAvailable+0x3a>
   b69f6:	4620      	mov	r0, r4
   b69f8:	9101      	str	r1, [sp, #4]
   b69fa:	f7fd fb54 	bl	b40a6 <__cxa_guard_acquire>
   b69fe:	9901      	ldr	r1, [sp, #4]
   b6a00:	b128      	cbz	r0, b6a0e <pinAvailable+0x3a>
   b6a02:	4812      	ldr	r0, [pc, #72]	; (b6a4c <pinAvailable+0x78>)
   b6a04:	f7ff f878 	bl	b5af8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6a08:	4620      	mov	r0, r4
   b6a0a:	f7fd fb51 	bl	b40b0 <__cxa_guard_release>
   b6a0e:	4b0f      	ldr	r3, [pc, #60]	; (b6a4c <pinAvailable+0x78>)
   b6a10:	7818      	ldrb	r0, [r3, #0]
   b6a12:	f7fe ff07 	bl	b5824 <hal_spi_is_enabled>
   b6a16:	2800      	cmp	r0, #0
   b6a18:	d1df      	bne.n	b69da <pinAvailable+0x6>
  return true; // 'pin' is available
   b6a1a:	2001      	movs	r0, #1
   b6a1c:	e7de      	b.n	b69dc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6a1e:	2801      	cmp	r0, #1
   b6a20:	d809      	bhi.n	b6a36 <pinAvailable+0x62>
   b6a22:	f000 f8e7 	bl	b6bf4 <_Z19__fetch_global_Wirev>
   b6a26:	2100      	movs	r1, #0
   b6a28:	7c00      	ldrb	r0, [r0, #16]
   b6a2a:	f7fe feb3 	bl	b5794 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6a2e:	f080 0001 	eor.w	r0, r0, #1
   b6a32:	b2c0      	uxtb	r0, r0
   b6a34:	e7d2      	b.n	b69dc <pinAvailable+0x8>
   b6a36:	3809      	subs	r0, #9
   b6a38:	2801      	cmp	r0, #1
   b6a3a:	d8ee      	bhi.n	b6a1a <pinAvailable+0x46>
   b6a3c:	f000 f89e 	bl	b6b7c <_Z22__fetch_global_Serial1v>
   b6a40:	7c00      	ldrb	r0, [r0, #16]
   b6a42:	f7fe fe67 	bl	b5714 <hal_usart_is_enabled>
   b6a46:	e7f2      	b.n	b6a2e <pinAvailable+0x5a>
   b6a48:	2003e6b8 	.word	0x2003e6b8
   b6a4c:	2003e6bc 	.word	0x2003e6bc

000b6a50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6a50:	2823      	cmp	r0, #35	; 0x23
{
   b6a52:	b538      	push	{r3, r4, r5, lr}
   b6a54:	4604      	mov	r4, r0
   b6a56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6a58:	d80a      	bhi.n	b6a70 <pinMode+0x20>
   b6a5a:	29ff      	cmp	r1, #255	; 0xff
   b6a5c:	d008      	beq.n	b6a70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6a5e:	f7ff ffb9 	bl	b69d4 <pinAvailable>
   b6a62:	b128      	cbz	r0, b6a70 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6a64:	4629      	mov	r1, r5
   b6a66:	4620      	mov	r0, r4
}
   b6a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6a6c:	f7fe bda2 	b.w	b55b4 <HAL_Pin_Mode>
}
   b6a70:	bd38      	pop	{r3, r4, r5, pc}

000b6a72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6a72:	b538      	push	{r3, r4, r5, lr}
   b6a74:	4604      	mov	r4, r0
   b6a76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6a78:	f7fe fda4 	bl	b55c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6a7c:	28ff      	cmp	r0, #255	; 0xff
   b6a7e:	d010      	beq.n	b6aa2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6a80:	2806      	cmp	r0, #6
   b6a82:	d804      	bhi.n	b6a8e <digitalWrite+0x1c>
   b6a84:	234d      	movs	r3, #77	; 0x4d
   b6a86:	fa23 f000 	lsr.w	r0, r3, r0
   b6a8a:	07c3      	lsls	r3, r0, #31
   b6a8c:	d409      	bmi.n	b6aa2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6a8e:	4620      	mov	r0, r4
   b6a90:	f7ff ffa0 	bl	b69d4 <pinAvailable>
   b6a94:	b128      	cbz	r0, b6aa2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6a96:	4629      	mov	r1, r5
   b6a98:	4620      	mov	r0, r4
}
   b6a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6a9e:	f7fe bd99 	b.w	b55d4 <HAL_GPIO_Write>
}
   b6aa2:	bd38      	pop	{r3, r4, r5, pc}

000b6aa4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6aa4:	b510      	push	{r4, lr}
   b6aa6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6aa8:	f7fe fd8c 	bl	b55c4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6aac:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6aae:	b2db      	uxtb	r3, r3
   b6ab0:	2b01      	cmp	r3, #1
   b6ab2:	d908      	bls.n	b6ac6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6ab4:	4620      	mov	r0, r4
   b6ab6:	f7ff ff8d 	bl	b69d4 <pinAvailable>
   b6aba:	b120      	cbz	r0, b6ac6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6abc:	4620      	mov	r0, r4
}
   b6abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6ac2:	f7fe bd8f 	b.w	b55e4 <HAL_GPIO_Read>
}
   b6ac6:	2000      	movs	r0, #0
   b6ac8:	bd10      	pop	{r4, pc}

000b6aca <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6aca:	280d      	cmp	r0, #13
{
   b6acc:	b510      	push	{r4, lr}
   b6ace:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6ad0:	bf9c      	itt	ls
   b6ad2:	340e      	addls	r4, #14
   b6ad4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	f7ff ff7c 	bl	b69d4 <pinAvailable>
   b6adc:	b150      	cbz	r0, b6af4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6ade:	2103      	movs	r1, #3
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	f7fe fd5f 	bl	b55a4 <HAL_Validate_Pin_Function>
   b6ae6:	2803      	cmp	r0, #3
   b6ae8:	d104      	bne.n	b6af4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6aea:	4620      	mov	r0, r4
}
   b6aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6af0:	f7fe bd88 	b.w	b5604 <hal_adc_read>
}
   b6af4:	2000      	movs	r0, #0
   b6af6:	bd10      	pop	{r4, pc}

000b6af8 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b6af8:	b538      	push	{r3, r4, r5, lr}
   b6afa:	4604      	mov	r4, r0
   b6afc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b6afe:	f7ff ff69 	bl	b69d4 <pinAvailable>
   b6b02:	b1f0      	cbz	r0, b6b42 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b6b04:	2104      	movs	r1, #4
   b6b06:	4620      	mov	r0, r4
   b6b08:	f7fe fd4c 	bl	b55a4 <HAL_Validate_Pin_Function>
   b6b0c:	2804      	cmp	r0, #4
   b6b0e:	d105      	bne.n	b6b1c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b6b10:	b2a9      	uxth	r1, r5
   b6b12:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b6b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b6b18:	f7fe bd6c 	b.w	b55f4 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b6b1c:	2102      	movs	r1, #2
   b6b1e:	4620      	mov	r0, r4
   b6b20:	f7fe fd40 	bl	b55a4 <HAL_Validate_Pin_Function>
   b6b24:	2802      	cmp	r0, #2
   b6b26:	d10c      	bne.n	b6b42 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b6b28:	4620      	mov	r0, r4
   b6b2a:	f7fe fd4b 	bl	b55c4 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b6b2e:	2801      	cmp	r0, #1
   b6b30:	d001      	beq.n	b6b36 <_Z11analogWritetm+0x3e>
   b6b32:	2804      	cmp	r0, #4
   b6b34:	d105      	bne.n	b6b42 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b6b36:	4629      	mov	r1, r5
   b6b38:	4620      	mov	r0, r4
}
   b6b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b6b3e:	f7fe bd69 	b.w	b5614 <hal_pwm_write_ext>
}
   b6b42:	bd38      	pop	{r3, r4, r5, pc}

000b6b44 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b44:	4770      	bx	lr
	...

000b6b48 <_Z20acquireSerial1Bufferv>:
{
   b6b48:	b538      	push	{r3, r4, r5, lr}
   b6b4a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6b4c:	2514      	movs	r5, #20
   b6b4e:	462a      	mov	r2, r5
   b6b50:	2100      	movs	r1, #0
   b6b52:	f000 fa0d 	bl	b6f70 <memset>
   b6b56:	8025      	strh	r5, [r4, #0]
   b6b58:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b5a:	4907      	ldr	r1, [pc, #28]	; (b6b78 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6b5c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b5e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6b60:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b62:	f000 f86b 	bl	b6c3c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b66:	4904      	ldr	r1, [pc, #16]	; (b6b78 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6b68:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6b6a:	4628      	mov	r0, r5
   b6b6c:	f000 f866 	bl	b6c3c <_ZnajRKSt9nothrow_t>
    };
   b6b70:	60e0      	str	r0, [r4, #12]
}
   b6b72:	4620      	mov	r0, r4
   b6b74:	bd38      	pop	{r3, r4, r5, pc}
   b6b76:	bf00      	nop
   b6b78:	000b79cc 	.word	0x000b79cc

000b6b7c <_Z22__fetch_global_Serial1v>:
{
   b6b7c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b7e:	4d0e      	ldr	r5, [pc, #56]	; (b6bb8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6b80:	7829      	ldrb	r1, [r5, #0]
   b6b82:	f3bf 8f5b 	dmb	ish
   b6b86:	f011 0401 	ands.w	r4, r1, #1
{
   b6b8a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6b8c:	d111      	bne.n	b6bb2 <_Z22__fetch_global_Serial1v+0x36>
   b6b8e:	4628      	mov	r0, r5
   b6b90:	f7fd fa89 	bl	b40a6 <__cxa_guard_acquire>
   b6b94:	b168      	cbz	r0, b6bb2 <_Z22__fetch_global_Serial1v+0x36>
   b6b96:	a801      	add	r0, sp, #4
   b6b98:	f7ff ffd6 	bl	b6b48 <_Z20acquireSerial1Bufferv>
   b6b9c:	aa01      	add	r2, sp, #4
   b6b9e:	4621      	mov	r1, r4
   b6ba0:	4806      	ldr	r0, [pc, #24]	; (b6bbc <_Z22__fetch_global_Serial1v+0x40>)
   b6ba2:	f7ff fb09 	bl	b61b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6ba6:	4628      	mov	r0, r5
   b6ba8:	f7fd fa82 	bl	b40b0 <__cxa_guard_release>
   b6bac:	4804      	ldr	r0, [pc, #16]	; (b6bc0 <_Z22__fetch_global_Serial1v+0x44>)
   b6bae:	f000 f9c3 	bl	b6f38 <atexit>
    return serial1;
}
   b6bb2:	4802      	ldr	r0, [pc, #8]	; (b6bbc <_Z22__fetch_global_Serial1v+0x40>)
   b6bb4:	b007      	add	sp, #28
   b6bb6:	bd30      	pop	{r4, r5, pc}
   b6bb8:	2003e728 	.word	0x2003e728
   b6bbc:	2003e72c 	.word	0x2003e72c
   b6bc0:	000b6b45 	.word	0x000b6b45

000b6bc4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6bc4:	4770      	bx	lr
	...

000b6bc8 <_Z17acquireWireBufferv>:
{
   b6bc8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6bca:	2520      	movs	r5, #32
   b6bcc:	2314      	movs	r3, #20
{
   b6bce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6bd0:	6003      	str	r3, [r0, #0]
   b6bd2:	6085      	str	r5, [r0, #8]
   b6bd4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6bd6:	4906      	ldr	r1, [pc, #24]	; (b6bf0 <_Z17acquireWireBufferv+0x28>)
   b6bd8:	4628      	mov	r0, r5
   b6bda:	f000 f82f 	bl	b6c3c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6bde:	4904      	ldr	r1, [pc, #16]	; (b6bf0 <_Z17acquireWireBufferv+0x28>)
	};
   b6be0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6be2:	4628      	mov	r0, r5
   b6be4:	f000 f82a 	bl	b6c3c <_ZnajRKSt9nothrow_t>
	};
   b6be8:	60e0      	str	r0, [r4, #12]
}
   b6bea:	4620      	mov	r0, r4
   b6bec:	bd38      	pop	{r3, r4, r5, pc}
   b6bee:	bf00      	nop
   b6bf0:	000b79cc 	.word	0x000b79cc

000b6bf4 <_Z19__fetch_global_Wirev>:
{
   b6bf4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6bf6:	4d0e      	ldr	r5, [pc, #56]	; (b6c30 <_Z19__fetch_global_Wirev+0x3c>)
   b6bf8:	7829      	ldrb	r1, [r5, #0]
   b6bfa:	f3bf 8f5b 	dmb	ish
   b6bfe:	f011 0401 	ands.w	r4, r1, #1
{
   b6c02:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6c04:	d111      	bne.n	b6c2a <_Z19__fetch_global_Wirev+0x36>
   b6c06:	4628      	mov	r0, r5
   b6c08:	f7fd fa4d 	bl	b40a6 <__cxa_guard_acquire>
   b6c0c:	b168      	cbz	r0, b6c2a <_Z19__fetch_global_Wirev+0x36>
   b6c0e:	a801      	add	r0, sp, #4
   b6c10:	f7ff ffda 	bl	b6bc8 <_Z17acquireWireBufferv>
   b6c14:	aa01      	add	r2, sp, #4
   b6c16:	4621      	mov	r1, r4
   b6c18:	4806      	ldr	r0, [pc, #24]	; (b6c34 <_Z19__fetch_global_Wirev+0x40>)
   b6c1a:	f7ff fb0d 	bl	b6238 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6c1e:	4628      	mov	r0, r5
   b6c20:	f7fd fa46 	bl	b40b0 <__cxa_guard_release>
   b6c24:	4804      	ldr	r0, [pc, #16]	; (b6c38 <_Z19__fetch_global_Wirev+0x44>)
   b6c26:	f000 f987 	bl	b6f38 <atexit>
	return wire;
}
   b6c2a:	4802      	ldr	r0, [pc, #8]	; (b6c34 <_Z19__fetch_global_Wirev+0x40>)
   b6c2c:	b007      	add	sp, #28
   b6c2e:	bd30      	pop	{r4, r5, pc}
   b6c30:	2003e744 	.word	0x2003e744
   b6c34:	2003e748 	.word	0x2003e748
   b6c38:	000b6bc5 	.word	0x000b6bc5

000b6c3c <_ZnajRKSt9nothrow_t>:
   b6c3c:	f7fd ba2b 	b.w	b4096 <_Znaj>

000b6c40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6c40:	4901      	ldr	r1, [pc, #4]	; (b6c48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6c42:	f000 b95d 	b.w	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6c46:	bf00      	nop
   b6c48:	000b79e8 	.word	0x000b79e8

000b6c4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b6c4c:	b10a      	cbz	r2, b6c52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b6c4e:	f000 b981 	b.w	b6f54 <memcpy>
   b6c52:	4770      	bx	lr

000b6c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b6c54:	b508      	push	{r3, lr}
   b6c56:	680b      	ldr	r3, [r1, #0]
   b6c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b6c5c:	d302      	bcc.n	b6c64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b6c5e:	480d      	ldr	r0, [pc, #52]	; (b6c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b6c60:	f000 f967 	bl	b6f32 <_ZSt20__throw_length_errorPKc>
   b6c64:	4293      	cmp	r3, r2
   b6c66:	d90b      	bls.n	b6c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b6c68:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b6c6c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b6c70:	d206      	bcs.n	b6c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b6c72:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b6c76:	bf2a      	itet	cs
   b6c78:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b6c7c:	6008      	strcc	r0, [r1, #0]
   b6c7e:	600b      	strcs	r3, [r1, #0]
   b6c80:	6808      	ldr	r0, [r1, #0]
   b6c82:	3001      	adds	r0, #1
   b6c84:	d501      	bpl.n	b6c8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b6c86:	f000 f951 	bl	b6f2c <_ZSt17__throw_bad_allocv>
   b6c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6c8e:	f7fd ba00 	b.w	b4092 <_Znwj>
   b6c92:	bf00      	nop
   b6c94:	000b79f0 	.word	0x000b79f0

000b6c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b6c98:	f850 3b08 	ldr.w	r3, [r0], #8
   b6c9c:	4283      	cmp	r3, r0
   b6c9e:	d002      	beq.n	b6ca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b6ca0:	4618      	mov	r0, r3
   b6ca2:	f7fd b9fa 	b.w	b409a <_ZdlPv>
   b6ca6:	4770      	bx	lr

000b6ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b6ca8:	2a01      	cmp	r2, #1
   b6caa:	b410      	push	{r4}
   b6cac:	d104      	bne.n	b6cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b6cae:	780a      	ldrb	r2, [r1, #0]
   b6cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6cb4:	7002      	strb	r2, [r0, #0]
   b6cb6:	4770      	bx	lr
   b6cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
   b6cbc:	f7ff bfc6 	b.w	b6c4c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b6cc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	1a52      	subs	r2, r2, r1
   b6cc4:	f7ff fff0 	bl	b6ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b6cc8:	bd08      	pop	{r3, pc}

000b6cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b6cca:	4288      	cmp	r0, r1
   b6ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6cce:	4604      	mov	r4, r0
   b6cd0:	460e      	mov	r6, r1
   b6cd2:	d01e      	beq.n	b6d12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b6cd4:	4603      	mov	r3, r0
   b6cd6:	684d      	ldr	r5, [r1, #4]
   b6cd8:	f853 2b08 	ldr.w	r2, [r3], #8
   b6cdc:	429a      	cmp	r2, r3
   b6cde:	bf14      	ite	ne
   b6ce0:	6882      	ldrne	r2, [r0, #8]
   b6ce2:	220f      	moveq	r2, #15
   b6ce4:	42aa      	cmp	r2, r5
   b6ce6:	d20a      	bcs.n	b6cfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b6ce8:	a901      	add	r1, sp, #4
   b6cea:	9501      	str	r5, [sp, #4]
   b6cec:	f7ff ffb2 	bl	b6c54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b6cf0:	4607      	mov	r7, r0
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	f7ff ffd0 	bl	b6c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b6cf8:	9b01      	ldr	r3, [sp, #4]
   b6cfa:	6027      	str	r7, [r4, #0]
   b6cfc:	60a3      	str	r3, [r4, #8]
   b6cfe:	b125      	cbz	r5, b6d0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b6d00:	6831      	ldr	r1, [r6, #0]
   b6d02:	6820      	ldr	r0, [r4, #0]
   b6d04:	462a      	mov	r2, r5
   b6d06:	f7ff ffcf 	bl	b6ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b6d0a:	6823      	ldr	r3, [r4, #0]
   b6d0c:	6065      	str	r5, [r4, #4]
   b6d0e:	2200      	movs	r2, #0
   b6d10:	555a      	strb	r2, [r3, r5]
   b6d12:	b003      	add	sp, #12
   b6d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6d16 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6d16:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6d18:	2400      	movs	r4, #0
   b6d1a:	2310      	movs	r3, #16
   b6d1c:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6d20:	6803      	ldr	r3, [r0, #0]
   b6d22:	4615      	mov	r5, r2
   b6d24:	699e      	ldr	r6, [r3, #24]
   b6d26:	6812      	ldr	r2, [r2, #0]
   b6d28:	466b      	mov	r3, sp
   b6d2a:	e9cd 4400 	strd	r4, r4, [sp]
   b6d2e:	47b0      	blx	r6
   b6d30:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6d34:	f003 0306 	and.w	r3, r3, #6
   b6d38:	2b06      	cmp	r3, #6
   b6d3a:	bf03      	ittte	eq
   b6d3c:	9b00      	ldreq	r3, [sp, #0]
   b6d3e:	602b      	streq	r3, [r5, #0]
   b6d40:	2001      	moveq	r0, #1
   b6d42:	4620      	movne	r0, r4
   b6d44:	b004      	add	sp, #16
   b6d46:	bd70      	pop	{r4, r5, r6, pc}

000b6d48 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6d48:	9800      	ldr	r0, [sp, #0]
   b6d4a:	4290      	cmp	r0, r2
   b6d4c:	bf14      	ite	ne
   b6d4e:	2001      	movne	r0, #1
   b6d50:	2006      	moveq	r0, #6
   b6d52:	4770      	bx	lr

000b6d54 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6d54:	b510      	push	{r4, lr}
   b6d56:	4b03      	ldr	r3, [pc, #12]	; (b6d64 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6d58:	6003      	str	r3, [r0, #0]
   b6d5a:	4604      	mov	r4, r0
   b6d5c:	f000 f8cd 	bl	b6efa <_ZNSt9type_infoD1Ev>
   b6d60:	4620      	mov	r0, r4
   b6d62:	bd10      	pop	{r4, pc}
   b6d64:	000b7a40 	.word	0x000b7a40

000b6d68 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6d68:	b510      	push	{r4, lr}
   b6d6a:	4604      	mov	r4, r0
   b6d6c:	f7ff fff2 	bl	b6d54 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6d70:	4620      	mov	r0, r4
   b6d72:	2108      	movs	r1, #8
   b6d74:	f7fd f995 	bl	b40a2 <_ZdlPvj>
   b6d78:	4620      	mov	r0, r4
   b6d7a:	bd10      	pop	{r4, pc}

000b6d7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d80:	461f      	mov	r7, r3
   b6d82:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6d86:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6d8a:	4598      	cmp	r8, r3
   b6d8c:	4606      	mov	r6, r0
   b6d8e:	4615      	mov	r5, r2
   b6d90:	d107      	bne.n	b6da2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6d92:	9907      	ldr	r1, [sp, #28]
   b6d94:	f000 f8b4 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6d98:	b118      	cbz	r0, b6da2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6d9a:	7165      	strb	r5, [r4, #5]
   b6d9c:	2000      	movs	r0, #0
   b6d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6da2:	4639      	mov	r1, r7
   b6da4:	4630      	mov	r0, r6
   b6da6:	f000 f8ab 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6daa:	2800      	cmp	r0, #0
   b6dac:	d0f6      	beq.n	b6d9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6dae:	2301      	movs	r3, #1
   b6db0:	f8c4 8000 	str.w	r8, [r4]
   b6db4:	7125      	strb	r5, [r4, #4]
   b6db6:	71a3      	strb	r3, [r4, #6]
   b6db8:	e7f0      	b.n	b6d9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6dba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6dba:	b538      	push	{r3, r4, r5, lr}
   b6dbc:	4615      	mov	r5, r2
   b6dbe:	461c      	mov	r4, r3
   b6dc0:	f000 f89e 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6dc4:	b120      	cbz	r0, b6dd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6dc6:	2308      	movs	r3, #8
   b6dc8:	60e3      	str	r3, [r4, #12]
   b6dca:	2306      	movs	r3, #6
   b6dcc:	6025      	str	r5, [r4, #0]
   b6dce:	7123      	strb	r3, [r4, #4]
   b6dd0:	bd38      	pop	{r3, r4, r5, pc}

000b6dd2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6dd4:	4605      	mov	r5, r0
   b6dd6:	460c      	mov	r4, r1
   b6dd8:	9201      	str	r2, [sp, #4]
   b6dda:	461e      	mov	r6, r3
   b6ddc:	f000 f890 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6de0:	b950      	cbnz	r0, b6df8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6de2:	2e03      	cmp	r6, #3
   b6de4:	d808      	bhi.n	b6df8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6de6:	6823      	ldr	r3, [r4, #0]
   b6de8:	9a01      	ldr	r2, [sp, #4]
   b6dea:	695b      	ldr	r3, [r3, #20]
   b6dec:	4629      	mov	r1, r5
   b6dee:	4620      	mov	r0, r4
   b6df0:	b002      	add	sp, #8
   b6df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6df6:	4718      	bx	r3
   b6df8:	b002      	add	sp, #8
   b6dfa:	bd70      	pop	{r4, r5, r6, pc}

000b6dfc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6dfc:	b510      	push	{r4, lr}
   b6dfe:	4b03      	ldr	r3, [pc, #12]	; (b6e0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6e00:	6003      	str	r3, [r0, #0]
   b6e02:	4604      	mov	r4, r0
   b6e04:	f7ff ffa6 	bl	b6d54 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6e08:	4620      	mov	r0, r4
   b6e0a:	bd10      	pop	{r4, pc}
   b6e0c:	000b7aa0 	.word	0x000b7aa0

000b6e10 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6e10:	b510      	push	{r4, lr}
   b6e12:	4604      	mov	r4, r0
   b6e14:	f7ff fff2 	bl	b6dfc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6e18:	4620      	mov	r0, r4
   b6e1a:	210c      	movs	r1, #12
   b6e1c:	f7fd f941 	bl	b40a2 <_ZdlPvj>
   b6e20:	4620      	mov	r0, r4
   b6e22:	bd10      	pop	{r4, pc}

000b6e24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6e26:	9f08      	ldr	r7, [sp, #32]
   b6e28:	4297      	cmp	r7, r2
   b6e2a:	4605      	mov	r5, r0
   b6e2c:	460e      	mov	r6, r1
   b6e2e:	4614      	mov	r4, r2
   b6e30:	d00a      	beq.n	b6e48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6e32:	68a8      	ldr	r0, [r5, #8]
   b6e34:	6802      	ldr	r2, [r0, #0]
   b6e36:	9708      	str	r7, [sp, #32]
   b6e38:	6a15      	ldr	r5, [r2, #32]
   b6e3a:	4631      	mov	r1, r6
   b6e3c:	4622      	mov	r2, r4
   b6e3e:	46ac      	mov	ip, r5
   b6e40:	b003      	add	sp, #12
   b6e42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6e46:	4760      	bx	ip
   b6e48:	4619      	mov	r1, r3
   b6e4a:	9301      	str	r3, [sp, #4]
   b6e4c:	f000 f858 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6e50:	9b01      	ldr	r3, [sp, #4]
   b6e52:	2800      	cmp	r0, #0
   b6e54:	d0ed      	beq.n	b6e32 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6e56:	2006      	movs	r0, #6
   b6e58:	b003      	add	sp, #12
   b6e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6e5c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e60:	460d      	mov	r5, r1
   b6e62:	4619      	mov	r1, r3
   b6e64:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6e68:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6e6c:	4681      	mov	r9, r0
   b6e6e:	4617      	mov	r7, r2
   b6e70:	4698      	mov	r8, r3
   b6e72:	f000 f845 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6e76:	b190      	cbz	r0, b6e9e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6e78:	2d00      	cmp	r5, #0
   b6e7a:	6034      	str	r4, [r6, #0]
   b6e7c:	7137      	strb	r7, [r6, #4]
   b6e7e:	db09      	blt.n	b6e94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6e80:	1961      	adds	r1, r4, r5
   b6e82:	458a      	cmp	sl, r1
   b6e84:	bf0c      	ite	eq
   b6e86:	2106      	moveq	r1, #6
   b6e88:	2101      	movne	r1, #1
   b6e8a:	71b1      	strb	r1, [r6, #6]
   b6e8c:	2000      	movs	r0, #0
   b6e8e:	b001      	add	sp, #4
   b6e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e94:	3502      	adds	r5, #2
   b6e96:	d1f9      	bne.n	b6e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6e98:	2301      	movs	r3, #1
   b6e9a:	71b3      	strb	r3, [r6, #6]
   b6e9c:	e7f6      	b.n	b6e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6e9e:	4554      	cmp	r4, sl
   b6ea0:	d106      	bne.n	b6eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6ea2:	4659      	mov	r1, fp
   b6ea4:	4648      	mov	r0, r9
   b6ea6:	f000 f82b 	bl	b6f00 <_ZNKSt9type_infoeqERKS_>
   b6eaa:	b108      	cbz	r0, b6eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6eac:	7177      	strb	r7, [r6, #5]
   b6eae:	e7ed      	b.n	b6e8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6eb0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6eb4:	6803      	ldr	r3, [r0, #0]
   b6eb6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6eba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6ebe:	69dc      	ldr	r4, [r3, #28]
   b6ec0:	463a      	mov	r2, r7
   b6ec2:	4643      	mov	r3, r8
   b6ec4:	4629      	mov	r1, r5
   b6ec6:	46a4      	mov	ip, r4
   b6ec8:	b001      	add	sp, #4
   b6eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ece:	4760      	bx	ip

000b6ed0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ed4:	4607      	mov	r7, r0
   b6ed6:	460c      	mov	r4, r1
   b6ed8:	4615      	mov	r5, r2
   b6eda:	461e      	mov	r6, r3
   b6edc:	f7ff ff6d 	bl	b6dba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6ee0:	b948      	cbnz	r0, b6ef6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6ee2:	68b8      	ldr	r0, [r7, #8]
   b6ee4:	6803      	ldr	r3, [r0, #0]
   b6ee6:	699f      	ldr	r7, [r3, #24]
   b6ee8:	462a      	mov	r2, r5
   b6eea:	4633      	mov	r3, r6
   b6eec:	4621      	mov	r1, r4
   b6eee:	46bc      	mov	ip, r7
   b6ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6ef4:	4760      	bx	ip
   b6ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6efa <_ZNSt9type_infoD1Ev>:
   b6efa:	4770      	bx	lr

000b6efc <_ZNKSt9type_info14__is_pointer_pEv>:
   b6efc:	2000      	movs	r0, #0
   b6efe:	4770      	bx	lr

000b6f00 <_ZNKSt9type_infoeqERKS_>:
   b6f00:	4281      	cmp	r1, r0
   b6f02:	b508      	push	{r3, lr}
   b6f04:	d00e      	beq.n	b6f24 <_ZNKSt9type_infoeqERKS_+0x24>
   b6f06:	6840      	ldr	r0, [r0, #4]
   b6f08:	7803      	ldrb	r3, [r0, #0]
   b6f0a:	2b2a      	cmp	r3, #42	; 0x2a
   b6f0c:	d00c      	beq.n	b6f28 <_ZNKSt9type_infoeqERKS_+0x28>
   b6f0e:	6849      	ldr	r1, [r1, #4]
   b6f10:	780b      	ldrb	r3, [r1, #0]
   b6f12:	2b2a      	cmp	r3, #42	; 0x2a
   b6f14:	bf08      	it	eq
   b6f16:	3101      	addeq	r1, #1
   b6f18:	f000 f860 	bl	b6fdc <strcmp>
   b6f1c:	fab0 f080 	clz	r0, r0
   b6f20:	0940      	lsrs	r0, r0, #5
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	2001      	movs	r0, #1
   b6f26:	e7fc      	b.n	b6f22 <_ZNKSt9type_infoeqERKS_+0x22>
   b6f28:	2000      	movs	r0, #0
   b6f2a:	e7fa      	b.n	b6f22 <_ZNKSt9type_infoeqERKS_+0x22>

000b6f2c <_ZSt17__throw_bad_allocv>:
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	f7fe fd85 	bl	b5a3c <abort>

000b6f32 <_ZSt20__throw_length_errorPKc>:
   b6f32:	b508      	push	{r3, lr}
   b6f34:	f7fe fd82 	bl	b5a3c <abort>

000b6f38 <atexit>:
   b6f38:	2300      	movs	r3, #0
   b6f3a:	4601      	mov	r1, r0
   b6f3c:	461a      	mov	r2, r3
   b6f3e:	4618      	mov	r0, r3
   b6f40:	f000 b8fe 	b.w	b7140 <__register_exitproc>

000b6f44 <atoi>:
   b6f44:	220a      	movs	r2, #10
   b6f46:	2100      	movs	r1, #0
   b6f48:	f000 b8f0 	b.w	b712c <strtol>

000b6f4c <atol>:
   b6f4c:	220a      	movs	r2, #10
   b6f4e:	2100      	movs	r1, #0
   b6f50:	f000 b8ec 	b.w	b712c <strtol>

000b6f54 <memcpy>:
   b6f54:	440a      	add	r2, r1
   b6f56:	4291      	cmp	r1, r2
   b6f58:	f100 33ff 	add.w	r3, r0, #4294967295
   b6f5c:	d100      	bne.n	b6f60 <memcpy+0xc>
   b6f5e:	4770      	bx	lr
   b6f60:	b510      	push	{r4, lr}
   b6f62:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6f66:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6f6a:	4291      	cmp	r1, r2
   b6f6c:	d1f9      	bne.n	b6f62 <memcpy+0xe>
   b6f6e:	bd10      	pop	{r4, pc}

000b6f70 <memset>:
   b6f70:	4402      	add	r2, r0
   b6f72:	4603      	mov	r3, r0
   b6f74:	4293      	cmp	r3, r2
   b6f76:	d100      	bne.n	b6f7a <memset+0xa>
   b6f78:	4770      	bx	lr
   b6f7a:	f803 1b01 	strb.w	r1, [r3], #1
   b6f7e:	e7f9      	b.n	b6f74 <memset+0x4>

000b6f80 <srand>:
   b6f80:	b538      	push	{r3, r4, r5, lr}
   b6f82:	4b10      	ldr	r3, [pc, #64]	; (b6fc4 <srand+0x44>)
   b6f84:	681d      	ldr	r5, [r3, #0]
   b6f86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f88:	4604      	mov	r4, r0
   b6f8a:	b9b3      	cbnz	r3, b6fba <srand+0x3a>
   b6f8c:	2018      	movs	r0, #24
   b6f8e:	f7fe fd35 	bl	b59fc <malloc>
   b6f92:	4602      	mov	r2, r0
   b6f94:	63a8      	str	r0, [r5, #56]	; 0x38
   b6f96:	b920      	cbnz	r0, b6fa2 <srand+0x22>
   b6f98:	4b0b      	ldr	r3, [pc, #44]	; (b6fc8 <srand+0x48>)
   b6f9a:	480c      	ldr	r0, [pc, #48]	; (b6fcc <srand+0x4c>)
   b6f9c:	2142      	movs	r1, #66	; 0x42
   b6f9e:	f7fe fd5d 	bl	b5a5c <__assert_func>
   b6fa2:	490b      	ldr	r1, [pc, #44]	; (b6fd0 <srand+0x50>)
   b6fa4:	4b0b      	ldr	r3, [pc, #44]	; (b6fd4 <srand+0x54>)
   b6fa6:	e9c0 1300 	strd	r1, r3, [r0]
   b6faa:	4b0b      	ldr	r3, [pc, #44]	; (b6fd8 <srand+0x58>)
   b6fac:	6083      	str	r3, [r0, #8]
   b6fae:	230b      	movs	r3, #11
   b6fb0:	8183      	strh	r3, [r0, #12]
   b6fb2:	2100      	movs	r1, #0
   b6fb4:	2001      	movs	r0, #1
   b6fb6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6fba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6fbc:	2200      	movs	r2, #0
   b6fbe:	611c      	str	r4, [r3, #16]
   b6fc0:	615a      	str	r2, [r3, #20]
   b6fc2:	bd38      	pop	{r3, r4, r5, pc}
   b6fc4:	2003e2c0 	.word	0x2003e2c0
   b6fc8:	000b7ad9 	.word	0x000b7ad9
   b6fcc:	000b7af0 	.word	0x000b7af0
   b6fd0:	abcd330e 	.word	0xabcd330e
   b6fd4:	e66d1234 	.word	0xe66d1234
   b6fd8:	0005deec 	.word	0x0005deec

000b6fdc <strcmp>:
   b6fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6fe4:	2a01      	cmp	r2, #1
   b6fe6:	bf28      	it	cs
   b6fe8:	429a      	cmpcs	r2, r3
   b6fea:	d0f7      	beq.n	b6fdc <strcmp>
   b6fec:	1ad0      	subs	r0, r2, r3
   b6fee:	4770      	bx	lr

000b6ff0 <strlen>:
   b6ff0:	4603      	mov	r3, r0
   b6ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6ff6:	2a00      	cmp	r2, #0
   b6ff8:	d1fb      	bne.n	b6ff2 <strlen+0x2>
   b6ffa:	1a18      	subs	r0, r3, r0
   b6ffc:	3801      	subs	r0, #1
   b6ffe:	4770      	bx	lr

000b7000 <strncpy>:
   b7000:	b510      	push	{r4, lr}
   b7002:	3901      	subs	r1, #1
   b7004:	4603      	mov	r3, r0
   b7006:	b132      	cbz	r2, b7016 <strncpy+0x16>
   b7008:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b700c:	f803 4b01 	strb.w	r4, [r3], #1
   b7010:	3a01      	subs	r2, #1
   b7012:	2c00      	cmp	r4, #0
   b7014:	d1f7      	bne.n	b7006 <strncpy+0x6>
   b7016:	441a      	add	r2, r3
   b7018:	2100      	movs	r1, #0
   b701a:	4293      	cmp	r3, r2
   b701c:	d100      	bne.n	b7020 <strncpy+0x20>
   b701e:	bd10      	pop	{r4, pc}
   b7020:	f803 1b01 	strb.w	r1, [r3], #1
   b7024:	e7f9      	b.n	b701a <strncpy+0x1a>
	...

000b7028 <_strtol_l.constprop.0>:
   b7028:	2b01      	cmp	r3, #1
   b702a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b702e:	d001      	beq.n	b7034 <_strtol_l.constprop.0+0xc>
   b7030:	2b24      	cmp	r3, #36	; 0x24
   b7032:	d906      	bls.n	b7042 <_strtol_l.constprop.0+0x1a>
   b7034:	f7fe fd0a 	bl	b5a4c <__errno>
   b7038:	2316      	movs	r3, #22
   b703a:	6003      	str	r3, [r0, #0]
   b703c:	2000      	movs	r0, #0
   b703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7042:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7128 <_strtol_l.constprop.0+0x100>
   b7046:	460d      	mov	r5, r1
   b7048:	462e      	mov	r6, r5
   b704a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b704e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7052:	f017 0708 	ands.w	r7, r7, #8
   b7056:	d1f7      	bne.n	b7048 <_strtol_l.constprop.0+0x20>
   b7058:	2c2d      	cmp	r4, #45	; 0x2d
   b705a:	d132      	bne.n	b70c2 <_strtol_l.constprop.0+0x9a>
   b705c:	782c      	ldrb	r4, [r5, #0]
   b705e:	2701      	movs	r7, #1
   b7060:	1cb5      	adds	r5, r6, #2
   b7062:	2b00      	cmp	r3, #0
   b7064:	d05b      	beq.n	b711e <_strtol_l.constprop.0+0xf6>
   b7066:	2b10      	cmp	r3, #16
   b7068:	d109      	bne.n	b707e <_strtol_l.constprop.0+0x56>
   b706a:	2c30      	cmp	r4, #48	; 0x30
   b706c:	d107      	bne.n	b707e <_strtol_l.constprop.0+0x56>
   b706e:	782c      	ldrb	r4, [r5, #0]
   b7070:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7074:	2c58      	cmp	r4, #88	; 0x58
   b7076:	d14d      	bne.n	b7114 <_strtol_l.constprop.0+0xec>
   b7078:	786c      	ldrb	r4, [r5, #1]
   b707a:	2310      	movs	r3, #16
   b707c:	3502      	adds	r5, #2
   b707e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7082:	f108 38ff 	add.w	r8, r8, #4294967295
   b7086:	f04f 0c00 	mov.w	ip, #0
   b708a:	fbb8 f9f3 	udiv	r9, r8, r3
   b708e:	4666      	mov	r6, ip
   b7090:	fb03 8a19 	mls	sl, r3, r9, r8
   b7094:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7098:	f1be 0f09 	cmp.w	lr, #9
   b709c:	d816      	bhi.n	b70cc <_strtol_l.constprop.0+0xa4>
   b709e:	4674      	mov	r4, lr
   b70a0:	42a3      	cmp	r3, r4
   b70a2:	dd24      	ble.n	b70ee <_strtol_l.constprop.0+0xc6>
   b70a4:	f1bc 0f00 	cmp.w	ip, #0
   b70a8:	db1e      	blt.n	b70e8 <_strtol_l.constprop.0+0xc0>
   b70aa:	45b1      	cmp	r9, r6
   b70ac:	d31c      	bcc.n	b70e8 <_strtol_l.constprop.0+0xc0>
   b70ae:	d101      	bne.n	b70b4 <_strtol_l.constprop.0+0x8c>
   b70b0:	45a2      	cmp	sl, r4
   b70b2:	db19      	blt.n	b70e8 <_strtol_l.constprop.0+0xc0>
   b70b4:	fb06 4603 	mla	r6, r6, r3, r4
   b70b8:	f04f 0c01 	mov.w	ip, #1
   b70bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b70c0:	e7e8      	b.n	b7094 <_strtol_l.constprop.0+0x6c>
   b70c2:	2c2b      	cmp	r4, #43	; 0x2b
   b70c4:	bf04      	itt	eq
   b70c6:	782c      	ldrbeq	r4, [r5, #0]
   b70c8:	1cb5      	addeq	r5, r6, #2
   b70ca:	e7ca      	b.n	b7062 <_strtol_l.constprop.0+0x3a>
   b70cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b70d0:	f1be 0f19 	cmp.w	lr, #25
   b70d4:	d801      	bhi.n	b70da <_strtol_l.constprop.0+0xb2>
   b70d6:	3c37      	subs	r4, #55	; 0x37
   b70d8:	e7e2      	b.n	b70a0 <_strtol_l.constprop.0+0x78>
   b70da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b70de:	f1be 0f19 	cmp.w	lr, #25
   b70e2:	d804      	bhi.n	b70ee <_strtol_l.constprop.0+0xc6>
   b70e4:	3c57      	subs	r4, #87	; 0x57
   b70e6:	e7db      	b.n	b70a0 <_strtol_l.constprop.0+0x78>
   b70e8:	f04f 3cff 	mov.w	ip, #4294967295
   b70ec:	e7e6      	b.n	b70bc <_strtol_l.constprop.0+0x94>
   b70ee:	f1bc 0f00 	cmp.w	ip, #0
   b70f2:	da05      	bge.n	b7100 <_strtol_l.constprop.0+0xd8>
   b70f4:	2322      	movs	r3, #34	; 0x22
   b70f6:	6003      	str	r3, [r0, #0]
   b70f8:	4646      	mov	r6, r8
   b70fa:	b942      	cbnz	r2, b710e <_strtol_l.constprop.0+0xe6>
   b70fc:	4630      	mov	r0, r6
   b70fe:	e79e      	b.n	b703e <_strtol_l.constprop.0+0x16>
   b7100:	b107      	cbz	r7, b7104 <_strtol_l.constprop.0+0xdc>
   b7102:	4276      	negs	r6, r6
   b7104:	2a00      	cmp	r2, #0
   b7106:	d0f9      	beq.n	b70fc <_strtol_l.constprop.0+0xd4>
   b7108:	f1bc 0f00 	cmp.w	ip, #0
   b710c:	d000      	beq.n	b7110 <_strtol_l.constprop.0+0xe8>
   b710e:	1e69      	subs	r1, r5, #1
   b7110:	6011      	str	r1, [r2, #0]
   b7112:	e7f3      	b.n	b70fc <_strtol_l.constprop.0+0xd4>
   b7114:	2430      	movs	r4, #48	; 0x30
   b7116:	2b00      	cmp	r3, #0
   b7118:	d1b1      	bne.n	b707e <_strtol_l.constprop.0+0x56>
   b711a:	2308      	movs	r3, #8
   b711c:	e7af      	b.n	b707e <_strtol_l.constprop.0+0x56>
   b711e:	2c30      	cmp	r4, #48	; 0x30
   b7120:	d0a5      	beq.n	b706e <_strtol_l.constprop.0+0x46>
   b7122:	230a      	movs	r3, #10
   b7124:	e7ab      	b.n	b707e <_strtol_l.constprop.0+0x56>
   b7126:	bf00      	nop
   b7128:	000b7b6e 	.word	0x000b7b6e

000b712c <strtol>:
   b712c:	4613      	mov	r3, r2
   b712e:	460a      	mov	r2, r1
   b7130:	4601      	mov	r1, r0
   b7132:	4802      	ldr	r0, [pc, #8]	; (b713c <strtol+0x10>)
   b7134:	6800      	ldr	r0, [r0, #0]
   b7136:	f7ff bf77 	b.w	b7028 <_strtol_l.constprop.0>
   b713a:	bf00      	nop
   b713c:	2003e2c0 	.word	0x2003e2c0

000b7140 <__register_exitproc>:
   b7140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7144:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7200 <__register_exitproc+0xc0>
   b7148:	4606      	mov	r6, r0
   b714a:	f8d8 0000 	ldr.w	r0, [r8]
   b714e:	461f      	mov	r7, r3
   b7150:	460d      	mov	r5, r1
   b7152:	4691      	mov	r9, r2
   b7154:	f000 f856 	bl	b7204 <__retarget_lock_acquire_recursive>
   b7158:	4b25      	ldr	r3, [pc, #148]	; (b71f0 <__register_exitproc+0xb0>)
   b715a:	681c      	ldr	r4, [r3, #0]
   b715c:	b934      	cbnz	r4, b716c <__register_exitproc+0x2c>
   b715e:	4c25      	ldr	r4, [pc, #148]	; (b71f4 <__register_exitproc+0xb4>)
   b7160:	601c      	str	r4, [r3, #0]
   b7162:	4b25      	ldr	r3, [pc, #148]	; (b71f8 <__register_exitproc+0xb8>)
   b7164:	b113      	cbz	r3, b716c <__register_exitproc+0x2c>
   b7166:	681b      	ldr	r3, [r3, #0]
   b7168:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b716c:	6863      	ldr	r3, [r4, #4]
   b716e:	2b1f      	cmp	r3, #31
   b7170:	dd07      	ble.n	b7182 <__register_exitproc+0x42>
   b7172:	f8d8 0000 	ldr.w	r0, [r8]
   b7176:	f000 f847 	bl	b7208 <__retarget_lock_release_recursive>
   b717a:	f04f 30ff 	mov.w	r0, #4294967295
   b717e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7182:	b34e      	cbz	r6, b71d8 <__register_exitproc+0x98>
   b7184:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7188:	b988      	cbnz	r0, b71ae <__register_exitproc+0x6e>
   b718a:	4b1c      	ldr	r3, [pc, #112]	; (b71fc <__register_exitproc+0xbc>)
   b718c:	b923      	cbnz	r3, b7198 <__register_exitproc+0x58>
   b718e:	f8d8 0000 	ldr.w	r0, [r8]
   b7192:	f000 f838 	bl	b7206 <__retarget_lock_release>
   b7196:	e7f0      	b.n	b717a <__register_exitproc+0x3a>
   b7198:	f44f 7084 	mov.w	r0, #264	; 0x108
   b719c:	f7fe fc2e 	bl	b59fc <malloc>
   b71a0:	2800      	cmp	r0, #0
   b71a2:	d0f4      	beq.n	b718e <__register_exitproc+0x4e>
   b71a4:	2300      	movs	r3, #0
   b71a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b71aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b71ae:	6863      	ldr	r3, [r4, #4]
   b71b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b71b4:	2201      	movs	r2, #1
   b71b6:	409a      	lsls	r2, r3
   b71b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b71bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b71c0:	4313      	orrs	r3, r2
   b71c2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b71c6:	2e02      	cmp	r6, #2
   b71c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b71cc:	bf02      	ittt	eq
   b71ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b71d2:	4313      	orreq	r3, r2
   b71d4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b71d8:	6863      	ldr	r3, [r4, #4]
   b71da:	f8d8 0000 	ldr.w	r0, [r8]
   b71de:	1c5a      	adds	r2, r3, #1
   b71e0:	3302      	adds	r3, #2
   b71e2:	6062      	str	r2, [r4, #4]
   b71e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b71e8:	f000 f80e 	bl	b7208 <__retarget_lock_release_recursive>
   b71ec:	2000      	movs	r0, #0
   b71ee:	e7c6      	b.n	b717e <__register_exitproc+0x3e>
   b71f0:	2003e7e8 	.word	0x2003e7e8
   b71f4:	2003e75c 	.word	0x2003e75c
   b71f8:	00000000 	.word	0x00000000
   b71fc:	000b59fd 	.word	0x000b59fd
   b7200:	2003e324 	.word	0x2003e324

000b7204 <__retarget_lock_acquire_recursive>:
   b7204:	4770      	bx	lr

000b7206 <__retarget_lock_release>:
   b7206:	4770      	bx	lr

000b7208 <__retarget_lock_release_recursive>:
   b7208:	4770      	bx	lr

000b720a <link_code_end>:
	...

000b720c <dynalib_user>:
   b720c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b721c:	0000 0000 6925 2500 696c 6900 006e 756f     ....%i.%li.in.ou
   b722c:	0074 7770 006d 7764 6100 0077 6961 7072     t.pwm.dw.aw.airp
   b723c:	726f 2f74 6572 7571 7365 0074 6f63 6e6e     ort/request.conn
   b724c:	6365 6574 7764 7265 2500 6c6c 0075 0062     ectedwer.%llu.b.
   b725c:	6d74 6c70 5400 504d 324c 3733 6854 4539     tmpl.TMPL237Th9E
   b726c:	454c 6300 6e6f 656e 7463 6465 4e00 306a     LE.connected.Nj0
   b727c:	7a5f 6473 424c 4b6b 4f62 7573 695f 6279     _zsdLBkKbOsu_iyb
   b728c:	4646 614e 6344 4472 7268 6633 0051 6c62     FFNaDcrDhr3fQ.bl
   b729c:	6e79 2e6b 6c63 756f 0064 6961 7072 726f     ynk.cloud.airpor
   b72ac:	2f74 0023 5441 004c 4f42 0053 5742 0049     t/#.ATL.BOS.BWI.
   b72bc:	4c43 0045 4c43 0054 5643 0047 4344 0041     CLE.CLT.CVG.DCA.
   b72cc:	4544 004e 4644 0057 5444 0057 5745 0052     DEN.DFW.DTW.EWR.
   b72dc:	4c46 004c 4149 0044 4149 0048 464a 004b     FLL.IAD.IAH.JFK.
   b72ec:	414c 0053 414c 0058 474c 0041 434d 004f     LAS.LAX.LGA.MCO.
   b72fc:	444d 0057 454d 004d 494d 0041 534d 0050     MDW.MEM.MIA.MSP.
   b730c:	524f 0044 4450 0058 4850 004c 4850 0058     ORD.PDX.PHL.PHX.
   b731c:	4950 0054 4153 004e 4553 0041 4653 004f     PIT.SAN.SEA.SFO.
   b732c:	4c53 0043 5453 004c 5054 0041 616c 2e62     SLC.STL.TPA.lab.
   b733c:	6874 7765 6c63 632e 6d6f                     thewcl.com.

000b7347 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b7347:	6c62 6b6e 6e69 0066 636d 0075 2e30 2e30     blnkinf.mcu.0.0.
   b7357:	0030 7766 742d 7079 0065 4d54 4c50 3332     0.fw-type.TMPL23
   b7367:	5437 3968 4c45 0045 7562 6c69 0064 634f     7Th9ELE.build.Oc
   b7377:	2074 3131 3220 3230 2033 3232 353a 3a35     t 11 2023 22:55:
   b7387:	3632 6200 796c 6b6e 3100 332e 322e 6800     26.blynk.1.3.2.h
   b7397:	622d 6165 0074 3534 6200 6675 2d66 6e69     -beat.45.buff-in
   b73a7:	3100 3230 0034 6564 0076 6150 7472 6369     .1024.dev.Partic
   b73b7:	656c 4120 6772 6e6f 0000 0000 4d04 5451     le Argon.....MQT
   b73c7:	0454 0600 514d 7349 7064 0003                T...MQIsdp...

000b73d4 <_ZL22BlynkReadHandlerVector>:
   b73d4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b73e4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b73f4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7404:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7414:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7424:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7434:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7444:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7454:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7464:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7474:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7484:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7494:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74a4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74b4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74c4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74d4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74e4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b74f4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7504:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7514:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7524:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7534:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7544:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7554:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7564:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7574:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7584:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b7594:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b75a4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b75b4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..
   b75c4:	5555 000b 5555 000b 5555 000b 5555 000b     UU..UU..UU..UU..

000b75d4 <_ZL23BlynkWriteHandlerVector>:
   b75d4:	5557 000b 42e9 000b 5557 000b 5557 000b     WU...B..WU..WU..
   b75e4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b75f4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7604:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7614:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7624:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7634:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7644:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7654:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7664:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7674:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7684:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7694:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76a4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76b4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76c4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76d4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76e4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b76f4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7704:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7714:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7724:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7734:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7744:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7754:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7764:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7774:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7784:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b7794:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b77a4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b77b4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..
   b77c4:	5557 000b 5557 000b 5557 000b 5557 000b     WU..WU..WU..WU..

000b77d4 <_ZTVN5spark13EthernetClassE>:
	...
   b77dc:	5adb 000b 5ad1 000b 5ac7 000b 5abd 000b     .Z...Z...Z...Z..
   b77ec:	5ab1 000b 5aa5 000b 68b1 000b 68b9 000b     .Z...Z...h...h..
   b77fc:	5a99 000b 5a91 000b 5a87 000b 5a7d 000b     .Z...Z...Z..}Z..
   b780c:	68e9 000b                                   .h..

000b7810 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7818:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7828:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7838 <_ZTV9IPAddress>:
	...
   b7840:	5f29 000b 5f19 000b 5f1b 000b               )_..._..._..

000b784c <_ZTV9USBSerial>:
	...
   b7854:	603b 000b 60a3 000b 6079 000b 5c69 000b     ;`...`..y`..i\..
   b7864:	606b 000b 603d 000b 604d 000b 609d 000b     k`..=`..M`...`..
   b7874:	605d 000b 6035 000b                         ]`..5`..

000b787c <_ZTV11USARTSerial>:
	...
   b7884:	613d 000b 61a9 000b 6181 000b 5c69 000b     =a...a...a..i\..
   b7894:	6151 000b 616d 000b 615f 000b 617b 000b     Qa..ma.._a..{a..
   b78a4:	613f 000b 6143 000b                         ?a..Ca..

000b78ac <_ZTV7TwoWire>:
	...
   b78b4:	61e1 000b 622b 000b 6203 000b 61e3 000b     .a..+b...b...a..
   b78c4:	620b 000b 6213 000b 621b 000b 6223 000b     .b...b...b..#b..
   b78d4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b78e4:	2072 203d 6425 0000                         r = %d..

000b78ec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b78f4:	62e1 000b 6305 000b 67ef 000b 6313 000b     .b...c...g...c..
   b7904:	62e5 000b                                   .b..

000b7908 <_ZTV9TCPClient>:
	...
   b7910:	5da9 000b 5dc1 000b 625d 000b 6277 000b     .]...]..]b..wb..
   b7920:	6685 000b 62a1 000b 64fb 000b 62d5 000b     .f...b...d...b..
   b7930:	658d 000b 63cd 000b 6529 000b 6739 000b     .e...c..)e..9g..
   b7940:	64c9 000b 62d7 000b 6289 000b 6319 000b     .d...b...b...c..
   b7950:	63ad 000b                                   .c..

000b7954 <_ZTVN5spark9WiFiClassE>:
	...
   b795c:	6853 000b 6849 000b 683f 000b 67f5 000b     Sh..Ih..?h...g..
   b796c:	6833 000b 6827 000b 68b1 000b 68b9 000b     3h..'h...h...h..
   b797c:	681b 000b 6813 000b 6809 000b 67ff 000b     .h...h...h...g..
   b798c:	68e9 000b                                   .h..

000b7990 <_ZTVN5spark12NetworkClassE>:
	...
   b7998:	6871 000b 687b 000b 6885 000b 688f 000b     qh..{h...h...h..
   b79a8:	6899 000b 68a5 000b 68b1 000b 68b9 000b     .h...h...h...h..
   b79b8:	68c1 000b 68cd 000b 68d5 000b 68df 000b     .h...h...h...h..
   b79c8:	68e9 000b                                   .h..

000b79cc <_ZSt7nothrow>:
	...

000b79cd <_ZTSSt19_Sp_make_shared_tag>:
   b79cd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b79dd:	6572 5f64 6174 0067 0000                     red_tag....

000b79e8 <_ZTISt19_Sp_make_shared_tag>:
   b79e8:	7a40 000b 79cd 000b 6162 6973 5f63 7473     @z...y..basic_st
   b79f8:	6972 676e 3a3a 4d5f 635f 6572 7461 0065     ring::_M_create.

000b7a08 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7a08:	7aa0 000b 7a14 000b 7ac4 000b               .z...z...z..

000b7a14 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7a14:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7a24:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7a34:	0045 0000                                   E...

000b7a38 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7a38:	0000 0000 7a08 000b 6d55 000b 6d69 000b     .....z..Um..im..
   b7a48:	6efd 000b 6efd 000b 6dd3 000b 6d17 000b     .n...n...m...m..
   b7a58:	6dbb 000b 6d7d 000b 6d49 000b               .m..}m..Im..

000b7a64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7a64:	7aa0 000b 7a70 000b 7a08 000b               .z..pz...z..

000b7a70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7a70:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7a80:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7a90:	666e 456f 0000 0000                         nfoE....

000b7a98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7a98:	0000 0000 7a64 000b 6dfd 000b 6e11 000b     ....dz...m...n..
   b7aa8:	6efd 000b 6efd 000b 6dd3 000b 6d17 000b     .n...n...m...m..
   b7ab8:	6ed1 000b 6e5d 000b 6e25 000b               .n..]n..%n..

000b7ac4 <_ZTISt9type_info>:
   b7ac4:	7a40 000b 7acc 000b                         @z...z..

000b7acc <_ZTSSt9type_info>:
   b7acc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7adc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7aec:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7afc:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7b0c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7b1c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7b2c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7b3c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7b4c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7b5c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7b6d <_ctype_>:
   b7b6d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7b7d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7b8d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7b9d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7bad:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7bbd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7bcd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7bdd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7bed:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7c6e <link_const_variable_data_end>:
	...

000b7c70 <link_constructors_location>:
   b7c70:	000b4cc9 	.word	0x000b4cc9
   b7c74:	000b5ae5 	.word	0x000b5ae5
   b7c78:	000b5b0d 	.word	0x000b5b0d
   b7c7c:	000b5c59 	.word	0x000b5c59
   b7c80:	000b5d7d 	.word	0x000b5d7d
   b7c84:	000b5d8d 	.word	0x000b5d8d
   b7c88:	000b5dd5 	.word	0x000b5dd5
   b7c8c:	000b685d 	.word	0x000b685d
   b7c90:	000b69c1 	.word	0x000b69c1

000b7c94 <link_constructors_end>:
	...
