
c:/Users/aiden/Desktop/IoT-Engineering/metarTracking/target/3.3.0/argon/metarTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009110  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd130  000bd130  0000d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd154  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e0c8  000bd158  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000054c  2003e2a8  2003e2a8  0002e2a8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bd334  000bd334  0002d334  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bd35c  000bd35c  0002d35c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0017414f  00000000  00000000  0002d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00019dda  00000000  00000000  001a14af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c3b8  00000000  00000000  001bb289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003668  00000000  00000000  00207641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c0f8  00000000  00000000  0020aca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046c14  00000000  00000000  00216da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00059f07  00000000  00000000  0025d9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00142135  00000000  00000000  002b78bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd70  00000000  00000000  003f99f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 fb75 	bl	b9720 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 fb97 	bl	b9770 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0c8 	.word	0x2003e0c8
   b404c:	000bd158 	.word	0x000bd158
   b4050:	2003e2a4 	.word	0x2003e2a4
   b4054:	2003e2a8 	.word	0x2003e2a8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fb3b 	bl	b76dc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd10c 	.word	0x000bd10c
   b4080:	000bd130 	.word	0x000bd130

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 beda 	b.w	b4e3c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd8d 	bl	b4ba8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 badb 	b.w	b764c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 bfd9 	b.w	b704c <malloc>

000b409a <_Znaj>:
   b409a:	f002 bfd7 	b.w	b704c <malloc>

000b409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409e:	f002 bfdd 	b.w	b705c <free>

000b40a2 <_ZdaPv>:
   b40a2:	f002 bfdb 	b.w	b705c <free>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f002 bfd9 	b.w	b705c <free>
	...

000b40ac <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ae:	4a03      	ldr	r2, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x10>)
   b40b0:	4903      	ldr	r1, [pc, #12]	; (b40c0 <__cxa_pure_virtual+0x14>)
   b40b2:	200c      	movs	r0, #12
   b40b4:	f002 ff16 	bl	b6ee4 <panic_>
  while (1);
   b40b8:	e7fe      	b.n	b40b8 <__cxa_pure_virtual+0xc>
   b40ba:	bf00      	nop
   b40bc:	000b6bc5 	.word	0x000b6bc5
   b40c0:	000bb7a8 	.word	0x000bb7a8

000b40c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c4:	7800      	ldrb	r0, [r0, #0]
   b40c6:	fab0 f080 	clz	r0, r0
   b40ca:	0940      	lsrs	r0, r0, #5
   b40cc:	4770      	bx	lr

000b40ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ce:	2301      	movs	r3, #1
   b40d0:	7003      	strb	r3, [r0, #0]
   b40d2:	4770      	bx	lr

000b40d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>:
       *  @a str is a valid, but unspecified string.
       **/
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2063. Contradictory requirements for string move assignment
      basic_string&
      operator=(basic_string&& __str)
   b40d4:	b570      	push	{r4, r5, r6, lr}
      { return _M_dataplus._M_p; }
   b40d6:	460b      	mov	r3, r1
      operator=(basic_string&& __str)
   b40d8:	460c      	mov	r4, r1
      { return _M_dataplus._M_p; }
   b40da:	f853 1b08 	ldr.w	r1, [r3], #8
	    _M_set_length(0);
	  }
	// Replace allocator if POCMA is true.
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

	if (__str._M_is_local())
   b40de:	4299      	cmp	r1, r3
      operator=(basic_string&& __str)
   b40e0:	4605      	mov	r5, r0
      { return _M_dataplus._M_p; }
   b40e2:	6800      	ldr	r0, [r0, #0]
	if (__str._M_is_local())
   b40e4:	d10d      	bne.n	b4102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x2e>
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b40e6:	6862      	ldr	r2, [r4, #4]
	    if (__str.size())
   b40e8:	b10a      	cbz	r2, b40ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x1a>
	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
   b40ea:	f004 fafb 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      { return _M_string_length; }
   b40ee:	6863      	ldr	r3, [r4, #4]
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   b40f0:	682a      	ldr	r2, [r5, #0]
      { _M_string_length = __length; }
   b40f2:	606b      	str	r3, [r5, #4]
   b40f4:	2100      	movs	r1, #0
   b40f6:	54d1      	strb	r1, [r2, r3]
      { return _M_dataplus._M_p; }
   b40f8:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b40fa:	2300      	movs	r3, #0
   b40fc:	6063      	str	r3, [r4, #4]
   b40fe:	7013      	strb	r3, [r2, #0]
      }
   b4100:	bd70      	pop	{r4, r5, r6, pc}
      { _M_dataplus._M_p = __p; }
   b4102:	6029      	str	r1, [r5, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4104:	6861      	ldr	r1, [r4, #4]
      { _M_string_length = __length; }
   b4106:	6069      	str	r1, [r5, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   b4108:	f105 0608 	add.w	r6, r5, #8
	    if (!_M_is_local())
   b410c:	42b0      	cmp	r0, r6
	    _M_capacity(__str._M_allocated_capacity);
   b410e:	68a1      	ldr	r1, [r4, #8]
		    __capacity = _M_allocated_capacity;
   b4110:	bf18      	it	ne
   b4112:	68aa      	ldrne	r2, [r5, #8]
      { _M_allocated_capacity = __capacity; }
   b4114:	60a9      	str	r1, [r5, #8]
	    pointer __data = nullptr;
   b4116:	bf08      	it	eq
   b4118:	2000      	moveq	r0, #0
	    if (__data)
   b411a:	b110      	cbz	r0, b4122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x4e>
      { _M_dataplus._M_p = __p; }
   b411c:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b411e:	60a2      	str	r2, [r4, #8]
   b4120:	e7ea      	b.n	b40f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>
      { _M_dataplus._M_p = __p; }
   b4122:	6023      	str	r3, [r4, #0]
   b4124:	e7e8      	b.n	b40f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>

000b4126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>:
      operator=(const _CharT* __s)
   b4126:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4128:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b412a:	4608      	mov	r0, r1
   b412c:	9103      	str	r1, [sp, #12]
   b412e:	f005 fb5f 	bl	b97f0 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b4132:	9b03      	ldr	r3, [sp, #12]
   b4134:	9000      	str	r0, [sp, #0]
   b4136:	6862      	ldr	r2, [r4, #4]
   b4138:	2100      	movs	r1, #0
   b413a:	4620      	mov	r0, r4
   b413c:	f004 fb52 	bl	b87e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
      { return this->assign(__s); }
   b4140:	b004      	add	sp, #16
   b4142:	bd10      	pop	{r4, pc}

000b4144 <_Z8callbackPcPhj>:
  //gets the airport code from the list
  airport = airports[param.asInt() - 1];
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4144:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4146:	ed2d 8b02 	vpush	{d8}
    char p[length + 1];
   b414a:	f102 0308 	add.w	r3, r2, #8
{
   b414e:	b087      	sub	sp, #28
    char p[length + 1];
   b4150:	f023 0307 	bic.w	r3, r3, #7
{
   b4154:	af00      	add	r7, sp, #0
    char p[length + 1];
   b4156:	ebad 0d03 	sub.w	sp, sp, r3
{
   b415a:	4614      	mov	r4, r2
    memcpy(p, payload, length);
   b415c:	4668      	mov	r0, sp
   b415e:	f005 fadf 	bl	b9720 <memcpy>
    p[length] = NULL;
   b4162:	2300      	movs	r3, #0
   b4164:	f80d 3004 	strb.w	r3, [sp, r4]
	this->_M_assign(__str);
   b4168:	4c8d      	ldr	r4, [pc, #564]	; (b43a0 <_Z8callbackPcPhj+0x25c>)

    //takes the recieved code and reverses it
    metarCode = p;
   b416a:	488e      	ldr	r0, [pc, #568]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b416c:	4669      	mov	r1, sp
   b416e:	f7ff ffda 	bl	b4126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
   b4172:	498c      	ldr	r1, [pc, #560]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b4174:	4620      	mov	r0, r4
   b4176:	f004 fad2 	bl	b871e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      { return iterator(_M_data() + this->size()); }
   b417a:	e9d4 2300 	ldrd	r2, r3, [r4]
   b417e:	4413      	add	r3, r2
    _GLIBCXX20_CONSTEXPR
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      random_access_iterator_tag)
    {
      if (__first == __last)
   b4180:	4293      	cmp	r3, r2
   b4182:	d009      	beq.n	b4198 <_Z8callbackPcPhj+0x54>
      // Bidirectional iterator requirements
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator--() _GLIBCXX_NOEXCEPT
      {
	--_M_current;
   b4184:	3b01      	subs	r3, #1
	return;
      --__last;
      while (__first < __last)
   b4186:	429a      	cmp	r2, r3
   b4188:	d206      	bcs.n	b4198 <_Z8callbackPcPhj+0x54>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b418a:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b418c:	7818      	ldrb	r0, [r3, #0]
   b418e:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b4192:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b4196:	e7f6      	b.n	b4186 <_Z8callbackPcPhj+0x42>
    metarCodeReversed = metarCode;
    reverse(metarCodeReversed.begin(), metarCodeReversed.end());


  //uses the non reversed code to find the cloud type
  if (metarCode.find("SCT") != -1){
   b4198:	4983      	ldr	r1, [pc, #524]	; (b43a8 <_Z8callbackPcPhj+0x264>)
   b419a:	4882      	ldr	r0, [pc, #520]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b419c:	2200      	movs	r2, #0
   b419e:	f004 fbd6 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b41a2:	3001      	adds	r0, #1
   b41a4:	d02a      	beq.n	b41fc <_Z8callbackPcPhj+0xb8>
    cloudCatagory = "SCT";
   b41a6:	4980      	ldr	r1, [pc, #512]	; (b43a8 <_Z8callbackPcPhj+0x264>)
  }else if (metarCode.find("FEW") != -1){
    cloudCatagory = "FEW";
  }else if (metarCode.find("BKN") != -1){
    cloudCatagory = "BKN";
  }else if (metarCode.find("OVC") != -1){
    cloudCatagory = "OVC";
   b41a8:	4880      	ldr	r0, [pc, #512]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b41aa:	f7ff ffbc 	bl	b4126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
  }
  
  //finds the cloud height and stores it as an int
  cloudHeight = metarCode.substr((metarCode.find(cloudCatagory))+3, 3);
   b41ae:	497f      	ldr	r1, [pc, #508]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b41b0:	487c      	ldr	r0, [pc, #496]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b41b2:	4c7f      	ldr	r4, [pc, #508]	; (b43b0 <_Z8callbackPcPhj+0x26c>)
   b41b4:	2200      	movs	r2, #0
   b41b6:	f004 fbc4 	bl	b8942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
   b41ba:	2303      	movs	r3, #3
   b41bc:	18c2      	adds	r2, r0, r3
   b41be:	4979      	ldr	r1, [pc, #484]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b41c0:	4638      	mov	r0, r7
   b41c2:	f004 fc31 	bl	b8a28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b41c6:	4639      	mov	r1, r7
   b41c8:	4620      	mov	r0, r4
   b41ca:	f7ff ff83 	bl	b40d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
      { _M_dispose(); }
   b41ce:	4638      	mov	r0, r7
   b41d0:	f004 fa5a 	bl	b8688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  height = stoi(cloudHeight);
   b41d4:	6825      	ldr	r5, [r4, #0]
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b41d6:	f002 ff71 	bl	b70bc <__errno>
   b41da:	6806      	ldr	r6, [r0, #0]
   b41dc:	f002 ff6e 	bl	b70bc <__errno>
   b41e0:	2300      	movs	r3, #0
   b41e2:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b41e4:	220a      	movs	r2, #10
   b41e6:	4639      	mov	r1, r7
   b41e8:	4628      	mov	r0, r5
   b41ea:	f006 f9e1 	bl	ba5b0 <strtol>

      if (__endptr == __str)
   b41ee:	683b      	ldr	r3, [r7, #0]
   b41f0:	429d      	cmp	r5, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b41f2:	4604      	mov	r4, r0
      if (__endptr == __str)
   b41f4:	d126      	bne.n	b4244 <_Z8callbackPcPhj+0x100>
	std::__throw_invalid_argument(__name);
   b41f6:	486f      	ldr	r0, [pc, #444]	; (b43b4 <_Z8callbackPcPhj+0x270>)
   b41f8:	f004 f954 	bl	b84a4 <_ZSt24__throw_invalid_argumentPKc>
  }else if (metarCode.find("SKC") != -1){
   b41fc:	496e      	ldr	r1, [pc, #440]	; (b43b8 <_Z8callbackPcPhj+0x274>)
   b41fe:	4869      	ldr	r0, [pc, #420]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b4200:	2200      	movs	r2, #0
   b4202:	f004 fba4 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4206:	3001      	adds	r0, #1
   b4208:	d001      	beq.n	b420e <_Z8callbackPcPhj+0xca>
    cloudCatagory = "SKC";
   b420a:	496b      	ldr	r1, [pc, #428]	; (b43b8 <_Z8callbackPcPhj+0x274>)
   b420c:	e7cc      	b.n	b41a8 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("FEW") != -1){
   b420e:	496b      	ldr	r1, [pc, #428]	; (b43bc <_Z8callbackPcPhj+0x278>)
   b4210:	4864      	ldr	r0, [pc, #400]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b4212:	2200      	movs	r2, #0
   b4214:	f004 fb9b 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4218:	3001      	adds	r0, #1
   b421a:	d001      	beq.n	b4220 <_Z8callbackPcPhj+0xdc>
    cloudCatagory = "FEW";
   b421c:	4967      	ldr	r1, [pc, #412]	; (b43bc <_Z8callbackPcPhj+0x278>)
   b421e:	e7c3      	b.n	b41a8 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("BKN") != -1){
   b4220:	4967      	ldr	r1, [pc, #412]	; (b43c0 <_Z8callbackPcPhj+0x27c>)
   b4222:	4860      	ldr	r0, [pc, #384]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b4224:	2200      	movs	r2, #0
   b4226:	f004 fb92 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b422a:	3001      	adds	r0, #1
   b422c:	d001      	beq.n	b4232 <_Z8callbackPcPhj+0xee>
    cloudCatagory = "BKN";
   b422e:	4964      	ldr	r1, [pc, #400]	; (b43c0 <_Z8callbackPcPhj+0x27c>)
   b4230:	e7ba      	b.n	b41a8 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("OVC") != -1){
   b4232:	4964      	ldr	r1, [pc, #400]	; (b43c4 <_Z8callbackPcPhj+0x280>)
   b4234:	485b      	ldr	r0, [pc, #364]	; (b43a4 <_Z8callbackPcPhj+0x260>)
   b4236:	2200      	movs	r2, #0
   b4238:	f004 fb89 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b423c:	3001      	adds	r0, #1
   b423e:	d0b6      	beq.n	b41ae <_Z8callbackPcPhj+0x6a>
    cloudCatagory = "OVC";
   b4240:	4960      	ldr	r1, [pc, #384]	; (b43c4 <_Z8callbackPcPhj+0x280>)
   b4242:	e7b1      	b.n	b41a8 <_Z8callbackPcPhj+0x64>
      else if (errno == ERANGE
   b4244:	f002 ff3a 	bl	b70bc <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b4248:	6803      	ldr	r3, [r0, #0]
   b424a:	2b22      	cmp	r3, #34	; 0x22
   b424c:	d102      	bne.n	b4254 <_Z8callbackPcPhj+0x110>
	std::__throw_out_of_range(__name);
   b424e:	4859      	ldr	r0, [pc, #356]	; (b43b4 <_Z8callbackPcPhj+0x270>)
   b4250:	f004 f92e 	bl	b84b0 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b4254:	f002 ff32 	bl	b70bc <__errno>
   b4258:	6803      	ldr	r3, [r0, #0]
   b425a:	b913      	cbnz	r3, b4262 <_Z8callbackPcPhj+0x11e>
   b425c:	f002 ff2e 	bl	b70bc <__errno>
   b4260:	6006      	str	r6, [r0, #0]
  height = stoi(cloudHeight);
   b4262:	4d59      	ldr	r5, [pc, #356]	; (b43c8 <_Z8callbackPcPhj+0x284>)

  //takes the reversed metar code to find the amount of stature miles (stores it reversed in a string)
  statureMiles = metarCodeReversed.substr(
  (metarCodeReversed.find("MS") + 2),
   b4264:	4959      	ldr	r1, [pc, #356]	; (b43cc <_Z8callbackPcPhj+0x288>)
   b4266:	484e      	ldr	r0, [pc, #312]	; (b43a0 <_Z8callbackPcPhj+0x25c>)
  height = stoi(cloudHeight);
   b4268:	602c      	str	r4, [r5, #0]
  (metarCodeReversed.find("MS") + 2),
   b426a:	2200      	movs	r2, #0
   b426c:	f004 fb6f 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
  (metarCodeReversed.find(" ",
   b4270:	4956      	ldr	r1, [pc, #344]	; (b43cc <_Z8callbackPcPhj+0x288>)
  (metarCodeReversed.find("MS") + 2),
   b4272:	4606      	mov	r6, r0
  (metarCodeReversed.find(" ",
   b4274:	2200      	movs	r2, #0
   b4276:	484a      	ldr	r0, [pc, #296]	; (b43a0 <_Z8callbackPcPhj+0x25c>)
   b4278:	f004 fb69 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b427c:	4954      	ldr	r1, [pc, #336]	; (b43d0 <_Z8callbackPcPhj+0x28c>)
   b427e:	4602      	mov	r2, r0
   b4280:	4847      	ldr	r0, [pc, #284]	; (b43a0 <_Z8callbackPcPhj+0x25c>)
   b4282:	f004 fb64 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b4286:	4951      	ldr	r1, [pc, #324]	; (b43cc <_Z8callbackPcPhj+0x288>)
  (metarCodeReversed.find(" ",
   b4288:	4604      	mov	r4, r0
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b428a:	2200      	movs	r2, #0
   b428c:	4844      	ldr	r0, [pc, #272]	; (b43a0 <_Z8callbackPcPhj+0x25c>)
   b428e:	f004 fb5e 	bl	b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4292:	3c02      	subs	r4, #2
   b4294:	1a23      	subs	r3, r4, r0
   b4296:	4c4f      	ldr	r4, [pc, #316]	; (b43d4 <_Z8callbackPcPhj+0x290>)
   b4298:	4941      	ldr	r1, [pc, #260]	; (b43a0 <_Z8callbackPcPhj+0x25c>)
   b429a:	1cb2      	adds	r2, r6, #2
   b429c:	4638      	mov	r0, r7
   b429e:	f004 fbc3 	bl	b8a28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b42a2:	4639      	mov	r1, r7
   b42a4:	4620      	mov	r0, r4
   b42a6:	f7ff ff15 	bl	b40d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
   b42aa:	4638      	mov	r0, r7
   b42ac:	f004 f9ec 	bl	b8688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      { return iterator(_M_data() + this->size()); }
   b42b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   b42b4:	4413      	add	r3, r2
      if (__first == __last)
   b42b6:	4293      	cmp	r3, r2
   b42b8:	d009      	beq.n	b42ce <_Z8callbackPcPhj+0x18a>
	--_M_current;
   b42ba:	3b01      	subs	r3, #1
      while (__first < __last)
   b42bc:	429a      	cmp	r2, r3
   b42be:	d206      	bcs.n	b42ce <_Z8callbackPcPhj+0x18a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b42c0:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b42c2:	7818      	ldrb	r0, [r3, #0]
   b42c4:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b42c8:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b42cc:	e7f6      	b.n	b42bc <_Z8callbackPcPhj+0x178>

  //converts stature miles into the correct order and a float
  reverse(statureMiles.begin(),statureMiles.end());
  stature = atof(statureMiles.c_str());
   b42ce:	6820      	ldr	r0, [r4, #0]
   b42d0:	4c41      	ldr	r4, [pc, #260]	; (b43d8 <_Z8callbackPcPhj+0x294>)
   b42d2:	f005 f9b3 	bl	b963c <atof>
   b42d6:	ec51 0b10 	vmov	r0, r1, d0
   b42da:	f005 f93b 	bl	b9554 <__aeabi_d2f>
   b42de:	ee07 0a90 	vmov	s15, r0

  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b42e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b42e6:	eef4 7ac7 	vcmpe.f32	s15, s14
   b42ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  stature = atof(statureMiles.c_str());
   b42ee:	6020      	str	r0, [r4, #0]
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b42f0:	d513      	bpl.n	b431a <_Z8callbackPcPhj+0x1d6>
    status = "LIFR";
   b42f2:	493a      	ldr	r1, [pc, #232]	; (b43dc <_Z8callbackPcPhj+0x298>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b42f4:	4c3a      	ldr	r4, [pc, #232]	; (b43e0 <_Z8callbackPcPhj+0x29c>)
    status = "MVFR";
  }else{
    /*Note: if this were to actually get used in an airport, I would not want to have 
    VFR be the else. It would be better to have LIFR be the default to not be at risk.
    This should be sufficient for a demonstration though.*/
    status = "VFR";
   b42f6:	483b      	ldr	r0, [pc, #236]	; (b43e4 <_Z8callbackPcPhj+0x2a0>)
   b42f8:	f7ff ff15 	bl	b4126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
   b42fc:	2300      	movs	r3, #0
   b42fe:	6123      	str	r3, [r4, #16]
      { return _M_dataplus._M_p; }
   b4300:	4b38      	ldr	r3, [pc, #224]	; (b43e4 <_Z8callbackPcPhj+0x2a0>)
  }

  display.setCursor(0,0);
  display.println(status.c_str());
   b4302:	4620      	mov	r0, r4
   b4304:	6819      	ldr	r1, [r3, #0]
   b4306:	f003 f8ca 	bl	b749e <_ZN5Print7printlnEPKc>
  display.display();
   b430a:	4620      	mov	r0, r4
   b430c:	f002 fb44 	bl	b6998 <_ZN16Adafruit_SSD13067displayEv>
}
   b4310:	371c      	adds	r7, #28
   b4312:	46bd      	mov	sp, r7
   b4314:	ecbd 8b02 	vpop	{d8}
   b4318:	bdf0      	pop	{r4, r5, r6, r7, pc}
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
   b431a:	492a      	ldr	r1, [pc, #168]	; (b43c4 <_Z8callbackPcPhj+0x280>)
   b431c:	4823      	ldr	r0, [pc, #140]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b431e:	f004 fb25 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4322:	b968      	cbnz	r0, b4340 <_Z8callbackPcPhj+0x1fc>
   b4324:	682b      	ldr	r3, [r5, #0]
   b4326:	2b04      	cmp	r3, #4
   b4328:	dde3      	ble.n	b42f2 <_Z8callbackPcPhj+0x1ae>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b432a:	edd4 7a00 	vldr	s15, [r4]
   b432e:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
   b4332:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b433a:	d508      	bpl.n	b434e <_Z8callbackPcPhj+0x20a>
    status = "IFR";
   b433c:	492a      	ldr	r1, [pc, #168]	; (b43e8 <_Z8callbackPcPhj+0x2a4>)
   b433e:	e7d9      	b.n	b42f4 <_Z8callbackPcPhj+0x1b0>
   b4340:	491f      	ldr	r1, [pc, #124]	; (b43c0 <_Z8callbackPcPhj+0x27c>)
   b4342:	481a      	ldr	r0, [pc, #104]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b4344:	f004 fb12 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4348:	2800      	cmp	r0, #0
   b434a:	d0eb      	beq.n	b4324 <_Z8callbackPcPhj+0x1e0>
   b434c:	e7ed      	b.n	b432a <_Z8callbackPcPhj+0x1e6>
   b434e:	491d      	ldr	r1, [pc, #116]	; (b43c4 <_Z8callbackPcPhj+0x280>)
   b4350:	4816      	ldr	r0, [pc, #88]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b4352:	f004 fb0b 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b4356:	b958      	cbnz	r0, b4370 <_Z8callbackPcPhj+0x22c>
   b4358:	682b      	ldr	r3, [r5, #0]
   b435a:	2b09      	cmp	r3, #9
   b435c:	ddee      	ble.n	b433c <_Z8callbackPcPhj+0x1f8>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b435e:	edd4 7a00 	vldr	s15, [r4]
   b4362:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b436a:	db08      	blt.n	b437e <_Z8callbackPcPhj+0x23a>
    status = "MVFR";
   b436c:	491f      	ldr	r1, [pc, #124]	; (b43ec <_Z8callbackPcPhj+0x2a8>)
   b436e:	e7c1      	b.n	b42f4 <_Z8callbackPcPhj+0x1b0>
   b4370:	4913      	ldr	r1, [pc, #76]	; (b43c0 <_Z8callbackPcPhj+0x27c>)
   b4372:	480e      	ldr	r0, [pc, #56]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b4374:	f004 fafa 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b4378:	2800      	cmp	r0, #0
   b437a:	d0ed      	beq.n	b4358 <_Z8callbackPcPhj+0x214>
   b437c:	e7ef      	b.n	b435e <_Z8callbackPcPhj+0x21a>
   b437e:	4910      	ldr	r1, [pc, #64]	; (b43c0 <_Z8callbackPcPhj+0x27c>)
   b4380:	480a      	ldr	r0, [pc, #40]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b4382:	f004 faf3 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4386:	b920      	cbnz	r0, b4392 <_Z8callbackPcPhj+0x24e>
   b4388:	682b      	ldr	r3, [r5, #0]
   b438a:	2b09      	cmp	r3, #9
   b438c:	dcee      	bgt.n	b436c <_Z8callbackPcPhj+0x228>
    status = "VFR";
   b438e:	4918      	ldr	r1, [pc, #96]	; (b43f0 <_Z8callbackPcPhj+0x2ac>)
   b4390:	e7b0      	b.n	b42f4 <_Z8callbackPcPhj+0x1b0>
   b4392:	490c      	ldr	r1, [pc, #48]	; (b43c4 <_Z8callbackPcPhj+0x280>)
   b4394:	4805      	ldr	r0, [pc, #20]	; (b43ac <_Z8callbackPcPhj+0x268>)
   b4396:	f004 fae9 	bl	b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b439a:	2800      	cmp	r0, #0
   b439c:	d0f4      	beq.n	b4388 <_Z8callbackPcPhj+0x244>
   b439e:	e7f6      	b.n	b438e <_Z8callbackPcPhj+0x24a>
   b43a0:	2003e32c 	.word	0x2003e32c
   b43a4:	2003e35c 	.word	0x2003e35c
   b43a8:	000bb7bd 	.word	0x000bb7bd
   b43ac:	2003e314 	.word	0x2003e314
   b43b0:	2003e2e4 	.word	0x2003e2e4
   b43b4:	000bb7d1 	.word	0x000bb7d1
   b43b8:	000bb7c1 	.word	0x000bb7c1
   b43bc:	000bb7c5 	.word	0x000bb7c5
   b43c0:	000bb7c9 	.word	0x000bb7c9
   b43c4:	000bb7cd 	.word	0x000bb7cd
   b43c8:	2003e6b0 	.word	0x2003e6b0
   b43cc:	000bb7d6 	.word	0x000bb7d6
   b43d0:	000bcb47 	.word	0x000bcb47
   b43d4:	2003e2fc 	.word	0x2003e2fc
   b43d8:	2003e6b8 	.word	0x2003e6b8
   b43dc:	000bb7d9 	.word	0x000bb7d9
   b43e0:	2003e640 	.word	0x2003e640
   b43e4:	2003e344 	.word	0x2003e344
   b43e8:	000bb7da 	.word	0x000bb7da
   b43ec:	000bb7de 	.word	0x000bb7de
   b43f0:	000bb7df 	.word	0x000bb7df

000b43f4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b43f4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b43f6:	f002 fbed 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b43fa:	4b03      	ldr	r3, [pc, #12]	; (b4408 <_ZN10CloudClass7processEv+0x14>)
   b43fc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b43fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b4402:	f002 be0b 	b.w	b701c <spark_process>
   b4406:	bf00      	nop
   b4408:	2003e744 	.word	0x2003e744

000b440c <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b440c:	6803      	ldr	r3, [r0, #0]
   b440e:	b12b      	cbz	r3, b441c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4410:	6842      	ldr	r2, [r0, #4]
   b4412:	4293      	cmp	r3, r2
   b4414:	d202      	bcs.n	b441c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4416:	4618      	mov	r0, r3
   b4418:	f005 b913 	b.w	b9642 <atoi>
   b441c:	2000      	movs	r0, #0
   b441e:	4770      	bx	lr

000b4420 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4420:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4422:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4424:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4426:	b145      	cbz	r5, b443a <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4428:	6843      	ldr	r3, [r0, #4]
   b442a:	429d      	cmp	r5, r3
   b442c:	d205      	bcs.n	b443a <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b442e:	4628      	mov	r0, r5
   b4430:	f005 f9de 	bl	b97f0 <strlen>
   b4434:	3001      	adds	r0, #1
   b4436:	4405      	add	r5, r0
   b4438:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b443a:	4620      	mov	r0, r4
   b443c:	bd38      	pop	{r3, r4, r5, pc}

000b443e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b443e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4440:	4604      	mov	r4, r0
   b4442:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4444:	460d      	mov	r5, r1
   b4446:	b921      	cbnz	r1, b4452 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4448:	6803      	ldr	r3, [r0, #0]
   b444a:	1c7a      	adds	r2, r7, #1
   b444c:	6042      	str	r2, [r0, #4]
   b444e:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add_raw(str, strlen(str)+1);
}
   b4450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add_raw(str, strlen(str)+1);
   b4452:	4608      	mov	r0, r1
   b4454:	f005 f9cc 	bl	b97f0 <strlen>
    if (len + l > buff_size)
   b4458:	68a3      	ldr	r3, [r4, #8]
    add_raw(str, strlen(str)+1);
   b445a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b445c:	19f2      	adds	r2, r6, r7
   b445e:	429a      	cmp	r2, r3
   b4460:	d8f6      	bhi.n	b4450 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4462:	6820      	ldr	r0, [r4, #0]
   b4464:	4632      	mov	r2, r6
   b4466:	4629      	mov	r1, r5
   b4468:	4438      	add	r0, r7
   b446a:	f005 f959 	bl	b9720 <memcpy>
    len += l;
   b446e:	6860      	ldr	r0, [r4, #4]
   b4470:	4430      	add	r0, r6
   b4472:	6060      	str	r0, [r4, #4]
   b4474:	e7ec      	b.n	b4450 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4478 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4478:	b538      	push	{r3, r4, r5, lr}
   b447a:	4604      	mov	r4, r0
   b447c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b447e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4482:	6825      	ldr	r5, [r4, #0]
   b4484:	4a04      	ldr	r2, [pc, #16]	; (b4498 <_ZN10BlynkParam3addEi+0x20>)
   b4486:	1a09      	subs	r1, r1, r0
   b4488:	4428      	add	r0, r5
   b448a:	f002 fdf7 	bl	b707c <snprintf>
   b448e:	6863      	ldr	r3, [r4, #4]
   b4490:	3001      	adds	r0, #1
   b4492:	4403      	add	r3, r0
   b4494:	6063      	str	r3, [r4, #4]
    }
   b4496:	bd38      	pop	{r3, r4, r5, pc}
   b4498:	000bb7e3 	.word	0x000bb7e3

000b449c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b449c:	b538      	push	{r3, r4, r5, lr}
   b449e:	4604      	mov	r4, r0
   b44a0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b44a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b44a6:	6825      	ldr	r5, [r4, #0]
   b44a8:	4a04      	ldr	r2, [pc, #16]	; (b44bc <_ZN10BlynkParam3addEl+0x20>)
   b44aa:	1a09      	subs	r1, r1, r0
   b44ac:	4428      	add	r0, r5
   b44ae:	f002 fde5 	bl	b707c <snprintf>
   b44b2:	6863      	ldr	r3, [r4, #4]
   b44b4:	3001      	adds	r0, #1
   b44b6:	4403      	add	r3, r0
   b44b8:	6063      	str	r3, [r4, #4]
    }
   b44ba:	bd38      	pop	{r3, r4, r5, pc}
   b44bc:	000bb7e6 	.word	0x000bb7e6

000b44c0 <_ZN22BlynkTransportParticle14_connectToPortEt>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool _connectToPort(uint16_t p) {
   b44c0:	b5f0      	push	{r4, r5, r6, r7, lr}
        bool isConn = false;
        if (domain) {
   b44c2:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    bool _connectToPort(uint16_t p) {
   b44c6:	b087      	sub	sp, #28
   b44c8:	4606      	mov	r6, r0
   b44ca:	460f      	mov	r7, r1
        if (domain) {
   b44cc:	f1bc 0f00 	cmp.w	ip, #0
   b44d0:	d00c      	beq.n	b44ec <_ZN22BlynkTransportParticle14_connectToPortEt+0x2c>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', p);
            isConn = (1 == client.connect(domain, p));
   b44d2:	460a      	mov	r2, r1
   b44d4:	2300      	movs	r3, #0
   b44d6:	4661      	mov	r1, ip
   b44d8:	f003 fba4 	bl	b7c24 <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            isConn = (1 == client.connect(addr, p));
        }
        actual_port = isConn ? p : 0;
   b44dc:	2801      	cmp	r0, #1
            isConn = (1 == client.connect(domain, p));
   b44de:	bf16      	itet	ne
   b44e0:	2000      	movne	r0, #0
   b44e2:	2001      	moveq	r0, #1
        actual_port = isConn ? p : 0;
   b44e4:	4607      	movne	r7, r0
   b44e6:	8777      	strh	r7, [r6, #58]	; 0x3a
        return isConn;
    }
   b44e8:	b007      	add	sp, #28
   b44ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b44ec:	4b07      	ldr	r3, [pc, #28]	; (b450c <_ZN22BlynkTransportParticle14_connectToPortEt+0x4c>)
   b44ee:	9300      	str	r3, [sp, #0]
   b44f0:	f100 0520 	add.w	r5, r0, #32
   b44f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b44f6:	ac01      	add	r4, sp, #4
   b44f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b44fa:	682b      	ldr	r3, [r5, #0]
   b44fc:	7023      	strb	r3, [r4, #0]
            isConn = (1 == client.connect(addr, p));
   b44fe:	463a      	mov	r2, r7
   b4500:	4663      	mov	r3, ip
   b4502:	4669      	mov	r1, sp
   b4504:	4630      	mov	r0, r6
   b4506:	f003 fc6d 	bl	b7de4 <_ZN9TCPClient7connectE9IPAddresstm>
   b450a:	e7e7      	b.n	b44dc <_ZN22BlynkTransportParticle14_connectToPortEt+0x1c>
   b450c:	000bc930 	.word	0x000bc930

000b4510 <BlynkWidgetWrite1>:
BLYNK_WRITE(V1) {
   b4510:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   b4512:	6808      	ldr	r0, [r1, #0]
   b4514:	f005 f895 	bl	b9642 <atoi>
  airport = airports[param.asInt() - 1];
   b4518:	4904      	ldr	r1, [pc, #16]	; (b452c <BlynkWidgetWrite1+0x1c>)
   b451a:	3801      	subs	r0, #1
   b451c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
}
   b4520:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  airport = airports[param.asInt() - 1];
   b4524:	4802      	ldr	r0, [pc, #8]	; (b4530 <BlynkWidgetWrite1+0x20>)
   b4526:	f002 bf42 	b.w	b73ae <_ZN6StringaSERKS_>
   b452a:	bf00      	nop
   b452c:	2003e3c0 	.word	0x2003e3c0
   b4530:	2003e3b0 	.word	0x2003e3b0

000b4534 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:

    uint16_t getNextMsgId();

private:

    void internalReconnect() {
   b4534:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4536:	2300      	movs	r3, #0
   b4538:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

    uint16_t getActualPort() const {
        return actual_port;
    }

    void disconnect() { client.stop(); }
   b453c:	6900      	ldr	r0, [r0, #16]
   b453e:	f003 fd27 	bl	b7f90 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4546:	f002 bac7 	b.w	b6ad8 <BlynkNoOpCbk>
	...

000b454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4550:	188f      	adds	r7, r1, r2
   b4552:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4554:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4556:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b455a:	4606      	mov	r6, r0
   b455c:	4689      	mov	r9, r1
   b455e:	4690      	mov	r8, r2
    if (it >= param.end())
   b4560:	f080 80c2 	bcs.w	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4564:	a805      	add	r0, sp, #20
   b4566:	880d      	ldrh	r5, [r1, #0]
   b4568:	f7ff ff5a 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
   b456c:	6803      	ldr	r3, [r0, #0]
   b456e:	42bb      	cmp	r3, r7
   b4570:	f080 80ba 	bcs.w	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4574:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4576:	7803      	ldrb	r3, [r0, #0]
   b4578:	2b41      	cmp	r3, #65	; 0x41
   b457a:	d149      	bne.n	b4610 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b457c:	3001      	adds	r0, #1
   b457e:	f005 f860 	bl	b9642 <atoi>
   b4582:	2805      	cmp	r0, #5
   b4584:	dd37      	ble.n	b45f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b4586:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b4588:	f247 2376 	movw	r3, #29302	; 0x7276
   b458c:	429d      	cmp	r5, r3
   b458e:	f000 80d3 	beq.w	b4738 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4592:	d841      	bhi.n	b4618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4594:	f247 2361 	movw	r3, #29281	; 0x7261
   b4598:	429d      	cmp	r5, r3
   b459a:	f000 80a8 	beq.w	b46ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b459e:	f247 2364 	movw	r3, #29284	; 0x7264
   b45a2:	429d      	cmp	r5, r3
   b45a4:	d06b      	beq.n	b467e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b45a6:	f646 5370 	movw	r3, #28016	; 0x6d70
   b45aa:	429d      	cmp	r5, r3
   b45ac:	d141      	bne.n	b4632 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b45ae:	4d78      	ldr	r5, [pc, #480]	; (b4790 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b45b0:	4e78      	ldr	r6, [pc, #480]	; (b4794 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b45b2:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b47a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b45b6:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b45b8:	42b8      	cmp	r0, r7
   b45ba:	f080 8095 	bcs.w	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b45be:	7803      	ldrb	r3, [r0, #0]
   b45c0:	2b41      	cmp	r3, #65	; 0x41
   b45c2:	d14b      	bne.n	b465c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b45c4:	3001      	adds	r0, #1
   b45c6:	f005 f83c 	bl	b9642 <atoi>
   b45ca:	2805      	cmp	r0, #5
   b45cc:	dd39      	ble.n	b4642 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b45ce:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b45d0:	a805      	add	r0, sp, #20
   b45d2:	f7ff ff25 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b45d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b45da:	4629      	mov	r1, r5
   b45dc:	4648      	mov	r0, r9
   b45de:	f005 f8fd 	bl	b97dc <strcmp>
   b45e2:	4601      	mov	r1, r0
   b45e4:	2800      	cmp	r0, #0
   b45e6:	d13d      	bne.n	b4664 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b45e8:	4620      	mov	r0, r4
   b45ea:	f003 fe5d 	bl	b82a8 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b45ee:	a805      	add	r0, sp, #20
   b45f0:	f7ff ff16 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b45f4:	e7df      	b.n	b45b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b45f6:	9805      	ldr	r0, [sp, #20]
   b45f8:	3001      	adds	r0, #1
   b45fa:	f005 f822 	bl	b9642 <atoi>
   b45fe:	2800      	cmp	r0, #0
   b4600:	dbc1      	blt.n	b4586 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4602:	9805      	ldr	r0, [sp, #20]
   b4604:	3001      	adds	r0, #1
   b4606:	f005 f81c 	bl	b9642 <atoi>
   b460a:	300e      	adds	r0, #14
   b460c:	b2c4      	uxtb	r4, r0
   b460e:	e7bb      	b.n	b4588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4610:	a805      	add	r0, sp, #20
   b4612:	f7ff fefb 	bl	b440c <_ZNK10BlynkParam8iterator5asIntEv>
   b4616:	e7f9      	b.n	b460c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4618:	f247 7364 	movw	r3, #30564	; 0x7764
   b461c:	429d      	cmp	r5, r3
   b461e:	d04f      	beq.n	b46c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4620:	f247 7376 	movw	r3, #30582	; 0x7776
   b4624:	429d      	cmp	r5, r3
   b4626:	f000 8097 	beq.w	b4758 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b462a:	f247 7361 	movw	r3, #30561	; 0x7761
   b462e:	429d      	cmp	r5, r3
   b4630:	d06f      	beq.n	b4712 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkReq req = { pin };
        callWriteHandler(req, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4632:	2300      	movs	r3, #0
   b4634:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4638:	2202      	movs	r2, #2
   b463a:	9200      	str	r2, [sp, #0]
   b463c:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   b463e:	4619      	mov	r1, r3
   b4640:	e03a      	b.n	b46b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4642:	9805      	ldr	r0, [sp, #20]
   b4644:	3001      	adds	r0, #1
   b4646:	f004 fffc 	bl	b9642 <atoi>
   b464a:	2800      	cmp	r0, #0
   b464c:	dbbf      	blt.n	b45ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b464e:	9805      	ldr	r0, [sp, #20]
   b4650:	3001      	adds	r0, #1
   b4652:	f004 fff6 	bl	b9642 <atoi>
   b4656:	300e      	adds	r0, #14
   b4658:	b2c4      	uxtb	r4, r0
   b465a:	e7b9      	b.n	b45d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b465c:	a805      	add	r0, sp, #20
   b465e:	f7ff fed5 	bl	b440c <_ZNK10BlynkParam8iterator5asIntEv>
   b4662:	e7f9      	b.n	b4658 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4664:	4631      	mov	r1, r6
   b4666:	4648      	mov	r0, r9
   b4668:	f005 f8b8 	bl	b97dc <strcmp>
   b466c:	b128      	cbz	r0, b467a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b466e:	4641      	mov	r1, r8
   b4670:	4648      	mov	r0, r9
   b4672:	f005 f8b3 	bl	b97dc <strcmp>
   b4676:	2800      	cmp	r0, #0
   b4678:	d1b9      	bne.n	b45ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b467a:	2101      	movs	r1, #1
   b467c:	e7b4      	b.n	b45e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b467e:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4680:	4945      	ldr	r1, [pc, #276]	; (b4798 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4682:	9307      	str	r3, [sp, #28]
   b4684:	a807      	add	r0, sp, #28
   b4686:	2310      	movs	r3, #16
   b4688:	2500      	movs	r5, #0
   b468a:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b468e:	f7ff fed6 	bl	b443e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4692:	a807      	add	r0, sp, #28
   b4694:	4621      	mov	r1, r4
   b4696:	f7ff feef 	bl	b4478 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b469a:	4620      	mov	r0, r4
   b469c:	f003 fe2e 	bl	b82fc <digitalRead>
        rsp.add(analogRead(pin));
   b46a0:	4601      	mov	r1, r0
   b46a2:	a807      	add	r0, sp, #28
   b46a4:	f7ff fefa 	bl	b449c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b46a8:	9b08      	ldr	r3, [sp, #32]
   b46aa:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b46ae:	3b01      	subs	r3, #1
   b46b0:	9300      	str	r3, [sp, #0]
   b46b2:	9b07      	ldr	r3, [sp, #28]
   b46b4:	462a      	mov	r2, r5
   b46b6:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b46b8:	4630      	mov	r0, r6
   b46ba:	f000 fa9b 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b46be:	e013      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b46c0:	a805      	add	r0, sp, #20
   b46c2:	f7ff fead 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
   b46c6:	6803      	ldr	r3, [r0, #0]
   b46c8:	429f      	cmp	r7, r3
   b46ca:	d90d      	bls.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b46cc:	b2a4      	uxth	r4, r4
   b46ce:	2101      	movs	r1, #1
   b46d0:	4620      	mov	r0, r4
   b46d2:	f003 fde9 	bl	b82a8 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b46d6:	a805      	add	r0, sp, #20
   b46d8:	f7ff fe98 	bl	b440c <_ZNK10BlynkParam8iterator5asIntEv>
   b46dc:	1e01      	subs	r1, r0, #0
   b46de:	bf18      	it	ne
   b46e0:	2101      	movne	r1, #1
   b46e2:	4620      	mov	r0, r4
   b46e4:	f003 fdf1 	bl	b82ca <digitalWrite>
    }
}
   b46e8:	b00f      	add	sp, #60	; 0x3c
   b46ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b46ee:	ab0a      	add	r3, sp, #40	; 0x28
   b46f0:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b46f2:	a807      	add	r0, sp, #28
   b46f4:	2310      	movs	r3, #16
   b46f6:	4929      	ldr	r1, [pc, #164]	; (b479c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b46f8:	2500      	movs	r5, #0
   b46fa:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b46fe:	f7ff fe9e 	bl	b443e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4702:	a807      	add	r0, sp, #28
   b4704:	4621      	mov	r1, r4
   b4706:	f7ff feb7 	bl	b4478 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b470a:	4620      	mov	r0, r4
   b470c:	f003 fe09 	bl	b8322 <analogRead>
   b4710:	e7c6      	b.n	b46a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b4712:	a805      	add	r0, sp, #20
   b4714:	f7ff fe84 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
   b4718:	6803      	ldr	r3, [r0, #0]
   b471a:	429f      	cmp	r7, r3
   b471c:	d9e4      	bls.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b471e:	b2a4      	uxth	r4, r4
   b4720:	2101      	movs	r1, #1
   b4722:	4620      	mov	r0, r4
   b4724:	f003 fdc0 	bl	b82a8 <pinMode>
        analogWrite(pin, it.asInt());
   b4728:	a805      	add	r0, sp, #20
   b472a:	f7ff fe6f 	bl	b440c <_ZNK10BlynkParam8iterator5asIntEv>
   b472e:	4601      	mov	r1, r0
   b4730:	4620      	mov	r0, r4
   b4732:	f003 fe0d 	bl	b8350 <_Z11analogWritetm>
    } break;
   b4736:	e7d7      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
        }
    }

    void callReadHandler(BlynkReq& req) {
        WidgetReadHandler handler = GetReadHandler(req.pin);
   b4738:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   b473a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
   b473e:	f002 f9cd 	bl	b6adc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4742:	4603      	mov	r3, r0
            handler(req);
   b4744:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4746:	b123      	cbz	r3, b4752 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b4748:	4a15      	ldr	r2, [pc, #84]	; (b47a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b474a:	4293      	cmp	r3, r2
   b474c:	d001      	beq.n	b4752 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b474e:	4798      	blx	r3
   b4750:	e7ca      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b4752:	f002 f9bf 	bl	b6ad4 <BlynkWidgetRead>
    } break;
   b4756:	e7c7      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4758:	a805      	add	r0, sp, #20
   b475a:	f7ff fe61 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b475e:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   b4760:	f8ad 401c 	strh.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4764:	eba3 0109 	sub.w	r1, r3, r9
   b4768:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(req.pin);
   b476c:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b476e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4772:	910c      	str	r1, [sp, #48]	; 0x30
   b4774:	f002 f9bc 	bl	b6af0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4778:	4603      	mov	r3, r0
            handler(req, param);
   b477a:	a90a      	add	r1, sp, #40	; 0x28
   b477c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b477e:	b123      	cbz	r3, b478a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4780:	4a08      	ldr	r2, [pc, #32]	; (b47a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4782:	4293      	cmp	r3, r2
   b4784:	d001      	beq.n	b478a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b4786:	4798      	blx	r3
   b4788:	e7ae      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b478a:	f002 f9a4 	bl	b6ad6 <BlynkWidgetWrite>
    } break;
   b478e:	e7ab      	b.n	b46e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4790:	000bb7ea 	.word	0x000bb7ea
   b4794:	000bb7ed 	.word	0x000bb7ed
   b4798:	000bb7f5 	.word	0x000bb7f5
   b479c:	000bb7f8 	.word	0x000bb7f8
   b47a0:	000b6ad5 	.word	0x000b6ad5
   b47a4:	000b6ad7 	.word	0x000b6ad7
   b47a8:	000bb7f1 	.word	0x000bb7f1

000b47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b47ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47b0:	b08c      	sub	sp, #48	; 0x30
   b47b2:	af04      	add	r7, sp, #16
   b47b4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b47b6:	2205      	movs	r2, #5
   b47b8:	6900      	ldr	r0, [r0, #16]
   b47ba:	1d39      	adds	r1, r7, #4
   b47bc:	f002 fedd 	bl	b757a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b47c0:	b3a8      	cbz	r0, b482e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b47c2:	2805      	cmp	r0, #5
   b47c4:	d004      	beq.n	b47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b47c6:	2000      	movs	r0, #0
}
   b47c8:	3720      	adds	r7, #32
   b47ca:	46bd      	mov	sp, r7
   b47cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b47d0:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b47d4:	ba5b      	rev16	r3, r3
   b47d6:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b47d8:	f8a7 3005 	strh.w	r3, [r7, #5]
   b47dc:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b47e0:	ba5b      	rev16	r3, r3
   b47e2:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b47e6:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b47ea:	2a00      	cmp	r2, #0
   b47ec:	d0eb      	beq.n	b47c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b47ee:	793b      	ldrb	r3, [r7, #4]
   b47f0:	bb3b      	cbnz	r3, b4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x96>
        lastActivityIn = BlynkMillis();
   b47f2:	f002 f96d 	bl	b6ad0 <_Z11BlynkMillisv>
   b47f6:	4602      	mov	r2, r0
   b47f8:	61e0      	str	r0, [r4, #28]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b47fa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   b47fe:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4802:	b9d0      	cbnz	r0, b483a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
   b4804:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b4808:	2901      	cmp	r1, #1
   b480a:	d116      	bne.n	b483a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8e>
            switch (hdr.length) {
   b480c:	2b09      	cmp	r3, #9
   b480e:	d010      	beq.n	b4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b4810:	2bc8      	cmp	r3, #200	; 0xc8
   b4812:	d001      	beq.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6c>
   b4814:	2b04      	cmp	r3, #4
   b4816:	d1d7      	bne.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b4818:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b481a:	6262      	str	r2, [r4, #36]	; 0x24
                this->sendInfo();
   b481c:	4620      	mov	r0, r4
                state = CONNECTED;
   b481e:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
                this->sendInfo();
   b4822:	f000 fae5 	bl	b4df0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b4826:	f7ff fde5 	bl	b43f4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b482a:	f002 f955 	bl	b6ad8 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b482e:	2001      	movs	r0, #1
   b4830:	e7ca      	b.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b4832:	2303      	movs	r3, #3
   b4834:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                break;
   b4838:	e7c6      	b.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b483a:	1f58      	subs	r0, r3, #5
   b483c:	bf18      	it	ne
   b483e:	2001      	movne	r0, #1
   b4840:	e7c2      	b.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b4842:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b4846:	d903      	bls.n	b4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa4>
        internalReconnect();
   b4848:	4620      	mov	r0, r4
   b484a:	f7ff fe73 	bl	b4534 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b484e:	e7ee      	b.n	b482e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b4850:	f108 0308 	add.w	r3, r8, #8
   b4854:	466e      	mov	r6, sp
   b4856:	08db      	lsrs	r3, r3, #3
   b4858:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b485c:	469d      	mov	sp, r3
   b485e:	ad04      	add	r5, sp, #16
   b4860:	6920      	ldr	r0, [r4, #16]
   b4862:	4642      	mov	r2, r8
   b4864:	4629      	mov	r1, r5
   b4866:	f002 fe88 	bl	b757a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b486a:	4580      	cmp	r8, r0
   b486c:	f04f 0000 	mov.w	r0, #0
   b4870:	d141      	bne.n	b48f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
    inputBuffer[hdr.length] = '\0';
   b4872:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4876:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b4878:	f002 f92a 	bl	b6ad0 <_Z11BlynkMillisv>
    switch (hdr.type)
   b487c:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b487e:	61e0      	str	r0, [r4, #28]
    switch (hdr.type)
   b4880:	2b14      	cmp	r3, #20
   b4882:	d069      	beq.n	b4958 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b4884:	d809      	bhi.n	b489a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b4886:	2b0f      	cmp	r3, #15
   b4888:	d066      	beq.n	b4958 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   b488a:	2b11      	cmp	r3, #17
   b488c:	d071      	beq.n	b4972 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
   b488e:	2b06      	cmp	r3, #6
   b4890:	d016      	beq.n	b48c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
        internalReconnect();
   b4892:	4620      	mov	r0, r4
   b4894:	f7ff fe4e 	bl	b4534 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4898:	e01d      	b.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
    switch (hdr.type)
   b489a:	2b29      	cmp	r3, #41	; 0x29
   b489c:	d01d      	beq.n	b48da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   b489e:	2b37      	cmp	r3, #55	; 0x37
   b48a0:	d019      	beq.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b48a2:	2b1d      	cmp	r3, #29
   b48a4:	d1f5      	bne.n	b4892 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b48a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b48aa:	b94b      	cbnz	r3, b48c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x114>
            state = CONNECTED;
   b48ac:	2301      	movs	r3, #1
   b48ae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
            this->sendInfo();
   b48b2:	4620      	mov	r0, r4
   b48b4:	f000 fa9c 	bl	b4df0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b48b8:	f7ff fd9c 	bl	b43f4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b48bc:	f002 f90c 	bl	b6ad8 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b48c0:	2300      	movs	r3, #0
   b48c2:	21c8      	movs	r1, #200	; 0xc8
   b48c4:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b48c8:	9100      	str	r1, [sp, #0]
   b48ca:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b48ce:	4619      	mov	r1, r3
   b48d0:	4620      	mov	r0, r4
   b48d2:	f000 f98f 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b48d6:	2001      	movs	r0, #1
   b48d8:	e00d      	b.n	b48f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14a>
        if (!redir_serv) {
   b48da:	69a3      	ldr	r3, [r4, #24]
   b48dc:	b91b      	cbnz	r3, b48e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(64);
   b48de:	2040      	movs	r0, #64	; 0x40
   b48e0:	f002 fbb4 	bl	b704c <malloc>
   b48e4:	61a0      	str	r0, [r4, #24]
        BlynkParam param(inputBuffer, hdr.length);
   b48e6:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b48ea:	44a8      	add	r8, r5
        if (it >= param.end())
   b48ec:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b48ee:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b48f2:	d302      	bcc.n	b48fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14e>
            return false;
   b48f4:	2000      	movs	r0, #0
   b48f6:	46b5      	mov	sp, r6
   b48f8:	e766      	b.n	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b48fa:	4629      	mov	r1, r5
   b48fc:	2240      	movs	r2, #64	; 0x40
   b48fe:	69a0      	ldr	r0, [r4, #24]
   b4900:	f004 ff92 	bl	b9828 <strncpy>
        redir_serv[63] = '\0';
   b4904:	69a3      	ldr	r3, [r4, #24]
   b4906:	2500      	movs	r5, #0
   b4908:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b490c:	f107 0014 	add.w	r0, r7, #20
   b4910:	f7ff fd86 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
   b4914:	6803      	ldr	r3, [r0, #0]
   b4916:	4598      	cmp	r8, r3
   b4918:	d91c      	bls.n	b4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b491a:	6978      	ldr	r0, [r7, #20]
   b491c:	b120      	cbz	r0, b4928 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   b491e:	69bb      	ldr	r3, [r7, #24]
   b4920:	4298      	cmp	r0, r3
   b4922:	d215      	bcs.n	b4950 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b4924:	f004 fe91 	bl	b964a <atol>
            redir_port = it.asLong();
   b4928:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b492a:	6920      	ldr	r0, [r4, #16]
   b492c:	f003 fb30 	bl	b7f90 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b4930:	6923      	ldr	r3, [r4, #16]
   b4932:	69a2      	ldr	r2, [r4, #24]
        domain = d;
   b4934:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4936:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4938:	2300      	movs	r3, #0
   b493a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b493e:	f002 f8c7 	bl	b6ad0 <_Z11BlynkMillisv>
   b4942:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4946:	3808      	subs	r0, #8
   b4948:	e9c4 0007 	strd	r0, r0, [r4, #28]
   b494c:	6260      	str	r0, [r4, #36]	; 0x24
   b494e:	e7c2      	b.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
   b4950:	4628      	mov	r0, r5
   b4952:	e7e9      	b.n	b4928 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4954:	2550      	movs	r5, #80	; 0x50
   b4956:	e7e8      	b.n	b492a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17e>
        msgIdOutOverride = hdr.msg_id;
   b4958:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b495a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b495e:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4962:	8563      	strh	r3, [r4, #42]	; 0x2a
        this->processCmd(inputBuffer, hdr.length);
   b4964:	4629      	mov	r1, r5
   b4966:	4620      	mov	r0, r4
   b4968:	f7ff fdf0 	bl	b454c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b496c:	2300      	movs	r3, #0
   b496e:	8563      	strh	r3, [r4, #42]	; 0x2a
   b4970:	e7b1      	b.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        BlynkReq req = { 0 };
   b4972:	2300      	movs	r3, #0
   b4974:	803b      	strh	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b4976:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b497a:	442b      	add	r3, r5
        if (it >= param.end())
   b497c:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b497e:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4982:	d2a8      	bcs.n	b48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12a>
        ++it;
   b4984:	f107 000c 	add.w	r0, r7, #12
   b4988:	f8d5 8000 	ldr.w	r8, [r5]
   b498c:	f7ff fd48 	bl	b4420 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4990:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4992:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4996:	1b5d      	subs	r5, r3, r5
   b4998:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b499a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b499e:	687b      	ldr	r3, [r7, #4]
   b49a0:	61fd      	str	r5, [r7, #28]
   b49a2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b49a6:	8563      	strh	r3, [r4, #42]	; 0x2a
   b49a8:	4b2d      	ldr	r3, [pc, #180]	; (b4a60 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b4>)
   b49aa:	4598      	cmp	r8, r3
   b49ac:	d052      	beq.n	b4a54 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a8>
   b49ae:	d820      	bhi.n	b49f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x246>
   b49b0:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b49b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b49b8:	4413      	add	r3, r2
   b49ba:	4598      	cmp	r8, r3
   b49bc:	d032      	beq.n	b4a24 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>
   b49be:	d80f      	bhi.n	b49e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b49c0:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b49c4:	3b06      	subs	r3, #6
   b49c6:	4598      	cmp	r8, r3
   b49c8:	d032      	beq.n	b4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x284>
   b49ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b49ce:	3303      	adds	r3, #3
   b49d0:	4598      	cmp	r8, r3
   b49d2:	d1cb      	bne.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b49d4:	f107 0114 	add.w	r1, r7, #20
   b49d8:	4638      	mov	r0, r7
   b49da:	f002 f87c 	bl	b6ad6 <BlynkWidgetWrite>
   b49de:	e7c5      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b49e0:	4b20      	ldr	r3, [pc, #128]	; (b4a64 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b49e2:	4598      	cmp	r8, r3
   b49e4:	d1c2      	bne.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b49e6:	f107 0114 	add.w	r1, r7, #20
   b49ea:	4638      	mov	r0, r7
   b49ec:	f002 f873 	bl	b6ad6 <BlynkWidgetWrite>
   b49f0:	e7bc      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b49f2:	4b1d      	ldr	r3, [pc, #116]	; (b4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b49f4:	4598      	cmp	r8, r3
   b49f6:	d021      	beq.n	b4a3c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x290>
   b49f8:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b49fc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4a00:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b4a04:	4598      	cmp	r8, r3
   b4a06:	d01f      	beq.n	b4a48 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29c>
   b4a08:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4a0c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b4a10:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b4a14:	4598      	cmp	r8, r3
   b4a16:	d1a9      	bne.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4a18:	f107 0114 	add.w	r1, r7, #20
   b4a1c:	4638      	mov	r0, r7
   b4a1e:	f002 f85a 	bl	b6ad6 <BlynkWidgetWrite>
   b4a22:	e7a3      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b4a24:	f107 0114 	add.w	r1, r7, #20
   b4a28:	4638      	mov	r0, r7
   b4a2a:	f002 f854 	bl	b6ad6 <BlynkWidgetWrite>
   b4a2e:	e79d      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b4a30:	f107 0114 	add.w	r1, r7, #20
   b4a34:	4638      	mov	r0, r7
   b4a36:	f002 f84e 	bl	b6ad6 <BlynkWidgetWrite>
   b4a3a:	e797      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4a3c:	f107 0114 	add.w	r1, r7, #20
   b4a40:	4638      	mov	r0, r7
   b4a42:	f002 f848 	bl	b6ad6 <BlynkWidgetWrite>
   b4a46:	e791      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b4a48:	f107 0114 	add.w	r1, r7, #20
   b4a4c:	4638      	mov	r0, r7
   b4a4e:	f002 f842 	bl	b6ad6 <BlynkWidgetWrite>
   b4a52:	e78b      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4a54:	f107 0114 	add.w	r1, r7, #20
   b4a58:	4638      	mov	r0, r7
   b4a5a:	f002 f83c 	bl	b6ad6 <BlynkWidgetWrite>
   b4a5e:	e785      	b.n	b496c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
   b4a60:	00736676 	.word	0x00736676
   b4a64:	00676264 	.word	0x00676264
   b4a68:	6e6f6361 	.word	0x6e6f6361

000b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b4a6c:	b570      	push	{r4, r5, r6, lr}
   b4a6e:	4604      	mov	r4, r0
   b4a70:	b086      	sub	sp, #24
   b4a72:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4a74:	f7ff fcbe 	bl	b43f4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b4a78:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4a7c:	2b02      	cmp	r3, #2
   b4a7e:	d022      	beq.n	b4ac6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5a>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4a80:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (msgIdOutOverride || nesting > 2) {
   b4a84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   b4a86:	3301      	adds	r3, #1
   b4a88:	b2db      	uxtb	r3, r3
   b4a8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   b4a8e:	b9aa      	cbnz	r2, b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b4a90:	2b02      	cmp	r3, #2
   b4a92:	d813      	bhi.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4a94:	6920      	ldr	r0, [r4, #16]
   b4a96:	f003 f943 	bl	b7d20 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4a9a:	b1b0      	cbz	r0, b4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
        while (avail || conn.available() > 0) {
   b4a9c:	b925      	cbnz	r5, b4aa8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x3c>
    int available() { return client.available(); }
   b4a9e:	6920      	ldr	r0, [r4, #16]
   b4aa0:	f003 fa1c 	bl	b7edc <_ZN9TCPClient9availableEv>
   b4aa4:	2800      	cmp	r0, #0
   b4aa6:	dd10      	ble.n	b4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
            if (!processInput()) {
   b4aa8:	4620      	mov	r0, r4
   b4aaa:	f7ff fe7f 	bl	b47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4aae:	2800      	cmp	r0, #0
   b4ab0:	d1f5      	bne.n	b4a9e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x32>
    void disconnect() { client.stop(); }
   b4ab2:	6920      	ldr	r0, [r4, #16]
   b4ab4:	f003 fa6c 	bl	b7f90 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4ab8:	f002 f80e 	bl	b6ad8 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4abc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4ac0:	3b01      	subs	r3, #1
   b4ac2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   b4ac6:	b006      	add	sp, #24
   b4ac8:	bd70      	pop	{r4, r5, r6, pc}
    const millis_time_t t = BlynkMillis();
   b4aca:	f002 f801 	bl	b6ad0 <_Z11BlynkMillisv>
   b4ace:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4ad0:	6920      	ldr	r0, [r4, #16]
   b4ad2:	f003 f925 	bl	b7d20 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4ad6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   b4ada:	2e01      	cmp	r6, #1
   b4adc:	d124      	bne.n	b4b28 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbc>
        if (!tconn) {
   b4ade:	b920      	cbnz	r0, b4aea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x7e>
            lastHeartbeat = t;
   b4ae0:	6265      	str	r5, [r4, #36]	; 0x24
            internalReconnect();
   b4ae2:	4620      	mov	r0, r4
   b4ae4:	f7ff fd26 	bl	b4534 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4ae8:	e7e8      	b.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4aea:	69e3      	ldr	r3, [r4, #28]
   b4aec:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4af0:	1aeb      	subs	r3, r5, r3
   b4af2:	4293      	cmp	r3, r2
   b4af4:	d8f5      	bhi.n	b4ae2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x76>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4af6:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4afa:	4293      	cmp	r3, r2
   b4afc:	d803      	bhi.n	b4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x9a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4afe:	6a23      	ldr	r3, [r4, #32]
   b4b00:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4b02:	4293      	cmp	r3, r2
   b4b04:	d9da      	bls.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4b08:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4b0c:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4b0e:	4293      	cmp	r3, r2
   b4b10:	d9d4      	bls.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            sendCmd(BLYNK_CMD_PING);
   b4b12:	2300      	movs	r3, #0
   b4b14:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4b18:	9300      	str	r3, [sp, #0]
   b4b1a:	461a      	mov	r2, r3
   b4b1c:	2106      	movs	r1, #6
   b4b1e:	4620      	mov	r0, r4
   b4b20:	f000 f868 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b4b24:	6265      	str	r5, [r4, #36]	; 0x24
                return false;
   b4b26:	e7c9      	b.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    } else if (state == CONNECTING) {
   b4b28:	2e00      	cmp	r6, #0
   b4b2a:	d1c7      	bne.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b4b2e:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4b30:	b148      	cbz	r0, b4b46 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xda>
   b4b32:	f241 7270 	movw	r2, #6000	; 0x1770
   b4b36:	4293      	cmp	r3, r2
   b4b38:	d9c0      	bls.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    void disconnect() { client.stop(); }
   b4b3a:	6920      	ldr	r0, [r4, #16]
   b4b3c:	f003 fa28 	bl	b7f90 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4b40:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            return false;
   b4b44:	e7ba      	b.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b4b46:	f241 3288 	movw	r2, #5000	; 0x1388
   b4b4a:	4293      	cmp	r3, r2
   b4b4c:	d9b6      	bls.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b4b4e:	6920      	ldr	r0, [r4, #16]
   b4b50:	f003 fa1e 	bl	b7f90 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b4b54:	6926      	ldr	r6, [r4, #16]
        bool isConn = _connectToPort(port);
   b4b56:	8f31      	ldrh	r1, [r6, #56]	; 0x38
   b4b58:	4630      	mov	r0, r6
   b4b5a:	f7ff fcb1 	bl	b44c0 <_ZN22BlynkTransportParticle14_connectToPortEt>
        if (!isConn) {
   b4b5e:	b948      	cbnz	r0, b4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x108>
            if (port == 80) {
   b4b60:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   b4b62:	2b50      	cmp	r3, #80	; 0x50
   b4b64:	d11a      	bne.n	b4b9c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x130>
                isConn = _connectToPort(8080);
   b4b66:	f641 7190 	movw	r1, #8080	; 0x1f90
                isConn = _connectToPort(80);
   b4b6a:	4630      	mov	r0, r6
   b4b6c:	f7ff fca8 	bl	b44c0 <_ZN22BlynkTransportParticle14_connectToPortEt>
   b4b70:	2800      	cmp	r0, #0
   b4b72:	d0d7      	beq.n	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b74:	6963      	ldr	r3, [r4, #20]
   b4b76:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4b78:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b7a:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4b7c:	8525      	strh	r5, [r4, #40]	; 0x28
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4b7e:	f004 fe37 	bl	b97f0 <strlen>
   b4b82:	2200      	movs	r2, #0
   b4b84:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4b88:	9b05      	ldr	r3, [sp, #20]
   b4b8a:	9000      	str	r0, [sp, #0]
   b4b8c:	462a      	mov	r2, r5
   b4b8e:	211d      	movs	r1, #29
   b4b90:	4620      	mov	r0, r4
   b4b92:	f000 f82f 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4b96:	6a23      	ldr	r3, [r4, #32]
   b4b98:	6263      	str	r3, [r4, #36]	; 0x24
            return true;
   b4b9a:	e78f      	b.n	b4abc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            } else if (port == 8080) {
   b4b9c:	f641 7290 	movw	r2, #8080	; 0x1f90
   b4ba0:	4293      	cmp	r3, r2
   b4ba2:	d1bf      	bne.n	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
                isConn = _connectToPort(80);
   b4ba4:	2150      	movs	r1, #80	; 0x50
   b4ba6:	e7e0      	b.n	b4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>

000b4ba8 <loop>:
    }

  
}

void loop() {
   b4ba8:	b508      	push	{r3, lr}
  display.loop();
   b4baa:	480c      	ldr	r0, [pc, #48]	; (b4bdc <loop+0x34>)
   b4bac:	f000 ffc7 	bl	b5b3e <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b4bb0:	480b      	ldr	r0, [pc, #44]	; (b4be0 <loop+0x38>)
   b4bb2:	2100      	movs	r1, #0
   b4bb4:	f7ff ff5a 	bl	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bb8:	f002 f80c 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>

  //gets new metar code every 10 seconds
  if (moment >= millis() + 10000){
   b4bbc:	4b09      	ldr	r3, [pc, #36]	; (b4be4 <loop+0x3c>)
   b4bbe:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
   b4bc2:	681b      	ldr	r3, [r3, #0]
   b4bc4:	3010      	adds	r0, #16
   b4bc6:	4298      	cmp	r0, r3
   b4bc8:	d807      	bhi.n	b4bda <loop+0x32>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4bca:	4b07      	ldr	r3, [pc, #28]	; (b4be8 <loop+0x40>)
    client.publish("airport/request", airport);
   b4bcc:	4907      	ldr	r1, [pc, #28]	; (b4bec <loop+0x44>)
   b4bce:	681a      	ldr	r2, [r3, #0]
   b4bd0:	4807      	ldr	r0, [pc, #28]	; (b4bf0 <loop+0x48>)
  }
   b4bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    client.publish("airport/request", airport);
   b4bd6:	f001 bab8 	b.w	b614a <_ZN4MQTT7publishEPKcS1_>
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	2003e640 	.word	0x2003e640
   b4be0:	2003e2a8 	.word	0x2003e2a8
   b4be4:	2003e6b4 	.word	0x2003e6b4
   b4be8:	2003e3b0 	.word	0x2003e3b0
   b4bec:	000bb7fb 	.word	0x000bb7fb
   b4bf0:	2003e5e0 	.word	0x2003e5e0

000b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b4bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4bf8:	b091      	sub	sp, #68	; 0x44
   b4bfa:	af04      	add	r7, sp, #16
   b4bfc:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4bfe:	6900      	ldr	r0, [r0, #16]
   b4c00:	6dbd      	ldr	r5, [r7, #88]	; 0x58
   b4c02:	4689      	mov	r9, r1
   b4c04:	4616      	mov	r6, r2
   b4c06:	469a      	mov	sl, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4c08:	46eb      	mov	fp, sp
   b4c0a:	f003 f889 	bl	b7d20 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4c0e:	2800      	cmp	r0, #0
   b4c10:	f000 80b5 	beq.w	b4d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b4c14:	f1b9 0f1d 	cmp.w	r9, #29
   b4c18:	d804      	bhi.n	b4c24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b4c1a:	4b71      	ldr	r3, [pc, #452]	; (b4de0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ec>)
   b4c1c:	fa23 f309 	lsr.w	r3, r3, r9
   b4c20:	07db      	lsls	r3, r3, #31
   b4c22:	d420      	bmi.n	b4c66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
   b4c24:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4c28:	2b01      	cmp	r3, #1
   b4c2a:	f040 80a8 	bne.w	b4d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    if (cmd >= BLYNK_CMD_BRIDGE && cmd <= BLYNK_CMD_HARDWARE) {
   b4c2e:	f1a9 030f 	sub.w	r3, r9, #15
   b4c32:	2b05      	cmp	r3, #5
   b4c34:	d817      	bhi.n	b4c66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4c36:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   b4c3a:	4293      	cmp	r3, r2
   b4c3c:	bf38      	it	cc
   b4c3e:	4613      	movcc	r3, r2
   b4c40:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4c44:	f001 ff44 	bl	b6ad0 <_Z11BlynkMillisv>
   b4c48:	eba8 0000 	sub.w	r0, r8, r0
        if (wait_time >= 0) {
   b4c4c:	2800      	cmp	r0, #0
   b4c4e:	f2c0 809b 	blt.w	b4d88 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x194>
                run();
   b4c52:	2100      	movs	r1, #0
   b4c54:	4620      	mov	r0, r4
   b4c56:	f7ff ff09 	bl	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4c5a:	f001 ff39 	bl	b6ad0 <_Z11BlynkMillisv>
   b4c5e:	eba8 0000 	sub.w	r0, r8, r0
            while (wait_time >= 0) {
   b4c62:	2800      	cmp	r0, #0
   b4c64:	daf5      	bge.n	b4c52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x5e>
protected:
    void processCmd(const void* buff, size_t len);
    void sendInfo();

    void sendPendingGroup() {
        if (GROUP_PENDING == groupState) {
   b4c66:	7823      	ldrb	r3, [r4, #0]
   b4c68:	2b01      	cmp	r3, #1
   b4c6a:	d12d      	bne.n	b4cc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd4>
            // Set groupState here as sendCmd is recursive
            groupState = GROUP_STARTED;
   b4c6c:	2302      	movs	r3, #2
   b4c6e:	7023      	strb	r3, [r4, #0]
            if (groupTs) {
   b4c70:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4c74:	4313      	orrs	r3, r2
   b4c76:	f107 0018 	add.w	r0, r7, #24
   b4c7a:	f04f 0800 	mov.w	r8, #0
   b4c7e:	f000 808c 	beq.w	b4d9a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1a6>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4c82:	2318      	movs	r3, #24
   b4c84:	e9c7 0803 	strd	r0, r8, [r7, #12]
                char mem[24];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("t");
   b4c88:	4956      	ldr	r1, [pc, #344]	; (b4de4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f0>)
   b4c8a:	617b      	str	r3, [r7, #20]
   b4c8c:	f107 000c 	add.w	r0, r7, #12
   b4c90:	f7ff fbd5 	bl	b443e <_ZN10BlynkParam3addEPKc>
    }

    inline
    void BlynkParam::add(unsigned long long value)
    {
        len += snprintf(buff+len, buff_size-len, "%llu", value)+1;
   b4c94:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
   b4c98:	ed94 7b02 	vldr	d7, [r4, #8]
   b4c9c:	68f8      	ldr	r0, [r7, #12]
   b4c9e:	4a52      	ldr	r2, [pc, #328]	; (b4de8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f4>)
   b4ca0:	1ac9      	subs	r1, r1, r3
   b4ca2:	4418      	add	r0, r3
   b4ca4:	ed8d 7b00 	vstr	d7, [sp]
   b4ca8:	f002 f9e8 	bl	b707c <snprintf>
   b4cac:	693b      	ldr	r3, [r7, #16]
   b4cae:	3001      	adds	r0, #1
   b4cb0:	4418      	add	r0, r3
   b4cb2:	6138      	str	r0, [r7, #16]
                cmd.add(groupTs);
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4cb4:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4cb8:	3801      	subs	r0, #1
   b4cba:	9000      	str	r0, [sp, #0]
   b4cbc:	68fb      	ldr	r3, [r7, #12]
            } else {
                char mem[4];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("b");
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4cbe:	4642      	mov	r2, r8
   b4cc0:	2115      	movs	r1, #21
   b4cc2:	4620      	mov	r0, r4
   b4cc4:	f7ff ff96 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    if (0 == id) {
   b4cc8:	b946      	cbnz	r6, b4cdc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4cca:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
   b4ccc:	b936      	cbnz	r6, b4cdc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4cce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   b4cd0:	3301      	adds	r3, #1
   b4cd2:	b29b      	uxth	r3, r3
   b4cd4:	2b00      	cmp	r3, #0
   b4cd6:	d070      	beq.n	b4dba <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1c6>
        msgIdOut = 1;
   b4cd8:	8523      	strh	r3, [r4, #40]	; 0x28
    return msgIdOut;
   b4cda:	8d26      	ldrh	r6, [r4, #40]	; 0x28
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4cdc:	f1ba 0f00 	cmp.w	sl, #0
   b4ce0:	d06d      	beq.n	b4dbe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ca>
   b4ce2:	f105 0805 	add.w	r8, r5, #5
                               (data2 ? length2 : 0);
   b4ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4ce8:	2b00      	cmp	r3, #0
   b4cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4cec:	bf08      	it	eq
   b4cee:	2300      	moveq	r3, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4cf0:	4498      	add	r8, r3
    uint8_t buff[full_length];
   b4cf2:	f108 0307 	add.w	r3, r8, #7
   b4cf6:	f023 0307 	bic.w	r3, r3, #7
   b4cfa:	ebad 0d03 	sub.w	sp, sp, r3
   b4cfe:	ab04      	add	r3, sp, #16
   b4d00:	607b      	str	r3, [r7, #4]
    hdr->length = htons(length+length2);
   b4d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    hdr->type = cmd;
   b4d04:	f88d 9010 	strb.w	r9, [sp, #16]
    hdr->length = htons(length+length2);
   b4d08:	18ea      	adds	r2, r5, r3
   b4d0a:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4d0e:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->msg_id = htons(id);
   b4d14:	f8ad 6011 	strh.w	r6, [sp, #17]
    hdr->length = htons(length+length2);
   b4d18:	f8ad 3013 	strh.w	r3, [sp, #19]
    if (data && length) {
   b4d1c:	f1ba 0f00 	cmp.w	sl, #0
   b4d20:	d050      	beq.n	b4dc4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
   b4d22:	2d00      	cmp	r5, #0
   b4d24:	d04e      	beq.n	b4dc4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d0>
        memcpy(buff + pos, data, length);
   b4d26:	462a      	mov	r2, r5
   b4d28:	4651      	mov	r1, sl
   b4d2a:	f10d 0015 	add.w	r0, sp, #21
   b4d2e:	f004 fcf7 	bl	b9720 <memcpy>
        pos += length;
   b4d32:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b4d36:	b13b      	cbz	r3, b4d48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
   b4d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b4d3a:	b12b      	cbz	r3, b4d48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        memcpy(buff + pos, data2, length2);
   b4d3c:	461a      	mov	r2, r3
   b4d3e:	687b      	ldr	r3, [r7, #4]
   b4d40:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   b4d42:	4418      	add	r0, r3
   b4d44:	f004 fcec 	bl	b9720 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4d48:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4d4a:	4545      	cmp	r5, r8
   b4d4c:	d23e      	bcs.n	b4dcc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d8>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4d4e:	eba8 0205 	sub.w	r2, r8, r5
        return client.write((const uint8_t*)buf, len);
   b4d52:	687b      	ldr	r3, [r7, #4]
   b4d54:	6920      	ldr	r0, [r4, #16]
   b4d56:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4d5a:	bf28      	it	cs
   b4d5c:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4d60:	1959      	adds	r1, r3, r5
   b4d62:	f002 feb4 	bl	b7ace <_ZN9TCPClient5writeEPKhj>
   b4d66:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4d68:	2000      	movs	r0, #0
   b4d6a:	f001 feaf 	bl	b6acc <_Z10BlynkDelaym>
        if (w == 0) {
   b4d6e:	bb5e      	cbnz	r6, b4dc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d4>
    void disconnect() { client.stop(); }
   b4d70:	6920      	ldr	r0, [r4, #16]
   b4d72:	f003 f90d 	bl	b7f90 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4d76:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            BlynkOnDisconnected();
   b4d7a:	f001 fead 	bl	b6ad8 <BlynkNoOpCbk>
}
   b4d7e:	3734      	adds	r7, #52	; 0x34
   b4d80:	46dd      	mov	sp, fp
   b4d82:	46bd      	mov	sp, r7
   b4d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (nesting == 0) {
   b4d88:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   b4d8c:	2900      	cmp	r1, #0
   b4d8e:	f47f af6a 	bne.w	b4c66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
            run();
   b4d92:	4620      	mov	r0, r4
   b4d94:	f7ff fe6a 	bl	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4d98:	e765      	b.n	b4c66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x72>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4d9a:	f107 030c 	add.w	r3, r7, #12
   b4d9e:	e9c7 3806 	strd	r3, r8, [r7, #24]
                cmd.add("b");
   b4da2:	4912      	ldr	r1, [pc, #72]	; (b4dec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f8>)
   b4da4:	2304      	movs	r3, #4
   b4da6:	623b      	str	r3, [r7, #32]
   b4da8:	f7ff fb49 	bl	b443e <_ZN10BlynkParam3addEPKc>
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4dac:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4db0:	69fb      	ldr	r3, [r7, #28]
   b4db2:	3b01      	subs	r3, #1
   b4db4:	9300      	str	r3, [sp, #0]
   b4db6:	69bb      	ldr	r3, [r7, #24]
   b4db8:	e781      	b.n	b4cbe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xca>
        msgIdOut = 1;
   b4dba:	2301      	movs	r3, #1
   b4dbc:	e78c      	b.n	b4cd8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4dbe:	f04f 0805 	mov.w	r8, #5
   b4dc2:	e790      	b.n	b4ce6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf2>
    size_t pos = sizeof(BlynkHeader);
   b4dc4:	2005      	movs	r0, #5
   b4dc6:	e7b5      	b.n	b4d34 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x140>
        wlen += w;
   b4dc8:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4dca:	e7be      	b.n	b4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
    if (wlen != full_length) {
   b4dcc:	d003      	beq.n	b4dd6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1e2>
        internalReconnect();
   b4dce:	4620      	mov	r0, r4
   b4dd0:	f7ff fbb0 	bl	b4534 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4dd4:	e7d3      	b.n	b4d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
    lastActivityOut = BlynkMillis();
   b4dd6:	f001 fe7b 	bl	b6ad0 <_Z11BlynkMillisv>
   b4dda:	6220      	str	r0, [r4, #32]
   b4ddc:	e7cf      	b.n	b4d7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18a>
   b4dde:	bf00      	nop
   b4de0:	20000041 	.word	0x20000041
   b4de4:	000bb809 	.word	0x000bb809
   b4de8:	000bb80b 	.word	0x000bb80b
   b4dec:	000bb810 	.word	0x000bb810

000b4df0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4df0:	b530      	push	{r4, r5, lr}
   b4df2:	b099      	sub	sp, #100	; 0x64
   b4df4:	ab08      	add	r3, sp, #32
   b4df6:	4604      	mov	r4, r0
   b4df8:	9305      	str	r3, [sp, #20]
   b4dfa:	2500      	movs	r5, #0
   b4dfc:	2340      	movs	r3, #64	; 0x40
        add(key);
   b4dfe:	a805      	add	r0, sp, #20
   b4e00:	490b      	ldr	r1, [pc, #44]	; (b4e30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e02:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b4e06:	f7ff fb1a 	bl	b443e <_ZN10BlynkParam3addEPKc>
        add(val);
   b4e0a:	a805      	add	r0, sp, #20
   b4e0c:	4909      	ldr	r1, [pc, #36]	; (b4e34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b4e0e:	f7ff fb16 	bl	b443e <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength()-1);
   b4e12:	9b06      	ldr	r3, [sp, #24]
   b4e14:	3b01      	subs	r3, #1
   b4e16:	9302      	str	r3, [sp, #8]
   b4e18:	9b05      	ldr	r3, [sp, #20]
   b4e1a:	9301      	str	r3, [sp, #4]
   b4e1c:	2371      	movs	r3, #113	; 0x71
   b4e1e:	9300      	str	r3, [sp, #0]
   b4e20:	462a      	mov	r2, r5
   b4e22:	4b05      	ldr	r3, [pc, #20]	; (b4e38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b4e24:	2111      	movs	r1, #17
   b4e26:	4620      	mov	r0, r4
   b4e28:	f7ff fee4 	bl	b4bf4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4e2c:	b019      	add	sp, #100	; 0x64
   b4e2e:	bd30      	pop	{r4, r5, pc}
   b4e30:	000bb812 	.word	0x000bb812
   b4e34:	000bb817 	.word	0x000bb817
   b4e38:	000bb905 	.word	0x000bb905

000b4e3c <setup>:
void setup() {
   b4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e3e:	b085      	sub	sp, #20
  Serial.begin(9600);
   b4e40:	f002 fd6a 	bl	b7918 <_Z16_fetch_usbserialv>
   b4e44:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e48:	f002 fd5a 	bl	b7900 <_ZN9USBSerial5beginEl>
  Serial.println("connected");
   b4e4c:	f002 fd64 	bl	b7918 <_Z16_fetch_usbserialv>
   b4e50:	4930      	ldr	r1, [pc, #192]	; (b4f14 <setup+0xd8>)
        this->authkey = auth;
   b4e52:	4c31      	ldr	r4, [pc, #196]	; (b4f18 <setup+0xdc>)
   b4e54:	f002 fb23 	bl	b749e <_ZN5Print7printlnEPKc>
  delay(5000); // Allow board to settle
   b4e58:	f241 3088 	movw	r0, #5000	; 0x1388
   b4e5c:	f002 fbb4 	bl	b75c8 <delay>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4e60:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4e64:	f001 fe32 	bl	b6acc <_Z10BlynkDelaym>
   b4e68:	4b2c      	ldr	r3, [pc, #176]	; (b4f1c <setup+0xe0>)
   b4e6a:	6163      	str	r3, [r4, #20]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4e6c:	f001 fe30 	bl	b6ad0 <_Z11BlynkMillisv>
   b4e70:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b4e74:	6923      	ldr	r3, [r4, #16]
        domain = d;
   b4e76:	4a2a      	ldr	r2, [pc, #168]	; (b4f20 <setup+0xe4>)
   b4e78:	635a      	str	r2, [r3, #52]	; 0x34
   b4e7a:	3808      	subs	r0, #8
   b4e7c:	e9c4 0007 	strd	r0, r0, [r4, #28]
        port = p;
   b4e80:	2250      	movs	r2, #80	; 0x50
   b4e82:	6260      	str	r0, [r4, #36]	; 0x24
   b4e84:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b4e86:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b4e88:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4e8c:	6920      	ldr	r0, [r4, #16]
   b4e8e:	f003 f87f 	bl	b7f90 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4e92:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
        millis_time_t started = BlynkMillis();
   b4e96:	f001 fe1b 	bl	b6ad0 <_Z11BlynkMillisv>
   b4e9a:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b4e9c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4ea0:	2b01      	cmp	r3, #1
   b4ea2:	d00d      	beq.n	b4ec0 <setup+0x84>
               (BlynkMillis() - started < timeout))
   b4ea4:	f001 fe14 	bl	b6ad0 <_Z11BlynkMillisv>
   b4ea8:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b4eaa:	42b8      	cmp	r0, r7
   b4eac:	d804      	bhi.n	b4eb8 <setup+0x7c>
            run();
   b4eae:	2100      	movs	r1, #0
   b4eb0:	4620      	mov	r0, r4
   b4eb2:	f7ff fddb 	bl	b4a6c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4eb6:	e7f1      	b.n	b4e9c <setup+0x60>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b4eb8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b4ebc:	2b01      	cmp	r3, #1
   b4ebe:	d1e5      	bne.n	b4e8c <setup+0x50>
  display.setup();
   b4ec0:	4818      	ldr	r0, [pc, #96]	; (b4f24 <setup+0xe8>)
   b4ec2:	f000 fe13 	bl	b5aec <_ZN16OledWingAdafruit5setupEv>
  display.setTextSize(2);
   b4ec6:	2102      	movs	r1, #2
   b4ec8:	4816      	ldr	r0, [pc, #88]	; (b4f24 <setup+0xe8>)
   b4eca:	f000 fdc0 	bl	b5a4e <_ZN12Adafruit_GFX11setTextSizeEh>
   b4ece:	4815      	ldr	r0, [pc, #84]	; (b4f24 <setup+0xe8>)
   b4ed0:	2300      	movs	r3, #0
   b4ed2:	6103      	str	r3, [r0, #16]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4ed4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4ed8:	6143      	str	r3, [r0, #20]
  display.clearDisplay();
   b4eda:	f001 faef 	bl	b64bc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b4ede:	4811      	ldr	r0, [pc, #68]	; (b4f24 <setup+0xe8>)
   b4ee0:	f001 fd5a 	bl	b6998 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4ee4:	4668      	mov	r0, sp
   b4ee6:	f002 f8a1 	bl	b702c <spark_deviceID>
  client.connect(System.deviceID());
   b4eea:	9900      	ldr	r1, [sp, #0]
   b4eec:	480e      	ldr	r0, [pc, #56]	; (b4f28 <setup+0xec>)
   b4eee:	f001 f8a1 	bl	b6034 <_ZN4MQTT7connectEPKc>
   b4ef2:	4668      	mov	r0, sp
   b4ef4:	f002 f9fc 	bl	b72f0 <_ZN6StringD1Ev>
    if (client.isConnected())
   b4ef8:	480b      	ldr	r0, [pc, #44]	; (b4f28 <setup+0xec>)
   b4efa:	f000 ffab 	bl	b5e54 <_ZN4MQTT11isConnectedEv>
   b4efe:	b130      	cbz	r0, b4f0e <setup+0xd2>
        client.subscribe("airport/#");
   b4f00:	490a      	ldr	r1, [pc, #40]	; (b4f2c <setup+0xf0>)
   b4f02:	4809      	ldr	r0, [pc, #36]	; (b4f28 <setup+0xec>)
}
   b4f04:	b005      	add	sp, #20
   b4f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        client.subscribe("airport/#");
   b4f0a:	f001 b962 	b.w	b61d2 <_ZN4MQTT9subscribeEPKc>
}
   b4f0e:	b005      	add	sp, #20
   b4f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4f12:	bf00      	nop
   b4f14:	000bb825 	.word	0x000bb825
   b4f18:	2003e2a8 	.word	0x2003e2a8
   b4f1c:	000bb82f 	.word	0x000bb82f
   b4f20:	000bb850 	.word	0x000bb850
   b4f24:	2003e640 	.word	0x2003e640
   b4f28:	2003e5e0 	.word	0x2003e5e0
   b4f2c:	000bb85c 	.word	0x000bb85c

000b4f30 <_GLOBAL__sub_I_SystemMode>:
   b4f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b4f32:	2100      	movs	r1, #0
   b4f34:	2001      	movs	r0, #1
   b4f36:	f001 fff5 	bl	b6f24 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b4f3a:	4b82      	ldr	r3, [pc, #520]	; (b5144 <_GLOBAL__sub_I_SystemMode+0x214>)
    SleepResult() {}
   b4f3c:	4a82      	ldr	r2, [pc, #520]	; (b5148 <_GLOBAL__sub_I_SystemMode+0x218>)
        : domain(NULL), port(0), actual_port(0)
   b4f3e:	4c83      	ldr	r4, [pc, #524]	; (b514c <_GLOBAL__sub_I_SystemMode+0x21c>)
   b4f40:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4f42:	2500      	movs	r5, #0
   b4f44:	e9c3 5500 	strd	r5, r5, [r3]
        set_system_mode(mode);
   b4f48:	2003      	movs	r0, #3
   b4f4a:	f001 ffdb 	bl	b6f04 <set_system_mode>
   b4f4e:	4620      	mov	r0, r4
   b4f50:	f003 f868 	bl	b8024 <_ZN9TCPClientC1Ev>
   b4f54:	f104 001c 	add.w	r0, r4, #28
   b4f58:	f002 fc2c 	bl	b77b4 <_ZN9IPAddressC1Ev>
        , groupTs(0)
   b4f5c:	4b7c      	ldr	r3, [pc, #496]	; (b5150 <_GLOBAL__sub_I_SystemMode+0x220>)
   b4f5e:	2000      	movs	r0, #0
   b4f60:	2100      	movs	r1, #0
   b4f62:	e9c3 0102 	strd	r0, r1, [r3, #8]
        , state(CONNECTING)
   b4f66:	e9c3 4504 	strd	r4, r5, [r3, #16]
   b4f6a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   b4f6e:	e9c3 5506 	strd	r5, r5, [r3, #24]
   b4f72:	e9c3 5508 	strd	r5, r5, [r3, #32]
   b4f76:	701d      	strb	r5, [r3, #0]
   b4f78:	629d      	str	r5, [r3, #40]	; 0x28
   b4f7a:	859d      	strh	r5, [r3, #44]	; 0x2c
OledWingAdafruit display;
   b4f7c:	2107      	movs	r1, #7
   b4f7e:	4875      	ldr	r0, [pc, #468]	; (b5154 <_GLOBAL__sub_I_SystemMode+0x224>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4f80:	4c75      	ldr	r4, [pc, #468]	; (b5158 <_GLOBAL__sub_I_SystemMode+0x228>)
OledWingAdafruit display;
   b4f82:	f000 fd85 	bl	b5a90 <_ZN16OledWingAdafruitC1Ei>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4f86:	4b75      	ldr	r3, [pc, #468]	; (b515c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b4f88:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4f8c:	e9c3 2500 	strd	r2, r5, [r3]
      { __c1 = __c2; }
   b4f90:	721d      	strb	r5, [r3, #8]
   b4f92:	f001 fe1f 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
unsigned long moment = millis();
   b4f96:	4b72      	ldr	r3, [pc, #456]	; (b5160 <_GLOBAL__sub_I_SystemMode+0x230>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4f98:	4972      	ldr	r1, [pc, #456]	; (b5164 <_GLOBAL__sub_I_SystemMode+0x234>)
unsigned long moment = millis();
   b4f9a:	6018      	str	r0, [r3, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4f9c:	4b72      	ldr	r3, [pc, #456]	; (b5168 <_GLOBAL__sub_I_SystemMode+0x238>)
   b4f9e:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4fa2:	e9c3 2500 	strd	r2, r5, [r3]
   b4fa6:	721d      	strb	r5, [r3, #8]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b4fa8:	4b70      	ldr	r3, [pc, #448]	; (b516c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b4faa:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b4fae:	e9c3 2500 	strd	r2, r5, [r3]
   b4fb2:	721d      	strb	r5, [r3, #8]
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	f002 f9e6 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fba:	496d      	ldr	r1, [pc, #436]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x240>)
   b4fbc:	f104 0010 	add.w	r0, r4, #16
   b4fc0:	f002 f9e1 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fc4:	496b      	ldr	r1, [pc, #428]	; (b5174 <_GLOBAL__sub_I_SystemMode+0x244>)
   b4fc6:	f104 0020 	add.w	r0, r4, #32
   b4fca:	f002 f9dc 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fce:	496a      	ldr	r1, [pc, #424]	; (b5178 <_GLOBAL__sub_I_SystemMode+0x248>)
   b4fd0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4fd4:	f002 f9d7 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fd8:	4968      	ldr	r1, [pc, #416]	; (b517c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b4fda:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4fde:	f002 f9d2 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fe2:	4967      	ldr	r1, [pc, #412]	; (b5180 <_GLOBAL__sub_I_SystemMode+0x250>)
   b4fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4fe8:	f002 f9cd 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4fec:	4965      	ldr	r1, [pc, #404]	; (b5184 <_GLOBAL__sub_I_SystemMode+0x254>)
   b4fee:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4ff2:	f002 f9c8 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b4ff6:	4964      	ldr	r1, [pc, #400]	; (b5188 <_GLOBAL__sub_I_SystemMode+0x258>)
   b4ff8:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4ffc:	f002 f9c3 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5000:	4962      	ldr	r1, [pc, #392]	; (b518c <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5002:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b5006:	f002 f9be 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b500a:	4961      	ldr	r1, [pc, #388]	; (b5190 <_GLOBAL__sub_I_SystemMode+0x260>)
   b500c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b5010:	f002 f9b9 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5014:	495f      	ldr	r1, [pc, #380]	; (b5194 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5016:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b501a:	f002 f9b4 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b501e:	495e      	ldr	r1, [pc, #376]	; (b5198 <_GLOBAL__sub_I_SystemMode+0x268>)
   b5020:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b5024:	f002 f9af 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5028:	495c      	ldr	r1, [pc, #368]	; (b519c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b502a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b502e:	f002 f9aa 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5032:	495b      	ldr	r1, [pc, #364]	; (b51a0 <_GLOBAL__sub_I_SystemMode+0x270>)
   b5034:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   b5038:	f002 f9a5 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b503c:	4959      	ldr	r1, [pc, #356]	; (b51a4 <_GLOBAL__sub_I_SystemMode+0x274>)
   b503e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   b5042:	f002 f9a0 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5046:	4958      	ldr	r1, [pc, #352]	; (b51a8 <_GLOBAL__sub_I_SystemMode+0x278>)
   b5048:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   b504c:	f002 f99b 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5050:	4956      	ldr	r1, [pc, #344]	; (b51ac <_GLOBAL__sub_I_SystemMode+0x27c>)
   b5052:	f504 7080 	add.w	r0, r4, #256	; 0x100
   b5056:	f002 f996 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b505a:	4955      	ldr	r1, [pc, #340]	; (b51b0 <_GLOBAL__sub_I_SystemMode+0x280>)
   b505c:	f504 7088 	add.w	r0, r4, #272	; 0x110
   b5060:	f002 f991 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5064:	4953      	ldr	r1, [pc, #332]	; (b51b4 <_GLOBAL__sub_I_SystemMode+0x284>)
   b5066:	f504 7090 	add.w	r0, r4, #288	; 0x120
   b506a:	f002 f98c 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b506e:	4952      	ldr	r1, [pc, #328]	; (b51b8 <_GLOBAL__sub_I_SystemMode+0x288>)
   b5070:	f504 7098 	add.w	r0, r4, #304	; 0x130
   b5074:	f002 f987 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5078:	4950      	ldr	r1, [pc, #320]	; (b51bc <_GLOBAL__sub_I_SystemMode+0x28c>)
   b507a:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   b507e:	f002 f982 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5082:	494f      	ldr	r1, [pc, #316]	; (b51c0 <_GLOBAL__sub_I_SystemMode+0x290>)
   b5084:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   b5088:	f002 f97d 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b508c:	494d      	ldr	r1, [pc, #308]	; (b51c4 <_GLOBAL__sub_I_SystemMode+0x294>)
   b508e:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   b5092:	f002 f978 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b5096:	494c      	ldr	r1, [pc, #304]	; (b51c8 <_GLOBAL__sub_I_SystemMode+0x298>)
   b5098:	f504 70b8 	add.w	r0, r4, #368	; 0x170
   b509c:	f002 f973 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50a0:	494a      	ldr	r1, [pc, #296]	; (b51cc <_GLOBAL__sub_I_SystemMode+0x29c>)
   b50a2:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   b50a6:	f002 f96e 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50aa:	4949      	ldr	r1, [pc, #292]	; (b51d0 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b50ac:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   b50b0:	f002 f969 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50b4:	4947      	ldr	r1, [pc, #284]	; (b51d4 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   b50b6:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   b50ba:	f002 f964 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50be:	4946      	ldr	r1, [pc, #280]	; (b51d8 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b50c0:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   b50c4:	f002 f95f 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50c8:	4944      	ldr	r1, [pc, #272]	; (b51dc <_GLOBAL__sub_I_SystemMode+0x2ac>)
   b50ca:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   b50ce:	f002 f95a 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50d2:	4943      	ldr	r1, [pc, #268]	; (b51e0 <_GLOBAL__sub_I_SystemMode+0x2b0>)
   b50d4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   b50d8:	f002 f955 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50dc:	4941      	ldr	r1, [pc, #260]	; (b51e4 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b50de:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   b50e2:	f002 f950 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50e6:	4940      	ldr	r1, [pc, #256]	; (b51e8 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b50e8:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   b50ec:	f002 f94b 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50f0:	493e      	ldr	r1, [pc, #248]	; (b51ec <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b50f2:	f504 7000 	add.w	r0, r4, #512	; 0x200
   b50f6:	f002 f946 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
   b50fa:	493d      	ldr	r1, [pc, #244]	; (b51f0 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b50fc:	f504 7004 	add.w	r0, r4, #528	; 0x210
   b5100:	f002 f941 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
String airport;
   b5104:	493b      	ldr	r1, [pc, #236]	; (b51f4 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b5106:	483c      	ldr	r0, [pc, #240]	; (b51f8 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b5108:	f002 f93d 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b510c:	4b3b      	ldr	r3, [pc, #236]	; (b51fc <_GLOBAL__sub_I_SystemMode+0x2cc>)
MQTT client("lab.thewcl.com", 1883, callback);
   b510e:	493c      	ldr	r1, [pc, #240]	; (b5200 <_GLOBAL__sub_I_SystemMode+0x2d0>)
   b5110:	721d      	strb	r5, [r3, #8]
   b5112:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5116:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b511a:	4b3a      	ldr	r3, [pc, #232]	; (b5204 <_GLOBAL__sub_I_SystemMode+0x2d4>)
   b511c:	483a      	ldr	r0, [pc, #232]	; (b5208 <_GLOBAL__sub_I_SystemMode+0x2d8>)
   b511e:	721d      	strb	r5, [r3, #8]
   b5120:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5124:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5128:	4b38      	ldr	r3, [pc, #224]	; (b520c <_GLOBAL__sub_I_SystemMode+0x2dc>)
   b512a:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b512e:	e9c3 2500 	strd	r2, r5, [r3]
   b5132:	721d      	strb	r5, [r3, #8]
   b5134:	f240 725b 	movw	r2, #1883	; 0x75b
   b5138:	4b35      	ldr	r3, [pc, #212]	; (b5210 <_GLOBAL__sub_I_SystemMode+0x2e0>)
   b513a:	9500      	str	r5, [sp, #0]
   b513c:	f000 fdae 	bl	b5c9c <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b5140:	b003      	add	sp, #12
   b5142:	bd30      	pop	{r4, r5, pc}
   b5144:	2003e2d8 	.word	0x2003e2d8
   b5148:	ffff0000 	.word	0xffff0000
   b514c:	2003e374 	.word	0x2003e374
   b5150:	2003e2a8 	.word	0x2003e2a8
   b5154:	2003e640 	.word	0x2003e640
   b5158:	2003e3c0 	.word	0x2003e3c0
   b515c:	2003e344 	.word	0x2003e344
   b5160:	2003e6b4 	.word	0x2003e6b4
   b5164:	000bb866 	.word	0x000bb866
   b5168:	2003e314 	.word	0x2003e314
   b516c:	2003e2e4 	.word	0x2003e2e4
   b5170:	000bb86a 	.word	0x000bb86a
   b5174:	000bb86e 	.word	0x000bb86e
   b5178:	000bb872 	.word	0x000bb872
   b517c:	000bb876 	.word	0x000bb876
   b5180:	000bb87a 	.word	0x000bb87a
   b5184:	000bb87e 	.word	0x000bb87e
   b5188:	000bb882 	.word	0x000bb882
   b518c:	000bb886 	.word	0x000bb886
   b5190:	000bb88a 	.word	0x000bb88a
   b5194:	000bb88e 	.word	0x000bb88e
   b5198:	000bb892 	.word	0x000bb892
   b519c:	000bb896 	.word	0x000bb896
   b51a0:	000bb89a 	.word	0x000bb89a
   b51a4:	000bb89e 	.word	0x000bb89e
   b51a8:	000bb8a2 	.word	0x000bb8a2
   b51ac:	000bb8a6 	.word	0x000bb8a6
   b51b0:	000bb8aa 	.word	0x000bb8aa
   b51b4:	000bb8ae 	.word	0x000bb8ae
   b51b8:	000bb8b2 	.word	0x000bb8b2
   b51bc:	000bb8b6 	.word	0x000bb8b6
   b51c0:	000bb8ba 	.word	0x000bb8ba
   b51c4:	000bb8be 	.word	0x000bb8be
   b51c8:	000bb8c2 	.word	0x000bb8c2
   b51cc:	000bb8c6 	.word	0x000bb8c6
   b51d0:	000bb8ca 	.word	0x000bb8ca
   b51d4:	000bb8ce 	.word	0x000bb8ce
   b51d8:	000bb8d2 	.word	0x000bb8d2
   b51dc:	000bb8d6 	.word	0x000bb8d6
   b51e0:	000bb8da 	.word	0x000bb8da
   b51e4:	000bb8de 	.word	0x000bb8de
   b51e8:	000bb8e2 	.word	0x000bb8e2
   b51ec:	000bb8e6 	.word	0x000bb8e6
   b51f0:	000bb8ea 	.word	0x000bb8ea
   b51f4:	000bcb48 	.word	0x000bcb48
   b51f8:	2003e3b0 	.word	0x2003e3b0
   b51fc:	2003e2fc 	.word	0x2003e2fc
   b5200:	000bb8ee 	.word	0x000bb8ee
   b5204:	2003e35c 	.word	0x2003e35c
   b5208:	2003e5e0 	.word	0x2003e5e0
   b520c:	2003e32c 	.word	0x2003e32c
   b5210:	000b4145 	.word	0x000b4145

000b5214 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5214:	4770      	bx	lr

000b5216 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5216:	b510      	push	{r4, lr}
  }
   b5218:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b521a:	4604      	mov	r4, r0
  }
   b521c:	f7fe ff43 	bl	b40a6 <_ZdlPvj>
   b5220:	4620      	mov	r0, r4
   b5222:	bd10      	pop	{r4, pc}

000b5224 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5224:	b40e      	push	{r1, r2, r3}
   b5226:	b503      	push	{r0, r1, lr}
   b5228:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b522a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b522c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5230:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5232:	f002 f95c 	bl	b74ee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5236:	b002      	add	sp, #8
   b5238:	f85d eb04 	ldr.w	lr, [sp], #4
   b523c:	b003      	add	sp, #12
   b523e:	4770      	bx	lr

000b5240 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5240:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5242:	4604      	mov	r4, r0
   b5244:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5246:	7922      	ldrb	r2, [r4, #4]
   b5248:	68a3      	ldr	r3, [r4, #8]
   b524a:	b132      	cbz	r2, b525a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b524c:	b9a3      	cbnz	r3, b5278 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b524e:	490b      	ldr	r1, [pc, #44]	; (b527c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5250:	b002      	add	sp, #8
   b5252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5256:	f002 b90f 	b.w	b7478 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b525a:	4a09      	ldr	r2, [pc, #36]	; (b5280 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b525c:	7b26      	ldrb	r6, [r4, #12]
   b525e:	4d09      	ldr	r5, [pc, #36]	; (b5284 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5260:	4909      	ldr	r1, [pc, #36]	; (b5288 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5262:	7b64      	ldrb	r4, [r4, #13]
   b5264:	2e01      	cmp	r6, #1
   b5266:	bf18      	it	ne
   b5268:	4629      	movne	r1, r5
   b526a:	e9cd 1400 	strd	r1, r4, [sp]
   b526e:	4907      	ldr	r1, [pc, #28]	; (b528c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5270:	f7ff ffd8 	bl	b5224 <_ZN5Print6printfEPKcz>
  }
   b5274:	b002      	add	sp, #8
   b5276:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5278:	4a05      	ldr	r2, [pc, #20]	; (b5290 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b527a:	e7ef      	b.n	b525c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b527c:	000bb989 	.word	0x000bb989
   b5280:	000bcb48 	.word	0x000bcb48
   b5284:	000bb985 	.word	0x000bb985
   b5288:	000bb981 	.word	0x000bb981
   b528c:	000bb99f 	.word	0x000bb99f
   b5290:	000bb978 	.word	0x000bb978

000b5294 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5298:	b085      	sub	sp, #20
   b529a:	461f      	mov	r7, r3
   b529c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b52a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b52a4:	eba8 0902 	sub.w	r9, r8, r2
   b52a8:	eba7 0a01 	sub.w	sl, r7, r1
   b52ac:	f1b9 0f00 	cmp.w	r9, #0
   b52b0:	bfb8      	it	lt
   b52b2:	f1c9 0900 	rsblt	r9, r9, #0
   b52b6:	f1ba 0f00 	cmp.w	sl, #0
   b52ba:	bfb8      	it	lt
   b52bc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b52c0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b52c2:	4683      	mov	fp, r0
   b52c4:	460c      	mov	r4, r1
   b52c6:	4615      	mov	r5, r2
    if (steep) {
   b52c8:	dd04      	ble.n	b52d4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b52ca:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b52cc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b52ce:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b52d0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b52d2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b52d4:	42bc      	cmp	r4, r7
   b52d6:	dd05      	ble.n	b52e4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b52d8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b52da:	4645      	mov	r5, r8
   b52dc:	4690      	mov	r8, r2
    if (x0 > x1) {
   b52de:	4622      	mov	r2, r4
   b52e0:	463c      	mov	r4, r7
   b52e2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b52e4:	1b3e      	subs	r6, r7, r4
   b52e6:	b2b2      	uxth	r2, r6
   b52e8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b52ea:	eba8 0205 	sub.w	r2, r8, r5
   b52ee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b52f2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b52f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b52fa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b52fe:	4545      	cmp	r5, r8
   b5300:	bfb4      	ite	lt
   b5302:	2201      	movlt	r2, #1
   b5304:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5308:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b530a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b530c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b530e:	42bc      	cmp	r4, r7
   b5310:	dc1c      	bgt.n	b534c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5312:	f8db 2000 	ldr.w	r2, [fp]
   b5316:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5318:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b531a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b531e:	bfc7      	ittee	gt
   b5320:	4629      	movgt	r1, r5
   b5322:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5324:	462a      	movle	r2, r5
   b5326:	4621      	movle	r1, r4
   b5328:	4658      	mov	r0, fp
   b532a:	47c0      	blx	r8
        }
        err -= dy;
   b532c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b532e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5330:	1ab6      	subs	r6, r6, r2
   b5332:	b2b1      	uxth	r1, r6
   b5334:	b236      	sxth	r6, r6
        if (err < 0) {
   b5336:	2e00      	cmp	r6, #0
   b5338:	da05      	bge.n	b5346 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b533a:	9a02      	ldr	r2, [sp, #8]
   b533c:	4415      	add	r5, r2
            err += dx;
   b533e:	9a00      	ldr	r2, [sp, #0]
   b5340:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5342:	b22d      	sxth	r5, r5
            err += dx;
   b5344:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5346:	3401      	adds	r4, #1
   b5348:	b224      	sxth	r4, r4
   b534a:	e7e0      	b.n	b530e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b534c:	b005      	add	sp, #20
   b534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5352 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5352:	4770      	bx	lr

000b5354 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5354:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5356:	6804      	ldr	r4, [r0, #0]
   b5358:	6924      	ldr	r4, [r4, #16]
   b535a:	46a4      	mov	ip, r4
}
   b535c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5360:	4760      	bx	ip

000b5362 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5362:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5364:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5366:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b536a:	9502      	str	r5, [sp, #8]
   b536c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b536e:	46a4      	mov	ip, r4
}
   b5370:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5372:	4760      	bx	ip

000b5374 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5374:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5376:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5378:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b537c:	9502      	str	r5, [sp, #8]
   b537e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5380:	46a4      	mov	ip, r4
}
   b5382:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5384:	4760      	bx	ip

000b5386 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5386:	b470      	push	{r4, r5, r6}
   b5388:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b538c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5390:	6804      	ldr	r4, [r0, #0]
   b5392:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5396:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5398:	46a4      	mov	ip, r4
}
   b539a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b539c:	4760      	bx	ip

000b539e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b539e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b53a2:	461c      	mov	r4, r3
    startWrite();
   b53a4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b53a6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b53aa:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b53ac:	4605      	mov	r5, r0
   b53ae:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b53b0:	3c01      	subs	r4, #1
   b53b2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b53b4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b53b6:	b224      	sxth	r4, r4
    startWrite();
   b53b8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b53ba:	682b      	ldr	r3, [r5, #0]
   b53bc:	f8cd 8004 	str.w	r8, [sp, #4]
   b53c0:	9400      	str	r4, [sp, #0]
   b53c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b53c4:	4628      	mov	r0, r5
   b53c6:	463b      	mov	r3, r7
   b53c8:	4632      	mov	r2, r6
   b53ca:	4639      	mov	r1, r7
   b53cc:	47a0      	blx	r4
    endWrite();
   b53ce:	682b      	ldr	r3, [r5, #0]
   b53d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53d2:	4628      	mov	r0, r5
}
   b53d4:	b002      	add	sp, #8
   b53d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b53da:	4718      	bx	r3

000b53dc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b53dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b53e0:	461d      	mov	r5, r3
    startWrite();
   b53e2:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b53e4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b53e8:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b53ea:	4604      	mov	r4, r0
   b53ec:	4617      	mov	r7, r2
   b53ee:	460e      	mov	r6, r1
    startWrite();
   b53f0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b53f2:	e9cd 7800 	strd	r7, r8, [sp]
   b53f6:	6822      	ldr	r2, [r4, #0]
   b53f8:	1e6b      	subs	r3, r5, #1
   b53fa:	4433      	add	r3, r6
   b53fc:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b53fe:	4620      	mov	r0, r4
   b5400:	b21b      	sxth	r3, r3
   b5402:	463a      	mov	r2, r7
   b5404:	4631      	mov	r1, r6
   b5406:	47a8      	blx	r5
    endWrite();
   b5408:	6823      	ldr	r3, [r4, #0]
   b540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b540c:	4620      	mov	r0, r4
}
   b540e:	b002      	add	sp, #8
   b5410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5414:	4718      	bx	r3

000b5416 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5416:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b541a:	461e      	mov	r6, r3
    startWrite();
   b541c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b541e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5422:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5424:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5428:	460c      	mov	r4, r1
   b542a:	4605      	mov	r5, r0
   b542c:	4617      	mov	r7, r2
    startWrite();
   b542e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5430:	4426      	add	r6, r4
   b5432:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5434:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5436:	da0b      	bge.n	b5450 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5438:	f8cd 8000 	str.w	r8, [sp]
   b543c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5440:	4621      	mov	r1, r4
   b5442:	464b      	mov	r3, r9
   b5444:	463a      	mov	r2, r7
   b5446:	4628      	mov	r0, r5
   b5448:	3401      	adds	r4, #1
   b544a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b544c:	b224      	sxth	r4, r4
   b544e:	e7f0      	b.n	b5432 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5452:	4628      	mov	r0, r5
}
   b5454:	b002      	add	sp, #8
   b5456:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b545a:	4718      	bx	r3

000b545c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b545c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b545e:	6802      	ldr	r2, [r0, #0]
   b5460:	9101      	str	r1, [sp, #4]
   b5462:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5466:	9100      	str	r1, [sp, #0]
   b5468:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b546a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b546e:	2200      	movs	r2, #0
   b5470:	4611      	mov	r1, r2
   b5472:	47a0      	blx	r4
}
   b5474:	b002      	add	sp, #8
   b5476:	bd10      	pop	{r4, pc}

000b5478 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b547c:	4299      	cmp	r1, r3
        uint16_t color) {
   b547e:	4616      	mov	r6, r2
   b5480:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5484:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5488:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b548a:	4680      	mov	r8, r0
   b548c:	460d      	mov	r5, r1
   b548e:	461c      	mov	r4, r3
    if(x0 == x1){
   b5490:	d113      	bne.n	b54ba <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5492:	42be      	cmp	r6, r7
   b5494:	bfc8      	it	gt
   b5496:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5498:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b549c:	bfc4      	itt	gt
   b549e:	463e      	movgt	r6, r7
   b54a0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b54a2:	1c7b      	adds	r3, r7, #1
   b54a4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b54a6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b54a8:	b21b      	sxth	r3, r3
   b54aa:	4632      	mov	r2, r6
   b54ac:	4629      	mov	r1, r5
   b54ae:	4640      	mov	r0, r8
   b54b0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b54b2:	b003      	add	sp, #12
   b54b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b54b8:	4760      	bx	ip
    } else if(y0 == y1){
   b54ba:	42be      	cmp	r6, r7
   b54bc:	d10a      	bne.n	b54d4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b54be:	4299      	cmp	r1, r3
   b54c0:	bfc2      	ittt	gt
   b54c2:	460b      	movgt	r3, r1
   b54c4:	4625      	movgt	r5, r4
   b54c6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b54c8:	1c63      	adds	r3, r4, #1
   b54ca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b54ce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b54d0:	1b5b      	subs	r3, r3, r5
   b54d2:	e7e9      	b.n	b54a8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b54d4:	6953      	ldr	r3, [r2, #20]
   b54d6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b54d8:	e9cd 7900 	strd	r7, r9, [sp]
   b54dc:	f8d8 3000 	ldr.w	r3, [r8]
   b54e0:	4640      	mov	r0, r8
   b54e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b54e4:	4632      	mov	r2, r6
   b54e6:	4623      	mov	r3, r4
   b54e8:	4629      	mov	r1, r5
   b54ea:	47b8      	blx	r7
        endWrite();
   b54ec:	f8d8 3000 	ldr.w	r3, [r8]
   b54f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54f2:	4640      	mov	r0, r8
}
   b54f4:	b003      	add	sp, #12
   b54f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b54fa:	4718      	bx	r3

000b54fc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b54fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5500:	461d      	mov	r5, r3
    startWrite();
   b5502:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5504:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5508:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b550a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b550e:	4604      	mov	r4, r0
   b5510:	460f      	mov	r7, r1
   b5512:	4616      	mov	r6, r2
    startWrite();
   b5514:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5516:	6823      	ldr	r3, [r4, #0]
   b5518:	f8cd 8000 	str.w	r8, [sp]
   b551c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5520:	4632      	mov	r2, r6
   b5522:	462b      	mov	r3, r5
   b5524:	4639      	mov	r1, r7
   b5526:	4620      	mov	r0, r4
   b5528:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b552a:	6823      	ldr	r3, [r4, #0]
   b552c:	f8cd 8000 	str.w	r8, [sp]
   b5530:	f109 32ff 	add.w	r2, r9, #4294967295
   b5534:	4432      	add	r2, r6
   b5536:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b553a:	4639      	mov	r1, r7
   b553c:	462b      	mov	r3, r5
   b553e:	4620      	mov	r0, r4
   b5540:	b212      	sxth	r2, r2
   b5542:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5544:	6823      	ldr	r3, [r4, #0]
   b5546:	f8cd 8000 	str.w	r8, [sp]
   b554a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b554e:	4632      	mov	r2, r6
   b5550:	464b      	mov	r3, r9
   b5552:	4639      	mov	r1, r7
   b5554:	4620      	mov	r0, r4
   b5556:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5558:	1e6b      	subs	r3, r5, #1
   b555a:	19d9      	adds	r1, r3, r7
   b555c:	6823      	ldr	r3, [r4, #0]
   b555e:	f8cd 8000 	str.w	r8, [sp]
   b5562:	6a1d      	ldr	r5, [r3, #32]
   b5564:	4620      	mov	r0, r4
   b5566:	464b      	mov	r3, r9
   b5568:	4632      	mov	r2, r6
   b556a:	b209      	sxth	r1, r1
   b556c:	47a8      	blx	r5
    endWrite();
   b556e:	6823      	ldr	r3, [r4, #0]
   b5570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5572:	4620      	mov	r0, r4
}
   b5574:	b002      	add	sp, #8
   b5576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b557a:	4718      	bx	r3

000b557c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b557c:	4770      	bx	lr

000b557e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b557e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5582:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5586:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5588:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b558a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b558e:	bf59      	ittee	pl
   b5590:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5592:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5594:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5596:	81c3      	strhmi	r3, [r0, #14]
}
   b5598:	4770      	bx	lr
	...

000b559c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b559c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b559e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b55a0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b55a2:	4a07      	ldr	r2, [pc, #28]	; (b55c0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b55a4:	4d07      	ldr	r5, [pc, #28]	; (b55c4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b55a6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b55a8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b55aa:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b55ac:	f04f 31ff 	mov.w	r1, #4294967295
   b55b0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b55b4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b55b6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b55b8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b55ba:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b55bc:	6204      	str	r4, [r0, #32]
}
   b55be:	bd30      	pop	{r4, r5, pc}
   b55c0:	01000101 	.word	0x01000101
   b55c4:	000bbec4 	.word	0x000bbec4

000b55c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b55c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b55cc:	b089      	sub	sp, #36	; 0x24
   b55ce:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b55d2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b55d4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b55d8:	9304      	str	r3, [sp, #16]
   b55da:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b55de:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b55e0:	9305      	str	r3, [sp, #20]
   b55e2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b55e6:	4604      	mov	r4, r0
    startWrite();
   b55e8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b55ea:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b55ee:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b55f2:	bf48      	it	mi
   b55f4:	f108 020e 	addmi.w	r2, r8, #14
   b55f8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b55fc:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b55fe:	4635      	mov	r5, r6
   b5600:	9b03      	ldr	r3, [sp, #12]
   b5602:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5604:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5608:	189a      	adds	r2, r3, r2
   b560a:	9b05      	ldr	r3, [sp, #20]
   b560c:	428b      	cmp	r3, r1
   b560e:	b212      	sxth	r2, r2
   b5610:	dd27      	ble.n	b5662 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5612:	9b04      	ldr	r3, [sp, #16]
   b5614:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5616:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b561a:	9306      	str	r3, [sp, #24]
   b561c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5620:	4580      	cmp	r8, r0
   b5622:	fa1f f189 	uxth.w	r1, r9
   b5626:	dd17      	ble.n	b5658 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5628:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b562a:	bf05      	ittet	eq
   b562c:	9b06      	ldreq	r3, [sp, #24]
   b562e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5630:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5632:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5634:	bf18      	it	ne
   b5636:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5638:	062b      	lsls	r3, r5, #24
   b563a:	d50a      	bpl.n	b5652 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b563c:	9b02      	ldr	r3, [sp, #8]
   b563e:	6820      	ldr	r0, [r4, #0]
   b5640:	9207      	str	r2, [sp, #28]
   b5642:	4419      	add	r1, r3
   b5644:	6983      	ldr	r3, [r0, #24]
   b5646:	b209      	sxth	r1, r1
   b5648:	461f      	mov	r7, r3
   b564a:	4620      	mov	r0, r4
   b564c:	4653      	mov	r3, sl
   b564e:	47b8      	blx	r7
   b5650:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5652:	f109 0901 	add.w	r9, r9, #1
   b5656:	e7e1      	b.n	b561c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5658:	9b01      	ldr	r3, [sp, #4]
   b565a:	3301      	adds	r3, #1
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	445e      	add	r6, fp
   b5660:	e7ce      	b.n	b5600 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5662:	6823      	ldr	r3, [r4, #0]
   b5664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5666:	4620      	mov	r0, r4
}
   b5668:	b009      	add	sp, #36	; 0x24
   b566a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b566e:	4718      	bx	r3

000b5670 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5674:	ed2d 8b02 	vpush	{d8}
   b5678:	b091      	sub	sp, #68	; 0x44
   b567a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b567c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b567e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5682:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5686:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b568a:	9103      	str	r1, [sp, #12]
   b568c:	461f      	mov	r7, r3
   b568e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5692:	9304      	str	r3, [sp, #16]
   b5694:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5696:	2a00      	cmp	r2, #0
   b5698:	f040 80c5 	bne.w	b5826 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b569c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b56a0:	428b      	cmp	r3, r1
   b56a2:	f340 814c 	ble.w	b593e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b56a6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b56aa:	42b3      	cmp	r3, r6
   b56ac:	f340 8147 	ble.w	b593e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b56b0:	2306      	movs	r3, #6
   b56b2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b56b6:	2b00      	cmp	r3, #0
   b56b8:	f340 8141 	ble.w	b593e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b56bc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b56c0:	2b00      	cmp	r3, #0
   b56c2:	f340 813c 	ble.w	b593e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b56c6:	7f03      	ldrb	r3, [r0, #28]
   b56c8:	b91b      	cbnz	r3, b56d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b56ca:	2faf      	cmp	r7, #175	; 0xaf
   b56cc:	bf84      	itt	hi
   b56ce:	3701      	addhi	r7, #1
   b56d0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b56d2:	f8db 3000 	ldr.w	r3, [fp]
   b56d6:	4658      	mov	r0, fp
   b56d8:	695b      	ldr	r3, [r3, #20]
   b56da:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b56dc:	2205      	movs	r2, #5
   b56de:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b56e0:	2200      	movs	r2, #0
   b56e2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b56e4:	4a98      	ldr	r2, [pc, #608]	; (b5948 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b56e6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b56ea:	18d3      	adds	r3, r2, r3
   b56ec:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b56ee:	b2b3      	uxth	r3, r6
   b56f0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b56f2:	9a05      	ldr	r2, [sp, #20]
   b56f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b56f6:	5c9b      	ldrb	r3, [r3, r2]
   b56f8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b56fa:	b2ab      	uxth	r3, r5
   b56fc:	930b      	str	r3, [sp, #44]	; 0x2c
   b56fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5702:	9308      	str	r3, [sp, #32]
   b5704:	9b03      	ldr	r3, [sp, #12]
   b5706:	fb02 f905 	mul.w	r9, r2, r5
   b570a:	fa19 f983 	uxtah	r9, r9, r3
   b570e:	fa0f f389 	sxth.w	r3, r9
   b5712:	ee08 3a10 	vmov	s16, r3
   b5716:	2308      	movs	r3, #8
   b5718:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b571a:	9b03      	ldr	r3, [sp, #12]
   b571c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5720:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5724:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5728:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b572a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b572e:	07d2      	lsls	r2, r2, #31
   b5730:	d552      	bpl.n	b57d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5732:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5734:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5738:	d13e      	bne.n	b57b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b573a:	2c01      	cmp	r4, #1
   b573c:	d13c      	bne.n	b57b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b573e:	699b      	ldr	r3, [r3, #24]
   b5740:	9906      	ldr	r1, [sp, #24]
   b5742:	461f      	mov	r7, r3
   b5744:	9b04      	ldr	r3, [sp, #16]
   b5746:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5748:	b212      	sxth	r2, r2
   b574a:	4651      	mov	r1, sl
   b574c:	4658      	mov	r0, fp
   b574e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5750:	f109 0301 	add.w	r3, r9, #1
   b5754:	fa4f f983 	sxtb.w	r9, r3
   b5758:	9b07      	ldr	r3, [sp, #28]
   b575a:	085b      	lsrs	r3, r3, #1
   b575c:	9307      	str	r3, [sp, #28]
   b575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5760:	3b01      	subs	r3, #1
   b5762:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5766:	930a      	str	r3, [sp, #40]	; 0x28
   b5768:	d1de      	bne.n	b5728 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b576a:	9f05      	ldr	r7, [sp, #20]
   b576c:	3701      	adds	r7, #1
   b576e:	b27b      	sxtb	r3, r7
   b5770:	9305      	str	r3, [sp, #20]
   b5772:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5774:	3b01      	subs	r3, #1
   b5776:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b577a:	9309      	str	r3, [sp, #36]	; 0x24
   b577c:	d1b9      	bne.n	b56f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b577e:	9b04      	ldr	r3, [sp, #16]
   b5780:	4543      	cmp	r3, r8
   b5782:	d00f      	beq.n	b57a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5784:	2d01      	cmp	r5, #1
   b5786:	f8db 3000 	ldr.w	r3, [fp]
   b578a:	d13b      	bne.n	b5804 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b578c:	2c01      	cmp	r4, #1
   b578e:	d139      	bne.n	b5804 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5790:	9908      	ldr	r1, [sp, #32]
   b5792:	f8cd 8000 	str.w	r8, [sp]
   b5796:	3105      	adds	r1, #5
   b5798:	6a1c      	ldr	r4, [r3, #32]
   b579a:	4632      	mov	r2, r6
   b579c:	2308      	movs	r3, #8
   b579e:	b209      	sxth	r1, r1
   b57a0:	4658      	mov	r0, fp
   b57a2:	47a0      	blx	r4
        endWrite();
   b57a4:	f8db 3000 	ldr.w	r3, [fp]
   b57a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57aa:	4658      	mov	r0, fp
}
   b57ac:	b011      	add	sp, #68	; 0x44
   b57ae:	ecbd 8b02 	vpop	{d8}
   b57b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b57b6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b57b8:	9906      	ldr	r1, [sp, #24]
   b57ba:	fb14 f202 	smulbb	r2, r4, r2
   b57be:	440a      	add	r2, r1
   b57c0:	9904      	ldr	r1, [sp, #16]
   b57c2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b57c4:	9400      	str	r4, [sp, #0]
   b57c6:	69db      	ldr	r3, [r3, #28]
   b57c8:	ee18 1a10 	vmov	r1, s16
   b57cc:	461f      	mov	r7, r3
   b57ce:	b212      	sxth	r2, r2
   b57d0:	462b      	mov	r3, r5
   b57d2:	4658      	mov	r0, fp
   b57d4:	47b8      	blx	r7
   b57d6:	e7bb      	b.n	b5750 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b57d8:	9a04      	ldr	r2, [sp, #16]
   b57da:	4542      	cmp	r2, r8
   b57dc:	d0b8      	beq.n	b5750 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b57de:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b57e0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b57e4:	d107      	bne.n	b57f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b57e6:	2c01      	cmp	r4, #1
   b57e8:	d105      	bne.n	b57f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b57ea:	699b      	ldr	r3, [r3, #24]
   b57ec:	9906      	ldr	r1, [sp, #24]
   b57ee:	461f      	mov	r7, r3
   b57f0:	440a      	add	r2, r1
   b57f2:	4643      	mov	r3, r8
   b57f4:	e7a8      	b.n	b5748 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b57f6:	9906      	ldr	r1, [sp, #24]
   b57f8:	f8cd 8004 	str.w	r8, [sp, #4]
   b57fc:	fb14 f202 	smulbb	r2, r4, r2
   b5800:	440a      	add	r2, r1
   b5802:	e7df      	b.n	b57c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5804:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5806:	f8cd 8004 	str.w	r8, [sp, #4]
   b580a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b580e:	9a08      	ldr	r2, [sp, #32]
   b5810:	00e4      	lsls	r4, r4, #3
   b5812:	440a      	add	r2, r1
   b5814:	4611      	mov	r1, r2
   b5816:	9400      	str	r4, [sp, #0]
   b5818:	69dc      	ldr	r4, [r3, #28]
   b581a:	4632      	mov	r2, r6
   b581c:	462b      	mov	r3, r5
   b581e:	b209      	sxth	r1, r1
   b5820:	4658      	mov	r0, fp
   b5822:	47a0      	blx	r4
        endWrite();
   b5824:	e7be      	b.n	b57a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5826:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5828:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b582a:	6812      	ldr	r2, [r2, #0]
   b582c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b582e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5830:	b2ff      	uxtb	r7, r7
   b5832:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5836:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b583a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b583c:	789a      	ldrb	r2, [r3, #2]
   b583e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5840:	78da      	ldrb	r2, [r3, #3]
   b5842:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5844:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5846:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b584a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b584e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5850:	d801      	bhi.n	b5856 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5852:	2c01      	cmp	r4, #1
   b5854:	d957      	bls.n	b5906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5856:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b585a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b585c:	fa0f f38a 	sxth.w	r3, sl
   b5860:	9307      	str	r3, [sp, #28]
        startWrite();
   b5862:	f8db 3000 	ldr.w	r3, [fp]
   b5866:	4658      	mov	r0, fp
   b5868:	695b      	ldr	r3, [r3, #20]
   b586a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b586c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b586e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5872:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5874:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5878:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b587a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b587c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b587e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5880:	429f      	cmp	r7, r3
   b5882:	d28f      	bcs.n	b57a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5884:	9b07      	ldr	r3, [sp, #28]
   b5886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5888:	443b      	add	r3, r7
   b588a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b588e:	2200      	movs	r2, #0
   b5890:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5894:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5896:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b589a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b589e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b58a2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b58a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b58a6:	9905      	ldr	r1, [sp, #20]
   b58a8:	4291      	cmp	r1, r2
   b58aa:	d241      	bcs.n	b5930 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b58ac:	1c5a      	adds	r2, r3, #1
   b58ae:	b2d2      	uxtb	r2, r2
   b58b0:	075b      	lsls	r3, r3, #29
   b58b2:	920d      	str	r2, [sp, #52]	; 0x34
   b58b4:	d107      	bne.n	b58c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b58b6:	9b06      	ldr	r3, [sp, #24]
   b58b8:	9906      	ldr	r1, [sp, #24]
   b58ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b58bc:	3301      	adds	r3, #1
   b58be:	b29b      	uxth	r3, r3
   b58c0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b58c4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b58c6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b58ca:	d012      	beq.n	b58f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b58cc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b58ce:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b58d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b58d6:	d11a      	bne.n	b590e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b58d8:	2c01      	cmp	r4, #1
   b58da:	d118      	bne.n	b590e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b58dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b58de:	699b      	ldr	r3, [r3, #24]
   b58e0:	4411      	add	r1, r2
   b58e2:	9a05      	ldr	r2, [sp, #20]
   b58e4:	4411      	add	r1, r2
   b58e6:	461e      	mov	r6, r3
   b58e8:	4652      	mov	r2, sl
   b58ea:	9b04      	ldr	r3, [sp, #16]
   b58ec:	b209      	sxth	r1, r1
   b58ee:	4658      	mov	r0, fp
   b58f0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b58f2:	9e05      	ldr	r6, [sp, #20]
   b58f4:	3601      	adds	r6, #1
   b58f6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b58f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b58fc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b58fe:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5904:	e7ce      	b.n	b58a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5906:	2300      	movs	r3, #0
   b5908:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b590c:	e7a9      	b.n	b5862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b590e:	9805      	ldr	r0, [sp, #20]
   b5910:	9a08      	ldr	r2, [sp, #32]
   b5912:	4402      	add	r2, r0
   b5914:	fb02 1105 	mla	r1, r2, r5, r1
   b5918:	9a04      	ldr	r2, [sp, #16]
   b591a:	e9cd 4200 	strd	r4, r2, [sp]
   b591e:	69db      	ldr	r3, [r3, #28]
   b5920:	ee18 2a10 	vmov	r2, s16
   b5924:	461e      	mov	r6, r3
   b5926:	b209      	sxth	r1, r1
   b5928:	462b      	mov	r3, r5
   b592a:	4658      	mov	r0, fp
   b592c:	47b0      	blx	r6
   b592e:	e7e0      	b.n	b58f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5930:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5932:	3701      	adds	r7, #1
   b5934:	4498      	add	r8, r3
   b5936:	fa5f f888 	uxtb.w	r8, r8
   b593a:	b2ff      	uxtb	r7, r7
   b593c:	e79f      	b.n	b587e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b593e:	b011      	add	sp, #68	; 0x44
   b5940:	ecbd 8b02 	vpop	{d8}
   b5944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5948:	000bb9bc 	.word	0x000bb9bc

000b594c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b594c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b594e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5950:	b085      	sub	sp, #20
   b5952:	4604      	mov	r4, r0
   b5954:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5956:	2a00      	cmp	r2, #0
   b5958:	d134      	bne.n	b59c4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b595a:	290a      	cmp	r1, #10
   b595c:	d108      	bne.n	b5970 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b595e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5960:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5962:	7e42      	ldrb	r2, [r0, #25]
   b5964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5968:	8263      	strh	r3, [r4, #18]
}
   b596a:	2001      	movs	r0, #1
   b596c:	b005      	add	sp, #20
   b596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5970:	290d      	cmp	r1, #13
   b5972:	d0fa      	beq.n	b596a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5974:	7ee1      	ldrb	r1, [r4, #27]
   b5976:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5978:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b597a:	b171      	cbz	r1, b599a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b597c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b5980:	2106      	movs	r1, #6
   b5982:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5986:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b598a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b598c:	bfc1      	itttt	gt
   b598e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b5992:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5994:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5998:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b599a:	8ae2      	ldrh	r2, [r4, #22]
   b599c:	9201      	str	r2, [sp, #4]
   b599e:	8aa2      	ldrh	r2, [r4, #20]
   b59a0:	9200      	str	r2, [sp, #0]
   b59a2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b59a6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b59aa:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b59ae:	4620      	mov	r0, r4
   b59b0:	f7ff fe5e 	bl	b5670 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b59b4:	7e23      	ldrb	r3, [r4, #24]
   b59b6:	8a22      	ldrh	r2, [r4, #16]
   b59b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b59bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b59c0:	8223      	strh	r3, [r4, #16]
   b59c2:	e7d2      	b.n	b596a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b59c4:	290a      	cmp	r1, #10
   b59c6:	d107      	bne.n	b59d8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b59c8:	2300      	movs	r3, #0
   b59ca:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b59cc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b59ce:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b59d0:	8a43      	ldrh	r3, [r0, #18]
   b59d2:	fb01 3302 	mla	r3, r1, r2, r3
   b59d6:	e7c7      	b.n	b5968 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b59d8:	290d      	cmp	r1, #13
   b59da:	d0c6      	beq.n	b596a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b59dc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b59de:	42a9      	cmp	r1, r5
   b59e0:	d3c3      	bcc.n	b596a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b59e2:	7a51      	ldrb	r1, [r2, #9]
   b59e4:	4299      	cmp	r1, r3
   b59e6:	d3c0      	bcc.n	b596a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b59e8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b59ea:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b59ec:	b2ed      	uxtb	r5, r5
   b59ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b59f2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b59f4:	b328      	cbz	r0, b5a42 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b59f6:	78e9      	ldrb	r1, [r5, #3]
   b59f8:	b319      	cbz	r1, b5a42 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b59fa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b59fc:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b59fe:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5a00:	b191      	cbz	r1, b5a28 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5a02:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5a06:	4408      	add	r0, r1
   b5a08:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5a0c:	fb06 1100 	mla	r1, r6, r0, r1
   b5a10:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5a14:	4281      	cmp	r1, r0
   b5a16:	dd07      	ble.n	b5a28 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5a18:	2000      	movs	r0, #0
   b5a1a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5a1c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5a20:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5a22:	fb02 1207 	mla	r2, r2, r7, r1
   b5a26:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5a28:	8ae2      	ldrh	r2, [r4, #22]
   b5a2a:	9201      	str	r2, [sp, #4]
   b5a2c:	8aa2      	ldrh	r2, [r4, #20]
   b5a2e:	9200      	str	r2, [sp, #0]
   b5a30:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5a34:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5a38:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f7ff fe17 	bl	b5670 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5a42:	7929      	ldrb	r1, [r5, #4]
   b5a44:	7e22      	ldrb	r2, [r4, #24]
   b5a46:	8a23      	ldrh	r3, [r4, #16]
   b5a48:	fb01 3302 	mla	r3, r1, r2, r3
   b5a4c:	e7b8      	b.n	b59c0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b5a4e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b5a4e:	2901      	cmp	r1, #1
   b5a50:	bf38      	it	cc
   b5a52:	2101      	movcc	r1, #1
   b5a54:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5a56:	7641      	strb	r1, [r0, #25]
}
   b5a58:	4770      	bx	lr
	...

000b5a5c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b5a5c:	b510      	push	{r4, lr}
   b5a5e:	4b06      	ldr	r3, [pc, #24]	; (b5a78 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b5a60:	6003      	str	r3, [r0, #0]
   b5a62:	4604      	mov	r4, r0
	if (mutex) {
   b5a64:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b5a66:	b108      	cbz	r0, b5a6c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b5a68:	f001 f8c4 	bl	b6bf4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f000 fbb3 	bl	b61d8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5a72:	4620      	mov	r0, r4
   b5a74:	bd10      	pop	{r4, pc}
   b5a76:	bf00      	nop
   b5a78:	000bbf1c 	.word	0x000bbf1c

000b5a7c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5a7c:	b510      	push	{r4, lr}
   b5a7e:	4604      	mov	r4, r0
}
   b5a80:	f7ff ffec 	bl	b5a5c <_ZN16OledWingAdafruitD1Ev>
   b5a84:	4620      	mov	r0, r4
   b5a86:	2170      	movs	r1, #112	; 0x70
   b5a88:	f7fe fb0d 	bl	b40a6 <_ZdlPvj>
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	bd10      	pop	{r4, pc}

000b5a90 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5a90:	b530      	push	{r4, r5, lr}
   b5a92:	b085      	sub	sp, #20
   b5a94:	4604      	mov	r4, r0
   b5a96:	460d      	mov	r5, r1
   b5a98:	f002 fcd8 	bl	b844c <_Z19__fetch_global_Wirev>
   b5a9c:	4a10      	ldr	r2, [pc, #64]	; (b5ae0 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5a9e:	4911      	ldr	r1, [pc, #68]	; (b5ae4 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5aa0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5aa4:	f04f 32ff 	mov.w	r2, #4294967295
   b5aa8:	2180      	movs	r1, #128	; 0x80
   b5aaa:	4603      	mov	r3, r0
   b5aac:	9200      	str	r2, [sp, #0]
   b5aae:	4620      	mov	r0, r4
   b5ab0:	2220      	movs	r2, #32
   b5ab2:	f000 fc09 	bl	b62c8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5ab6:	4b0c      	ldr	r3, [pc, #48]	; (b5ae8 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5ab8:	6023      	str	r3, [r4, #0]
   b5aba:	2300      	movs	r3, #0
   b5abc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5ac4:	f000 f854 	bl	b5b70 <_ZN8DebounceC1Ev>
   b5ac8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5acc:	f000 f850 	bl	b5b70 <_ZN8DebounceC1Ev>
   b5ad0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5ad4:	f000 f84c 	bl	b5b70 <_ZN8DebounceC1Ev>
}
   b5ad8:	4620      	mov	r0, r4
   b5ada:	b005      	add	sp, #20
   b5adc:	bd30      	pop	{r4, r5, pc}
   b5ade:	bf00      	nop
   b5ae0:	00061a80 	.word	0x00061a80
   b5ae4:	000186a0 	.word	0x000186a0
   b5ae8:	000bbf1c 	.word	0x000bbf1c

000b5aec <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5aec:	b513      	push	{r0, r1, r4, lr}
   b5aee:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5af0:	3050      	adds	r0, #80	; 0x50
   b5af2:	f001 f877 	bl	b6be4 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5af6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5af8:	07d9      	lsls	r1, r3, #31
   b5afa:	d505      	bpl.n	b5b08 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5afc:	2202      	movs	r2, #2
   b5afe:	2104      	movs	r1, #4
   b5b00:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5b04:	f000 f848 	bl	b5b98 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5b0a:	079a      	lsls	r2, r3, #30
   b5b0c:	d505      	bpl.n	b5b1a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b5b0e:	2200      	movs	r2, #0
   b5b10:	2103      	movs	r1, #3
   b5b12:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5b16:	f000 f83f 	bl	b5b98 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b5b1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5b1c:	075b      	lsls	r3, r3, #29
   b5b1e:	d505      	bpl.n	b5b2c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5b20:	2202      	movs	r2, #2
   b5b22:	4611      	mov	r1, r2
   b5b24:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5b28:	f000 f836 	bl	b5b98 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5b2c:	2301      	movs	r3, #1
   b5b2e:	9300      	str	r3, [sp, #0]
   b5b30:	223c      	movs	r2, #60	; 0x3c
   b5b32:	2102      	movs	r1, #2
   b5b34:	4620      	mov	r0, r4
   b5b36:	f000 fccf 	bl	b64d8 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b5b3a:	b002      	add	sp, #8
   b5b3c:	bd10      	pop	{r4, pc}

000b5b3e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b5b3e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b5b40:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b5b42:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b5b44:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b5b46:	d502      	bpl.n	b5b4e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b5b48:	3058      	adds	r0, #88	; 0x58
   b5b4a:	f000 f832 	bl	b5bb2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b5b4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5b50:	079a      	lsls	r2, r3, #30
   b5b52:	d503      	bpl.n	b5b5c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b5b54:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5b58:	f000 f82b 	bl	b5bb2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b5b5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5b5e:	075b      	lsls	r3, r3, #29
   b5b60:	d505      	bpl.n	b5b6e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b5b62:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b5b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b5b6a:	f000 b822 	b.w	b5bb2 <_ZN8Debounce6updateEv>
}
   b5b6e:	bd10      	pop	{r4, pc}

000b5b70 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5b70:	2100      	movs	r1, #0
   b5b72:	220a      	movs	r2, #10
   b5b74:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5b78:	4770      	bx	lr

000b5b7a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5b7a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5b7c:	b510      	push	{r4, lr}
   b5b7e:	4604      	mov	r4, r0
    this->pin = pin;
   b5b80:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5b82:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5b84:	b288      	uxth	r0, r1
   b5b86:	f002 fbb9 	bl	b82fc <digitalRead>
   b5b8a:	b108      	cbz	r0, b5b90 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5b8c:	2303      	movs	r3, #3
   b5b8e:	71a3      	strb	r3, [r4, #6]
   b5b90:	f001 f820 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5b94:	6020      	str	r0, [r4, #0]
#endif
}
   b5b96:	bd10      	pop	{r4, pc}

000b5b98 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5b98:	b538      	push	{r3, r4, r5, lr}
   b5b9a:	460c      	mov	r4, r1
   b5b9c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5b9e:	4611      	mov	r1, r2
   b5ba0:	b2a0      	uxth	r0, r4
   b5ba2:	f002 fb81 	bl	b82a8 <pinMode>
  
  this->attach(pin);
   b5ba6:	4621      	mov	r1, r4
   b5ba8:	4628      	mov	r0, r5
}
   b5baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5bae:	f7ff bfe4 	b.w	b5b7a <_ZN8Debounce6attachEi>

000b5bb2 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5bb2:	b538      	push	{r3, r4, r5, lr}
   b5bb4:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5bb6:	79c0      	ldrb	r0, [r0, #7]
   b5bb8:	f002 fba0 	bl	b82fc <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5bbc:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5bbe:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5bc0:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5bc4:	bf18      	it	ne
   b5bc6:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5bc8:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5bcc:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5bce:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5bd0:	d00a      	beq.n	b5be8 <_ZN8Debounce6updateEv+0x36>
   b5bd2:	f000 ffff 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5bd6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5bd8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5bda:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5bde:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5be0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5be2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5be6:	bd38      	pop	{r3, r4, r5, pc}
   b5be8:	f000 fff4 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5bec:	6823      	ldr	r3, [r4, #0]
   b5bee:	1ac0      	subs	r0, r0, r3
   b5bf0:	88a3      	ldrh	r3, [r4, #4]
   b5bf2:	4298      	cmp	r0, r3
   b5bf4:	d3f4      	bcc.n	b5be0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5bf6:	79a3      	ldrb	r3, [r4, #6]
   b5bf8:	f003 0301 	and.w	r3, r3, #1
   b5bfc:	42ab      	cmp	r3, r5
   b5bfe:	d0ef      	beq.n	b5be0 <_ZN8Debounce6updateEv+0x2e>
   b5c00:	f000 ffe8 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5c04:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5c06:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5c08:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5c0c:	f043 0308 	orr.w	r3, r3, #8
   b5c10:	e7e5      	b.n	b5bde <_ZN8Debounce6updateEv+0x2c>

000b5c12 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5c12:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5c16:	b510      	push	{r4, lr}
   b5c18:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5c1a:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5c1c:	b113      	cbz	r3, b5c24 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5c1e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5c20:	f000 fff0 	bl	b6c04 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5c24:	4620      	mov	r0, r4
   b5c26:	bd10      	pop	{r4, pc}

000b5c28 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5c28:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5c2a:	6803      	ldr	r3, [r0, #0]
   b5c2c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5c30:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5c32:	b112      	cbz	r2, b5c3a <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5c34:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5c36:	f000 ffed 	bl	b6c14 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	bd10      	pop	{r4, pc}

000b5c3e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c40:	461f      	mov	r7, r3
   b5c42:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5c46:	4604      	mov	r4, r0
   b5c48:	460d      	mov	r5, r1
   b5c4a:	4616      	mov	r6, r2
    if (thread) {
   b5c4c:	b12b      	cbz	r3, b5c5a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5c4e:	2301      	movs	r3, #1
   b5c50:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5c54:	3058      	adds	r0, #88	; 0x58
   b5c56:	f000 ffc5 	bl	b6be4 <os_mutex_create>
    }
    this->callback = callback;
   b5c5a:	9b08      	ldr	r3, [sp, #32]
   b5c5c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5c5e:	2300      	movs	r3, #0
   b5c60:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5c62:	b106      	cbz	r6, b5c66 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5c64:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5c66:	b125      	cbz	r5, b5c72 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5c68:	4629      	mov	r1, r5
   b5c6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5c6e:	f001 fbad 	bl	b73cc <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5c72:	9b06      	ldr	r3, [sp, #24]
   b5c74:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5c76:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5c78:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5c7a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5c7e:	2bff      	cmp	r3, #255	; 0xff
   b5c80:	bfb8      	it	lt
   b5c82:	23ff      	movlt	r3, #255	; 0xff
   b5c84:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5c88:	b108      	cbz	r0, b5c8e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5c8a:	f7fe fa0a 	bl	b40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5c8e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5c92:	f7fe fa02 	bl	b409a <_Znaj>
   b5c96:	61e0      	str	r0, [r4, #28]
}
   b5c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5c9c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5c9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5ca0:	4604      	mov	r4, r0
            bool thread) {
   b5ca2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5ca4:	4617      	mov	r7, r2
   b5ca6:	4698      	mov	r8, r3
   b5ca8:	460e      	mov	r6, r1
            bool thread) {
   b5caa:	f002 f9bb 	bl	b8024 <_ZN9TCPClientC1Ev>
   b5cae:	490d      	ldr	r1, [pc, #52]	; (b5ce4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5cb0:	61e5      	str	r5, [r4, #28]
   b5cb2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5cb6:	f001 fb66 	bl	b7386 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5cba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5cbe:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5cc0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5cc4:	22ff      	movs	r2, #255	; 0xff
   b5cc6:	230f      	movs	r3, #15
   b5cc8:	e9cd 3200 	strd	r3, r2, [sp]
   b5ccc:	4620      	mov	r0, r4
            bool thread) {
   b5cce:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5cd2:	463b      	mov	r3, r7
   b5cd4:	462a      	mov	r2, r5
   b5cd6:	4631      	mov	r1, r6
   b5cd8:	f7ff ffb1 	bl	b5c3e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5cdc:	4620      	mov	r0, r4
   b5cde:	b004      	add	sp, #16
   b5ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5ce4:	000bcb48 	.word	0x000bcb48

000b5ce8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5ce8:	b510      	push	{r4, lr}
   b5cea:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5cec:	4620      	mov	r0, r4
   b5cee:	f002 f8f5 	bl	b7edc <_ZN9TCPClient9availableEv>
   b5cf2:	2800      	cmp	r0, #0
   b5cf4:	d0fa      	beq.n	b5cec <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5cf6:	4620      	mov	r0, r4
   b5cf8:	f001 fefe 	bl	b7af8 <_ZN9TCPClient4readEv>
}
   b5cfc:	b2c0      	uxtb	r0, r0
   b5cfe:	bd10      	pop	{r4, pc}

000b5d00 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d04:	4605      	mov	r5, r0
   b5d06:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5d08:	f7ff ffee 	bl	b5ce8 <_ZN4MQTT8readByteEv>
   b5d0c:	69eb      	ldr	r3, [r5, #28]
   b5d0e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5d10:	69eb      	ldr	r3, [r5, #28]
   b5d12:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5d16:	f04f 0901 	mov.w	r9, #1
   b5d1a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5d1e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5d20:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5d22:	4628      	mov	r0, r5
   b5d24:	f7ff ffe0 	bl	b5ce8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5d28:	4626      	mov	r6, r4
   b5d2a:	69eb      	ldr	r3, [r5, #28]
   b5d2c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5d2e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5d32:	fb13 f309 	smulbb	r3, r3, r9
   b5d36:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5d38:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5d3a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5d3c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5d3e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5d40:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5d44:	d4ed      	bmi.n	b5d22 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5d46:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5d48:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5d4c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5d50:	d11e      	bne.n	b5d90 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5d52:	4628      	mov	r0, r5
   b5d54:	f7ff ffc8 	bl	b5ce8 <_ZN4MQTT8readByteEv>
   b5d58:	69eb      	ldr	r3, [r5, #28]
   b5d5a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	f7ff ffc3 	bl	b5ce8 <_ZN4MQTT8readByteEv>
   b5d62:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5d64:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5d66:	b2b6      	uxth	r6, r6
   b5d68:	69eb      	ldr	r3, [r5, #28]
   b5d6a:	b2a4      	uxth	r4, r4
   b5d6c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5d6e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5d70:	b2b6      	uxth	r6, r6
   b5d72:	42be      	cmp	r6, r7
   b5d74:	d20e      	bcs.n	b5d94 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b5d76:	4628      	mov	r0, r5
   b5d78:	f7ff ffb6 	bl	b5ce8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5d7c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5d80:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b5d82:	bf84      	itt	hi
   b5d84:	69eb      	ldrhi	r3, [r5, #28]
   b5d86:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5d88:	3401      	adds	r4, #1
   b5d8a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5d8c:	3601      	adds	r6, #1
   b5d8e:	e7ef      	b.n	b5d70 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5d90:	2600      	movs	r6, #0
   b5d92:	e7ed      	b.n	b5d70 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b5d94:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b5d98:	42a3      	cmp	r3, r4
   b5d9a:	bf2c      	ite	cs
   b5d9c:	4620      	movcs	r0, r4
   b5d9e:	2000      	movcc	r0, #0
   b5da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5da4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5da8:	4615      	mov	r5, r2
   b5daa:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b5dac:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b5dae:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5db0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5db2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5db4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5db6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b5dba:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b5dbe:	f103 0401 	add.w	r4, r3, #1
   b5dc2:	4403      	add	r3, r0
            digit |= 0x80;
   b5dc4:	bf88      	it	hi
   b5dc6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b5dca:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b5dce:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5dd2:	b2e4      	uxtb	r4, r4
   b5dd4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5dd8:	d81e      	bhi.n	b5e18 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b5dda:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b5dde:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5de2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5de4:	4622      	mov	r2, r4
   b5de6:	a901      	add	r1, sp, #4
   b5de8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b5dea:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b5dee:	f003 fc97 	bl	b9720 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5df2:	1c72      	adds	r2, r6, #1
   b5df4:	4422      	add	r2, r4
   b5df6:	4641      	mov	r1, r8
   b5df8:	4638      	mov	r0, r7
   b5dfa:	f001 fe68 	bl	b7ace <_ZN9TCPClient5writeEPKhj>
   b5dfe:	4605      	mov	r5, r0
   b5e00:	f000 fee8 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5e04:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5e06:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5e08:	4432      	add	r2, r6
   b5e0a:	b2a8      	uxth	r0, r5
}
   b5e0c:	1a13      	subs	r3, r2, r0
   b5e0e:	4258      	negs	r0, r3
   b5e10:	4158      	adcs	r0, r3
   b5e12:	b002      	add	sp, #8
   b5e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5e18:	4623      	mov	r3, r4
   b5e1a:	e7ca      	b.n	b5db2 <_ZN4MQTT5writeEhPht+0xe>

000b5e1c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5e1c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e20:	4605      	mov	r5, r0
    pos += 2;
   b5e22:	b298      	uxth	r0, r3
   b5e24:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5e26:	5cce      	ldrb	r6, [r1, r3]
   b5e28:	b29c      	uxth	r4, r3
   b5e2a:	b156      	cbz	r6, b5e42 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5e2c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5e30:	4584      	cmp	ip, r0
   b5e32:	f103 0701 	add.w	r7, r3, #1
   b5e36:	d904      	bls.n	b5e42 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5e38:	1c44      	adds	r4, r0, #1
   b5e3a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5e3c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5e3e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5e40:	e7f1      	b.n	b5e26 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5e42:	b299      	uxth	r1, r3
   b5e44:	1a41      	subs	r1, r0, r1
   b5e46:	440a      	add	r2, r1
   b5e48:	0a21      	lsrs	r1, r4, #8
   b5e4a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5e4e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b5e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5e54 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b5e54:	b538      	push	{r3, r4, r5, lr}
   b5e56:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5e58:	f001 ff62 	bl	b7d20 <_ZN9TCPClient9connectedEv>
   b5e5c:	2800      	cmp	r0, #0
   b5e5e:	bf14      	ite	ne
   b5e60:	2501      	movne	r5, #1
   b5e62:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b5e64:	d102      	bne.n	b5e6c <_ZN4MQTT11isConnectedEv+0x18>
   b5e66:	4620      	mov	r0, r4
   b5e68:	f002 f892 	bl	b7f90 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5e6c:	4628      	mov	r0, r5
   b5e6e:	bd38      	pop	{r3, r4, r5, pc}

000b5e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5e74:	b088      	sub	sp, #32
   b5e76:	4604      	mov	r4, r0
   b5e78:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5e7c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5e80:	4689      	mov	r9, r1
   b5e82:	4617      	mov	r7, r2
   b5e84:	461e      	mov	r6, r3
    if (!isConnected()) {
   b5e86:	f7ff ffe5 	bl	b5e54 <_ZN4MQTT11isConnectedEv>
   b5e8a:	4605      	mov	r5, r0
   b5e8c:	2800      	cmp	r0, #0
   b5e8e:	f040 80cd 	bne.w	b602c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b5e92:	4621      	mov	r1, r4
   b5e94:	a801      	add	r0, sp, #4
   b5e96:	f7ff febc 	bl	b5c12 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b5e9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5e9c:	2900      	cmp	r1, #0
   b5e9e:	f040 8088 	bne.w	b5fb2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b5ea2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5ea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b5ea8:	462b      	mov	r3, r5
   b5eaa:	4620      	mov	r0, r4
   b5eac:	f001 feba 	bl	b7c24 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5eb0:	2800      	cmp	r0, #0
   b5eb2:	d07a      	beq.n	b5faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5eb4:	2301      	movs	r3, #1
   b5eb6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5eb8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5ebc:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b5ebe:	2b04      	cmp	r3, #4
   b5ec0:	4b5b      	ldr	r3, [pc, #364]	; (b6030 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5ec2:	f040 8081 	bne.w	b5fc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5ec6:	6818      	ldr	r0, [r3, #0]
   b5ec8:	8899      	ldrh	r1, [r3, #4]
   b5eca:	799b      	ldrb	r3, [r3, #6]
   b5ecc:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5ed0:	f88d 300e 	strb.w	r3, [sp, #14]
   b5ed4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5ed6:	f8c2 0005 	str.w	r0, [r2, #5]
   b5eda:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b5ede:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5ee2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5ee6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5ee8:	230c      	movs	r3, #12
            if (willTopic) {
   b5eea:	f1b8 0f00 	cmp.w	r8, #0
   b5eee:	f000 8081 	beq.w	b5ff4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5ef2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5ef6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5efa:	0140      	lsls	r0, r0, #5
   b5efc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5f00:	f040 0006 	orr.w	r0, r0, #6
   b5f04:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5f06:	f1ba 0f00 	cmp.w	sl, #0
   b5f0a:	d101      	bne.n	b5f10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5f0c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5f10:	b11f      	cbz	r7, b5f1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5f12:	2e00      	cmp	r6, #0
   b5f14:	d170      	bne.n	b5ff8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5f16:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5f1a:	69e2      	ldr	r2, [r4, #28]
   b5f1c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5f1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5f20:	69e1      	ldr	r1, [r4, #28]
   b5f22:	1c58      	adds	r0, r3, #1
   b5f24:	1212      	asrs	r2, r2, #8
   b5f26:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5f28:	1c9a      	adds	r2, r3, #2
   b5f2a:	69e1      	ldr	r1, [r4, #28]
   b5f2c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5f2e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5f30:	3303      	adds	r3, #3
   b5f32:	69e2      	ldr	r2, [r4, #28]
   b5f34:	4649      	mov	r1, r9
   b5f36:	4620      	mov	r0, r4
   b5f38:	f7ff ff70 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
   b5f3c:	4603      	mov	r3, r0
            if (willTopic) {
   b5f3e:	f1b8 0f00 	cmp.w	r8, #0
   b5f42:	d00b      	beq.n	b5f5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5f44:	69e2      	ldr	r2, [r4, #28]
   b5f46:	4641      	mov	r1, r8
   b5f48:	4620      	mov	r0, r4
   b5f4a:	f7ff ff67 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5f4e:	69e2      	ldr	r2, [r4, #28]
   b5f50:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b5f52:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b5f54:	4620      	mov	r0, r4
   b5f56:	f7ff ff61 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
   b5f5a:	4603      	mov	r3, r0
            if(user != NULL) {
   b5f5c:	b167      	cbz	r7, b5f78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5f5e:	69e2      	ldr	r2, [r4, #28]
   b5f60:	4639      	mov	r1, r7
   b5f62:	4620      	mov	r0, r4
   b5f64:	f7ff ff5a 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
   b5f68:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5f6a:	b12e      	cbz	r6, b5f78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5f6c:	69e2      	ldr	r2, [r4, #28]
   b5f6e:	4631      	mov	r1, r6
   b5f70:	4620      	mov	r0, r4
   b5f72:	f7ff ff53 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
   b5f76:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5f78:	3b05      	subs	r3, #5
   b5f7a:	69e2      	ldr	r2, [r4, #28]
   b5f7c:	b29b      	uxth	r3, r3
   b5f7e:	2110      	movs	r1, #16
   b5f80:	4620      	mov	r0, r4
   b5f82:	f7ff ff0f 	bl	b5da4 <_ZN4MQTT5writeEhPht>
   b5f86:	f000 fe25 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5f8a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5f8e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b5f92:	4620      	mov	r0, r4
   b5f94:	f001 ffa2 	bl	b7edc <_ZN9TCPClient9availableEv>
   b5f98:	bb88      	cbnz	r0, b5ffe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b5f9a:	f000 fe1b 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b5fa0:	1ac0      	subs	r0, r0, r3
   b5fa2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5fa4:	4373      	muls	r3, r6
   b5fa6:	4298      	cmp	r0, r3
   b5fa8:	d9f3      	bls.n	b5f92 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b5faa:	4620      	mov	r0, r4
   b5fac:	f001 fff0 	bl	b7f90 <_ZN9TCPClient4stopEv>
   b5fb0:	e035      	b.n	b601e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5fb2:	a802      	add	r0, sp, #8
   b5fb4:	f001 fc42 	bl	b783c <_ZN9IPAddressC1EPKh>
   b5fb8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b5fbc:	462b      	mov	r3, r5
   b5fbe:	a902      	add	r1, sp, #8
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	f001 ff0f 	bl	b7de4 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5fc6:	e773      	b.n	b5eb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5fc8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b5fcc:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5fd0:	7bdb      	ldrb	r3, [r3, #15]
   b5fd2:	f10d 0c08 	add.w	ip, sp, #8
   b5fd6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b5fda:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b5fde:	ab02      	add	r3, sp, #8
   b5fe0:	cb03      	ldmia	r3!, {r0, r1}
   b5fe2:	f8c2 0005 	str.w	r0, [r2, #5]
   b5fe6:	f8c2 1009 	str.w	r1, [r2, #9]
   b5fea:	f89c 3000 	ldrb.w	r3, [ip]
   b5fee:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5ff0:	230e      	movs	r3, #14
   b5ff2:	e77a      	b.n	b5eea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5ff4:	2002      	movs	r0, #2
   b5ff6:	e786      	b.n	b5f06 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5ff8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5ffc:	e78d      	b.n	b5f1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5ffe:	a902      	add	r1, sp, #8
   b6000:	4620      	mov	r0, r4
   b6002:	f7ff fe7d 	bl	b5d00 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6006:	2804      	cmp	r0, #4
   b6008:	d1cf      	bne.n	b5faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b600a:	69e3      	ldr	r3, [r4, #28]
   b600c:	78de      	ldrb	r6, [r3, #3]
   b600e:	2e00      	cmp	r6, #0
   b6010:	d1cb      	bne.n	b5faa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6012:	f000 fddf 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6016:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6018:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b601a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b601e:	a801      	add	r0, sp, #4
   b6020:	f7ff fe02 	bl	b5c28 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6024:	4628      	mov	r0, r5
   b6026:	b008      	add	sp, #32
   b6028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b602c:	2500      	movs	r5, #0
   b602e:	e7f9      	b.n	b6024 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6030:	000bbf6c 	.word	0x000bbf6c

000b6034 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6036:	2301      	movs	r3, #1
   b6038:	2204      	movs	r2, #4
   b603a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b603e:	2300      	movs	r3, #0
   b6040:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6044:	e9cd 3300 	strd	r3, r3, [sp]
   b6048:	461a      	mov	r2, r3
   b604a:	f7ff ff11 	bl	b5e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b604e:	b007      	add	sp, #28
   b6050:	f85d fb04 	ldr.w	pc, [sp], #4

000b6054 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6058:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b605c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6060:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6064:	4604      	mov	r4, r0
   b6066:	468b      	mov	fp, r1
   b6068:	4616      	mov	r6, r2
   b606a:	461f      	mov	r7, r3
    if (isConnected()) {
   b606c:	f7ff fef2 	bl	b5e54 <_ZN4MQTT11isConnectedEv>
   b6070:	4682      	mov	sl, r0
   b6072:	2800      	cmp	r0, #0
   b6074:	d051      	beq.n	b611a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6076:	4621      	mov	r1, r4
   b6078:	a801      	add	r0, sp, #4
   b607a:	f7ff fdca 	bl	b5c12 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b607e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6082:	69e0      	ldr	r0, [r4, #28]
   b6084:	2100      	movs	r1, #0
   b6086:	f003 fb73 	bl	b9770 <memset>
        length = writeString(topic, buffer, length);
   b608a:	2305      	movs	r3, #5
   b608c:	69e2      	ldr	r2, [r4, #28]
   b608e:	4659      	mov	r1, fp
   b6090:	4620      	mov	r0, r4
   b6092:	f7ff fec3 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6096:	1e6b      	subs	r3, r5, #1
   b6098:	2b01      	cmp	r3, #1
   b609a:	d815      	bhi.n	b60c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b609c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b609e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b60a0:	3101      	adds	r1, #1
   b60a2:	b289      	uxth	r1, r1
   b60a4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b60a6:	0a09      	lsrs	r1, r1, #8
   b60a8:	5419      	strb	r1, [r3, r0]
   b60aa:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b60ac:	69e3      	ldr	r3, [r4, #28]
   b60ae:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b60b0:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b60b2:	3002      	adds	r0, #2
   b60b4:	5499      	strb	r1, [r3, r2]
   b60b6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b60b8:	f1b8 0f00 	cmp.w	r8, #0
   b60bc:	d004      	beq.n	b60c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b60be:	8c23      	ldrh	r3, [r4, #32]
   b60c0:	1c5a      	adds	r2, r3, #1
   b60c2:	8422      	strh	r2, [r4, #32]
   b60c4:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b60c8:	2100      	movs	r1, #0
   b60ca:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b60cc:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b60ce:	69e2      	ldr	r2, [r4, #28]
   b60d0:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b60d2:	d90a      	bls.n	b60ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b60d4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b60d8:	459c      	cmp	ip, r3
   b60da:	d906      	bls.n	b60ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b60dc:	f816 c001 	ldrb.w	ip, [r6, r1]
   b60e0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b60e4:	3101      	adds	r1, #1
   b60e6:	b289      	uxth	r1, r1
   b60e8:	e7ef      	b.n	b60ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b60ea:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b60ee:	2900      	cmp	r1, #0
   b60f0:	bf0c      	ite	eq
   b60f2:	2130      	moveq	r1, #48	; 0x30
   b60f4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b60f6:	f1b9 0f00 	cmp.w	r9, #0
   b60fa:	d001      	beq.n	b6100 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b60fc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6100:	2d02      	cmp	r5, #2
   b6102:	d10e      	bne.n	b6122 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6104:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6108:	3b05      	subs	r3, #5
   b610a:	b29b      	uxth	r3, r3
   b610c:	4620      	mov	r0, r4
   b610e:	f7ff fe49 	bl	b5da4 <_ZN4MQTT5writeEhPht>
   b6112:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6114:	a801      	add	r0, sp, #4
   b6116:	f7ff fd87 	bl	b5c28 <_ZN4MQTT11MutexLockerD1Ev>
}
   b611a:	4650      	mov	r0, sl
   b611c:	b003      	add	sp, #12
   b611e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6122:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6124:	bf08      	it	eq
   b6126:	f041 0102 	orreq.w	r1, r1, #2
   b612a:	e7ed      	b.n	b6108 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b612c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b612c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b612e:	9c08      	ldr	r4, [sp, #32]
   b6130:	9403      	str	r4, [sp, #12]
   b6132:	2400      	movs	r4, #0
   b6134:	9402      	str	r4, [sp, #8]
   b6136:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b613a:	9401      	str	r4, [sp, #4]
   b613c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6140:	9400      	str	r4, [sp, #0]
   b6142:	f7ff ff87 	bl	b6054 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6146:	b004      	add	sp, #16
   b6148:	bd10      	pop	{r4, pc}

000b614a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b614a:	b530      	push	{r4, r5, lr}
   b614c:	b087      	sub	sp, #28
   b614e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6150:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6152:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6154:	9204      	str	r2, [sp, #16]
   b6156:	f003 fb4b 	bl	b97f0 <strlen>
   b615a:	2500      	movs	r5, #0
   b615c:	4603      	mov	r3, r0
   b615e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6162:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6166:	9500      	str	r5, [sp, #0]
   b6168:	4620      	mov	r0, r4
   b616a:	f7ff ffdf 	bl	b612c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b616e:	b007      	add	sp, #28
   b6170:	bd30      	pop	{r4, r5, pc}

000b6172 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6174:	4604      	mov	r4, r0
   b6176:	460f      	mov	r7, r1
   b6178:	4616      	mov	r6, r2
    if (isConnected()) {
   b617a:	f7ff fe6b 	bl	b5e54 <_ZN4MQTT11isConnectedEv>
   b617e:	4605      	mov	r5, r0
   b6180:	b310      	cbz	r0, b61c8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6182:	4621      	mov	r1, r4
   b6184:	a801      	add	r0, sp, #4
   b6186:	f7ff fd44 	bl	b5c12 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b618a:	8c23      	ldrh	r3, [r4, #32]
   b618c:	3301      	adds	r3, #1
   b618e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6190:	b1eb      	cbz	r3, b61ce <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6192:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6194:	8c23      	ldrh	r3, [r4, #32]
   b6196:	69e2      	ldr	r2, [r4, #28]
   b6198:	0a1b      	lsrs	r3, r3, #8
   b619a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b619c:	69e3      	ldr	r3, [r4, #28]
   b619e:	8c22      	ldrh	r2, [r4, #32]
   b61a0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b61a2:	69e2      	ldr	r2, [r4, #28]
   b61a4:	2307      	movs	r3, #7
   b61a6:	4639      	mov	r1, r7
   b61a8:	4620      	mov	r0, r4
   b61aa:	f7ff fe37 	bl	b5e1c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b61ae:	69e3      	ldr	r3, [r4, #28]
   b61b0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b61b2:	3804      	subs	r0, #4
   b61b4:	b283      	uxth	r3, r0
   b61b6:	69e2      	ldr	r2, [r4, #28]
   b61b8:	2182      	movs	r1, #130	; 0x82
   b61ba:	4620      	mov	r0, r4
   b61bc:	f7ff fdf2 	bl	b5da4 <_ZN4MQTT5writeEhPht>
   b61c0:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b61c2:	a801      	add	r0, sp, #4
   b61c4:	f7ff fd30 	bl	b5c28 <_ZN4MQTT11MutexLockerD1Ev>
}
   b61c8:	4628      	mov	r0, r5
   b61ca:	b003      	add	sp, #12
   b61cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b61ce:	2301      	movs	r3, #1
   b61d0:	e7df      	b.n	b6192 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b61d2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b61d2:	2200      	movs	r2, #0
   b61d4:	f7ff bfcd 	b.w	b6172 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b61d8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b61d8:	b510      	push	{r4, lr}
   b61da:	4b04      	ldr	r3, [pc, #16]	; (b61ec <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b61dc:	6003      	str	r3, [r0, #0]
   b61de:	4604      	mov	r4, r0
  if(buffer) {
   b61e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b61e2:	b108      	cbz	r0, b61e8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b61e4:	f000 ff3a 	bl	b705c <free>
    buffer = NULL;
  }
}
   b61e8:	4620      	mov	r0, r4
   b61ea:	bd10      	pop	{r4, pc}
   b61ec:	000bc438 	.word	0x000bc438

000b61f0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b61f0:	b510      	push	{r4, lr}
   b61f2:	4604      	mov	r4, r0
}
   b61f4:	f7ff fff0 	bl	b61d8 <_ZN16Adafruit_SSD1306D1Ev>
   b61f8:	4620      	mov	r0, r4
   b61fa:	2150      	movs	r1, #80	; 0x50
   b61fc:	f7fd ff53 	bl	b40a6 <_ZdlPvj>
   b6200:	4620      	mov	r0, r4
   b6202:	bd10      	pop	{r4, pc}

000b6204 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6204:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6206:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6208:	db4b      	blt.n	b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b620a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b620e:	428c      	cmp	r4, r1
   b6210:	dd47      	ble.n	b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6212:	2a00      	cmp	r2, #0
   b6214:	db45      	blt.n	b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6216:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b621a:	4294      	cmp	r4, r2
   b621c:	dd41      	ble.n	b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b621e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6220:	2c02      	cmp	r4, #2
   b6222:	d01f      	beq.n	b6264 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6224:	2c03      	cmp	r4, #3
   b6226:	d026      	beq.n	b6276 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6228:	2c01      	cmp	r4, #1
   b622a:	d104      	bne.n	b6236 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b622c:	8904      	ldrh	r4, [r0, #8]
   b622e:	43d2      	mvns	r2, r2
   b6230:	4414      	add	r4, r2
      break;
   b6232:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6234:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6236:	2b01      	cmp	r3, #1
   b6238:	d023      	beq.n	b6282 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b623a:	2b02      	cmp	r3, #2
   b623c:	d032      	beq.n	b62a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b623e:	bb83      	cbnz	r3, b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6240:	2a00      	cmp	r2, #0
   b6242:	4613      	mov	r3, r2
   b6244:	8904      	ldrh	r4, [r0, #8]
   b6246:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6248:	bfb8      	it	lt
   b624a:	1dd3      	addlt	r3, r2, #7
   b624c:	10db      	asrs	r3, r3, #3
   b624e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6252:	f002 0207 	and.w	r2, r2, #7
   b6256:	2301      	movs	r3, #1
   b6258:	4093      	lsls	r3, r2
   b625a:	5c42      	ldrb	r2, [r0, r1]
   b625c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6260:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6262:	e01e      	b.n	b62a2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6264:	8904      	ldrh	r4, [r0, #8]
   b6266:	3c01      	subs	r4, #1
   b6268:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b626a:	8944      	ldrh	r4, [r0, #10]
   b626c:	43d2      	mvns	r2, r2
   b626e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6270:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6272:	b212      	sxth	r2, r2
      break;
   b6274:	e7df      	b.n	b6236 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6276:	8944      	ldrh	r4, [r0, #10]
   b6278:	3c01      	subs	r4, #1
   b627a:	1a64      	subs	r4, r4, r1
      break;
   b627c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b627e:	b222      	sxth	r2, r4
      break;
   b6280:	e7d9      	b.n	b6236 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6282:	2a00      	cmp	r2, #0
   b6284:	8904      	ldrh	r4, [r0, #8]
   b6286:	4613      	mov	r3, r2
   b6288:	bfb8      	it	lt
   b628a:	1dd3      	addlt	r3, r2, #7
   b628c:	10db      	asrs	r3, r3, #3
   b628e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6292:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6294:	f002 0007 	and.w	r0, r2, #7
   b6298:	2201      	movs	r2, #1
   b629a:	4082      	lsls	r2, r0
   b629c:	5c58      	ldrb	r0, [r3, r1]
   b629e:	4302      	orrs	r2, r0
   b62a0:	545a      	strb	r2, [r3, r1]
}
   b62a2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b62a4:	2a00      	cmp	r2, #0
   b62a6:	4613      	mov	r3, r2
   b62a8:	8904      	ldrh	r4, [r0, #8]
   b62aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b62ac:	bfb8      	it	lt
   b62ae:	1dd3      	addlt	r3, r2, #7
   b62b0:	10db      	asrs	r3, r3, #3
   b62b2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b62b6:	f002 0207 	and.w	r2, r2, #7
   b62ba:	2301      	movs	r3, #1
   b62bc:	fa03 f202 	lsl.w	r2, r3, r2
   b62c0:	5c43      	ldrb	r3, [r0, r1]
   b62c2:	405a      	eors	r2, r3
   b62c4:	e7cc      	b.n	b6260 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b62c8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b62c8:	b570      	push	{r4, r5, r6, lr}
   b62ca:	4604      	mov	r4, r0
   b62cc:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b62ce:	2600      	movs	r6, #0
   b62d0:	f7ff f964 	bl	b559c <_ZN12Adafruit_GFXC1Ess>
   b62d4:	4b11      	ldr	r3, [pc, #68]	; (b631c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b62d6:	6023      	str	r3, [r4, #0]
   b62d8:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b62da:	b915      	cbnz	r5, b62e2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b62dc:	f002 f8b6 	bl	b844c <_Z19__fetch_global_Wirev>
   b62e0:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b62e2:	23ff      	movs	r3, #255	; 0xff
   b62e4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b62e8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b62ec:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b62f0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b62f4:	4b0a      	ldr	r3, [pc, #40]	; (b6320 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b62f6:	63a3      	str	r3, [r4, #56]	; 0x38
   b62f8:	2301      	movs	r3, #1
   b62fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b62fe:	9b05      	ldr	r3, [sp, #20]
   b6300:	64a3      	str	r3, [r4, #72]	; 0x48
   b6302:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6306:	9b06      	ldr	r3, [sp, #24]
   b6308:	86a2      	strh	r2, [r4, #52]	; 0x34
   b630a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b630e:	6426      	str	r6, [r4, #64]	; 0x40
   b6310:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6314:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6316:	4620      	mov	r0, r4
   b6318:	bd70      	pop	{r4, r5, r6, pc}
   b631a:	bf00      	nop
   b631c:	000bc438 	.word	0x000bc438
   b6320:	000bbf84 	.word	0x000bbf84

000b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6326:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6328:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b632a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b632c:	b190      	cbz	r0, b6354 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b632e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6332:	f001 fbb5 	bl	b7aa0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6336:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6338:	6803      	ldr	r3, [r0, #0]
   b633a:	2100      	movs	r1, #0
   b633c:	689b      	ldr	r3, [r3, #8]
   b633e:	4798      	blx	r3
    WIRE_WRITE(c);
   b6340:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6342:	6803      	ldr	r3, [r0, #0]
   b6344:	4629      	mov	r1, r5
   b6346:	689b      	ldr	r3, [r3, #8]
   b6348:	4798      	blx	r3
    wire->endTransmission();
   b634a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b634c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6350:	f001 bbad 	b.w	b7aae <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6354:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6358:	4601      	mov	r1, r0
   b635a:	b298      	uxth	r0, r3
   b635c:	f001 ffb5 	bl	b82ca <digitalWrite>
  if(spi) {
   b6360:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6362:	b120      	cbz	r0, b636e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6364:	4629      	mov	r1, r5
}
   b6366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b636a:	f000 bfa9 	b.w	b72c0 <_ZN8SPIClass8transferEh>
   b636e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6370:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6372:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6376:	ea05 0107 	and.w	r1, r5, r7
   b637a:	b280      	uxth	r0, r0
   b637c:	f001 ffa5 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6380:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6384:	2101      	movs	r1, #1
   b6386:	b280      	uxth	r0, r0
   b6388:	f001 ff9f 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b638c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6390:	2100      	movs	r1, #0
   b6392:	b280      	uxth	r0, r0
   b6394:	f001 ff99 	bl	b82ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6398:	3e01      	subs	r6, #1
   b639a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b639e:	d1e8      	bne.n	b6372 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b63a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63a2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b63a2:	b538      	push	{r3, r4, r5, lr}
   b63a4:	4604      	mov	r4, r0
  TRANSACTION_START
   b63a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b63a8:	460d      	mov	r5, r1
  TRANSACTION_START
   b63aa:	b180      	cbz	r0, b63ce <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b63ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b63ae:	f001 fb69 	bl	b7a84 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b63b2:	2d00      	cmp	r5, #0
   b63b4:	4620      	mov	r0, r4
   b63b6:	bf14      	ite	ne
   b63b8:	21a7      	movne	r1, #167	; 0xa7
   b63ba:	21a6      	moveq	r1, #166	; 0xa6
   b63bc:	f7ff ffb2 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b63c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b63c2:	b188      	cbz	r0, b63e8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b63c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b63c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b63ca:	f001 bb5b 	b.w	b7a84 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b63ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b63d0:	b118      	cbz	r0, b63da <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b63d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b63d6:	f000 ff05 	bl	b71e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b63da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b63de:	2100      	movs	r1, #0
   b63e0:	b280      	uxth	r0, r0
   b63e2:	f001 ff72 	bl	b82ca <digitalWrite>
   b63e6:	e7e4      	b.n	b63b2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b63e8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b63ec:	2101      	movs	r1, #1
   b63ee:	b280      	uxth	r0, r0
   b63f0:	f001 ff6b 	bl	b82ca <digitalWrite>
   b63f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b63f6:	b118      	cbz	r0, b6400 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b63f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b63fc:	f000 bed8 	b.w	b71b0 <_ZN8SPIClass14endTransactionEv>
}
   b6400:	bd38      	pop	{r3, r4, r5, pc}

000b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6406:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6408:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b640a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b640c:	188f      	adds	r7, r1, r2
   b640e:	b340      	cbz	r0, b6462 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6410:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6414:	f001 fb44 	bl	b7aa0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6418:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b641a:	6803      	ldr	r3, [r0, #0]
   b641c:	2100      	movs	r1, #0
   b641e:	689b      	ldr	r3, [r3, #8]
   b6420:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6422:	2601      	movs	r6, #1
    while(n--) {
   b6424:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6426:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6428:	d017      	beq.n	b645a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b642a:	2e1f      	cmp	r6, #31
   b642c:	d90c      	bls.n	b6448 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b642e:	f001 fb3e 	bl	b7aae <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6432:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6436:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6438:	f001 fb32 	bl	b7aa0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b643e:	6803      	ldr	r3, [r0, #0]
   b6440:	2100      	movs	r1, #0
   b6442:	689b      	ldr	r3, [r3, #8]
   b6444:	4798      	blx	r3
        bytesOut = 1;
   b6446:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6448:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b644a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b644e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6450:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6452:	689b      	ldr	r3, [r3, #8]
   b6454:	4798      	blx	r3
      bytesOut++;
   b6456:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6458:	e7e4      	b.n	b6424 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b645a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b645e:	f001 bb26 	b.w	b7aae <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6462:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6466:	4601      	mov	r1, r0
   b6468:	b298      	uxth	r0, r3
   b646a:	f001 ff2e 	bl	b82ca <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b646e:	42bd      	cmp	r5, r7
   b6470:	d022      	beq.n	b64b8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6472:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6474:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6478:	b118      	cbz	r0, b6482 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b647a:	4649      	mov	r1, r9
   b647c:	f000 ff20 	bl	b72c0 <_ZN8SPIClass8transferEh>
   b6480:	e7f5      	b.n	b646e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6482:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6484:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6488:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b648c:	ea09 0108 	and.w	r1, r9, r8
   b6490:	b280      	uxth	r0, r0
   b6492:	f001 ff1a 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6496:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b649a:	2101      	movs	r1, #1
   b649c:	b280      	uxth	r0, r0
   b649e:	f001 ff14 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b64a2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64a6:	2100      	movs	r1, #0
   b64a8:	b280      	uxth	r0, r0
   b64aa:	f001 ff0e 	bl	b82ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b64ae:	3e01      	subs	r6, #1
   b64b0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b64b4:	d1e8      	bne.n	b6488 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b64b6:	e7da      	b.n	b646e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b64b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b64bc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b64bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b64c0:	1dda      	adds	r2, r3, #7
   b64c2:	bf48      	it	mi
   b64c4:	f103 020e 	addmi.w	r2, r3, #14
   b64c8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b64cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b64ce:	10d2      	asrs	r2, r2, #3
   b64d0:	435a      	muls	r2, r3
   b64d2:	2100      	movs	r1, #0
   b64d4:	f003 b94c 	b.w	b9770 <memset>

000b64d8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b64d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b64dc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b64de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b64e0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b64e4:	4604      	mov	r4, r0
   b64e6:	460f      	mov	r7, r1
   b64e8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b64ea:	b1c3      	cbz	r3, b651e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b64ec:	4620      	mov	r0, r4
   b64ee:	f7ff ffe5 	bl	b64bc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b64f2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b64f6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b64fa:	2820      	cmp	r0, #32
   b64fc:	dc21      	bgt.n	b6542 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b64fe:	2320      	movs	r3, #32
   b6500:	2201      	movs	r2, #1
   b6502:	3820      	subs	r0, #32
   b6504:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6508:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b650c:	2373      	movs	r3, #115	; 0x73
   b650e:	3973      	subs	r1, #115	; 0x73
   b6510:	9300      	str	r3, [sp, #0]
   b6512:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6516:	4b89      	ldr	r3, [pc, #548]	; (b673c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6518:	f340 024f 	sbfx	r2, r0, #1, #16
   b651c:	e021      	b.n	b6562 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b651e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6522:	1dd8      	adds	r0, r3, #7
   b6524:	bf48      	it	mi
   b6526:	f103 000e 	addmi.w	r0, r3, #14
   b652a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b652e:	10c0      	asrs	r0, r0, #3
   b6530:	4358      	muls	r0, r3
   b6532:	f000 fd8b 	bl	b704c <malloc>
   b6536:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6538:	2800      	cmp	r0, #0
   b653a:	d1d7      	bne.n	b64ec <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b653c:	b004      	add	sp, #16
   b653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b6542:	3840      	subs	r0, #64	; 0x40
   b6544:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6548:	fa02 f280 	sxtah	r2, r2, r0
   b654c:	2340      	movs	r3, #64	; 0x40
   b654e:	2001      	movs	r0, #1
   b6550:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6554:	2352      	movs	r3, #82	; 0x52
   b6556:	3952      	subs	r1, #82	; 0x52
   b6558:	9300      	str	r3, [sp, #0]
   b655a:	4b79      	ldr	r3, [pc, #484]	; (b6740 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b655c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6560:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6562:	4620      	mov	r0, r4
   b6564:	f341 014f 	sbfx	r1, r1, #1, #16
   b6568:	f7ff f82e 	bl	b55c8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b656c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b656e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b6572:	2800      	cmp	r0, #0
   b6574:	d078      	beq.n	b6668 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6576:	2d00      	cmp	r5, #0
   b6578:	d174      	bne.n	b6664 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b657a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b657e:	2b20      	cmp	r3, #32
   b6580:	bf0c      	ite	eq
   b6582:	253c      	moveq	r5, #60	; 0x3c
   b6584:	253d      	movne	r5, #61	; 0x3d
   b6586:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b658a:	f1b8 0f00 	cmp.w	r8, #0
   b658e:	d001      	beq.n	b6594 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6590:	f001 fa7c 	bl	b7a8c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6594:	b1fe      	cbz	r6, b65d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b6596:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b659a:	2800      	cmp	r0, #0
   b659c:	db1b      	blt.n	b65d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b659e:	2101      	movs	r1, #1
   b65a0:	b280      	uxth	r0, r0
   b65a2:	f001 fe81 	bl	b82a8 <pinMode>
    digitalWrite(rstPin, HIGH);
   b65a6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b65aa:	2101      	movs	r1, #1
   b65ac:	b280      	uxth	r0, r0
   b65ae:	f001 fe8c 	bl	b82ca <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b65b2:	2001      	movs	r0, #1
   b65b4:	f001 f808 	bl	b75c8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b65b8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b65bc:	2100      	movs	r1, #0
   b65be:	b280      	uxth	r0, r0
   b65c0:	f001 fe83 	bl	b82ca <digitalWrite>
    delay(10);                  // Wait 10 ms
   b65c4:	200a      	movs	r0, #10
   b65c6:	f000 ffff 	bl	b75c8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b65ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b65ce:	2101      	movs	r1, #1
   b65d0:	b280      	uxth	r0, r0
   b65d2:	f001 fe7a 	bl	b82ca <digitalWrite>
  TRANSACTION_START
   b65d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b65d8:	2800      	cmp	r0, #0
   b65da:	d074      	beq.n	b66c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b65dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b65de:	f001 fa51 	bl	b7a84 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b65e2:	2204      	movs	r2, #4
   b65e4:	4957      	ldr	r1, [pc, #348]	; (b6744 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b65e6:	4620      	mov	r0, r4
   b65e8:	f7ff ff0b 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b65ec:	8961      	ldrh	r1, [r4, #10]
   b65ee:	3901      	subs	r1, #1
   b65f0:	b2c9      	uxtb	r1, r1
   b65f2:	4620      	mov	r0, r4
   b65f4:	f7ff fe96 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b65f8:	4953      	ldr	r1, [pc, #332]	; (b6748 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b65fa:	2204      	movs	r2, #4
   b65fc:	4620      	mov	r0, r4
   b65fe:	f7ff ff00 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6602:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6606:	2b01      	cmp	r3, #1
   b6608:	bf0c      	ite	eq
   b660a:	2110      	moveq	r1, #16
   b660c:	2114      	movne	r1, #20
   b660e:	4620      	mov	r0, r4
   b6610:	f7ff fe88 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6614:	2204      	movs	r2, #4
   b6616:	494d      	ldr	r1, [pc, #308]	; (b674c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6618:	4620      	mov	r0, r4
   b661a:	f7ff fef2 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b661e:	68a3      	ldr	r3, [r4, #8]
   b6620:	4a4b      	ldr	r2, [pc, #300]	; (b6750 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6622:	4293      	cmp	r3, r2
   b6624:	d15c      	bne.n	b66e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6626:	494b      	ldr	r1, [pc, #300]	; (b6754 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6628:	2204      	movs	r2, #4
   b662a:	4620      	mov	r0, r4
   b662c:	f7ff fee9 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6630:	21d9      	movs	r1, #217	; 0xd9
   b6632:	4620      	mov	r0, r4
   b6634:	f7ff fe76 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6638:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b663c:	2b01      	cmp	r3, #1
   b663e:	bf0c      	ite	eq
   b6640:	2122      	moveq	r1, #34	; 0x22
   b6642:	21f1      	movne	r1, #241	; 0xf1
   b6644:	4620      	mov	r0, r4
   b6646:	f7ff fe6d 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b664a:	4620      	mov	r0, r4
   b664c:	4942      	ldr	r1, [pc, #264]	; (b6758 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b664e:	2206      	movs	r2, #6
   b6650:	f7ff fed7 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6656:	2800      	cmp	r0, #0
   b6658:	d063      	beq.n	b6722 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b665a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b665c:	f001 fa12 	bl	b7a84 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b6660:	2001      	movs	r0, #1
   b6662:	e76b      	b.n	b653c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6664:	b26d      	sxtb	r5, r5
   b6666:	e78e      	b.n	b6586 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6668:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b666c:	2101      	movs	r1, #1
   b666e:	b280      	uxth	r0, r0
   b6670:	f001 fe1a 	bl	b82a8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6674:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6678:	2101      	movs	r1, #1
   b667a:	b280      	uxth	r0, r0
   b667c:	f001 fe14 	bl	b82a8 <pinMode>
    SSD1306_DESELECT
   b6680:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6684:	2101      	movs	r1, #1
   b6686:	b280      	uxth	r0, r0
   b6688:	f001 fe1f 	bl	b82ca <digitalWrite>
    if(spi) { // Hardware SPI
   b668c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b668e:	b13d      	cbz	r5, b66a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b6690:	f1b8 0f00 	cmp.w	r8, #0
   b6694:	f43f af7e 	beq.w	b6594 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6698:	4628      	mov	r0, r5
   b669a:	f000 fd75 	bl	b7188 <_ZN8SPIClass5beginEv>
   b669e:	e779      	b.n	b6594 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b66a0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b66a4:	2101      	movs	r1, #1
   b66a6:	b280      	uxth	r0, r0
   b66a8:	f001 fdfe 	bl	b82a8 <pinMode>
      pinMode(clkPin , OUTPUT);
   b66ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b66b0:	2101      	movs	r1, #1
   b66b2:	b280      	uxth	r0, r0
   b66b4:	f001 fdf8 	bl	b82a8 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b66b8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b66bc:	4629      	mov	r1, r5
   b66be:	b280      	uxth	r0, r0
   b66c0:	f001 fe03 	bl	b82ca <digitalWrite>
   b66c4:	e766      	b.n	b6594 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b66c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b66c8:	b118      	cbz	r0, b66d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b66ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b66ce:	f000 fd89 	bl	b71e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b66d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b66d6:	2100      	movs	r1, #0
   b66d8:	b280      	uxth	r0, r0
   b66da:	f001 fdf6 	bl	b82ca <digitalWrite>
   b66de:	e780      	b.n	b65e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b66e0:	4a1e      	ldr	r2, [pc, #120]	; (b675c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b66e2:	4293      	cmp	r3, r2
   b66e4:	d10e      	bne.n	b6704 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b66e6:	491e      	ldr	r1, [pc, #120]	; (b6760 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b66e8:	2203      	movs	r2, #3
   b66ea:	4620      	mov	r0, r4
   b66ec:	f7ff fe89 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b66f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b66f4:	2b01      	cmp	r3, #1
   b66f6:	bf0c      	ite	eq
   b66f8:	219f      	moveq	r1, #159	; 0x9f
   b66fa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b66fc:	4620      	mov	r0, r4
   b66fe:	f7ff fe11 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6702:	e795      	b.n	b6630 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6704:	4a17      	ldr	r2, [pc, #92]	; (b6764 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6706:	4293      	cmp	r3, r2
   b6708:	d192      	bne.n	b6630 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b670a:	4917      	ldr	r1, [pc, #92]	; (b6768 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b670c:	2203      	movs	r2, #3
   b670e:	4620      	mov	r0, r4
   b6710:	f7ff fe77 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6714:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6718:	2b01      	cmp	r3, #1
   b671a:	bf0c      	ite	eq
   b671c:	2110      	moveq	r1, #16
   b671e:	21af      	movne	r1, #175	; 0xaf
   b6720:	e7ec      	b.n	b66fc <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6722:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6726:	2101      	movs	r1, #1
   b6728:	b280      	uxth	r0, r0
   b672a:	f001 fdce 	bl	b82ca <digitalWrite>
   b672e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6730:	2800      	cmp	r0, #0
   b6732:	d095      	beq.n	b6660 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6734:	f000 fd3c 	bl	b71b0 <_ZN8SPIClass14endTransactionEv>
   b6738:	e792      	b.n	b6660 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b673a:	bf00      	nop
   b673c:	000bc250 	.word	0x000bc250
   b6740:	000bbf90 	.word	0x000bbf90
   b6744:	000bc498 	.word	0x000bc498
   b6748:	000bc49c 	.word	0x000bc49c
   b674c:	000bc4a0 	.word	0x000bc4a0
   b6750:	00200080 	.word	0x00200080
   b6754:	000bc4aa 	.word	0x000bc4aa
   b6758:	000bc4a4 	.word	0x000bc4a4
   b675c:	00400080 	.word	0x00400080
   b6760:	000bc4ae 	.word	0x000bc4ae
   b6764:	00100060 	.word	0x00100060
   b6768:	000bc4b1 	.word	0x000bc4b1

000b676c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b676c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b676e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6770:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6774:	db3d      	blt.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6776:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b677a:	4294      	cmp	r4, r2
   b677c:	dd39      	ble.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b677e:	2900      	cmp	r1, #0
      w += x;
   b6780:	bfbe      	ittt	lt
   b6782:	185b      	addlt	r3, r3, r1
   b6784:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6786:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6788:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b678c:	18ce      	adds	r6, r1, r3
   b678e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b6790:	bfc4      	itt	gt
   b6792:	1a63      	subgt	r3, r4, r1
   b6794:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6796:	2b00      	cmp	r3, #0
   b6798:	dd2b      	ble.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b679a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b679c:	10d6      	asrs	r6, r2, #3
   b679e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b67a2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b67a4:	f002 0007 	and.w	r0, r2, #7
   b67a8:	2201      	movs	r2, #1
   b67aa:	4082      	lsls	r2, r0
      switch(color) {
   b67ac:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b67ae:	b2d2      	uxtb	r2, r2
      switch(color) {
   b67b0:	d016      	beq.n	b67e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b67b2:	2d02      	cmp	r5, #2
   b67b4:	d00b      	beq.n	b67ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b67b6:	b9e5      	cbnz	r5, b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b67b8:	43d2      	mvns	r2, r2
   b67ba:	b2d2      	uxtb	r2, r2
   b67bc:	440b      	add	r3, r1
   b67be:	4299      	cmp	r1, r3
   b67c0:	d017      	beq.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b67c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67c6:	4010      	ands	r0, r2
   b67c8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67cc:	e7f7      	b.n	b67be <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b67ce:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b67d0:	4299      	cmp	r1, r3
   b67d2:	d00e      	beq.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b67d4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67d8:	4050      	eors	r0, r2
   b67da:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67de:	e7f7      	b.n	b67d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b67e0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b67e2:	4299      	cmp	r1, r3
   b67e4:	d005      	beq.n	b67f2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b67e6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b67ea:	4310      	orrs	r0, r2
   b67ec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b67f0:	e7f7      	b.n	b67e2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b67f2:	bd70      	pop	{r4, r5, r6, pc}

000b67f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b67f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b67f6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b67f8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b67fc:	db76      	blt.n	b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b67fe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6802:	42b1      	cmp	r1, r6
   b6804:	da72      	bge.n	b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6806:	2a00      	cmp	r2, #0
      __h += __y;
   b6808:	bfbe      	ittt	lt
   b680a:	189b      	addlt	r3, r3, r2
   b680c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b680e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6810:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6814:	18d7      	adds	r7, r2, r3
   b6816:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6818:	bfc4      	itt	gt
   b681a:	1aa3      	subgt	r3, r4, r2
   b681c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b681e:	2b00      	cmp	r3, #0
   b6820:	dd64      	ble.n	b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6822:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6826:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6828:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b682c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6830:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6832:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6836:	d023      	beq.n	b6880 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6838:	f1c2 0208 	rsb	r2, r2, #8
   b683c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b683e:	492d      	ldr	r1, [pc, #180]	; (b68f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b6840:	4293      	cmp	r3, r2
   b6842:	bf3c      	itt	cc
   b6844:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6848:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b684c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b684e:	bf3c      	itt	cc
   b6850:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6854:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6858:	2d01      	cmp	r5, #1
   b685a:	d007      	beq.n	b686c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b685c:	2d02      	cmp	r5, #2
   b685e:	d02e      	beq.n	b68be <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6860:	b94d      	cbnz	r5, b6876 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6862:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6866:	ea2c 0101 	bic.w	r1, ip, r1
   b686a:	e003      	b.n	b6874 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b686c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6870:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6874:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6876:	4293      	cmp	r3, r2
   b6878:	d338      	bcc.n	b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b687a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b687e:	440c      	add	r4, r1
        h -= mod;
   b6880:	1a9a      	subs	r2, r3, r2
   b6882:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6884:	2a07      	cmp	r2, #7
   b6886:	d90e      	bls.n	b68a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6888:	2d02      	cmp	r5, #2
   b688a:	d11d      	bne.n	b68c8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b688c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b688e:	7821      	ldrb	r1, [r4, #0]
   b6890:	43c9      	mvns	r1, r1
   b6892:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6894:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6896:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b689a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b689c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b689e:	440c      	add	r4, r1
            } while(h >= 8);
   b68a0:	d8f5      	bhi.n	b688e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b68a2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b68a6:	b30a      	cbz	r2, b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b68a8:	4b13      	ldr	r3, [pc, #76]	; (b68f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b68aa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b68ac:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b68ae:	d01a      	beq.n	b68e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b68b0:	2d02      	cmp	r5, #2
   b68b2:	d01c      	beq.n	b68ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b68b4:	b9d5      	cbnz	r5, b68ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b68b6:	7822      	ldrb	r2, [r4, #0]
   b68b8:	ea22 0303 	bic.w	r3, r2, r3
   b68bc:	e015      	b.n	b68ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b68be:	f817 c006 	ldrb.w	ip, [r7, r6]
   b68c2:	ea81 010c 	eor.w	r1, r1, ip
   b68c6:	e7d5      	b.n	b6874 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b68c8:	1e29      	subs	r1, r5, #0
   b68ca:	bf18      	it	ne
   b68cc:	2101      	movne	r1, #1
   b68ce:	4249      	negs	r1, r1
   b68d0:	b2c9      	uxtb	r1, r1
   b68d2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b68d4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b68d6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b68d8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b68dc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b68de:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b68e0:	4434      	add	r4, r6
            } while(h >= 8);
   b68e2:	d8f7      	bhi.n	b68d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b68e4:	e7dd      	b.n	b68a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b68e6:	7822      	ldrb	r2, [r4, #0]
   b68e8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b68ea:	7023      	strb	r3, [r4, #0]
}
   b68ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b68ee:	7822      	ldrb	r2, [r4, #0]
   b68f0:	4053      	eors	r3, r2
   b68f2:	e7fa      	b.n	b68ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b68f4:	000bc488 	.word	0x000bc488
   b68f8:	000bc490 	.word	0x000bc490

000b68fc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b68fc:	b470      	push	{r4, r5, r6}
   b68fe:	4614      	mov	r4, r2
  switch(rotation) {
   b6900:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6902:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6906:	2a02      	cmp	r2, #2
   b6908:	d00d      	beq.n	b6926 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b690a:	2a03      	cmp	r2, #3
   b690c:	d018      	beq.n	b6940 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b690e:	2a01      	cmp	r2, #1
   b6910:	d111      	bne.n	b6936 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6912:	8902      	ldrh	r2, [r0, #8]
   b6914:	43e4      	mvns	r4, r4
   b6916:	4414      	add	r4, r2
   b6918:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b691a:	9603      	str	r6, [sp, #12]
   b691c:	460a      	mov	r2, r1
   b691e:	4621      	mov	r1, r4
}
   b6920:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6922:	f7ff bf67 	b.w	b67f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6926:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6928:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b692a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b692c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b692e:	4414      	add	r4, r2
    x -= (w-1);
   b6930:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6932:	b224      	sxth	r4, r4
    x -= (w-1);
   b6934:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6936:	9603      	str	r6, [sp, #12]
   b6938:	4622      	mov	r2, r4
}
   b693a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b693c:	f7ff bf16 	b.w	b676c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6940:	8945      	ldrh	r5, [r0, #10]
   b6942:	4419      	add	r1, r3
   b6944:	1a69      	subs	r1, r5, r1
   b6946:	b209      	sxth	r1, r1
    break;
   b6948:	e7e7      	b.n	b691a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b694a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b694a:	b430      	push	{r4, r5}
   b694c:	4614      	mov	r4, r2
  switch(rotation) {
   b694e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6950:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6954:	2a02      	cmp	r2, #2
   b6956:	d00d      	beq.n	b6974 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6958:	2a03      	cmp	r2, #3
   b695a:	d018      	beq.n	b698e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b695c:	2a01      	cmp	r2, #1
   b695e:	d111      	bne.n	b6984 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6960:	18e2      	adds	r2, r4, r3
   b6962:	8904      	ldrh	r4, [r0, #8]
   b6964:	1aa4      	subs	r4, r4, r2
   b6966:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6968:	9502      	str	r5, [sp, #8]
   b696a:	460a      	mov	r2, r1
   b696c:	4621      	mov	r1, r4
}
   b696e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6970:	f7ff befc 	b.w	b676c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6974:	8902      	ldrh	r2, [r0, #8]
   b6976:	43c9      	mvns	r1, r1
   b6978:	4411      	add	r1, r2
    y -= (h-1);
   b697a:	18e2      	adds	r2, r4, r3
   b697c:	8944      	ldrh	r4, [r0, #10]
   b697e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6980:	b209      	sxth	r1, r1
    y -= (h-1);
   b6982:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6984:	9502      	str	r5, [sp, #8]
   b6986:	4622      	mov	r2, r4
}
   b6988:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b698a:	f7ff bf33 	b.w	b67f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b698e:	8942      	ldrh	r2, [r0, #10]
   b6990:	43c9      	mvns	r1, r1
   b6992:	4411      	add	r1, r2
   b6994:	b209      	sxth	r1, r1
    break;
   b6996:	e7e7      	b.n	b6968 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6998 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b699c:	4604      	mov	r4, r0
  TRANSACTION_START
   b699e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b69a0:	2800      	cmp	r0, #0
   b69a2:	d042      	beq.n	b6a2a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b69a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b69a6:	f001 f86d 	bl	b7a84 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b69aa:	4947      	ldr	r1, [pc, #284]	; (b6ac8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b69ac:	2205      	movs	r2, #5
   b69ae:	4620      	mov	r0, r4
   b69b0:	f7ff fd27 	bl	b6402 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b69b4:	8921      	ldrh	r1, [r4, #8]
   b69b6:	3901      	subs	r1, #1
   b69b8:	4620      	mov	r0, r4
   b69ba:	b2c9      	uxtb	r1, r1
   b69bc:	f7ff fcb2 	bl	b6324 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b69c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b69c4:	1dde      	adds	r6, r3, #7
   b69c6:	bf48      	it	mi
   b69c8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b69cc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b69d0:	8923      	ldrh	r3, [r4, #8]
   b69d2:	10f6      	asrs	r6, r6, #3
   b69d4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b69d8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b69dc:	2800      	cmp	r0, #0
   b69de:	d03a      	beq.n	b6a56 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b69e0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b69e4:	f001 f85c 	bl	b7aa0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b69e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b69ea:	6803      	ldr	r3, [r0, #0]
   b69ec:	2140      	movs	r1, #64	; 0x40
   b69ee:	689b      	ldr	r3, [r3, #8]
   b69f0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b69f2:	2701      	movs	r7, #1
    while(count--) {
   b69f4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b69f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b69f8:	d024      	beq.n	b6a44 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b69fa:	2f1f      	cmp	r7, #31
   b69fc:	d90c      	bls.n	b6a18 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b69fe:	f001 f856 	bl	b7aae <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6a02:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6a06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a08:	f001 f84a 	bl	b7aa0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6a0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a0e:	6803      	ldr	r3, [r0, #0]
   b6a10:	2140      	movs	r1, #64	; 0x40
   b6a12:	689b      	ldr	r3, [r3, #8]
   b6a14:	4798      	blx	r3
        bytesOut = 1;
   b6a16:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a1a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a1e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6a20:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6a22:	689b      	ldr	r3, [r3, #8]
   b6a24:	4798      	blx	r3
      bytesOut++;
   b6a26:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6a28:	e7e4      	b.n	b69f4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6a2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6a2c:	b118      	cbz	r0, b6a36 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6a2e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6a32:	f000 fbd7 	bl	b71e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6a36:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6a3a:	2100      	movs	r1, #0
   b6a3c:	b280      	uxth	r0, r0
   b6a3e:	f001 fc44 	bl	b82ca <digitalWrite>
   b6a42:	e7b2      	b.n	b69aa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6a44:	f001 f833 	bl	b7aae <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6a48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6a4a:	b378      	cbz	r0, b6aac <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6a4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6a4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6a52:	f001 b817 	b.w	b7a84 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6a56:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6a5a:	2101      	movs	r1, #1
   b6a5c:	b280      	uxth	r0, r0
   b6a5e:	f001 fc34 	bl	b82ca <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6a62:	42ae      	cmp	r6, r5
   b6a64:	d0f0      	beq.n	b6a48 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6a66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6a68:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6a6c:	b118      	cbz	r0, b6a76 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6a6e:	4649      	mov	r1, r9
   b6a70:	f000 fc26 	bl	b72c0 <_ZN8SPIClass8transferEh>
   b6a74:	e7f5      	b.n	b6a62 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6a76:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6a78:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6a7c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6a80:	ea09 0108 	and.w	r1, r9, r8
   b6a84:	b280      	uxth	r0, r0
   b6a86:	f001 fc20 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6a8a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a8e:	2101      	movs	r1, #1
   b6a90:	b280      	uxth	r0, r0
   b6a92:	f001 fc1a 	bl	b82ca <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6a96:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6a9a:	2100      	movs	r1, #0
   b6a9c:	b280      	uxth	r0, r0
   b6a9e:	f001 fc14 	bl	b82ca <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6aa2:	3f01      	subs	r7, #1
   b6aa4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6aa8:	d1e8      	bne.n	b6a7c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6aaa:	e7da      	b.n	b6a62 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6aac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6ab0:	2101      	movs	r1, #1
   b6ab2:	b280      	uxth	r0, r0
   b6ab4:	f001 fc09 	bl	b82ca <digitalWrite>
   b6ab8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6aba:	b118      	cbz	r0, b6ac4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6abc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6ac0:	f000 bb76 	b.w	b71b0 <_ZN8SPIClass14endTransactionEv>
}
   b6ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6ac8:	000bc4b4 	.word	0x000bc4b4

000b6acc <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6acc:	f000 bd7c 	b.w	b75c8 <delay>

000b6ad0 <_Z11BlynkMillisv>:
   b6ad0:	f000 b880 	b.w	b6bd4 <HAL_Timer_Get_Milli_Seconds>

000b6ad4 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6ad4:	4770      	bx	lr

000b6ad6 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6ad6:	4770      	bx	lr

000b6ad8 <BlynkNoOpCbk>:
{}
   b6ad8:	4770      	bx	lr
	...

000b6adc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6adc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6ade:	bf5a      	itte	pl
   b6ae0:	4b02      	ldrpl	r3, [pc, #8]	; (b6aec <GetReadHandler+0x10>)
   b6ae2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6ae6:	2000      	movmi	r0, #0
#endif
}
   b6ae8:	4770      	bx	lr
   b6aea:	bf00      	nop
   b6aec:	000bc4bc 	.word	0x000bc4bc

000b6af0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6af0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6af2:	bf5a      	itte	pl
   b6af4:	4b02      	ldrpl	r3, [pc, #8]	; (b6b00 <GetWriteHandler+0x10>)
   b6af6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6afa:	2000      	movmi	r0, #0
#endif
}
   b6afc:	4770      	bx	lr
   b6afe:	bf00      	nop
   b6b00:	000bc6bc 	.word	0x000bc6bc

000b6b04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6b04:	b508      	push	{r3, lr}
   b6b06:	4b02      	ldr	r3, [pc, #8]	; (b6b10 <netdb_freeaddrinfo+0xc>)
   b6b08:	681b      	ldr	r3, [r3, #0]
   b6b0a:	689b      	ldr	r3, [r3, #8]
   b6b0c:	9301      	str	r3, [sp, #4]
   b6b0e:	bd08      	pop	{r3, pc}
   b6b10:	00030268 	.word	0x00030268

000b6b14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6b14:	b508      	push	{r3, lr}
   b6b16:	4b02      	ldr	r3, [pc, #8]	; (b6b20 <netdb_getaddrinfo+0xc>)
   b6b18:	681b      	ldr	r3, [r3, #0]
   b6b1a:	68db      	ldr	r3, [r3, #12]
   b6b1c:	9301      	str	r3, [sp, #4]
   b6b1e:	bd08      	pop	{r3, pc}
   b6b20:	00030268 	.word	0x00030268

000b6b24 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6b24:	b508      	push	{r3, lr}
   b6b26:	4b02      	ldr	r3, [pc, #8]	; (b6b30 <HAL_Validate_Pin_Function+0xc>)
   b6b28:	681b      	ldr	r3, [r3, #0]
   b6b2a:	685b      	ldr	r3, [r3, #4]
   b6b2c:	9301      	str	r3, [sp, #4]
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	0003022c 	.word	0x0003022c

000b6b34 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6b34:	b508      	push	{r3, lr}
   b6b36:	4b02      	ldr	r3, [pc, #8]	; (b6b40 <HAL_Pin_Mode+0xc>)
   b6b38:	681b      	ldr	r3, [r3, #0]
   b6b3a:	689b      	ldr	r3, [r3, #8]
   b6b3c:	9301      	str	r3, [sp, #4]
   b6b3e:	bd08      	pop	{r3, pc}
   b6b40:	0003022c 	.word	0x0003022c

000b6b44 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6b44:	b508      	push	{r3, lr}
   b6b46:	4b02      	ldr	r3, [pc, #8]	; (b6b50 <HAL_Get_Pin_Mode+0xc>)
   b6b48:	681b      	ldr	r3, [r3, #0]
   b6b4a:	68db      	ldr	r3, [r3, #12]
   b6b4c:	9301      	str	r3, [sp, #4]
   b6b4e:	bd08      	pop	{r3, pc}
   b6b50:	0003022c 	.word	0x0003022c

000b6b54 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6b54:	b508      	push	{r3, lr}
   b6b56:	4b02      	ldr	r3, [pc, #8]	; (b6b60 <HAL_GPIO_Write+0xc>)
   b6b58:	681b      	ldr	r3, [r3, #0]
   b6b5a:	691b      	ldr	r3, [r3, #16]
   b6b5c:	9301      	str	r3, [sp, #4]
   b6b5e:	bd08      	pop	{r3, pc}
   b6b60:	0003022c 	.word	0x0003022c

000b6b64 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6b64:	b508      	push	{r3, lr}
   b6b66:	4b02      	ldr	r3, [pc, #8]	; (b6b70 <HAL_GPIO_Read+0xc>)
   b6b68:	681b      	ldr	r3, [r3, #0]
   b6b6a:	695b      	ldr	r3, [r3, #20]
   b6b6c:	9301      	str	r3, [sp, #4]
   b6b6e:	bd08      	pop	{r3, pc}
   b6b70:	0003022c 	.word	0x0003022c

000b6b74 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6b74:	b508      	push	{r3, lr}
   b6b76:	4b02      	ldr	r3, [pc, #8]	; (b6b80 <HAL_DAC_Write+0xc>)
   b6b78:	681b      	ldr	r3, [r3, #0]
   b6b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b7c:	9301      	str	r3, [sp, #4]
   b6b7e:	bd08      	pop	{r3, pc}
   b6b80:	0003022c 	.word	0x0003022c

000b6b84 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6b84:	b508      	push	{r3, lr}
   b6b86:	4b02      	ldr	r3, [pc, #8]	; (b6b90 <hal_adc_read+0xc>)
   b6b88:	681b      	ldr	r3, [r3, #0]
   b6b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b8c:	9301      	str	r3, [sp, #4]
   b6b8e:	bd08      	pop	{r3, pc}
   b6b90:	0003022c 	.word	0x0003022c

000b6b94 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6b94:	b508      	push	{r3, lr}
   b6b96:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <hal_pwm_write_ext+0xc>)
   b6b98:	681b      	ldr	r3, [r3, #0]
   b6b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6b9c:	9301      	str	r3, [sp, #4]
   b6b9e:	bd08      	pop	{r3, pc}
   b6ba0:	0003022c 	.word	0x0003022c

000b6ba4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6ba4:	b508      	push	{r3, lr}
   b6ba6:	4b02      	ldr	r3, [pc, #8]	; (b6bb0 <if_index_to_name+0xc>)
   b6ba8:	681b      	ldr	r3, [r3, #0]
   b6baa:	695b      	ldr	r3, [r3, #20]
   b6bac:	9301      	str	r3, [sp, #4]
   b6bae:	bd08      	pop	{r3, pc}
   b6bb0:	0003026c 	.word	0x0003026c

000b6bb4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6bb4:	b508      	push	{r3, lr}
   b6bb6:	4b02      	ldr	r3, [pc, #8]	; (b6bc0 <HAL_RNG_GetRandomNumber+0xc>)
   b6bb8:	681b      	ldr	r3, [r3, #0]
   b6bba:	685b      	ldr	r3, [r3, #4]
   b6bbc:	9301      	str	r3, [sp, #4]
   b6bbe:	bd08      	pop	{r3, pc}
   b6bc0:	00030218 	.word	0x00030218

000b6bc4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6bc4:	b508      	push	{r3, lr}
   b6bc6:	4b02      	ldr	r3, [pc, #8]	; (b6bd0 <HAL_Delay_Microseconds+0xc>)
   b6bc8:	681b      	ldr	r3, [r3, #0]
   b6bca:	68db      	ldr	r3, [r3, #12]
   b6bcc:	9301      	str	r3, [sp, #4]
   b6bce:	bd08      	pop	{r3, pc}
   b6bd0:	00030218 	.word	0x00030218

000b6bd4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6bd4:	b508      	push	{r3, lr}
   b6bd6:	4b02      	ldr	r3, [pc, #8]	; (b6be0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6bd8:	681b      	ldr	r3, [r3, #0]
   b6bda:	695b      	ldr	r3, [r3, #20]
   b6bdc:	9301      	str	r3, [sp, #4]
   b6bde:	bd08      	pop	{r3, pc}
   b6be0:	00030218 	.word	0x00030218

000b6be4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6be4:	b508      	push	{r3, lr}
   b6be6:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <os_mutex_create+0xc>)
   b6be8:	681b      	ldr	r3, [r3, #0]
   b6bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6bec:	9301      	str	r3, [sp, #4]
   b6bee:	bd08      	pop	{r3, pc}
   b6bf0:	00030248 	.word	0x00030248

000b6bf4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6bf4:	b508      	push	{r3, lr}
   b6bf6:	4b02      	ldr	r3, [pc, #8]	; (b6c00 <os_mutex_destroy+0xc>)
   b6bf8:	681b      	ldr	r3, [r3, #0]
   b6bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bfc:	9301      	str	r3, [sp, #4]
   b6bfe:	bd08      	pop	{r3, pc}
   b6c00:	00030248 	.word	0x00030248

000b6c04 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6c04:	b508      	push	{r3, lr}
   b6c06:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <os_mutex_lock+0xc>)
   b6c08:	681b      	ldr	r3, [r3, #0]
   b6c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c0c:	9301      	str	r3, [sp, #4]
   b6c0e:	bd08      	pop	{r3, pc}
   b6c10:	00030248 	.word	0x00030248

000b6c14 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6c14:	b508      	push	{r3, lr}
   b6c16:	4b02      	ldr	r3, [pc, #8]	; (b6c20 <os_mutex_unlock+0xc>)
   b6c18:	681b      	ldr	r3, [r3, #0]
   b6c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c1c:	9301      	str	r3, [sp, #4]
   b6c1e:	bd08      	pop	{r3, pc}
   b6c20:	00030248 	.word	0x00030248

000b6c24 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6c24:	b508      	push	{r3, lr}
   b6c26:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <os_mutex_recursive_create+0xc>)
   b6c28:	681b      	ldr	r3, [r3, #0]
   b6c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c2c:	9301      	str	r3, [sp, #4]
   b6c2e:	bd08      	pop	{r3, pc}
   b6c30:	00030248 	.word	0x00030248

000b6c34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6c34:	b508      	push	{r3, lr}
   b6c36:	4b02      	ldr	r3, [pc, #8]	; (b6c40 <inet_inet_ntop+0xc>)
   b6c38:	681b      	ldr	r3, [r3, #0]
   b6c3a:	695b      	ldr	r3, [r3, #20]
   b6c3c:	9301      	str	r3, [sp, #4]
   b6c3e:	bd08      	pop	{r3, pc}
   b6c40:	00030264 	.word	0x00030264

000b6c44 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6c44:	b508      	push	{r3, lr}
   b6c46:	4b02      	ldr	r3, [pc, #8]	; (b6c50 <inet_htonl+0xc>)
   b6c48:	681b      	ldr	r3, [r3, #0]
   b6c4a:	6a1b      	ldr	r3, [r3, #32]
   b6c4c:	9301      	str	r3, [sp, #4]
   b6c4e:	bd08      	pop	{r3, pc}
   b6c50:	00030264 	.word	0x00030264

000b6c54 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6c54:	b508      	push	{r3, lr}
   b6c56:	4b02      	ldr	r3, [pc, #8]	; (b6c60 <inet_htons+0xc>)
   b6c58:	681b      	ldr	r3, [r3, #0]
   b6c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c5c:	9301      	str	r3, [sp, #4]
   b6c5e:	bd08      	pop	{r3, pc}
   b6c60:	00030264 	.word	0x00030264

000b6c64 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6c64:	b508      	push	{r3, lr}
   b6c66:	4b02      	ldr	r3, [pc, #8]	; (b6c70 <hal_usart_write+0xc>)
   b6c68:	681b      	ldr	r3, [r3, #0]
   b6c6a:	68db      	ldr	r3, [r3, #12]
   b6c6c:	9301      	str	r3, [sp, #4]
   b6c6e:	bd08      	pop	{r3, pc}
   b6c70:	0003023c 	.word	0x0003023c

000b6c74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6c74:	b508      	push	{r3, lr}
   b6c76:	4b02      	ldr	r3, [pc, #8]	; (b6c80 <hal_usart_available+0xc>)
   b6c78:	681b      	ldr	r3, [r3, #0]
   b6c7a:	691b      	ldr	r3, [r3, #16]
   b6c7c:	9301      	str	r3, [sp, #4]
   b6c7e:	bd08      	pop	{r3, pc}
   b6c80:	0003023c 	.word	0x0003023c

000b6c84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6c84:	b508      	push	{r3, lr}
   b6c86:	4b02      	ldr	r3, [pc, #8]	; (b6c90 <hal_usart_read+0xc>)
   b6c88:	681b      	ldr	r3, [r3, #0]
   b6c8a:	695b      	ldr	r3, [r3, #20]
   b6c8c:	9301      	str	r3, [sp, #4]
   b6c8e:	bd08      	pop	{r3, pc}
   b6c90:	0003023c 	.word	0x0003023c

000b6c94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6c94:	b508      	push	{r3, lr}
   b6c96:	4b02      	ldr	r3, [pc, #8]	; (b6ca0 <hal_usart_peek+0xc>)
   b6c98:	681b      	ldr	r3, [r3, #0]
   b6c9a:	699b      	ldr	r3, [r3, #24]
   b6c9c:	9301      	str	r3, [sp, #4]
   b6c9e:	bd08      	pop	{r3, pc}
   b6ca0:	0003023c 	.word	0x0003023c

000b6ca4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6ca4:	b508      	push	{r3, lr}
   b6ca6:	4b02      	ldr	r3, [pc, #8]	; (b6cb0 <hal_usart_flush+0xc>)
   b6ca8:	681b      	ldr	r3, [r3, #0]
   b6caa:	69db      	ldr	r3, [r3, #28]
   b6cac:	9301      	str	r3, [sp, #4]
   b6cae:	bd08      	pop	{r3, pc}
   b6cb0:	0003023c 	.word	0x0003023c

000b6cb4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6cb4:	b508      	push	{r3, lr}
   b6cb6:	4b02      	ldr	r3, [pc, #8]	; (b6cc0 <hal_usart_is_enabled+0xc>)
   b6cb8:	681b      	ldr	r3, [r3, #0]
   b6cba:	6a1b      	ldr	r3, [r3, #32]
   b6cbc:	9301      	str	r3, [sp, #4]
   b6cbe:	bd08      	pop	{r3, pc}
   b6cc0:	0003023c 	.word	0x0003023c

000b6cc4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6cc4:	b508      	push	{r3, lr}
   b6cc6:	4b02      	ldr	r3, [pc, #8]	; (b6cd0 <hal_usart_available_data_for_write+0xc>)
   b6cc8:	681b      	ldr	r3, [r3, #0]
   b6cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ccc:	9301      	str	r3, [sp, #4]
   b6cce:	bd08      	pop	{r3, pc}
   b6cd0:	0003023c 	.word	0x0003023c

000b6cd4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6cd4:	b508      	push	{r3, lr}
   b6cd6:	4b02      	ldr	r3, [pc, #8]	; (b6ce0 <hal_usart_init_ex+0xc>)
   b6cd8:	681b      	ldr	r3, [r3, #0]
   b6cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6cdc:	9301      	str	r3, [sp, #4]
   b6cde:	bd08      	pop	{r3, pc}
   b6ce0:	0003023c 	.word	0x0003023c

000b6ce4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6ce4:	b508      	push	{r3, lr}
   b6ce6:	4b02      	ldr	r3, [pc, #8]	; (b6cf0 <hal_i2c_set_speed+0xc>)
   b6ce8:	681b      	ldr	r3, [r3, #0]
   b6cea:	681b      	ldr	r3, [r3, #0]
   b6cec:	9301      	str	r3, [sp, #4]
   b6cee:	bd08      	pop	{r3, pc}
   b6cf0:	00030228 	.word	0x00030228

000b6cf4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b02      	ldr	r3, [pc, #8]	; (b6d00 <hal_i2c_begin+0xc>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	68db      	ldr	r3, [r3, #12]
   b6cfc:	9301      	str	r3, [sp, #4]
   b6cfe:	bd08      	pop	{r3, pc}
   b6d00:	00030228 	.word	0x00030228

000b6d04 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6d04:	b508      	push	{r3, lr}
   b6d06:	4b02      	ldr	r3, [pc, #8]	; (b6d10 <hal_i2c_begin_transmission+0xc>)
   b6d08:	681b      	ldr	r3, [r3, #0]
   b6d0a:	699b      	ldr	r3, [r3, #24]
   b6d0c:	9301      	str	r3, [sp, #4]
   b6d0e:	bd08      	pop	{r3, pc}
   b6d10:	00030228 	.word	0x00030228

000b6d14 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6d14:	b508      	push	{r3, lr}
   b6d16:	4b02      	ldr	r3, [pc, #8]	; (b6d20 <hal_i2c_end_transmission+0xc>)
   b6d18:	681b      	ldr	r3, [r3, #0]
   b6d1a:	69db      	ldr	r3, [r3, #28]
   b6d1c:	9301      	str	r3, [sp, #4]
   b6d1e:	bd08      	pop	{r3, pc}
   b6d20:	00030228 	.word	0x00030228

000b6d24 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6d24:	b508      	push	{r3, lr}
   b6d26:	4b02      	ldr	r3, [pc, #8]	; (b6d30 <hal_i2c_write+0xc>)
   b6d28:	681b      	ldr	r3, [r3, #0]
   b6d2a:	6a1b      	ldr	r3, [r3, #32]
   b6d2c:	9301      	str	r3, [sp, #4]
   b6d2e:	bd08      	pop	{r3, pc}
   b6d30:	00030228 	.word	0x00030228

000b6d34 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6d34:	b508      	push	{r3, lr}
   b6d36:	4b02      	ldr	r3, [pc, #8]	; (b6d40 <hal_i2c_available+0xc>)
   b6d38:	681b      	ldr	r3, [r3, #0]
   b6d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d3c:	9301      	str	r3, [sp, #4]
   b6d3e:	bd08      	pop	{r3, pc}
   b6d40:	00030228 	.word	0x00030228

000b6d44 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6d44:	b508      	push	{r3, lr}
   b6d46:	4b02      	ldr	r3, [pc, #8]	; (b6d50 <hal_i2c_read+0xc>)
   b6d48:	681b      	ldr	r3, [r3, #0]
   b6d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d4c:	9301      	str	r3, [sp, #4]
   b6d4e:	bd08      	pop	{r3, pc}
   b6d50:	00030228 	.word	0x00030228

000b6d54 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6d54:	b508      	push	{r3, lr}
   b6d56:	4b02      	ldr	r3, [pc, #8]	; (b6d60 <hal_i2c_peek+0xc>)
   b6d58:	681b      	ldr	r3, [r3, #0]
   b6d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d5c:	9301      	str	r3, [sp, #4]
   b6d5e:	bd08      	pop	{r3, pc}
   b6d60:	00030228 	.word	0x00030228

000b6d64 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6d64:	b508      	push	{r3, lr}
   b6d66:	4b02      	ldr	r3, [pc, #8]	; (b6d70 <hal_i2c_flush+0xc>)
   b6d68:	681b      	ldr	r3, [r3, #0]
   b6d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d6c:	9301      	str	r3, [sp, #4]
   b6d6e:	bd08      	pop	{r3, pc}
   b6d70:	00030228 	.word	0x00030228

000b6d74 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6d74:	b508      	push	{r3, lr}
   b6d76:	4b02      	ldr	r3, [pc, #8]	; (b6d80 <hal_i2c_is_enabled+0xc>)
   b6d78:	681b      	ldr	r3, [r3, #0]
   b6d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d7c:	9301      	str	r3, [sp, #4]
   b6d7e:	bd08      	pop	{r3, pc}
   b6d80:	00030228 	.word	0x00030228

000b6d84 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <hal_i2c_init+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030228 	.word	0x00030228

000b6d94 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <sock_setsockopt+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	699b      	ldr	r3, [r3, #24]
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030238 	.word	0x00030238

000b6da4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b02      	ldr	r3, [pc, #8]	; (b6db0 <sock_close+0xc>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	69db      	ldr	r3, [r3, #28]
   b6dac:	9301      	str	r3, [sp, #4]
   b6dae:	bd08      	pop	{r3, pc}
   b6db0:	00030238 	.word	0x00030238

000b6db4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6db4:	b508      	push	{r3, lr}
   b6db6:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <sock_connect+0xc>)
   b6db8:	681b      	ldr	r3, [r3, #0]
   b6dba:	6a1b      	ldr	r3, [r3, #32]
   b6dbc:	9301      	str	r3, [sp, #4]
   b6dbe:	bd08      	pop	{r3, pc}
   b6dc0:	00030238 	.word	0x00030238

000b6dc4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6dc4:	b508      	push	{r3, lr}
   b6dc6:	4b02      	ldr	r3, [pc, #8]	; (b6dd0 <sock_recv+0xc>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6dcc:	9301      	str	r3, [sp, #4]
   b6dce:	bd08      	pop	{r3, pc}
   b6dd0:	00030238 	.word	0x00030238

000b6dd4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6dd4:	b508      	push	{r3, lr}
   b6dd6:	4b02      	ldr	r3, [pc, #8]	; (b6de0 <sock_send+0xc>)
   b6dd8:	681b      	ldr	r3, [r3, #0]
   b6dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ddc:	9301      	str	r3, [sp, #4]
   b6dde:	bd08      	pop	{r3, pc}
   b6de0:	00030238 	.word	0x00030238

000b6de4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6de4:	b508      	push	{r3, lr}
   b6de6:	4b02      	ldr	r3, [pc, #8]	; (b6df0 <sock_socket+0xc>)
   b6de8:	681b      	ldr	r3, [r3, #0]
   b6dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6dec:	9301      	str	r3, [sp, #4]
   b6dee:	bd08      	pop	{r3, pc}
   b6df0:	00030238 	.word	0x00030238

000b6df4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b02      	ldr	r3, [pc, #8]	; (b6e00 <hal_spi_begin+0xc>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	681b      	ldr	r3, [r3, #0]
   b6dfc:	9301      	str	r3, [sp, #4]
   b6dfe:	bd08      	pop	{r3, pc}
   b6e00:	00030230 	.word	0x00030230

000b6e04 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6e04:	b508      	push	{r3, lr}
   b6e06:	4b02      	ldr	r3, [pc, #8]	; (b6e10 <hal_spi_transfer+0xc>)
   b6e08:	681b      	ldr	r3, [r3, #0]
   b6e0a:	695b      	ldr	r3, [r3, #20]
   b6e0c:	9301      	str	r3, [sp, #4]
   b6e0e:	bd08      	pop	{r3, pc}
   b6e10:	00030230 	.word	0x00030230

000b6e14 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6e14:	b508      	push	{r3, lr}
   b6e16:	4b02      	ldr	r3, [pc, #8]	; (b6e20 <hal_spi_init+0xc>)
   b6e18:	681b      	ldr	r3, [r3, #0]
   b6e1a:	69db      	ldr	r3, [r3, #28]
   b6e1c:	9301      	str	r3, [sp, #4]
   b6e1e:	bd08      	pop	{r3, pc}
   b6e20:	00030230 	.word	0x00030230

000b6e24 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6e24:	b508      	push	{r3, lr}
   b6e26:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <hal_spi_is_enabled+0xc>)
   b6e28:	681b      	ldr	r3, [r3, #0]
   b6e2a:	6a1b      	ldr	r3, [r3, #32]
   b6e2c:	9301      	str	r3, [sp, #4]
   b6e2e:	bd08      	pop	{r3, pc}
   b6e30:	00030230 	.word	0x00030230

000b6e34 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6e34:	b508      	push	{r3, lr}
   b6e36:	4b02      	ldr	r3, [pc, #8]	; (b6e40 <hal_spi_info+0xc>)
   b6e38:	681b      	ldr	r3, [r3, #0]
   b6e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e3c:	9301      	str	r3, [sp, #4]
   b6e3e:	bd08      	pop	{r3, pc}
   b6e40:	00030230 	.word	0x00030230

000b6e44 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b02      	ldr	r3, [pc, #8]	; (b6e50 <hal_spi_set_settings+0xc>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e4c:	9301      	str	r3, [sp, #4]
   b6e4e:	bd08      	pop	{r3, pc}
   b6e50:	00030230 	.word	0x00030230

000b6e54 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6e54:	b508      	push	{r3, lr}
   b6e56:	4b02      	ldr	r3, [pc, #8]	; (b6e60 <hal_spi_acquire+0xc>)
   b6e58:	681b      	ldr	r3, [r3, #0]
   b6e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	bd08      	pop	{r3, pc}
   b6e60:	00030230 	.word	0x00030230

000b6e64 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6e64:	b508      	push	{r3, lr}
   b6e66:	4b02      	ldr	r3, [pc, #8]	; (b6e70 <hal_spi_release+0xc>)
   b6e68:	681b      	ldr	r3, [r3, #0]
   b6e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e6c:	9301      	str	r3, [sp, #4]
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	00030230 	.word	0x00030230

000b6e74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6e74:	b508      	push	{r3, lr}
   b6e76:	4b02      	ldr	r3, [pc, #8]	; (b6e80 <HAL_USB_USART_Init+0xc>)
   b6e78:	681b      	ldr	r3, [r3, #0]
   b6e7a:	681b      	ldr	r3, [r3, #0]
   b6e7c:	9301      	str	r3, [sp, #4]
   b6e7e:	bd08      	pop	{r3, pc}
   b6e80:	0003024c 	.word	0x0003024c

000b6e84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6e84:	b508      	push	{r3, lr}
   b6e86:	4b02      	ldr	r3, [pc, #8]	; (b6e90 <HAL_USB_USART_Begin+0xc>)
   b6e88:	681b      	ldr	r3, [r3, #0]
   b6e8a:	685b      	ldr	r3, [r3, #4]
   b6e8c:	9301      	str	r3, [sp, #4]
   b6e8e:	bd08      	pop	{r3, pc}
   b6e90:	0003024c 	.word	0x0003024c

000b6e94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b02      	ldr	r3, [pc, #8]	; (b6ea0 <HAL_USB_USART_Available_Data+0xc>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	691b      	ldr	r3, [r3, #16]
   b6e9c:	9301      	str	r3, [sp, #4]
   b6e9e:	bd08      	pop	{r3, pc}
   b6ea0:	0003024c 	.word	0x0003024c

000b6ea4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6ea4:	b508      	push	{r3, lr}
   b6ea6:	4b02      	ldr	r3, [pc, #8]	; (b6eb0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6ea8:	681b      	ldr	r3, [r3, #0]
   b6eaa:	695b      	ldr	r3, [r3, #20]
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	bd08      	pop	{r3, pc}
   b6eb0:	0003024c 	.word	0x0003024c

000b6eb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6eb4:	b508      	push	{r3, lr}
   b6eb6:	4b02      	ldr	r3, [pc, #8]	; (b6ec0 <HAL_USB_USART_Receive_Data+0xc>)
   b6eb8:	681b      	ldr	r3, [r3, #0]
   b6eba:	699b      	ldr	r3, [r3, #24]
   b6ebc:	9301      	str	r3, [sp, #4]
   b6ebe:	bd08      	pop	{r3, pc}
   b6ec0:	0003024c 	.word	0x0003024c

000b6ec4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6ec4:	b508      	push	{r3, lr}
   b6ec6:	4b02      	ldr	r3, [pc, #8]	; (b6ed0 <HAL_USB_USART_Send_Data+0xc>)
   b6ec8:	681b      	ldr	r3, [r3, #0]
   b6eca:	69db      	ldr	r3, [r3, #28]
   b6ecc:	9301      	str	r3, [sp, #4]
   b6ece:	bd08      	pop	{r3, pc}
   b6ed0:	0003024c 	.word	0x0003024c

000b6ed4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6ed4:	b508      	push	{r3, lr}
   b6ed6:	4b02      	ldr	r3, [pc, #8]	; (b6ee0 <HAL_USB_USART_Flush_Data+0xc>)
   b6ed8:	681b      	ldr	r3, [r3, #0]
   b6eda:	6a1b      	ldr	r3, [r3, #32]
   b6edc:	9301      	str	r3, [sp, #4]
   b6ede:	bd08      	pop	{r3, pc}
   b6ee0:	0003024c 	.word	0x0003024c

000b6ee4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6ee4:	b508      	push	{r3, lr}
   b6ee6:	4b02      	ldr	r3, [pc, #8]	; (b6ef0 <panic_+0xc>)
   b6ee8:	681b      	ldr	r3, [r3, #0]
   b6eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6eec:	9301      	str	r3, [sp, #4]
   b6eee:	bd08      	pop	{r3, pc}
   b6ef0:	00030260 	.word	0x00030260

000b6ef4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6ef4:	b508      	push	{r3, lr}
   b6ef6:	4b02      	ldr	r3, [pc, #8]	; (b6f00 <log_message+0xc>)
   b6ef8:	681b      	ldr	r3, [r3, #0]
   b6efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6efc:	9301      	str	r3, [sp, #4]
   b6efe:	bd08      	pop	{r3, pc}
   b6f00:	00030260 	.word	0x00030260

000b6f04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6f04:	b508      	push	{r3, lr}
   b6f06:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <set_system_mode+0xc>)
   b6f08:	681b      	ldr	r3, [r3, #0]
   b6f0a:	685b      	ldr	r3, [r3, #4]
   b6f0c:	9301      	str	r3, [sp, #4]
   b6f0e:	bd08      	pop	{r3, pc}
   b6f10:	00030220 	.word	0x00030220

000b6f14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6f14:	b508      	push	{r3, lr}
   b6f16:	4b02      	ldr	r3, [pc, #8]	; (b6f20 <system_delay_ms+0xc>)
   b6f18:	681b      	ldr	r3, [r3, #0]
   b6f1a:	695b      	ldr	r3, [r3, #20]
   b6f1c:	9301      	str	r3, [sp, #4]
   b6f1e:	bd08      	pop	{r3, pc}
   b6f20:	00030220 	.word	0x00030220

000b6f24 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6f24:	b508      	push	{r3, lr}
   b6f26:	4b02      	ldr	r3, [pc, #8]	; (b6f30 <system_thread_set_state+0xc>)
   b6f28:	681b      	ldr	r3, [r3, #0]
   b6f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f2c:	9301      	str	r3, [sp, #4]
   b6f2e:	bd08      	pop	{r3, pc}
   b6f30:	00030220 	.word	0x00030220

000b6f34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6f34:	b508      	push	{r3, lr}
   b6f36:	4b03      	ldr	r3, [pc, #12]	; (b6f44 <system_ctrl_set_app_request_handler+0x10>)
   b6f38:	681b      	ldr	r3, [r3, #0]
   b6f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6f3e:	9301      	str	r3, [sp, #4]
   b6f40:	bd08      	pop	{r3, pc}
   b6f42:	0000      	.short	0x0000
   b6f44:	00030220 	.word	0x00030220

000b6f48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b03      	ldr	r3, [pc, #12]	; (b6f58 <system_ctrl_set_result+0x10>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6f52:	9301      	str	r3, [sp, #4]
   b6f54:	bd08      	pop	{r3, pc}
   b6f56:	0000      	.short	0x0000
   b6f58:	00030220 	.word	0x00030220

000b6f5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <network_connect+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	685b      	ldr	r3, [r3, #4]
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030240 	.word	0x00030240

000b6f6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <network_connecting+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	689b      	ldr	r3, [r3, #8]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030240 	.word	0x00030240

000b6f7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <network_disconnect+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	68db      	ldr	r3, [r3, #12]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030240 	.word	0x00030240

000b6f8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <network_ready+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	691b      	ldr	r3, [r3, #16]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030240 	.word	0x00030240

000b6f9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <network_on+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	695b      	ldr	r3, [r3, #20]
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030240 	.word	0x00030240

000b6fac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <network_off+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	699b      	ldr	r3, [r3, #24]
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030240 	.word	0x00030240

000b6fbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <network_listen+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	69db      	ldr	r3, [r3, #28]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030240 	.word	0x00030240

000b6fcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <network_listening+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	6a1b      	ldr	r3, [r3, #32]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	00030240 	.word	0x00030240

000b6fdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <network_set_listen_timeout+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030240 	.word	0x00030240

000b6fec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <network_get_listen_timeout+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030240 	.word	0x00030240

000b6ffc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <network_is_on+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030240 	.word	0x00030240

000b700c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <network_is_off+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030240 	.word	0x00030240

000b701c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <spark_process+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	689b      	ldr	r3, [r3, #8]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030244 	.word	0x00030244

000b702c <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <spark_deviceID+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	69db      	ldr	r3, [r3, #28]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030244 	.word	0x00030244

000b703c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030244 	.word	0x00030244

000b704c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <malloc+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	681b      	ldr	r3, [r3, #0]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	0003021c 	.word	0x0003021c

000b705c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <free+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	685b      	ldr	r3, [r3, #4]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	0003021c 	.word	0x0003021c

000b706c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <realloc+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	689b      	ldr	r3, [r3, #8]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	0003021c 	.word	0x0003021c

000b707c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <snprintf+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	69db      	ldr	r3, [r3, #28]
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	0003021c 	.word	0x0003021c

000b708c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <vsnprintf+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	0003021c 	.word	0x0003021c

000b709c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <abort+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	0003021c 	.word	0x0003021c

000b70ac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <_malloc_r+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	0003021c 	.word	0x0003021c

000b70bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <__errno+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	0003021c 	.word	0x0003021c

000b70cc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <__assert_func+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	0003021c 	.word	0x0003021c

000b70dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <newlib_impure_ptr_callback+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	0003021c 	.word	0x0003021c

000b70ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b70ec:	2200      	movs	r2, #0
   b70ee:	6840      	ldr	r0, [r0, #4]
   b70f0:	4611      	mov	r1, r2
   b70f2:	f7ff bf6b 	b.w	b6fcc <network_listening>

000b70f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b70f6:	2200      	movs	r2, #0
   b70f8:	6840      	ldr	r0, [r0, #4]
   b70fa:	4611      	mov	r1, r2
   b70fc:	f7ff bf76 	b.w	b6fec <network_get_listen_timeout>

000b7100 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7100:	6840      	ldr	r0, [r0, #4]
   b7102:	2200      	movs	r2, #0
   b7104:	f7ff bf6a 	b.w	b6fdc <network_set_listen_timeout>

000b7108 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7108:	6840      	ldr	r0, [r0, #4]
   b710a:	2200      	movs	r2, #0
   b710c:	f081 0101 	eor.w	r1, r1, #1
   b7110:	f7ff bf54 	b.w	b6fbc <network_listen>

000b7114 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7114:	2300      	movs	r3, #0
   b7116:	6840      	ldr	r0, [r0, #4]
   b7118:	461a      	mov	r2, r3
   b711a:	4619      	mov	r1, r3
   b711c:	f7ff bf46 	b.w	b6fac <network_off>

000b7120 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7120:	2300      	movs	r3, #0
   b7122:	6840      	ldr	r0, [r0, #4]
   b7124:	461a      	mov	r2, r3
   b7126:	4619      	mov	r1, r3
   b7128:	f7ff bf38 	b.w	b6f9c <network_on>

000b712c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b712c:	2200      	movs	r2, #0
   b712e:	6840      	ldr	r0, [r0, #4]
   b7130:	4611      	mov	r1, r2
   b7132:	f7ff bf2b 	b.w	b6f8c <network_ready>

000b7136 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7136:	2200      	movs	r2, #0
   b7138:	6840      	ldr	r0, [r0, #4]
   b713a:	4611      	mov	r1, r2
   b713c:	f7ff bf16 	b.w	b6f6c <network_connecting>

000b7140 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7140:	6840      	ldr	r0, [r0, #4]
   b7142:	2200      	movs	r2, #0
   b7144:	2102      	movs	r1, #2
   b7146:	f7ff bf19 	b.w	b6f7c <network_disconnect>

000b714a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b714a:	2300      	movs	r3, #0
   b714c:	6840      	ldr	r0, [r0, #4]
   b714e:	461a      	mov	r2, r3
   b7150:	f7ff bf04 	b.w	b6f5c <network_connect>

000b7154 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7154:	4b02      	ldr	r3, [pc, #8]	; (b7160 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7156:	2203      	movs	r2, #3
   b7158:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b715a:	4a02      	ldr	r2, [pc, #8]	; (b7164 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b715c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b715e:	4770      	bx	lr
   b7160:	2003e6c8 	.word	0x2003e6c8
   b7164:	000bc8c4 	.word	0x000bc8c4

000b7168 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7168:	2100      	movs	r1, #0
   b716a:	f7ff be7b 	b.w	b6e64 <hal_spi_release>

000b716e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b716e:	2100      	movs	r1, #0
   b7170:	f7ff be70 	b.w	b6e54 <hal_spi_acquire>

000b7174 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7174:	b510      	push	{r4, lr}
   b7176:	4604      	mov	r4, r0
   b7178:	4608      	mov	r0, r1
{
    _spi = spi;
   b717a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b717c:	f7ff fe4a 	bl	b6e14 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7180:	2300      	movs	r3, #0
   b7182:	6063      	str	r3, [r4, #4]
}
   b7184:	4620      	mov	r0, r4
   b7186:	bd10      	pop	{r4, pc}

000b7188 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7188:	b513      	push	{r0, r1, r4, lr}
   b718a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b718c:	7800      	ldrb	r0, [r0, #0]
   b718e:	f7ff ffee 	bl	b716e <_ZN8SPIClass4lockEv.isra.0>
   b7192:	b958      	cbnz	r0, b71ac <_ZN8SPIClass5beginEv+0x24>
   b7194:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7196:	9001      	str	r0, [sp, #4]
   b7198:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b719c:	f7ff fe2a 	bl	b6df4 <hal_spi_begin>
        unlock();
   b71a0:	9801      	ldr	r0, [sp, #4]
    }
}
   b71a2:	b002      	add	sp, #8
   b71a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b71a8:	f7ff bfde 	b.w	b7168 <_ZN8SPIClass6unlockEv.isra.0>
   b71ac:	b002      	add	sp, #8
   b71ae:	bd10      	pop	{r4, pc}

000b71b0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b71b0:	7800      	ldrb	r0, [r0, #0]
   b71b2:	f7ff bfd9 	b.w	b7168 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b71b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b71b8:	0840      	lsrs	r0, r0, #1
{
   b71ba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b71bc:	6018      	str	r0, [r3, #0]
   b71be:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b71c0:	6818      	ldr	r0, [r3, #0]
   b71c2:	4288      	cmp	r0, r1
   b71c4:	b2e5      	uxtb	r5, r4
   b71c6:	d906      	bls.n	b71d6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b71c8:	3401      	adds	r4, #1
   b71ca:	2c08      	cmp	r4, #8
   b71cc:	d002      	beq.n	b71d4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b71ce:	0840      	lsrs	r0, r0, #1
   b71d0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b71d2:	e7f5      	b.n	b71c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b71d4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b71d6:	4b02      	ldr	r3, [pc, #8]	; (b71e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b71d8:	5d5b      	ldrb	r3, [r3, r5]
   b71da:	7013      	strb	r3, [r2, #0]
}
   b71dc:	bd30      	pop	{r4, r5, pc}
   b71de:	bf00      	nop
   b71e0:	000bc8f8 	.word	0x000bc8f8

000b71e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b71e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b71e8:	4606      	mov	r6, r0
   b71ea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b71ec:	7800      	ldrb	r0, [r0, #0]
{
   b71ee:	460c      	mov	r4, r1
    CHECK(lock());
   b71f0:	f7ff ffbd 	bl	b716e <_ZN8SPIClass4lockEv.isra.0>
   b71f4:	2800      	cmp	r0, #0
   b71f6:	db1b      	blt.n	b7230 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b71f8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b71fa:	2214      	movs	r2, #20
   b71fc:	2100      	movs	r1, #0
   b71fe:	a809      	add	r0, sp, #36	; 0x24
   b7200:	f002 fab6 	bl	b9770 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7204:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7206:	2200      	movs	r2, #0
   b7208:	a909      	add	r1, sp, #36	; 0x24
   b720a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b720c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7210:	f7ff fe10 	bl	b6e34 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7214:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7218:	b113      	cbz	r3, b7220 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b721a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b721e:	b155      	cbz	r5, b7236 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7220:	2700      	movs	r7, #0
   b7222:	46b9      	mov	r9, r7
   b7224:	46b8      	mov	r8, r7
   b7226:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7228:	7923      	ldrb	r3, [r4, #4]
   b722a:	b15d      	cbz	r5, b7244 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b722c:	b1c3      	cbz	r3, b7260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b722e:	2000      	movs	r0, #0
}
   b7230:	b00f      	add	sp, #60	; 0x3c
   b7232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7236:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b723a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b723e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7242:	e7f1      	b.n	b7228 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7244:	2b00      	cmp	r3, #0
   b7246:	d135      	bne.n	b72b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7248:	68a3      	ldr	r3, [r4, #8]
   b724a:	4543      	cmp	r3, r8
   b724c:	d108      	bne.n	b7260 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b724e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7252:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7256:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b725a:	89a3      	ldrh	r3, [r4, #12]
   b725c:	429a      	cmp	r2, r3
   b725e:	d0e6      	beq.n	b722e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7260:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7262:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7264:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7268:	980a      	ldr	r0, [sp, #40]	; 0x28
   b726a:	ab04      	add	r3, sp, #16
   b726c:	f10d 020f 	add.w	r2, sp, #15
   b7270:	f7ff ffa2 	bl	b71b8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7274:	7921      	ldrb	r1, [r4, #4]
   b7276:	b985      	cbnz	r5, b729a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7278:	b989      	cbnz	r1, b729e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b727a:	68a3      	ldr	r3, [r4, #8]
   b727c:	4543      	cmp	r3, r8
   b727e:	d30e      	bcc.n	b729e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7280:	f88d 9020 	strb.w	r9, [sp, #32]
   b7284:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7288:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b728c:	89a3      	ldrh	r3, [r4, #12]
   b728e:	429a      	cmp	r2, r3
   b7290:	d105      	bne.n	b729e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7292:	9b04      	ldr	r3, [sp, #16]
   b7294:	4543      	cmp	r3, r8
   b7296:	d102      	bne.n	b729e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7298:	e7c9      	b.n	b722e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b729a:	2900      	cmp	r1, #0
   b729c:	d1f9      	bne.n	b7292 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b729e:	2300      	movs	r3, #0
   b72a0:	9301      	str	r3, [sp, #4]
   b72a2:	7b63      	ldrb	r3, [r4, #13]
   b72a4:	9300      	str	r3, [sp, #0]
   b72a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b72aa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b72ac:	7830      	ldrb	r0, [r6, #0]
   b72ae:	f7ff fdc9 	bl	b6e44 <hal_spi_set_settings>
   b72b2:	e7bc      	b.n	b722e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b72b4:	e9cd 5500 	strd	r5, r5, [sp]
   b72b8:	462b      	mov	r3, r5
   b72ba:	462a      	mov	r2, r5
   b72bc:	2101      	movs	r1, #1
   b72be:	e7f5      	b.n	b72ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b72c0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b72c0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b72c2:	7800      	ldrb	r0, [r0, #0]
   b72c4:	f7ff fd9e 	bl	b6e04 <hal_spi_transfer>
}
   b72c8:	b2c0      	uxtb	r0, r0
   b72ca:	bd08      	pop	{r3, pc}

000b72cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b72cc:	4b05      	ldr	r3, [pc, #20]	; (b72e4 <_GLOBAL__sub_I_System+0x18>)
   b72ce:	2202      	movs	r2, #2
   b72d0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b72d2:	4b05      	ldr	r3, [pc, #20]	; (b72e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b72d4:	4a05      	ldr	r2, [pc, #20]	; (b72ec <_GLOBAL__sub_I_System+0x20>)
   b72d6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b72d8:	2000      	movs	r0, #0
   b72da:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b72de:	f7ff be11 	b.w	b6f04 <set_system_mode>
   b72e2:	bf00      	nop
   b72e4:	2003e6dc 	.word	0x2003e6dc
   b72e8:	2003e6d0 	.word	0x2003e6d0
   b72ec:	ffff0000 	.word	0xffff0000

000b72f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b72f0:	b510      	push	{r4, lr}
   b72f2:	4604      	mov	r4, r0
{
	free(buffer);
   b72f4:	6800      	ldr	r0, [r0, #0]
   b72f6:	f7ff feb1 	bl	b705c <free>
}
   b72fa:	4620      	mov	r0, r4
   b72fc:	bd10      	pop	{r4, pc}

000b72fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b72fe:	b510      	push	{r4, lr}
   b7300:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7302:	6800      	ldr	r0, [r0, #0]
   b7304:	b108      	cbz	r0, b730a <_ZN6String10invalidateEv+0xc>
   b7306:	f7ff fea9 	bl	b705c <free>
	buffer = NULL;
   b730a:	2300      	movs	r3, #0
	capacity = len = 0;
   b730c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7310:	6023      	str	r3, [r4, #0]
}
   b7312:	bd10      	pop	{r4, pc}

000b7314 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7314:	b538      	push	{r3, r4, r5, lr}
   b7316:	4604      	mov	r4, r0
   b7318:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b731a:	6800      	ldr	r0, [r0, #0]
   b731c:	3101      	adds	r1, #1
   b731e:	f7ff fea5 	bl	b706c <realloc>
	if (newbuffer) {
   b7322:	b110      	cbz	r0, b732a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7324:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7328:	2001      	movs	r0, #1
	}
	return 0;
}
   b732a:	bd38      	pop	{r3, r4, r5, pc}

000b732c <_ZN6String7reserveEj>:
{
   b732c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b732e:	6803      	ldr	r3, [r0, #0]
{
   b7330:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7332:	b123      	cbz	r3, b733e <_ZN6String7reserveEj+0x12>
   b7334:	6843      	ldr	r3, [r0, #4]
   b7336:	428b      	cmp	r3, r1
   b7338:	d301      	bcc.n	b733e <_ZN6String7reserveEj+0x12>
   b733a:	2001      	movs	r0, #1
}
   b733c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b733e:	4620      	mov	r0, r4
   b7340:	f7ff ffe8 	bl	b7314 <_ZN6String12changeBufferEj>
   b7344:	2800      	cmp	r0, #0
   b7346:	d0f9      	beq.n	b733c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7348:	68a3      	ldr	r3, [r4, #8]
   b734a:	2b00      	cmp	r3, #0
   b734c:	d1f5      	bne.n	b733a <_ZN6String7reserveEj+0xe>
   b734e:	6822      	ldr	r2, [r4, #0]
   b7350:	7013      	strb	r3, [r2, #0]
   b7352:	e7f2      	b.n	b733a <_ZN6String7reserveEj+0xe>

000b7354 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7354:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7356:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7358:	4611      	mov	r1, r2
   b735a:	9201      	str	r2, [sp, #4]
{
   b735c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b735e:	f7ff ffe5 	bl	b732c <_ZN6String7reserveEj>
   b7362:	9a01      	ldr	r2, [sp, #4]
   b7364:	b928      	cbnz	r0, b7372 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7366:	4620      	mov	r0, r4
   b7368:	f7ff ffc9 	bl	b72fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b736c:	4620      	mov	r0, r4
   b736e:	b003      	add	sp, #12
   b7370:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7372:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7374:	4629      	mov	r1, r5
   b7376:	6820      	ldr	r0, [r4, #0]
   b7378:	f002 f9d2 	bl	b9720 <memcpy>
	buffer[len] = 0;
   b737c:	6822      	ldr	r2, [r4, #0]
   b737e:	68a3      	ldr	r3, [r4, #8]
   b7380:	2100      	movs	r1, #0
   b7382:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7384:	e7f2      	b.n	b736c <_ZN6String4copyEPKcj+0x18>

000b7386 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7386:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7388:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b738a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b738e:	4604      	mov	r4, r0
	len = 0;
   b7390:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7392:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7394:	b141      	cbz	r1, b73a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7396:	4608      	mov	r0, r1
   b7398:	9101      	str	r1, [sp, #4]
   b739a:	f002 fa29 	bl	b97f0 <strlen>
   b739e:	9901      	ldr	r1, [sp, #4]
   b73a0:	4602      	mov	r2, r0
   b73a2:	4620      	mov	r0, r4
   b73a4:	f7ff ffd6 	bl	b7354 <_ZN6String4copyEPKcj>
}
   b73a8:	4620      	mov	r0, r4
   b73aa:	b002      	add	sp, #8
   b73ac:	bd10      	pop	{r4, pc}

000b73ae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b73ae:	4288      	cmp	r0, r1
{
   b73b0:	b510      	push	{r4, lr}
   b73b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b73b4:	d005      	beq.n	b73c2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b73b6:	680b      	ldr	r3, [r1, #0]
   b73b8:	b12b      	cbz	r3, b73c6 <_ZN6StringaSERKS_+0x18>
   b73ba:	688a      	ldr	r2, [r1, #8]
   b73bc:	4619      	mov	r1, r3
   b73be:	f7ff ffc9 	bl	b7354 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73c2:	4620      	mov	r0, r4
   b73c4:	bd10      	pop	{r4, pc}
	else invalidate();
   b73c6:	f7ff ff9a 	bl	b72fe <_ZN6String10invalidateEv>
   b73ca:	e7fa      	b.n	b73c2 <_ZN6StringaSERKS_+0x14>

000b73cc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b73cc:	b513      	push	{r0, r1, r4, lr}
   b73ce:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b73d0:	b159      	cbz	r1, b73ea <_ZN6StringaSEPKc+0x1e>
   b73d2:	4608      	mov	r0, r1
   b73d4:	9101      	str	r1, [sp, #4]
   b73d6:	f002 fa0b 	bl	b97f0 <strlen>
   b73da:	9901      	ldr	r1, [sp, #4]
   b73dc:	4602      	mov	r2, r0
   b73de:	4620      	mov	r0, r4
   b73e0:	f7ff ffb8 	bl	b7354 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b73e4:	4620      	mov	r0, r4
   b73e6:	b002      	add	sp, #8
   b73e8:	bd10      	pop	{r4, pc}
	else invalidate();
   b73ea:	f7ff ff88 	bl	b72fe <_ZN6String10invalidateEv>
   b73ee:	e7f9      	b.n	b73e4 <_ZN6StringaSEPKc+0x18>

000b73f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b73f0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b73f2:	6843      	ldr	r3, [r0, #4]
   b73f4:	3b01      	subs	r3, #1
    {
   b73f6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b73f8:	6043      	str	r3, [r0, #4]
   b73fa:	b963      	cbnz	r3, b7416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b73fc:	6803      	ldr	r3, [r0, #0]
   b73fe:	689b      	ldr	r3, [r3, #8]
   b7400:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7402:	68a3      	ldr	r3, [r4, #8]
   b7404:	3b01      	subs	r3, #1
   b7406:	60a3      	str	r3, [r4, #8]
   b7408:	b92b      	cbnz	r3, b7416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b740a:	6823      	ldr	r3, [r4, #0]
   b740c:	4620      	mov	r0, r4
   b740e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b7410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7414:	4718      	bx	r3
    }
   b7416:	bd10      	pop	{r4, pc}

000b7418 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7418:	4802      	ldr	r0, [pc, #8]	; (b7424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b741a:	2300      	movs	r3, #0
   b741c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b741e:	f7ff bc01 	b.w	b6c24 <os_mutex_recursive_create>
   b7422:	bf00      	nop
   b7424:	2003e6e0 	.word	0x2003e6e0

000b7428 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b742a:	4606      	mov	r6, r0
   b742c:	460d      	mov	r5, r1
  size_t n = 0;
   b742e:	188f      	adds	r7, r1, r2
   b7430:	2400      	movs	r4, #0
  while (size--) {
   b7432:	42bd      	cmp	r5, r7
   b7434:	d00c      	beq.n	b7450 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7436:	6833      	ldr	r3, [r6, #0]
   b7438:	f815 1b01 	ldrb.w	r1, [r5], #1
   b743c:	689b      	ldr	r3, [r3, #8]
   b743e:	4630      	mov	r0, r6
   b7440:	4798      	blx	r3
     if (chunk>=0)
   b7442:	1e03      	subs	r3, r0, #0
   b7444:	db01      	blt.n	b744a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7446:	441c      	add	r4, r3
  while (size--) {
   b7448:	e7f3      	b.n	b7432 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b744a:	2c00      	cmp	r4, #0
   b744c:	bf08      	it	eq
   b744e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7450:	4620      	mov	r0, r4
   b7452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7454 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7454:	b513      	push	{r0, r1, r4, lr}
   b7456:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7458:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b745a:	b159      	cbz	r1, b7474 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b745c:	9101      	str	r1, [sp, #4]
   b745e:	f002 f9c7 	bl	b97f0 <strlen>
   b7462:	6823      	ldr	r3, [r4, #0]
   b7464:	9901      	ldr	r1, [sp, #4]
   b7466:	68db      	ldr	r3, [r3, #12]
   b7468:	4602      	mov	r2, r0
   b746a:	4620      	mov	r0, r4
    }
   b746c:	b002      	add	sp, #8
   b746e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7472:	4718      	bx	r3
    }
   b7474:	b002      	add	sp, #8
   b7476:	bd10      	pop	{r4, pc}

000b7478 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7478:	b508      	push	{r3, lr}
  return write(str);
   b747a:	f7ff ffeb 	bl	b7454 <_ZN5Print5writeEPKc>
}
   b747e:	bd08      	pop	{r3, pc}

000b7480 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7480:	6803      	ldr	r3, [r0, #0]
   b7482:	689b      	ldr	r3, [r3, #8]
   b7484:	4718      	bx	r3

000b7486 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7486:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7488:	210d      	movs	r1, #13
{
   b748a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b748c:	f7ff fff8 	bl	b7480 <_ZN5Print5printEc>
  n += print('\n');
   b7490:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7492:	4604      	mov	r4, r0
  n += print('\n');
   b7494:	4628      	mov	r0, r5
   b7496:	f7ff fff3 	bl	b7480 <_ZN5Print5printEc>
  return n;
}
   b749a:	4420      	add	r0, r4
   b749c:	bd38      	pop	{r3, r4, r5, pc}

000b749e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b749e:	b538      	push	{r3, r4, r5, lr}
   b74a0:	4605      	mov	r5, r0
  return write(str);
   b74a2:	f7ff ffd7 	bl	b7454 <_ZN5Print5writeEPKc>
   b74a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b74a8:	4628      	mov	r0, r5
   b74aa:	f7ff ffec 	bl	b7486 <_ZN5Print7printlnEv>
  return n;
}
   b74ae:	4420      	add	r0, r4
   b74b0:	bd38      	pop	{r3, r4, r5, pc}

000b74b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b74b2:	b530      	push	{r4, r5, lr}
   b74b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b74b6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b74b8:	2a01      	cmp	r2, #1
  *str = '\0';
   b74ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b74be:	bf98      	it	ls
   b74c0:	220a      	movls	r2, #10
   b74c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b74c4:	460d      	mov	r5, r1
   b74c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b74ca:	fb01 5312 	mls	r3, r1, r2, r5
   b74ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b74d2:	2b09      	cmp	r3, #9
   b74d4:	bf94      	ite	ls
   b74d6:	3330      	addls	r3, #48	; 0x30
   b74d8:	3337      	addhi	r3, #55	; 0x37
   b74da:	b2db      	uxtb	r3, r3
  } while(n);
   b74dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b74de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b74e2:	d9ef      	bls.n	b74c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b74e4:	4621      	mov	r1, r4
   b74e6:	f7ff ffb5 	bl	b7454 <_ZN5Print5writeEPKc>
}
   b74ea:	b00b      	add	sp, #44	; 0x2c
   b74ec:	bd30      	pop	{r4, r5, pc}

000b74ee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b74ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74f2:	b086      	sub	sp, #24
   b74f4:	af00      	add	r7, sp, #0
   b74f6:	4605      	mov	r5, r0
   b74f8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b74fa:	1d38      	adds	r0, r7, #4
   b74fc:	2114      	movs	r1, #20
{
   b74fe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7500:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7502:	f7ff fdc3 	bl	b708c <vsnprintf>

    if (n<bufsize)
   b7506:	2813      	cmp	r0, #19
   b7508:	d80e      	bhi.n	b7528 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b750a:	1d39      	adds	r1, r7, #4
   b750c:	4628      	mov	r0, r5
   b750e:	f7ff ffa1 	bl	b7454 <_ZN5Print5writeEPKc>
   b7512:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7514:	b11e      	cbz	r6, b751e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7516:	4628      	mov	r0, r5
   b7518:	f7ff ffb5 	bl	b7486 <_ZN5Print7printlnEv>
   b751c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b751e:	4620      	mov	r0, r4
   b7520:	3718      	adds	r7, #24
   b7522:	46bd      	mov	sp, r7
   b7524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7528:	f100 0308 	add.w	r3, r0, #8
   b752c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7530:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7532:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7536:	4622      	mov	r2, r4
   b7538:	1c41      	adds	r1, r0, #1
   b753a:	683b      	ldr	r3, [r7, #0]
   b753c:	4668      	mov	r0, sp
   b753e:	f7ff fda5 	bl	b708c <vsnprintf>
  return write(str);
   b7542:	4669      	mov	r1, sp
   b7544:	4628      	mov	r0, r5
   b7546:	f7ff ff85 	bl	b7454 <_ZN5Print5writeEPKc>
   b754a:	4604      	mov	r4, r0
   b754c:	46c5      	mov	sp, r8
   b754e:	e7e1      	b.n	b7514 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7550 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7550:	b510      	push	{r4, lr}
   b7552:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7554:	f7ff fb3e 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7558:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b755a:	6823      	ldr	r3, [r4, #0]
   b755c:	4620      	mov	r0, r4
   b755e:	695b      	ldr	r3, [r3, #20]
   b7560:	4798      	blx	r3
    if (c >= 0) return c;
   b7562:	2800      	cmp	r0, #0
   b7564:	da08      	bge.n	b7578 <_ZN6Stream9timedReadEv+0x28>
   b7566:	f7ff fb35 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b756a:	68e3      	ldr	r3, [r4, #12]
   b756c:	1ac0      	subs	r0, r0, r3
   b756e:	68a3      	ldr	r3, [r4, #8]
   b7570:	4298      	cmp	r0, r3
   b7572:	d3f2      	bcc.n	b755a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7574:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7578:	bd10      	pop	{r4, pc}

000b757a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b757e:	4607      	mov	r7, r0
   b7580:	460c      	mov	r4, r1
   b7582:	188e      	adds	r6, r1, r2
   b7584:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7586:	42b5      	cmp	r5, r6
   b7588:	eba5 0804 	sub.w	r8, r5, r4
   b758c:	d007      	beq.n	b759e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b758e:	4638      	mov	r0, r7
   b7590:	f7ff ffde 	bl	b7550 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7594:	1e03      	subs	r3, r0, #0
   b7596:	db02      	blt.n	b759e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7598:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b759c:	e7f3      	b.n	b7586 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b759e:	4640      	mov	r0, r8
   b75a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b75a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b75a4:	4b01      	ldr	r3, [pc, #4]	; (b75ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b75a6:	4a02      	ldr	r2, [pc, #8]	; (b75b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b75a8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b75aa:	4770      	bx	lr
   b75ac:	2003e6e4 	.word	0x2003e6e4
   b75b0:	000bc908 	.word	0x000bc908

000b75b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b75b4:	4b02      	ldr	r3, [pc, #8]	; (b75c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b75b6:	681a      	ldr	r2, [r3, #0]
   b75b8:	4b02      	ldr	r3, [pc, #8]	; (b75c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b75ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b75bc:	4770      	bx	lr
   b75be:	bf00      	nop
   b75c0:	2003e0c8 	.word	0x2003e0c8
   b75c4:	2003e6e8 	.word	0x2003e6e8

000b75c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b75c8:	2100      	movs	r1, #0
   b75ca:	f7ff bca3 	b.w	b6f14 <system_delay_ms>
	...

000b75d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b75d0:	b510      	push	{r4, lr}
   b75d2:	4b04      	ldr	r3, [pc, #16]	; (b75e4 <_ZN9TCPClientD1Ev+0x14>)
   b75d4:	6003      	str	r3, [r0, #0]
   b75d6:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b75d8:	6980      	ldr	r0, [r0, #24]
   b75da:	b108      	cbz	r0, b75e0 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b75dc:	f7ff ff08 	bl	b73f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b75e0:	4620      	mov	r0, r4
   b75e2:	bd10      	pop	{r4, pc}
   b75e4:	000bca00 	.word	0x000bca00

000b75e8 <_ZN9TCPClientD0Ev>:
   b75e8:	b510      	push	{r4, lr}
   b75ea:	4604      	mov	r4, r0
   b75ec:	f7ff fff0 	bl	b75d0 <_ZN9TCPClientD1Ev>
   b75f0:	4620      	mov	r0, r4
   b75f2:	211c      	movs	r1, #28
   b75f4:	f7fc fd57 	bl	b40a6 <_ZdlPvj>
   b75f8:	4620      	mov	r0, r4
   b75fa:	bd10      	pop	{r4, pc}

000b75fc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b75fc:	4b01      	ldr	r3, [pc, #4]	; (b7604 <_GLOBAL__sub_I_RGB+0x8>)
   b75fe:	2200      	movs	r2, #0
   b7600:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7602:	4770      	bx	lr
   b7604:	2003e6ec 	.word	0x2003e6ec

000b7608 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7608:	4b01      	ldr	r3, [pc, #4]	; (b7610 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b760a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b760c:	4770      	bx	lr
   b760e:	bf00      	nop
   b7610:	2003e0cc 	.word	0x2003e0cc

000b7614 <serialEventRun>:
{
   b7614:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7616:	4b0b      	ldr	r3, [pc, #44]	; (b7644 <serialEventRun+0x30>)
   b7618:	b143      	cbz	r3, b762c <serialEventRun+0x18>
   b761a:	f000 f97d 	bl	b7918 <_Z16_fetch_usbserialv>
   b761e:	6803      	ldr	r3, [r0, #0]
   b7620:	691b      	ldr	r3, [r3, #16]
   b7622:	4798      	blx	r3
   b7624:	2800      	cmp	r0, #0
   b7626:	dd01      	ble.n	b762c <serialEventRun+0x18>
        serialEvent();
   b7628:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b762c:	4b06      	ldr	r3, [pc, #24]	; (b7648 <serialEventRun+0x34>)
   b762e:	b143      	cbz	r3, b7642 <serialEventRun+0x2e>
   b7630:	f000 fed0 	bl	b83d4 <_Z22__fetch_global_Serial1v>
   b7634:	6803      	ldr	r3, [r0, #0]
   b7636:	691b      	ldr	r3, [r3, #16]
   b7638:	4798      	blx	r3
   b763a:	2800      	cmp	r0, #0
   b763c:	dd01      	ble.n	b7642 <serialEventRun+0x2e>
        serialEvent1();
   b763e:	f3af 8000 	nop.w
}
   b7642:	bd08      	pop	{r3, pc}
	...

000b764c <_post_loop>:
{
   b764c:	b508      	push	{r3, lr}
	serialEventRun();
   b764e:	f7ff ffe1 	bl	b7614 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7652:	f7ff fabf 	bl	b6bd4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7656:	4b01      	ldr	r3, [pc, #4]	; (b765c <_post_loop+0x10>)
   b7658:	6018      	str	r0, [r3, #0]
}
   b765a:	bd08      	pop	{r3, pc}
   b765c:	2003e744 	.word	0x2003e744

000b7660 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7660:	4805      	ldr	r0, [pc, #20]	; (b7678 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7662:	4a06      	ldr	r2, [pc, #24]	; (b767c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7664:	4906      	ldr	r1, [pc, #24]	; (b7680 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7666:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7668:	1a12      	subs	r2, r2, r0
   b766a:	f002 f859 	bl	b9720 <memcpy>
    __backup_sram_signature = signature;
   b766e:	4b05      	ldr	r3, [pc, #20]	; (b7684 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7670:	4a05      	ldr	r2, [pc, #20]	; (b7688 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7672:	601a      	str	r2, [r3, #0]
}
   b7674:	bd08      	pop	{r3, pc}
   b7676:	bf00      	nop
   b7678:	2003f400 	.word	0x2003f400
   b767c:	2003f404 	.word	0x2003f404
   b7680:	000bd154 	.word	0x000bd154
   b7684:	2003f400 	.word	0x2003f400
   b7688:	9a271c1e 	.word	0x9a271c1e

000b768c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b768c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b768e:	2300      	movs	r3, #0
   b7690:	9300      	str	r3, [sp, #0]
   b7692:	461a      	mov	r2, r3
   b7694:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7698:	f7ff fc56 	bl	b6f48 <system_ctrl_set_result>
}
   b769c:	b003      	add	sp, #12
   b769e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b76a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b76a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b76a6:	8843      	ldrh	r3, [r0, #2]
   b76a8:	2b0a      	cmp	r3, #10
   b76aa:	d008      	beq.n	b76be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b76ac:	2b50      	cmp	r3, #80	; 0x50
   b76ae:	d10b      	bne.n	b76c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b76b0:	4b09      	ldr	r3, [pc, #36]	; (b76d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b76b2:	681b      	ldr	r3, [r3, #0]
   b76b4:	b14b      	cbz	r3, b76ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b76b6:	b003      	add	sp, #12
   b76b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b76bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b76be:	f7ff ffe5 	bl	b768c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b76c2:	b003      	add	sp, #12
   b76c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b76c8:	2300      	movs	r3, #0
   b76ca:	9300      	str	r3, [sp, #0]
   b76cc:	461a      	mov	r2, r3
   b76ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b76d2:	f7ff fc39 	bl	b6f48 <system_ctrl_set_result>
}
   b76d6:	e7f4      	b.n	b76c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b76d8:	2003e700 	.word	0x2003e700

000b76dc <module_user_init_hook>:
{
   b76dc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b76de:	4812      	ldr	r0, [pc, #72]	; (b7728 <module_user_init_hook+0x4c>)
   b76e0:	2100      	movs	r1, #0
   b76e2:	f7ff fcfb 	bl	b70dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b76e6:	4b11      	ldr	r3, [pc, #68]	; (b772c <module_user_init_hook+0x50>)
   b76e8:	681a      	ldr	r2, [r3, #0]
   b76ea:	4b11      	ldr	r3, [pc, #68]	; (b7730 <module_user_init_hook+0x54>)
   b76ec:	429a      	cmp	r2, r3
   b76ee:	4b11      	ldr	r3, [pc, #68]	; (b7734 <module_user_init_hook+0x58>)
   b76f0:	bf0c      	ite	eq
   b76f2:	2201      	moveq	r2, #1
   b76f4:	2200      	movne	r2, #0
   b76f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b76f8:	d001      	beq.n	b76fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b76fa:	f7ff ffb1 	bl	b7660 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b76fe:	f7ff fa59 	bl	b6bb4 <HAL_RNG_GetRandomNumber>
   b7702:	4604      	mov	r4, r0
    srand(seed);
   b7704:	f002 f83c 	bl	b9780 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7708:	4b0b      	ldr	r3, [pc, #44]	; (b7738 <module_user_init_hook+0x5c>)
   b770a:	b113      	cbz	r3, b7712 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b770c:	4620      	mov	r0, r4
   b770e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7712:	2100      	movs	r1, #0
   b7714:	4808      	ldr	r0, [pc, #32]	; (b7738 <module_user_init_hook+0x5c>)
   b7716:	f7ff fc91 	bl	b703c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b771a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b771e:	4807      	ldr	r0, [pc, #28]	; (b773c <module_user_init_hook+0x60>)
   b7720:	2100      	movs	r1, #0
   b7722:	f7ff bc07 	b.w	b6f34 <system_ctrl_set_app_request_handler>
   b7726:	bf00      	nop
   b7728:	000b7609 	.word	0x000b7609
   b772c:	2003f400 	.word	0x2003f400
   b7730:	9a271c1e 	.word	0x9a271c1e
   b7734:	2003e6fc 	.word	0x2003e6fc
   b7738:	00000000 	.word	0x00000000
   b773c:	000b76a5 	.word	0x000b76a5

000b7740 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7740:	4770      	bx	lr

000b7742 <_ZN9IPAddressD0Ev>:
   b7742:	b510      	push	{r4, lr}
   b7744:	2118      	movs	r1, #24
   b7746:	4604      	mov	r4, r0
   b7748:	f7fc fcad 	bl	b40a6 <_ZdlPvj>
   b774c:	4620      	mov	r0, r4
   b774e:	bd10      	pop	{r4, pc}

000b7750 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7750:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7752:	7d03      	ldrb	r3, [r0, #20]
   b7754:	2b06      	cmp	r3, #6
{
   b7756:	b08d      	sub	sp, #52	; 0x34
   b7758:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b775a:	f100 0704 	add.w	r7, r0, #4
   b775e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7762:	d012      	beq.n	b778a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7764:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7768:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b776c:	220a      	movs	r2, #10
   b776e:	4630      	mov	r0, r6
   b7770:	f7ff fe9f 	bl	b74b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7774:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7776:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7778:	d019      	beq.n	b77ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b777a:	2c00      	cmp	r4, #0
   b777c:	d0f4      	beq.n	b7768 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b777e:	212e      	movs	r1, #46	; 0x2e
   b7780:	4630      	mov	r0, r6
   b7782:	f7ff fe7d 	bl	b7480 <_ZN5Print5printEc>
   b7786:	4404      	add	r4, r0
   b7788:	e7ee      	b.n	b7768 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b778a:	232f      	movs	r3, #47	; 0x2f
   b778c:	466a      	mov	r2, sp
   b778e:	4639      	mov	r1, r7
   b7790:	200a      	movs	r0, #10
		buf[0] = 0;
   b7792:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7796:	f7ff fa4d 	bl	b6c34 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b779a:	4668      	mov	r0, sp
   b779c:	f002 f828 	bl	b97f0 <strlen>
   b77a0:	6833      	ldr	r3, [r6, #0]
   b77a2:	4602      	mov	r2, r0
   b77a4:	68db      	ldr	r3, [r3, #12]
   b77a6:	4669      	mov	r1, sp
   b77a8:	4630      	mov	r0, r6
   b77aa:	4798      	blx	r3
   b77ac:	4604      	mov	r4, r0
    }
    return n;
}
   b77ae:	4620      	mov	r0, r4
   b77b0:	b00d      	add	sp, #52	; 0x34
   b77b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b77b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b77b4:	b510      	push	{r4, lr}
   b77b6:	4b05      	ldr	r3, [pc, #20]	; (b77cc <_ZN9IPAddressC1Ev+0x18>)
   b77b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b77ba:	2211      	movs	r2, #17
   b77bc:	f840 3b04 	str.w	r3, [r0], #4
   b77c0:	2100      	movs	r1, #0
   b77c2:	f001 ffd5 	bl	b9770 <memset>
}
   b77c6:	4620      	mov	r0, r4
   b77c8:	bd10      	pop	{r4, pc}
   b77ca:	bf00      	nop
   b77cc:	000bc930 	.word	0x000bc930

000b77d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b77d0:	4603      	mov	r3, r0
   b77d2:	4a07      	ldr	r2, [pc, #28]	; (b77f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b77d4:	b510      	push	{r4, lr}
   b77d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b77da:	f101 0210 	add.w	r2, r1, #16
   b77de:	f851 4b04 	ldr.w	r4, [r1], #4
   b77e2:	f843 4b04 	str.w	r4, [r3], #4
   b77e6:	4291      	cmp	r1, r2
   b77e8:	d1f9      	bne.n	b77de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b77ea:	780a      	ldrb	r2, [r1, #0]
   b77ec:	701a      	strb	r2, [r3, #0]
}
   b77ee:	bd10      	pop	{r4, pc}
   b77f0:	000bc930 	.word	0x000bc930

000b77f4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b77f4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b77f6:	2b04      	cmp	r3, #4
   b77f8:	d104      	bne.n	b7804 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b77fa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b77fc:	3800      	subs	r0, #0
   b77fe:	bf18      	it	ne
   b7800:	2001      	movne	r0, #1
   b7802:	4770      	bx	lr
    } else if (version() == 6) {
   b7804:	2b06      	cmp	r3, #6
   b7806:	d107      	bne.n	b7818 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7808:	6843      	ldr	r3, [r0, #4]
   b780a:	b93b      	cbnz	r3, b781c <_ZNK9IPAddresscvbEv+0x28>
   b780c:	6883      	ldr	r3, [r0, #8]
   b780e:	b92b      	cbnz	r3, b781c <_ZNK9IPAddresscvbEv+0x28>
   b7810:	68c3      	ldr	r3, [r0, #12]
   b7812:	b91b      	cbnz	r3, b781c <_ZNK9IPAddresscvbEv+0x28>
   b7814:	6900      	ldr	r0, [r0, #16]
   b7816:	e7f1      	b.n	b77fc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7818:	2000      	movs	r0, #0
   b781a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b781c:	2001      	movs	r0, #1
}
   b781e:	4770      	bx	lr

000b7820 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7820:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7822:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7826:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b782a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b782e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7832:	2304      	movs	r3, #4
   b7834:	6041      	str	r1, [r0, #4]
   b7836:	7503      	strb	r3, [r0, #20]
}
   b7838:	bd10      	pop	{r4, pc}
	...

000b783c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b783c:	b507      	push	{r0, r1, r2, lr}
   b783e:	4b06      	ldr	r3, [pc, #24]	; (b7858 <_ZN9IPAddressC1EPKh+0x1c>)
   b7840:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7842:	78cb      	ldrb	r3, [r1, #3]
   b7844:	9300      	str	r3, [sp, #0]
   b7846:	788b      	ldrb	r3, [r1, #2]
   b7848:	784a      	ldrb	r2, [r1, #1]
   b784a:	7809      	ldrb	r1, [r1, #0]
   b784c:	f7ff ffe8 	bl	b7820 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7850:	b003      	add	sp, #12
   b7852:	f85d fb04 	ldr.w	pc, [sp], #4
   b7856:	bf00      	nop
   b7858:	000bc930 	.word	0x000bc930

000b785c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b785c:	7441      	strb	r1, [r0, #17]
}
   b785e:	4770      	bx	lr

000b7860 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7860:	4770      	bx	lr

000b7862 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7862:	4770      	bx	lr

000b7864 <_ZN9USBSerial4readEv>:
{
   b7864:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7866:	2100      	movs	r1, #0
   b7868:	7c00      	ldrb	r0, [r0, #16]
   b786a:	f7ff fb23 	bl	b6eb4 <HAL_USB_USART_Receive_Data>
}
   b786e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7872:	bd08      	pop	{r3, pc}

000b7874 <_ZN9USBSerial4peekEv>:
{
   b7874:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7876:	2101      	movs	r1, #1
   b7878:	7c00      	ldrb	r0, [r0, #16]
   b787a:	f7ff fb1b 	bl	b6eb4 <HAL_USB_USART_Receive_Data>
}
   b787e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7882:	bd08      	pop	{r3, pc}

000b7884 <_ZN9USBSerial17availableForWriteEv>:
{
   b7884:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7886:	7c00      	ldrb	r0, [r0, #16]
   b7888:	f7ff fb0c 	bl	b6ea4 <HAL_USB_USART_Available_Data_For_Write>
}
   b788c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7890:	bd08      	pop	{r3, pc}

000b7892 <_ZN9USBSerial9availableEv>:
{
   b7892:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7894:	7c00      	ldrb	r0, [r0, #16]
   b7896:	f7ff fafd 	bl	b6e94 <HAL_USB_USART_Available_Data>
}
   b789a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b789e:	bd08      	pop	{r3, pc}

000b78a0 <_ZN9USBSerial5writeEh>:
{
   b78a0:	b513      	push	{r0, r1, r4, lr}
   b78a2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b78a4:	7c00      	ldrb	r0, [r0, #16]
{
   b78a6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b78a8:	f7ff fafc 	bl	b6ea4 <HAL_USB_USART_Available_Data_For_Write>
   b78ac:	2800      	cmp	r0, #0
   b78ae:	9901      	ldr	r1, [sp, #4]
   b78b0:	dc01      	bgt.n	b78b6 <_ZN9USBSerial5writeEh+0x16>
   b78b2:	7c60      	ldrb	r0, [r4, #17]
   b78b4:	b120      	cbz	r0, b78c0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b78b6:	7c20      	ldrb	r0, [r4, #16]
   b78b8:	f7ff fb04 	bl	b6ec4 <HAL_USB_USART_Send_Data>
   b78bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b78c0:	b002      	add	sp, #8
   b78c2:	bd10      	pop	{r4, pc}

000b78c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b78c4:	7c00      	ldrb	r0, [r0, #16]
   b78c6:	f7ff bb05 	b.w	b6ed4 <HAL_USB_USART_Flush_Data>

000b78ca <_ZN9USBSerialD0Ev>:
   b78ca:	b510      	push	{r4, lr}
   b78cc:	2114      	movs	r1, #20
   b78ce:	4604      	mov	r4, r0
   b78d0:	f7fc fbe9 	bl	b40a6 <_ZdlPvj>
   b78d4:	4620      	mov	r0, r4
   b78d6:	bd10      	pop	{r4, pc}

000b78d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b78d8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b78da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b78de:	4604      	mov	r4, r0
   b78e0:	4608      	mov	r0, r1
   b78e2:	2100      	movs	r1, #0
   b78e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b78e8:	4b04      	ldr	r3, [pc, #16]	; (b78fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b78ea:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b78ec:	2301      	movs	r3, #1
  _serial = serial;
   b78ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b78f0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b78f2:	4611      	mov	r1, r2
   b78f4:	f7ff fabe 	bl	b6e74 <HAL_USB_USART_Init>
}
   b78f8:	4620      	mov	r0, r4
   b78fa:	bd10      	pop	{r4, pc}
   b78fc:	000bc944 	.word	0x000bc944

000b7900 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7900:	7c00      	ldrb	r0, [r0, #16]
   b7902:	2200      	movs	r2, #0
   b7904:	f7ff babe 	b.w	b6e84 <HAL_USB_USART_Begin>

000b7908 <_Z19acquireSerialBufferv>:
{
   b7908:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b790a:	2214      	movs	r2, #20
{
   b790c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b790e:	2100      	movs	r1, #0
   b7910:	f001 ff2e 	bl	b9770 <memset>
}
   b7914:	4620      	mov	r0, r4
   b7916:	bd10      	pop	{r4, pc}

000b7918 <_Z16_fetch_usbserialv>:
{
   b7918:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b791a:	4c0f      	ldr	r4, [pc, #60]	; (b7958 <_Z16_fetch_usbserialv+0x40>)
{
   b791c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b791e:	a803      	add	r0, sp, #12
   b7920:	f7ff fff2 	bl	b7908 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7924:	7821      	ldrb	r1, [r4, #0]
   b7926:	f3bf 8f5b 	dmb	ish
   b792a:	f011 0101 	ands.w	r1, r1, #1
   b792e:	d10f      	bne.n	b7950 <_Z16_fetch_usbserialv+0x38>
   b7930:	4620      	mov	r0, r4
   b7932:	9101      	str	r1, [sp, #4]
   b7934:	f7fc fbc6 	bl	b40c4 <__cxa_guard_acquire>
   b7938:	9901      	ldr	r1, [sp, #4]
   b793a:	b148      	cbz	r0, b7950 <_Z16_fetch_usbserialv+0x38>
   b793c:	aa03      	add	r2, sp, #12
   b793e:	4807      	ldr	r0, [pc, #28]	; (b795c <_Z16_fetch_usbserialv+0x44>)
   b7940:	f7ff ffca 	bl	b78d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7944:	4620      	mov	r0, r4
   b7946:	f7fc fbc2 	bl	b40ce <__cxa_guard_release>
   b794a:	4805      	ldr	r0, [pc, #20]	; (b7960 <_Z16_fetch_usbserialv+0x48>)
   b794c:	f001 fe70 	bl	b9630 <atexit>
	return _usbserial;
}
   b7950:	4802      	ldr	r0, [pc, #8]	; (b795c <_Z16_fetch_usbserialv+0x44>)
   b7952:	b008      	add	sp, #32
   b7954:	bd10      	pop	{r4, pc}
   b7956:	bf00      	nop
   b7958:	2003e704 	.word	0x2003e704
   b795c:	2003e708 	.word	0x2003e708
   b7960:	000b7861 	.word	0x000b7861

000b7964 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7964:	4770      	bx	lr

000b7966 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7966:	7441      	strb	r1, [r0, #17]
}
   b7968:	4770      	bx	lr

000b796a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b796a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b796c:	7c00      	ldrb	r0, [r0, #16]
   b796e:	f7ff f9a9 	bl	b6cc4 <hal_usart_available_data_for_write>
}
   b7972:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7976:	bd08      	pop	{r3, pc}

000b7978 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7978:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b797a:	7c00      	ldrb	r0, [r0, #16]
   b797c:	f7ff f97a 	bl	b6c74 <hal_usart_available>
}
   b7980:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7984:	bd08      	pop	{r3, pc}

000b7986 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7986:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7988:	7c00      	ldrb	r0, [r0, #16]
   b798a:	f7ff f983 	bl	b6c94 <hal_usart_peek>
}
   b798e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7992:	bd08      	pop	{r3, pc}

000b7994 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7994:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7996:	7c00      	ldrb	r0, [r0, #16]
   b7998:	f7ff f974 	bl	b6c84 <hal_usart_read>
}
   b799c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b79a0:	bd08      	pop	{r3, pc}

000b79a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b79a2:	7c00      	ldrb	r0, [r0, #16]
   b79a4:	f7ff b97e 	b.w	b6ca4 <hal_usart_flush>

000b79a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b79a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b79aa:	7c45      	ldrb	r5, [r0, #17]
{
   b79ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b79ae:	b12d      	cbz	r5, b79bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b79b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b79b2:	b003      	add	sp, #12
   b79b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b79b8:	f7ff b954 	b.w	b6c64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b79bc:	7c00      	ldrb	r0, [r0, #16]
   b79be:	9101      	str	r1, [sp, #4]
   b79c0:	f7ff f980 	bl	b6cc4 <hal_usart_available_data_for_write>
   b79c4:	2800      	cmp	r0, #0
   b79c6:	9901      	ldr	r1, [sp, #4]
   b79c8:	dcf2      	bgt.n	b79b0 <_ZN11USARTSerial5writeEh+0x8>
}
   b79ca:	4628      	mov	r0, r5
   b79cc:	b003      	add	sp, #12
   b79ce:	bd30      	pop	{r4, r5, pc}

000b79d0 <_ZN11USARTSerialD0Ev>:
   b79d0:	b510      	push	{r4, lr}
   b79d2:	2114      	movs	r1, #20
   b79d4:	4604      	mov	r4, r0
   b79d6:	f7fc fb66 	bl	b40a6 <_ZdlPvj>
   b79da:	4620      	mov	r0, r4
   b79dc:	bd10      	pop	{r4, pc}
	...

000b79e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b79e0:	b510      	push	{r4, lr}
   b79e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b79e6:	4604      	mov	r4, r0
   b79e8:	4608      	mov	r0, r1
   b79ea:	4611      	mov	r1, r2
   b79ec:	2200      	movs	r2, #0
   b79ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b79f2:	4b04      	ldr	r3, [pc, #16]	; (b7a04 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b79f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b79f6:	2301      	movs	r3, #1
  _serial = serial;
   b79f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b79fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b79fc:	f7ff f96a 	bl	b6cd4 <hal_usart_init_ex>
}
   b7a00:	4620      	mov	r0, r4
   b7a02:	bd10      	pop	{r4, pc}
   b7a04:	000bc974 	.word	0x000bc974

000b7a08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7a08:	4770      	bx	lr

000b7a0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a0c:	4606      	mov	r6, r0
   b7a0e:	4615      	mov	r5, r2
   b7a10:	460c      	mov	r4, r1
   b7a12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7a14:	42bc      	cmp	r4, r7
   b7a16:	d006      	beq.n	b7a26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7a18:	6833      	ldr	r3, [r6, #0]
   b7a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7a1e:	689b      	ldr	r3, [r3, #8]
   b7a20:	4630      	mov	r0, r6
   b7a22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7a24:	e7f6      	b.n	b7a14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7a26:	4628      	mov	r0, r5
   b7a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7a2a:	7c00      	ldrb	r0, [r0, #16]
   b7a2c:	2200      	movs	r2, #0
   b7a2e:	f7ff b979 	b.w	b6d24 <hal_i2c_write>

000b7a32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7a32:	7c00      	ldrb	r0, [r0, #16]
   b7a34:	2100      	movs	r1, #0
   b7a36:	f7ff b97d 	b.w	b6d34 <hal_i2c_available>

000b7a3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7a3a:	7c00      	ldrb	r0, [r0, #16]
   b7a3c:	2100      	movs	r1, #0
   b7a3e:	f7ff b981 	b.w	b6d44 <hal_i2c_read>

000b7a42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7a42:	7c00      	ldrb	r0, [r0, #16]
   b7a44:	2100      	movs	r1, #0
   b7a46:	f7ff b985 	b.w	b6d54 <hal_i2c_peek>

000b7a4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7a4a:	7c00      	ldrb	r0, [r0, #16]
   b7a4c:	2100      	movs	r1, #0
   b7a4e:	f7ff b989 	b.w	b6d64 <hal_i2c_flush>

000b7a52 <_ZN7TwoWireD0Ev>:
   b7a52:	b510      	push	{r4, lr}
   b7a54:	2114      	movs	r1, #20
   b7a56:	4604      	mov	r4, r0
   b7a58:	f7fc fb25 	bl	b40a6 <_ZdlPvj>
   b7a5c:	4620      	mov	r0, r4
   b7a5e:	bd10      	pop	{r4, pc}

000b7a60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7a60:	b510      	push	{r4, lr}
   b7a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a66:	4604      	mov	r4, r0
   b7a68:	4608      	mov	r0, r1
   b7a6a:	2100      	movs	r1, #0
   b7a6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7a70:	4b03      	ldr	r3, [pc, #12]	; (b7a80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b7a72:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b7a74:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b7a76:	4611      	mov	r1, r2
   b7a78:	f7ff f984 	bl	b6d84 <hal_i2c_init>
}
   b7a7c:	4620      	mov	r0, r4
   b7a7e:	bd10      	pop	{r4, pc}
   b7a80:	000bc9a4 	.word	0x000bc9a4

000b7a84 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7a84:	7c00      	ldrb	r0, [r0, #16]
   b7a86:	2200      	movs	r2, #0
   b7a88:	f7ff b92c 	b.w	b6ce4 <hal_i2c_set_speed>

000b7a8c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7a8c:	2300      	movs	r3, #0
   b7a8e:	7c00      	ldrb	r0, [r0, #16]
   b7a90:	461a      	mov	r2, r3
   b7a92:	4619      	mov	r1, r3
   b7a94:	f7ff b92e 	b.w	b6cf4 <hal_i2c_begin>

000b7a98 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7a98:	7c00      	ldrb	r0, [r0, #16]
   b7a9a:	2200      	movs	r2, #0
   b7a9c:	f7ff b932 	b.w	b6d04 <hal_i2c_begin_transmission>

000b7aa0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7aa0:	b2c9      	uxtb	r1, r1
   b7aa2:	f7ff bff9 	b.w	b7a98 <_ZN7TwoWire17beginTransmissionEh>

000b7aa6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7aa6:	7c00      	ldrb	r0, [r0, #16]
   b7aa8:	2200      	movs	r2, #0
   b7aaa:	f7ff b933 	b.w	b6d14 <hal_i2c_end_transmission>

000b7aae <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7aae:	2101      	movs	r1, #1
   b7ab0:	f7ff bff9 	b.w	b7aa6 <_ZN7TwoWire15endTransmissionEh>

000b7ab4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7ab4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7ab6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7ab8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7abc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7abe:	2201      	movs	r2, #1
   b7ac0:	f04f 33ff 	mov.w	r3, #4294967295
   b7ac4:	f10d 0107 	add.w	r1, sp, #7
   b7ac8:	47a0      	blx	r4
}
   b7aca:	b002      	add	sp, #8
   b7acc:	bd10      	pop	{r4, pc}

000b7ace <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7ace:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7ad4:	f04f 33ff 	mov.w	r3, #4294967295
   b7ad8:	46a4      	mov	ip, r4
}
   b7ada:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7ade:	4760      	bx	ip

000b7ae0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7ae0:	b513      	push	{r0, r1, r4, lr}
   b7ae2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7ae4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7ae6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7aea:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7aec:	f10d 0107 	add.w	r1, sp, #7
   b7af0:	2201      	movs	r2, #1
   b7af2:	47a0      	blx	r4
}
   b7af4:	b002      	add	sp, #8
   b7af6:	bd10      	pop	{r4, pc}

000b7af8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7af8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7afa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7afc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7b04:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7b06:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7b08:	d008      	beq.n	b7b1c <_ZN9TCPClient4readEv+0x24>
   b7b0a:	6963      	ldr	r3, [r4, #20]
   b7b0c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7b10:	1c51      	adds	r1, r2, #1
   b7b12:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7b16:	4413      	add	r3, r2
   b7b18:	7918      	ldrb	r0, [r3, #4]
}
   b7b1a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7b1c:	6803      	ldr	r3, [r0, #0]
   b7b1e:	691b      	ldr	r3, [r3, #16]
   b7b20:	4798      	blx	r3
   b7b22:	2800      	cmp	r0, #0
   b7b24:	d1f1      	bne.n	b7b0a <_ZN9TCPClient4readEv+0x12>
   b7b26:	f04f 30ff 	mov.w	r0, #4294967295
   b7b2a:	e7f6      	b.n	b7b1a <_ZN9TCPClient4readEv+0x22>

000b7b2c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7b2c:	4770      	bx	lr

000b7b2e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7b2e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7b30:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7b32:	43c0      	mvns	r0, r0
   b7b34:	0fc0      	lsrs	r0, r0, #31
   b7b36:	4770      	bx	lr

000b7b38 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b38:	4770      	bx	lr
	...

000b7b3c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7b3c:	4b06      	ldr	r3, [pc, #24]	; (b7b58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7b3e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7b40:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7b42:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7b46:	d005      	beq.n	b7b54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7b48:	4608      	mov	r0, r1
   b7b4a:	f000 fcd1 	bl	b84f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7b4e:	2800      	cmp	r0, #0
   b7b50:	bf08      	it	eq
   b7b52:	2400      	moveq	r4, #0
      }
   b7b54:	4620      	mov	r0, r4
   b7b56:	bd10      	pop	{r4, pc}
   b7b58:	000bc900 	.word	0x000bc900

000b7b5c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7b5c:	b510      	push	{r4, lr}
   b7b5e:	21ac      	movs	r1, #172	; 0xac
   b7b60:	4604      	mov	r4, r0
   b7b62:	f7fc faa0 	bl	b40a6 <_ZdlPvj>
   b7b66:	4620      	mov	r0, r4
   b7b68:	bd10      	pop	{r4, pc}

000b7b6a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7b6a:	21ac      	movs	r1, #172	; 0xac
   b7b6c:	f7fc ba9b 	b.w	b40a6 <_ZdlPvj>

000b7b70 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7b74:	f04f 0800 	mov.w	r8, #0
   b7b78:	b086      	sub	sp, #24
   b7b7a:	461c      	mov	r4, r3
   b7b7c:	f8c0 8004 	str.w	r8, [r0, #4]
   b7b80:	4605      	mov	r5, r0
   b7b82:	460e      	mov	r6, r1
   b7b84:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7b86:	4641      	mov	r1, r8
   b7b88:	2210      	movs	r2, #16
   b7b8a:	a802      	add	r0, sp, #8
   b7b8c:	f001 fdf0 	bl	b9770 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7b90:	1c63      	adds	r3, r4, #1
   b7b92:	d009      	beq.n	b7ba8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b98:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7b9c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7ba0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7ba4:	435c      	muls	r4, r3
   b7ba6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7ba8:	6968      	ldr	r0, [r5, #20]
   b7baa:	2310      	movs	r3, #16
   b7bac:	9300      	str	r3, [sp, #0]
   b7bae:	6800      	ldr	r0, [r0, #0]
   b7bb0:	ab02      	add	r3, sp, #8
   b7bb2:	f241 0205 	movw	r2, #4101	; 0x1005
   b7bb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7bba:	f7ff f8eb 	bl	b6d94 <sock_setsockopt>
    if (ret < 0) {
   b7bbe:	2800      	cmp	r0, #0
   b7bc0:	da07      	bge.n	b7bd2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7bc2:	f7ff fa7b 	bl	b70bc <__errno>
   b7bc6:	6803      	ldr	r3, [r0, #0]
   b7bc8:	606b      	str	r3, [r5, #4]
        return 0;
   b7bca:	2000      	movs	r0, #0
}
   b7bcc:	b006      	add	sp, #24
   b7bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7bd2:	6968      	ldr	r0, [r5, #20]
   b7bd4:	2300      	movs	r3, #0
   b7bd6:	6800      	ldr	r0, [r0, #0]
   b7bd8:	463a      	mov	r2, r7
   b7bda:	4631      	mov	r1, r6
   b7bdc:	f7ff f8fa 	bl	b6dd4 <sock_send>
    if (ret < 0) {
   b7be0:	1e03      	subs	r3, r0, #0
   b7be2:	dbee      	blt.n	b7bc2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7be4:	4618      	mov	r0, r3
   b7be6:	e7f1      	b.n	b7bcc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7be8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7be8:	b530      	push	{r4, r5, lr}
   b7bea:	b087      	sub	sp, #28
   b7bec:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7bee:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7bf0:	4668      	mov	r0, sp
   b7bf2:	f7ff fe23 	bl	b783c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7bf8:	3404      	adds	r4, #4
   b7bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7bfc:	682b      	ldr	r3, [r5, #0]
   b7bfe:	7023      	strb	r3, [r4, #0]
    }
   b7c00:	b007      	add	sp, #28
   b7c02:	bd30      	pop	{r4, r5, pc}

000b7c04 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7c04:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7c06:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7c08:	4b05      	ldr	r3, [pc, #20]	; (b7c20 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7c0a:	4604      	mov	r4, r0
   b7c0c:	358c      	adds	r5, #140	; 0x8c
   b7c0e:	f844 3b04 	str.w	r3, [r4], #4
   b7c12:	4606      	mov	r6, r0
   b7c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7c18:	682b      	ldr	r3, [r5, #0]
   b7c1a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7c1c:	4630      	mov	r0, r6
   b7c1e:	bd70      	pop	{r4, r5, r6, pc}
   b7c20:	000bc930 	.word	0x000bc930

000b7c24 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7c28:	4698      	mov	r8, r3
    stop();
   b7c2a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c2c:	b093      	sub	sp, #76	; 0x4c
   b7c2e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7c30:	2400      	movs	r4, #0
    stop();
   b7c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7c34:	4606      	mov	r6, r0
   b7c36:	4617      	mov	r7, r2
    stop();
   b7c38:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7c3a:	4628      	mov	r0, r5
   b7c3c:	466b      	mov	r3, sp
   b7c3e:	4622      	mov	r2, r4
   b7c40:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7c42:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7c44:	f7fe ff66 	bl	b6b14 <netdb_getaddrinfo>
   b7c48:	4605      	mov	r5, r0
   b7c4a:	2800      	cmp	r0, #0
   b7c4c:	d163      	bne.n	b7d16 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7c4e:	9b00      	ldr	r3, [sp, #0]
   b7c50:	2b00      	cmp	r3, #0
   b7c52:	d04b      	beq.n	b7cec <_ZN9TCPClient7connectEPKctm+0xc8>
   b7c54:	695b      	ldr	r3, [r3, #20]
   b7c56:	2b00      	cmp	r3, #0
   b7c58:	d048      	beq.n	b7cec <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7c5a:	a806      	add	r0, sp, #24
   b7c5c:	f7ff fdaa 	bl	b77b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7c60:	9b00      	ldr	r3, [sp, #0]
   b7c62:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7c64:	7863      	ldrb	r3, [r4, #1]
   b7c66:	2b02      	cmp	r3, #2
   b7c68:	d104      	bne.n	b7c74 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7c6a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7c6c:	a806      	add	r0, sp, #24
   b7c6e:	f7ff ffbb 	bl	b7be8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7c72:	e026      	b.n	b7cc2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7c74:	2b0a      	cmp	r3, #10
   b7c76:	d124      	bne.n	b7cc2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7c78:	2211      	movs	r2, #17
   b7c7a:	4629      	mov	r1, r5
   b7c7c:	a801      	add	r0, sp, #4
   b7c7e:	f001 fd77 	bl	b9770 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7c82:	68a3      	ldr	r3, [r4, #8]
   b7c84:	2b00      	cmp	r3, #0
   b7c86:	d038      	beq.n	b7cfa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7c88:	f104 0308 	add.w	r3, r4, #8
   b7c8c:	f10d 0c04 	add.w	ip, sp, #4
   b7c90:	3418      	adds	r4, #24
   b7c92:	6818      	ldr	r0, [r3, #0]
   b7c94:	6859      	ldr	r1, [r3, #4]
   b7c96:	4662      	mov	r2, ip
   b7c98:	c203      	stmia	r2!, {r0, r1}
   b7c9a:	3308      	adds	r3, #8
   b7c9c:	42a3      	cmp	r3, r4
   b7c9e:	4694      	mov	ip, r2
   b7ca0:	d1f7      	bne.n	b7c92 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7ca2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7ca4:	a901      	add	r1, sp, #4
   b7ca6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7ca8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7cac:	f7ff fd90 	bl	b77d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7cb0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7cb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7cb8:	ac07      	add	r4, sp, #28
   b7cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7cbc:	f8dc 3000 	ldr.w	r3, [ip]
   b7cc0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7cc2:	a806      	add	r0, sp, #24
   b7cc4:	f7ff fd96 	bl	b77f4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7cc8:	b180      	cbz	r0, b7cec <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7cca:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7ccc:	ad07      	add	r5, sp, #28
   b7cce:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7cd2:	4b12      	ldr	r3, [pc, #72]	; (b7d1c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7cd4:	930c      	str	r3, [sp, #48]	; 0x30
   b7cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7cd8:	ac0d      	add	r4, sp, #52	; 0x34
   b7cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7cdc:	682b      	ldr	r3, [r5, #0]
   b7cde:	7023      	strb	r3, [r4, #0]
   b7ce0:	463a      	mov	r2, r7
   b7ce2:	4643      	mov	r3, r8
   b7ce4:	a90c      	add	r1, sp, #48	; 0x30
   b7ce6:	4630      	mov	r0, r6
   b7ce8:	47c8      	blx	r9
   b7cea:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7cec:	9800      	ldr	r0, [sp, #0]
   b7cee:	f7fe ff09 	bl	b6b04 <netdb_freeaddrinfo>
}
   b7cf2:	4628      	mov	r0, r5
   b7cf4:	b013      	add	sp, #76	; 0x4c
   b7cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7cfa:	68e3      	ldr	r3, [r4, #12]
   b7cfc:	2b00      	cmp	r3, #0
   b7cfe:	d1c3      	bne.n	b7c88 <_ZN9TCPClient7connectEPKctm+0x64>
   b7d00:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7d04:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7d08:	f7fe ff9c 	bl	b6c44 <inet_htonl>
   b7d0c:	4581      	cmp	r9, r0
   b7d0e:	d1bb      	bne.n	b7c88 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7d10:	f104 0114 	add.w	r1, r4, #20
   b7d14:	e7aa      	b.n	b7c6c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7d16:	4625      	mov	r5, r4
   b7d18:	e7e8      	b.n	b7cec <_ZN9TCPClient7connectEPKctm+0xc8>
   b7d1a:	bf00      	nop
   b7d1c:	000bc930 	.word	0x000bc930

000b7d20 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7d20:	b538      	push	{r3, r4, r5, lr}
   b7d22:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7d24:	681a      	ldr	r2, [r3, #0]
   b7d26:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7d28:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7d2a:	da10      	bge.n	b7d4e <_ZN9TCPClient9connectedEv+0x2e>
   b7d2c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d30:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d34:	429a      	cmp	r2, r3
   b7d36:	d10a      	bne.n	b7d4e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7d38:	6803      	ldr	r3, [r0, #0]
   b7d3a:	691b      	ldr	r3, [r3, #16]
   b7d3c:	4798      	blx	r3
        if (!rv) {
   b7d3e:	4604      	mov	r4, r0
   b7d40:	b928      	cbnz	r0, b7d4e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7d42:	682b      	ldr	r3, [r5, #0]
   b7d44:	4628      	mov	r0, r5
   b7d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d48:	4798      	blx	r3
        rv = available();
   b7d4a:	4620      	mov	r0, r4
}
   b7d4c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7d4e:	2001      	movs	r0, #1
   b7d50:	e7fc      	b.n	b7d4c <_ZN9TCPClient9connectedEv+0x2c>

000b7d52 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7d52:	b510      	push	{r4, lr}
   b7d54:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d56:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d5e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7d60:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d62:	d005      	beq.n	b7d70 <_ZN9TCPClient4peekEv+0x1e>
   b7d64:	6963      	ldr	r3, [r4, #20]
   b7d66:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7d6a:	4413      	add	r3, r2
   b7d6c:	7918      	ldrb	r0, [r3, #4]
}
   b7d6e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7d70:	6803      	ldr	r3, [r0, #0]
   b7d72:	691b      	ldr	r3, [r3, #16]
   b7d74:	4798      	blx	r3
   b7d76:	2800      	cmp	r0, #0
   b7d78:	d1f4      	bne.n	b7d64 <_ZN9TCPClient4peekEv+0x12>
   b7d7a:	f04f 30ff 	mov.w	r0, #4294967295
   b7d7e:	e7f6      	b.n	b7d6e <_ZN9TCPClient4peekEv+0x1c>

000b7d80 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d82:	6943      	ldr	r3, [r0, #20]
   b7d84:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7d86:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7d8a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7d8e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7d90:	4605      	mov	r5, r0
   b7d92:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7d94:	d016      	beq.n	b7dc4 <_ZN9TCPClient4readEPhj+0x44>
   b7d96:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7d98:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7d9c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7da0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7da2:	42bc      	cmp	r4, r7
   b7da4:	bf28      	it	cs
   b7da6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7da8:	3304      	adds	r3, #4
   b7daa:	4622      	mov	r2, r4
   b7dac:	4419      	add	r1, r3
   b7dae:	4630      	mov	r0, r6
   b7db0:	f001 fcb6 	bl	b9720 <memcpy>
   b7db4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7db6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7dba:	4423      	add	r3, r4
   b7dbc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7dc4:	6803      	ldr	r3, [r0, #0]
   b7dc6:	691b      	ldr	r3, [r3, #16]
   b7dc8:	4798      	blx	r3
   b7dca:	2800      	cmp	r0, #0
   b7dcc:	d1e3      	bne.n	b7d96 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7dce:	f04f 34ff 	mov.w	r4, #4294967295
   b7dd2:	e7f5      	b.n	b7dc0 <_ZN9TCPClient4readEPhj+0x40>

000b7dd4 <_ZN9TCPClient12flush_bufferEv>:
   b7dd4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7dd6:	2300      	movs	r3, #0
   b7dd8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7ddc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7dde:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7de2:	4770      	bx	lr

000b7de4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7de8:	461f      	mov	r7, r3
    stop();
   b7dea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7dec:	460c      	mov	r4, r1
    stop();
   b7dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7df0:	b08a      	sub	sp, #40	; 0x28
   b7df2:	4605      	mov	r5, r0
   b7df4:	4616      	mov	r6, r2
    stop();
   b7df6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7df8:	7d23      	ldrb	r3, [r4, #20]
   b7dfa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7dfe:	2b04      	cmp	r3, #4
   b7e00:	bf0c      	ite	eq
   b7e02:	2002      	moveq	r0, #2
   b7e04:	200a      	movne	r0, #10
   b7e06:	2206      	movs	r2, #6
   b7e08:	2101      	movs	r1, #1
   b7e0a:	f7fe ffeb 	bl	b6de4 <sock_socket>
   b7e0e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7e12:	696b      	ldr	r3, [r5, #20]
   b7e14:	681b      	ldr	r3, [r3, #0]
   b7e16:	2b00      	cmp	r3, #0
   b7e18:	da08      	bge.n	b7e2c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7e1a:	682b      	ldr	r3, [r5, #0]
   b7e1c:	4628      	mov	r0, r5
   b7e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e20:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7e22:	4798      	blx	r3
}
   b7e24:	4620      	mov	r0, r4
   b7e26:	b00a      	add	sp, #40	; 0x28
   b7e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7e2c:	4628      	mov	r0, r5
   b7e2e:	f7ff ffd1 	bl	b7dd4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7e32:	b1b7      	cbz	r7, b7e62 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7e34:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e36:	a903      	add	r1, sp, #12
   b7e38:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7e3a:	9303      	str	r3, [sp, #12]
   b7e3c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7e40:	f7fe feb0 	bl	b6ba4 <if_index_to_name>
   b7e44:	2800      	cmp	r0, #0
   b7e46:	d1e8      	bne.n	b7e1a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7e48:	6968      	ldr	r0, [r5, #20]
   b7e4a:	2306      	movs	r3, #6
   b7e4c:	9300      	str	r3, [sp, #0]
   b7e4e:	6800      	ldr	r0, [r0, #0]
   b7e50:	ab03      	add	r3, sp, #12
   b7e52:	f241 020b 	movw	r2, #4107	; 0x100b
   b7e56:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7e5a:	f7fe ff9b 	bl	b6d94 <sock_setsockopt>
   b7e5e:	2800      	cmp	r0, #0
   b7e60:	d1db      	bne.n	b7e1a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7e62:	221c      	movs	r2, #28
   b7e64:	2100      	movs	r1, #0
   b7e66:	a803      	add	r0, sp, #12
   b7e68:	f001 fc82 	bl	b9770 <memset>
    if (ip.version() == 4) {
   b7e6c:	7d23      	ldrb	r3, [r4, #20]
   b7e6e:	2b04      	cmp	r3, #4
   b7e70:	d11d      	bne.n	b7eae <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7e72:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7e76:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7e78:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7e7c:	f7fe feea 	bl	b6c54 <inet_htons>
   b7e80:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7e84:	6860      	ldr	r0, [r4, #4]
   b7e86:	f7fe fedd 	bl	b6c44 <inet_htonl>
   b7e8a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7e8c:	696b      	ldr	r3, [r5, #20]
   b7e8e:	221c      	movs	r2, #28
   b7e90:	6818      	ldr	r0, [r3, #0]
   b7e92:	a903      	add	r1, sp, #12
   b7e94:	f7fe ff8e 	bl	b6db4 <sock_connect>
   b7e98:	2800      	cmp	r0, #0
   b7e9a:	d1be      	bne.n	b7e1a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7e9c:	3404      	adds	r4, #4
   b7e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7ea0:	696d      	ldr	r5, [r5, #20]
   b7ea2:	358c      	adds	r5, #140	; 0x8c
   b7ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7ea6:	6823      	ldr	r3, [r4, #0]
   b7ea8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7eaa:	2401      	movs	r4, #1
   b7eac:	e7ba      	b.n	b7e24 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7eae:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7eb2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7eb4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7eb8:	f7fe fecc 	bl	b6c54 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7ebc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7ebe:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7ec2:	1d23      	adds	r3, r4, #4
   b7ec4:	f104 0714 	add.w	r7, r4, #20
   b7ec8:	6818      	ldr	r0, [r3, #0]
   b7eca:	6859      	ldr	r1, [r3, #4]
   b7ecc:	4632      	mov	r2, r6
   b7ece:	c203      	stmia	r2!, {r0, r1}
   b7ed0:	3308      	adds	r3, #8
   b7ed2:	42bb      	cmp	r3, r7
   b7ed4:	4616      	mov	r6, r2
   b7ed6:	d1f7      	bne.n	b7ec8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7ed8:	e7d8      	b.n	b7e8c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7edc <_ZN9TCPClient9availableEv>:
{
   b7edc:	b530      	push	{r4, r5, lr}
   b7ede:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7ee0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7ee4:	b08b      	sub	sp, #44	; 0x2c
   b7ee6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7ee8:	b12b      	cbz	r3, b7ef6 <_ZN9TCPClient9availableEv+0x1a>
   b7eea:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7eee:	429a      	cmp	r2, r3
   b7ef0:	d101      	bne.n	b7ef6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7ef2:	f7ff ff6f 	bl	b7dd4 <_ZN9TCPClient12flush_bufferEv>
   b7ef6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7ef8:	6808      	ldr	r0, [r1, #0]
   b7efa:	2800      	cmp	r0, #0
   b7efc:	db18      	blt.n	b7f30 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7efe:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7f02:	2d7f      	cmp	r5, #127	; 0x7f
   b7f04:	d814      	bhi.n	b7f30 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7f06:	3104      	adds	r1, #4
   b7f08:	2308      	movs	r3, #8
   b7f0a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7f0e:	4429      	add	r1, r5
   b7f10:	f7fe ff58 	bl	b6dc4 <sock_recv>
            if (ret > 0) {
   b7f14:	2800      	cmp	r0, #0
   b7f16:	dd13      	ble.n	b7f40 <_ZN9TCPClient9availableEv+0x64>
   b7f18:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7f1a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f1e:	b90a      	cbnz	r2, b7f24 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7f20:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7f24:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7f26:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f2a:	4410      	add	r0, r2
   b7f2c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7f30:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7f32:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7f36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7f3a:	1ac0      	subs	r0, r0, r3
   b7f3c:	b00b      	add	sp, #44	; 0x2c
   b7f3e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7f40:	f7ff f8bc 	bl	b70bc <__errno>
   b7f44:	6803      	ldr	r3, [r0, #0]
   b7f46:	2b0b      	cmp	r3, #11
   b7f48:	d0f2      	beq.n	b7f30 <_ZN9TCPClient9availableEv+0x54>
   b7f4a:	f7ff f8b7 	bl	b70bc <__errno>
   b7f4e:	6803      	ldr	r3, [r0, #0]
   b7f50:	2b0b      	cmp	r3, #11
   b7f52:	d0ed      	beq.n	b7f30 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7f54:	2320      	movs	r3, #32
   b7f56:	2500      	movs	r5, #0
   b7f58:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7f5c:	f7ff f8ae 	bl	b70bc <__errno>
   b7f60:	6803      	ldr	r3, [r0, #0]
   b7f62:	9301      	str	r3, [sp, #4]
   b7f64:	4b08      	ldr	r3, [pc, #32]	; (b7f88 <_ZN9TCPClient9availableEv+0xac>)
   b7f66:	4909      	ldr	r1, [pc, #36]	; (b7f8c <_ZN9TCPClient9availableEv+0xb0>)
   b7f68:	9300      	str	r3, [sp, #0]
   b7f6a:	aa02      	add	r2, sp, #8
   b7f6c:	462b      	mov	r3, r5
   b7f6e:	2032      	movs	r0, #50	; 0x32
   b7f70:	f7fe ffc0 	bl	b6ef4 <log_message>
                    sock_close(d_->sock);
   b7f74:	6963      	ldr	r3, [r4, #20]
   b7f76:	6818      	ldr	r0, [r3, #0]
   b7f78:	f7fe ff14 	bl	b6da4 <sock_close>
   b7f7c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7f7e:	f04f 32ff 	mov.w	r2, #4294967295
   b7f82:	601a      	str	r2, [r3, #0]
   b7f84:	e7d4      	b.n	b7f30 <_ZN9TCPClient9availableEv+0x54>
   b7f86:	bf00      	nop
   b7f88:	000bc9cb 	.word	0x000bc9cb
   b7f8c:	000bc9c4 	.word	0x000bc9c4

000b7f90 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7f90:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7f92:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7f94:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7f96:	6818      	ldr	r0, [r3, #0]
   b7f98:	2800      	cmp	r0, #0
   b7f9a:	db01      	blt.n	b7fa0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7f9c:	f7fe ff02 	bl	b6da4 <sock_close>
   b7fa0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7fa2:	f04f 32ff 	mov.w	r2, #4294967295
   b7fa6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7fa8:	6960      	ldr	r0, [r4, #20]
   b7faa:	2211      	movs	r2, #17
   b7fac:	2100      	movs	r1, #0
   b7fae:	308c      	adds	r0, #140	; 0x8c
   b7fb0:	f001 fbde 	bl	b9770 <memset>
    flush_buffer();
   b7fb4:	4620      	mov	r0, r4
}
   b7fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7fba:	f7ff bf0b 	b.w	b7dd4 <_ZN9TCPClient12flush_bufferEv>

000b7fbe <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7fbe:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7fc0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7fc2:	4604      	mov	r4, r0
          total(0) {
   b7fc4:	6001      	str	r1, [r0, #0]
   b7fc6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7fca:	3088      	adds	r0, #136	; 0x88
   b7fcc:	f7ff fbf2 	bl	b77b4 <_ZN9IPAddressC1Ev>
}
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	bd10      	pop	{r4, pc}

000b7fd4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7fd6:	2300      	movs	r3, #0
   b7fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7fdc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7fe0:	4a0e      	ldr	r2, [pc, #56]	; (b801c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7fe2:	6103      	str	r3, [r0, #16]
   b7fe4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7fe6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7fe8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7fea:	20ac      	movs	r0, #172	; 0xac
   b7fec:	9101      	str	r1, [sp, #4]
   b7fee:	f7fc f852 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7ff2:	1e05      	subs	r5, r0, #0
   b7ff4:	f105 060c 	add.w	r6, r5, #12
   b7ff8:	d008      	beq.n	b800c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7ffa:	2301      	movs	r3, #1
   b7ffc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8000:	4b07      	ldr	r3, [pc, #28]	; (b8020 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8002:	9901      	ldr	r1, [sp, #4]
   b8004:	602b      	str	r3, [r5, #0]
   b8006:	4630      	mov	r0, r6
   b8008:	f7ff ffd9 	bl	b7fbe <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b800c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b800e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8012:	f7ff fedf 	bl	b7dd4 <_ZN9TCPClient12flush_bufferEv>
}
   b8016:	b002      	add	sp, #8
   b8018:	bd70      	pop	{r4, r5, r6, pc}
   b801a:	bf00      	nop
   b801c:	000bca00 	.word	0x000bca00
   b8020:	000bc9e4 	.word	0x000bc9e4

000b8024 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8024:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8026:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b802a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b802c:	f7ff ffd2 	bl	b7fd4 <_ZN9TCPClientC1Ei>
}
   b8030:	4620      	mov	r0, r4
   b8032:	bd10      	pop	{r4, pc}

000b8034 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8034:	b510      	push	{r4, lr}
   b8036:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8038:	6800      	ldr	r0, [r0, #0]
   b803a:	2800      	cmp	r0, #0
   b803c:	db01      	blt.n	b8042 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b803e:	f7fe feb1 	bl	b6da4 <sock_close>
    }
}
   b8042:	4620      	mov	r0, r4
   b8044:	bd10      	pop	{r4, pc}

000b8046 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8046:	300c      	adds	r0, #12
   b8048:	f7ff bff4 	b.w	b8034 <_ZN9TCPClient4DataD1Ev>

000b804c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b804c:	2200      	movs	r2, #0
   b804e:	6840      	ldr	r0, [r0, #4]
   b8050:	4611      	mov	r1, r2
   b8052:	f7fe bf9b 	b.w	b6f8c <network_ready>

000b8056 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8056:	2200      	movs	r2, #0
   b8058:	6840      	ldr	r0, [r0, #4]
   b805a:	4611      	mov	r1, r2
   b805c:	f7fe bfb6 	b.w	b6fcc <network_listening>

000b8060 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8060:	2200      	movs	r2, #0
   b8062:	6840      	ldr	r0, [r0, #4]
   b8064:	4611      	mov	r1, r2
   b8066:	f7fe bfc1 	b.w	b6fec <network_get_listen_timeout>

000b806a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b806a:	6840      	ldr	r0, [r0, #4]
   b806c:	2200      	movs	r2, #0
   b806e:	f7fe bfb5 	b.w	b6fdc <network_set_listen_timeout>

000b8072 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8072:	6840      	ldr	r0, [r0, #4]
   b8074:	2200      	movs	r2, #0
   b8076:	f081 0101 	eor.w	r1, r1, #1
   b807a:	f7fe bf9f 	b.w	b6fbc <network_listen>

000b807e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b807e:	2300      	movs	r3, #0
   b8080:	6840      	ldr	r0, [r0, #4]
   b8082:	461a      	mov	r2, r3
   b8084:	4619      	mov	r1, r3
   b8086:	f7fe bf91 	b.w	b6fac <network_off>

000b808a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b808a:	2300      	movs	r3, #0
   b808c:	6840      	ldr	r0, [r0, #4]
   b808e:	461a      	mov	r2, r3
   b8090:	4619      	mov	r1, r3
   b8092:	f7fe bf83 	b.w	b6f9c <network_on>

000b8096 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8096:	2200      	movs	r2, #0
   b8098:	6840      	ldr	r0, [r0, #4]
   b809a:	4611      	mov	r1, r2
   b809c:	f7fe bf66 	b.w	b6f6c <network_connecting>

000b80a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b80a0:	6840      	ldr	r0, [r0, #4]
   b80a2:	2200      	movs	r2, #0
   b80a4:	2102      	movs	r1, #2
   b80a6:	f7fe bf69 	b.w	b6f7c <network_disconnect>

000b80aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b80aa:	2300      	movs	r3, #0
   b80ac:	6840      	ldr	r0, [r0, #4]
   b80ae:	461a      	mov	r2, r3
   b80b0:	f7fe bf54 	b.w	b6f5c <network_connect>

000b80b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b80b4:	4b02      	ldr	r3, [pc, #8]	; (b80c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b80b6:	2204      	movs	r2, #4
   b80b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b80ba:	4a02      	ldr	r2, [pc, #8]	; (b80c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b80bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b80be:	4770      	bx	lr
   b80c0:	2003e71c 	.word	0x2003e71c
   b80c4:	000bca4c 	.word	0x000bca4c

000b80c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b80c8:	2300      	movs	r3, #0
   b80ca:	6840      	ldr	r0, [r0, #4]
   b80cc:	461a      	mov	r2, r3
   b80ce:	f7fe bf45 	b.w	b6f5c <network_connect>

000b80d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b80d2:	6840      	ldr	r0, [r0, #4]
   b80d4:	2200      	movs	r2, #0
   b80d6:	2102      	movs	r1, #2
   b80d8:	f7fe bf50 	b.w	b6f7c <network_disconnect>

000b80dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b80dc:	2200      	movs	r2, #0
   b80de:	6840      	ldr	r0, [r0, #4]
   b80e0:	4611      	mov	r1, r2
   b80e2:	f7fe bf43 	b.w	b6f6c <network_connecting>

000b80e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b80e6:	2200      	movs	r2, #0
   b80e8:	6840      	ldr	r0, [r0, #4]
   b80ea:	4611      	mov	r1, r2
   b80ec:	f7fe bf4e 	b.w	b6f8c <network_ready>

000b80f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b80f0:	2300      	movs	r3, #0
   b80f2:	6840      	ldr	r0, [r0, #4]
   b80f4:	461a      	mov	r2, r3
   b80f6:	4619      	mov	r1, r3
   b80f8:	f7fe bf50 	b.w	b6f9c <network_on>

000b80fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b80fc:	2300      	movs	r3, #0
   b80fe:	6840      	ldr	r0, [r0, #4]
   b8100:	461a      	mov	r2, r3
   b8102:	4619      	mov	r1, r3
   b8104:	f7fe bf52 	b.w	b6fac <network_off>

000b8108 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8108:	6840      	ldr	r0, [r0, #4]
   b810a:	2100      	movs	r1, #0
   b810c:	f7fe bf76 	b.w	b6ffc <network_is_on>

000b8110 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8110:	6840      	ldr	r0, [r0, #4]
   b8112:	2100      	movs	r1, #0
   b8114:	f7fe bf7a 	b.w	b700c <network_is_off>

000b8118 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8118:	6840      	ldr	r0, [r0, #4]
   b811a:	2200      	movs	r2, #0
   b811c:	f081 0101 	eor.w	r1, r1, #1
   b8120:	f7fe bf4c 	b.w	b6fbc <network_listen>

000b8124 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8124:	6840      	ldr	r0, [r0, #4]
   b8126:	2200      	movs	r2, #0
   b8128:	f7fe bf58 	b.w	b6fdc <network_set_listen_timeout>

000b812c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b812c:	2200      	movs	r2, #0
   b812e:	6840      	ldr	r0, [r0, #4]
   b8130:	4611      	mov	r1, r2
   b8132:	f7fe bf5b 	b.w	b6fec <network_get_listen_timeout>

000b8136 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8136:	2200      	movs	r2, #0
   b8138:	6840      	ldr	r0, [r0, #4]
   b813a:	4611      	mov	r1, r2
   b813c:	f7fe bf46 	b.w	b6fcc <network_listening>

000b8140 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8144:	b095      	sub	sp, #84	; 0x54
   b8146:	4614      	mov	r4, r2
   b8148:	460d      	mov	r5, r1
   b814a:	4607      	mov	r7, r0
    IPAddress addr;
   b814c:	f7ff fb32 	bl	b77b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8150:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8152:	221c      	movs	r2, #28
   b8154:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8156:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8158:	f001 fb0a 	bl	b9770 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b815c:	2340      	movs	r3, #64	; 0x40
   b815e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8160:	4620      	mov	r0, r4
   b8162:	466b      	mov	r3, sp
   b8164:	aa0c      	add	r2, sp, #48	; 0x30
   b8166:	2100      	movs	r1, #0
   b8168:	f7fe fcd4 	bl	b6b14 <netdb_getaddrinfo>
    if (!r) {
   b816c:	4604      	mov	r4, r0
   b816e:	2800      	cmp	r0, #0
   b8170:	d14b      	bne.n	b820a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8172:	4602      	mov	r2, r0
   b8174:	2101      	movs	r1, #1
   b8176:	6868      	ldr	r0, [r5, #4]
   b8178:	f7fe ff08 	bl	b6f8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b817c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b817e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8180:	4622      	mov	r2, r4
   b8182:	6868      	ldr	r0, [r5, #4]
   b8184:	f7fe ff02 	bl	b6f8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8188:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b818a:	4681      	mov	r9, r0
        bool ok = false;
   b818c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b818e:	2e00      	cmp	r6, #0
   b8190:	d03b      	beq.n	b820a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8192:	2900      	cmp	r1, #0
   b8194:	d139      	bne.n	b820a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8196:	6873      	ldr	r3, [r6, #4]
   b8198:	2b02      	cmp	r3, #2
   b819a:	d003      	beq.n	b81a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b819c:	2b0a      	cmp	r3, #10
   b819e:	d011      	beq.n	b81c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b81a0:	69f6      	ldr	r6, [r6, #28]
   b81a2:	e7f4      	b.n	b818e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b81a4:	f1b8 0f00 	cmp.w	r8, #0
   b81a8:	d0fa      	beq.n	b81a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b81aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b81ac:	a806      	add	r0, sp, #24
   b81ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b81b0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b81b2:	f7ff fb43 	bl	b783c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b81b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81b8:	1d3c      	adds	r4, r7, #4
   b81ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b81bc:	682b      	ldr	r3, [r5, #0]
   b81be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b81c0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b81c2:	e7ed      	b.n	b81a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b81c4:	f1b9 0f00 	cmp.w	r9, #0
   b81c8:	d0ea      	beq.n	b81a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b81ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b81cc:	2210      	movs	r2, #16
   b81ce:	a801      	add	r0, sp, #4
   b81d0:	f001 face 	bl	b9770 <memset>
                    a.v = 6;
   b81d4:	2306      	movs	r3, #6
   b81d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b81da:	ad01      	add	r5, sp, #4
   b81dc:	f104 0308 	add.w	r3, r4, #8
   b81e0:	3418      	adds	r4, #24
   b81e2:	6818      	ldr	r0, [r3, #0]
   b81e4:	6859      	ldr	r1, [r3, #4]
   b81e6:	462a      	mov	r2, r5
   b81e8:	c203      	stmia	r2!, {r0, r1}
   b81ea:	3308      	adds	r3, #8
   b81ec:	42a3      	cmp	r3, r4
   b81ee:	4615      	mov	r5, r2
   b81f0:	d1f7      	bne.n	b81e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b81f2:	a901      	add	r1, sp, #4
   b81f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b81f6:	ad07      	add	r5, sp, #28
   b81f8:	f7ff faea 	bl	b77d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b81fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b81fe:	1d3c      	adds	r4, r7, #4
   b8200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8202:	682b      	ldr	r3, [r5, #0]
   b8204:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8206:	4649      	mov	r1, r9
   b8208:	e7ca      	b.n	b81a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b820a:	9800      	ldr	r0, [sp, #0]
   b820c:	f7fe fc7a 	bl	b6b04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8210:	4638      	mov	r0, r7
   b8212:	b015      	add	sp, #84	; 0x54
   b8214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8218 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8218:	4b02      	ldr	r3, [pc, #8]	; (b8224 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b821a:	4a03      	ldr	r2, [pc, #12]	; (b8228 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b821c:	601a      	str	r2, [r3, #0]
   b821e:	2200      	movs	r2, #0
   b8220:	605a      	str	r2, [r3, #4]

} // spark
   b8222:	4770      	bx	lr
   b8224:	2003e724 	.word	0x2003e724
   b8228:	000bca88 	.word	0x000bca88

000b822c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b822c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b822e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8230:	d902      	bls.n	b8238 <pinAvailable+0xc>
    return false;
   b8232:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8234:	b002      	add	sp, #8
   b8236:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8238:	f1a0 030b 	sub.w	r3, r0, #11
   b823c:	2b02      	cmp	r3, #2
   b823e:	d81a      	bhi.n	b8276 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8240:	4c17      	ldr	r4, [pc, #92]	; (b82a0 <pinAvailable+0x74>)
   b8242:	7821      	ldrb	r1, [r4, #0]
   b8244:	f3bf 8f5b 	dmb	ish
   b8248:	f011 0101 	ands.w	r1, r1, #1
   b824c:	d10b      	bne.n	b8266 <pinAvailable+0x3a>
   b824e:	4620      	mov	r0, r4
   b8250:	9101      	str	r1, [sp, #4]
   b8252:	f7fb ff37 	bl	b40c4 <__cxa_guard_acquire>
   b8256:	9901      	ldr	r1, [sp, #4]
   b8258:	b128      	cbz	r0, b8266 <pinAvailable+0x3a>
   b825a:	4812      	ldr	r0, [pc, #72]	; (b82a4 <pinAvailable+0x78>)
   b825c:	f7fe ff8a 	bl	b7174 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8260:	4620      	mov	r0, r4
   b8262:	f7fb ff34 	bl	b40ce <__cxa_guard_release>
   b8266:	4b0f      	ldr	r3, [pc, #60]	; (b82a4 <pinAvailable+0x78>)
   b8268:	7818      	ldrb	r0, [r3, #0]
   b826a:	f7fe fddb 	bl	b6e24 <hal_spi_is_enabled>
   b826e:	2800      	cmp	r0, #0
   b8270:	d1df      	bne.n	b8232 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8272:	2001      	movs	r0, #1
   b8274:	e7de      	b.n	b8234 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8276:	2801      	cmp	r0, #1
   b8278:	d809      	bhi.n	b828e <pinAvailable+0x62>
   b827a:	f000 f8e7 	bl	b844c <_Z19__fetch_global_Wirev>
   b827e:	2100      	movs	r1, #0
   b8280:	7c00      	ldrb	r0, [r0, #16]
   b8282:	f7fe fd77 	bl	b6d74 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8286:	f080 0001 	eor.w	r0, r0, #1
   b828a:	b2c0      	uxtb	r0, r0
   b828c:	e7d2      	b.n	b8234 <pinAvailable+0x8>
   b828e:	3809      	subs	r0, #9
   b8290:	2801      	cmp	r0, #1
   b8292:	d8ee      	bhi.n	b8272 <pinAvailable+0x46>
   b8294:	f000 f89e 	bl	b83d4 <_Z22__fetch_global_Serial1v>
   b8298:	7c00      	ldrb	r0, [r0, #16]
   b829a:	f7fe fd0b 	bl	b6cb4 <hal_usart_is_enabled>
   b829e:	e7f2      	b.n	b8286 <pinAvailable+0x5a>
   b82a0:	2003e6bc 	.word	0x2003e6bc
   b82a4:	2003e6c0 	.word	0x2003e6c0

000b82a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b82a8:	2823      	cmp	r0, #35	; 0x23
{
   b82aa:	b538      	push	{r3, r4, r5, lr}
   b82ac:	4604      	mov	r4, r0
   b82ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b82b0:	d80a      	bhi.n	b82c8 <pinMode+0x20>
   b82b2:	29ff      	cmp	r1, #255	; 0xff
   b82b4:	d008      	beq.n	b82c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b82b6:	f7ff ffb9 	bl	b822c <pinAvailable>
   b82ba:	b128      	cbz	r0, b82c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b82bc:	4629      	mov	r1, r5
   b82be:	4620      	mov	r0, r4
}
   b82c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b82c4:	f7fe bc36 	b.w	b6b34 <HAL_Pin_Mode>
}
   b82c8:	bd38      	pop	{r3, r4, r5, pc}

000b82ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b82ca:	b538      	push	{r3, r4, r5, lr}
   b82cc:	4604      	mov	r4, r0
   b82ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b82d0:	f7fe fc38 	bl	b6b44 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b82d4:	28ff      	cmp	r0, #255	; 0xff
   b82d6:	d010      	beq.n	b82fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b82d8:	2806      	cmp	r0, #6
   b82da:	d804      	bhi.n	b82e6 <digitalWrite+0x1c>
   b82dc:	234d      	movs	r3, #77	; 0x4d
   b82de:	fa23 f000 	lsr.w	r0, r3, r0
   b82e2:	07c3      	lsls	r3, r0, #31
   b82e4:	d409      	bmi.n	b82fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b82e6:	4620      	mov	r0, r4
   b82e8:	f7ff ffa0 	bl	b822c <pinAvailable>
   b82ec:	b128      	cbz	r0, b82fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b82ee:	4629      	mov	r1, r5
   b82f0:	4620      	mov	r0, r4
}
   b82f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b82f6:	f7fe bc2d 	b.w	b6b54 <HAL_GPIO_Write>
}
   b82fa:	bd38      	pop	{r3, r4, r5, pc}

000b82fc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b82fc:	b510      	push	{r4, lr}
   b82fe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b8300:	f7fe fc20 	bl	b6b44 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8304:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8306:	b2db      	uxtb	r3, r3
   b8308:	2b01      	cmp	r3, #1
   b830a:	d908      	bls.n	b831e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b830c:	4620      	mov	r0, r4
   b830e:	f7ff ff8d 	bl	b822c <pinAvailable>
   b8312:	b120      	cbz	r0, b831e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b8314:	4620      	mov	r0, r4
}
   b8316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b831a:	f7fe bc23 	b.w	b6b64 <HAL_GPIO_Read>
}
   b831e:	2000      	movs	r0, #0
   b8320:	bd10      	pop	{r4, pc}

000b8322 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8322:	280d      	cmp	r0, #13
{
   b8324:	b510      	push	{r4, lr}
   b8326:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8328:	bf9c      	itt	ls
   b832a:	340e      	addls	r4, #14
   b832c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b832e:	4620      	mov	r0, r4
   b8330:	f7ff ff7c 	bl	b822c <pinAvailable>
   b8334:	b150      	cbz	r0, b834c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b8336:	2103      	movs	r1, #3
   b8338:	4620      	mov	r0, r4
   b833a:	f7fe fbf3 	bl	b6b24 <HAL_Validate_Pin_Function>
   b833e:	2803      	cmp	r0, #3
   b8340:	d104      	bne.n	b834c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8342:	4620      	mov	r0, r4
}
   b8344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8348:	f7fe bc1c 	b.w	b6b84 <hal_adc_read>
}
   b834c:	2000      	movs	r0, #0
   b834e:	bd10      	pop	{r4, pc}

000b8350 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8350:	b538      	push	{r3, r4, r5, lr}
   b8352:	4604      	mov	r4, r0
   b8354:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b8356:	f7ff ff69 	bl	b822c <pinAvailable>
   b835a:	b1f0      	cbz	r0, b839a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b835c:	2104      	movs	r1, #4
   b835e:	4620      	mov	r0, r4
   b8360:	f7fe fbe0 	bl	b6b24 <HAL_Validate_Pin_Function>
   b8364:	2804      	cmp	r0, #4
   b8366:	d105      	bne.n	b8374 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8368:	b2a9      	uxth	r1, r5
   b836a:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b836c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8370:	f7fe bc00 	b.w	b6b74 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b8374:	2102      	movs	r1, #2
   b8376:	4620      	mov	r0, r4
   b8378:	f7fe fbd4 	bl	b6b24 <HAL_Validate_Pin_Function>
   b837c:	2802      	cmp	r0, #2
   b837e:	d10c      	bne.n	b839a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b8380:	4620      	mov	r0, r4
   b8382:	f7fe fbdf 	bl	b6b44 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b8386:	2801      	cmp	r0, #1
   b8388:	d001      	beq.n	b838e <_Z11analogWritetm+0x3e>
   b838a:	2804      	cmp	r0, #4
   b838c:	d105      	bne.n	b839a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b838e:	4629      	mov	r1, r5
   b8390:	4620      	mov	r0, r4
}
   b8392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b8396:	f7fe bbfd 	b.w	b6b94 <hal_pwm_write_ext>
}
   b839a:	bd38      	pop	{r3, r4, r5, pc}

000b839c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b839c:	4770      	bx	lr
	...

000b83a0 <_Z20acquireSerial1Bufferv>:
{
   b83a0:	b538      	push	{r3, r4, r5, lr}
   b83a2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b83a4:	2514      	movs	r5, #20
   b83a6:	462a      	mov	r2, r5
   b83a8:	2100      	movs	r1, #0
   b83aa:	f001 f9e1 	bl	b9770 <memset>
   b83ae:	8025      	strh	r5, [r4, #0]
   b83b0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b83b2:	4907      	ldr	r1, [pc, #28]	; (b83d0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b83b4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b83b6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b83b8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b83ba:	f000 f86b 	bl	b8494 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b83be:	4904      	ldr	r1, [pc, #16]	; (b83d0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b83c0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b83c2:	4628      	mov	r0, r5
   b83c4:	f000 f866 	bl	b8494 <_ZnajRKSt9nothrow_t>
    };
   b83c8:	60e0      	str	r0, [r4, #12]
}
   b83ca:	4620      	mov	r0, r4
   b83cc:	bd38      	pop	{r3, r4, r5, pc}
   b83ce:	bf00      	nop
   b83d0:	000bcabc 	.word	0x000bcabc

000b83d4 <_Z22__fetch_global_Serial1v>:
{
   b83d4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b83d6:	4d0e      	ldr	r5, [pc, #56]	; (b8410 <_Z22__fetch_global_Serial1v+0x3c>)
   b83d8:	7829      	ldrb	r1, [r5, #0]
   b83da:	f3bf 8f5b 	dmb	ish
   b83de:	f011 0401 	ands.w	r4, r1, #1
{
   b83e2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b83e4:	d111      	bne.n	b840a <_Z22__fetch_global_Serial1v+0x36>
   b83e6:	4628      	mov	r0, r5
   b83e8:	f7fb fe6c 	bl	b40c4 <__cxa_guard_acquire>
   b83ec:	b168      	cbz	r0, b840a <_Z22__fetch_global_Serial1v+0x36>
   b83ee:	a801      	add	r0, sp, #4
   b83f0:	f7ff ffd6 	bl	b83a0 <_Z20acquireSerial1Bufferv>
   b83f4:	aa01      	add	r2, sp, #4
   b83f6:	4621      	mov	r1, r4
   b83f8:	4806      	ldr	r0, [pc, #24]	; (b8414 <_Z22__fetch_global_Serial1v+0x40>)
   b83fa:	f7ff faf1 	bl	b79e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b83fe:	4628      	mov	r0, r5
   b8400:	f7fb fe65 	bl	b40ce <__cxa_guard_release>
   b8404:	4804      	ldr	r0, [pc, #16]	; (b8418 <_Z22__fetch_global_Serial1v+0x44>)
   b8406:	f001 f913 	bl	b9630 <atexit>
    return serial1;
}
   b840a:	4802      	ldr	r0, [pc, #8]	; (b8414 <_Z22__fetch_global_Serial1v+0x40>)
   b840c:	b007      	add	sp, #28
   b840e:	bd30      	pop	{r4, r5, pc}
   b8410:	2003e72c 	.word	0x2003e72c
   b8414:	2003e730 	.word	0x2003e730
   b8418:	000b839d 	.word	0x000b839d

000b841c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b841c:	4770      	bx	lr
	...

000b8420 <_Z17acquireWireBufferv>:
{
   b8420:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8422:	2520      	movs	r5, #32
   b8424:	2314      	movs	r3, #20
{
   b8426:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8428:	6003      	str	r3, [r0, #0]
   b842a:	6085      	str	r5, [r0, #8]
   b842c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b842e:	4906      	ldr	r1, [pc, #24]	; (b8448 <_Z17acquireWireBufferv+0x28>)
   b8430:	4628      	mov	r0, r5
   b8432:	f000 f82f 	bl	b8494 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8436:	4904      	ldr	r1, [pc, #16]	; (b8448 <_Z17acquireWireBufferv+0x28>)
	};
   b8438:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b843a:	4628      	mov	r0, r5
   b843c:	f000 f82a 	bl	b8494 <_ZnajRKSt9nothrow_t>
	};
   b8440:	60e0      	str	r0, [r4, #12]
}
   b8442:	4620      	mov	r0, r4
   b8444:	bd38      	pop	{r3, r4, r5, pc}
   b8446:	bf00      	nop
   b8448:	000bcabc 	.word	0x000bcabc

000b844c <_Z19__fetch_global_Wirev>:
{
   b844c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b844e:	4d0e      	ldr	r5, [pc, #56]	; (b8488 <_Z19__fetch_global_Wirev+0x3c>)
   b8450:	7829      	ldrb	r1, [r5, #0]
   b8452:	f3bf 8f5b 	dmb	ish
   b8456:	f011 0401 	ands.w	r4, r1, #1
{
   b845a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b845c:	d111      	bne.n	b8482 <_Z19__fetch_global_Wirev+0x36>
   b845e:	4628      	mov	r0, r5
   b8460:	f7fb fe30 	bl	b40c4 <__cxa_guard_acquire>
   b8464:	b168      	cbz	r0, b8482 <_Z19__fetch_global_Wirev+0x36>
   b8466:	a801      	add	r0, sp, #4
   b8468:	f7ff ffda 	bl	b8420 <_Z17acquireWireBufferv>
   b846c:	aa01      	add	r2, sp, #4
   b846e:	4621      	mov	r1, r4
   b8470:	4806      	ldr	r0, [pc, #24]	; (b848c <_Z19__fetch_global_Wirev+0x40>)
   b8472:	f7ff faf5 	bl	b7a60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8476:	4628      	mov	r0, r5
   b8478:	f7fb fe29 	bl	b40ce <__cxa_guard_release>
   b847c:	4804      	ldr	r0, [pc, #16]	; (b8490 <_Z19__fetch_global_Wirev+0x44>)
   b847e:	f001 f8d7 	bl	b9630 <atexit>
	return wire;
}
   b8482:	4802      	ldr	r0, [pc, #8]	; (b848c <_Z19__fetch_global_Wirev+0x40>)
   b8484:	b007      	add	sp, #28
   b8486:	bd30      	pop	{r4, r5, pc}
   b8488:	2003e748 	.word	0x2003e748
   b848c:	2003e74c 	.word	0x2003e74c
   b8490:	000b841d 	.word	0x000b841d

000b8494 <_ZnajRKSt9nothrow_t>:
   b8494:	f7fb be01 	b.w	b409a <_Znaj>

000b8498 <_ZSt17__throw_bad_allocv>:
   b8498:	b508      	push	{r3, lr}
   b849a:	f7fe fdff 	bl	b709c <abort>

000b849e <_ZSt19__throw_logic_errorPKc>:
   b849e:	b508      	push	{r3, lr}
   b84a0:	f7fe fdfc 	bl	b709c <abort>

000b84a4 <_ZSt24__throw_invalid_argumentPKc>:
   b84a4:	b508      	push	{r3, lr}
   b84a6:	f7fe fdf9 	bl	b709c <abort>

000b84aa <_ZSt20__throw_length_errorPKc>:
   b84aa:	b508      	push	{r3, lr}
   b84ac:	f7fe fdf6 	bl	b709c <abort>

000b84b0 <_ZSt20__throw_out_of_rangePKc>:
   b84b0:	b508      	push	{r3, lr}
   b84b2:	f7fe fdf3 	bl	b709c <abort>

000b84b6 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b84b6:	b40f      	push	{r0, r1, r2, r3}
   b84b8:	b580      	push	{r7, lr}
   b84ba:	b084      	sub	sp, #16
   b84bc:	af00      	add	r7, sp, #0
   b84be:	f107 0418 	add.w	r4, r7, #24
   b84c2:	f854 2b04 	ldr.w	r2, [r4], #4
   b84c6:	607a      	str	r2, [r7, #4]
   b84c8:	4610      	mov	r0, r2
   b84ca:	f001 f991 	bl	b97f0 <strlen>
   b84ce:	f200 2307 	addw	r3, r0, #519	; 0x207
   b84d2:	f023 0307 	bic.w	r3, r3, #7
   b84d6:	ebad 0d03 	sub.w	sp, sp, r3
   b84da:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b84de:	687a      	ldr	r2, [r7, #4]
   b84e0:	60fc      	str	r4, [r7, #12]
   b84e2:	4623      	mov	r3, r4
   b84e4:	4668      	mov	r0, sp
   b84e6:	f000 f85b 	bl	b85a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b84ea:	f7fe fdd7 	bl	b709c <abort>
	...

000b84f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b84f0:	4901      	ldr	r1, [pc, #4]	; (b84f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b84f2:	f000 bba3 	b.w	b8c3c <_ZNKSt9type_infoeqERKS_>
   b84f6:	bf00      	nop
   b84f8:	000bcad8 	.word	0x000bcad8

000b84fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b84fc:	b580      	push	{r7, lr}
   b84fe:	b09c      	sub	sp, #112	; 0x70
   b8500:	4606      	mov	r6, r0
   b8502:	af00      	add	r7, sp, #0
   b8504:	460c      	mov	r4, r1
   b8506:	1ba4      	subs	r4, r4, r6
   b8508:	490e      	ldr	r1, [pc, #56]	; (b8544 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b850a:	2269      	movs	r2, #105	; 0x69
   b850c:	1d38      	adds	r0, r7, #4
   b850e:	f001 f907 	bl	b9720 <memcpy>
   b8512:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8516:	f023 0307 	bic.w	r3, r3, #7
   b851a:	ebad 0d03 	sub.w	sp, sp, r3
   b851e:	466d      	mov	r5, sp
   b8520:	2268      	movs	r2, #104	; 0x68
   b8522:	1d39      	adds	r1, r7, #4
   b8524:	4628      	mov	r0, r5
   b8526:	f001 f8fb 	bl	b9720 <memcpy>
   b852a:	4622      	mov	r2, r4
   b852c:	4631      	mov	r1, r6
   b852e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b8532:	442c      	add	r4, r5
   b8534:	f001 f8f4 	bl	b9720 <memcpy>
   b8538:	2300      	movs	r3, #0
   b853a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b853e:	4628      	mov	r0, r5
   b8540:	f7ff ffad 	bl	b849e <_ZSt19__throw_logic_errorPKc>
   b8544:	000bcae0 	.word	0x000bcae0

000b8548 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b8548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b854c:	af00      	add	r7, sp, #0
   b854e:	b084      	sub	sp, #16
   b8550:	466d      	mov	r5, sp
   b8552:	f105 040c 	add.w	r4, r5, #12
   b8556:	f8df 8044 	ldr.w	r8, [pc, #68]	; b859c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b855a:	4623      	mov	r3, r4
   b855c:	f04f 0c0a 	mov.w	ip, #10
   b8560:	fbb2 f6fc 	udiv	r6, r2, ip
   b8564:	fb0c 2e16 	mls	lr, ip, r6, r2
   b8568:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b856c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b8570:	4696      	mov	lr, r2
   b8572:	f1be 0f09 	cmp.w	lr, #9
   b8576:	4632      	mov	r2, r6
   b8578:	d8f2      	bhi.n	b8560 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b857a:	1ae4      	subs	r4, r4, r3
   b857c:	428c      	cmp	r4, r1
   b857e:	d809      	bhi.n	b8594 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b8580:	f1c4 030c 	rsb	r3, r4, #12
   b8584:	4622      	mov	r2, r4
   b8586:	18e9      	adds	r1, r5, r3
   b8588:	f001 f8ca 	bl	b9720 <memcpy>
   b858c:	4620      	mov	r0, r4
   b858e:	46bd      	mov	sp, r7
   b8590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8594:	f04f 34ff 	mov.w	r4, #4294967295
   b8598:	e7f8      	b.n	b858c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b859a:	bf00      	nop
   b859c:	000bcb49 	.word	0x000bcb49

000b85a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b85a0:	3901      	subs	r1, #1
   b85a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b85a6:	4607      	mov	r7, r0
   b85a8:	4615      	mov	r5, r2
   b85aa:	eb00 0801 	add.w	r8, r0, r1
   b85ae:	4604      	mov	r4, r0
   b85b0:	782a      	ldrb	r2, [r5, #0]
   b85b2:	b392      	cbz	r2, b861a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b85b4:	4544      	cmp	r4, r8
   b85b6:	d22a      	bcs.n	b860e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b85b8:	2a25      	cmp	r2, #37	; 0x25
   b85ba:	d107      	bne.n	b85cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b85bc:	786a      	ldrb	r2, [r5, #1]
   b85be:	2a73      	cmp	r2, #115	; 0x73
   b85c0:	d009      	beq.n	b85d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b85c2:	2a7a      	cmp	r2, #122	; 0x7a
   b85c4:	d012      	beq.n	b85ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b85c6:	2a25      	cmp	r2, #37	; 0x25
   b85c8:	d100      	bne.n	b85cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b85ca:	3501      	adds	r5, #1
   b85cc:	f815 2b01 	ldrb.w	r2, [r5], #1
   b85d0:	f804 2b01 	strb.w	r2, [r4], #1
   b85d4:	e7ec      	b.n	b85b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b85d6:	f853 2b04 	ldr.w	r2, [r3], #4
   b85da:	3a01      	subs	r2, #1
   b85dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b85e0:	b1c9      	cbz	r1, b8616 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b85e2:	4544      	cmp	r4, r8
   b85e4:	d013      	beq.n	b860e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b85e6:	f804 1b01 	strb.w	r1, [r4], #1
   b85ea:	e7f7      	b.n	b85dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b85ec:	78aa      	ldrb	r2, [r5, #2]
   b85ee:	2a75      	cmp	r2, #117	; 0x75
   b85f0:	d1ec      	bne.n	b85cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b85f2:	461e      	mov	r6, r3
   b85f4:	eba8 0104 	sub.w	r1, r8, r4
   b85f8:	f856 2b04 	ldr.w	r2, [r6], #4
   b85fc:	4620      	mov	r0, r4
   b85fe:	f7ff ffa3 	bl	b8548 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b8602:	2800      	cmp	r0, #0
   b8604:	dd03      	ble.n	b860e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b8606:	4404      	add	r4, r0
   b8608:	3503      	adds	r5, #3
   b860a:	4633      	mov	r3, r6
   b860c:	e7d0      	b.n	b85b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b860e:	4621      	mov	r1, r4
   b8610:	4638      	mov	r0, r7
   b8612:	f7ff ff73 	bl	b84fc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b8616:	3502      	adds	r5, #2
   b8618:	e7ca      	b.n	b85b0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b861a:	7022      	strb	r2, [r4, #0]
   b861c:	1be0      	subs	r0, r4, r7
   b861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8622 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b8622:	b10a      	cbz	r2, b8628 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b8624:	f001 b87c 	b.w	b9720 <memcpy>
   b8628:	4770      	bx	lr

000b862a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b862a:	b10a      	cbz	r2, b8630 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b862c:	f001 b868 	b.w	b9700 <memcmp>
   b8630:	4610      	mov	r0, r2
   b8632:	4770      	bx	lr

000b8634 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b8634:	4613      	mov	r3, r2
   b8636:	460a      	mov	r2, r1
   b8638:	b111      	cbz	r1, b8640 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b863a:	7819      	ldrb	r1, [r3, #0]
   b863c:	f001 b810 	b.w	b9660 <memchr>
   b8640:	4608      	mov	r0, r1
   b8642:	4770      	bx	lr

000b8644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b8644:	b508      	push	{r3, lr}
   b8646:	680b      	ldr	r3, [r1, #0]
   b8648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b864c:	d302      	bcc.n	b8654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b864e:	480d      	ldr	r0, [pc, #52]	; (b8684 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b8650:	f7ff ff2b 	bl	b84aa <_ZSt20__throw_length_errorPKc>
   b8654:	4293      	cmp	r3, r2
   b8656:	d90b      	bls.n	b8670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8658:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b865c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b8660:	d206      	bcs.n	b8670 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b8662:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b8666:	bf2a      	itet	cs
   b8668:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b866c:	6008      	strcc	r0, [r1, #0]
   b866e:	600b      	strcs	r3, [r1, #0]
   b8670:	6808      	ldr	r0, [r1, #0]
   b8672:	3001      	adds	r0, #1
   b8674:	d501      	bpl.n	b867a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b8676:	f7ff ff0f 	bl	b8498 <_ZSt17__throw_bad_allocv>
   b867a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b867e:	f7fb bd0a 	b.w	b4096 <_Znwj>
   b8682:	bf00      	nop
   b8684:	000bcb54 	.word	0x000bcb54

000b8688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b8688:	f850 3b08 	ldr.w	r3, [r0], #8
   b868c:	4283      	cmp	r3, r0
   b868e:	d002      	beq.n	b8696 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b8690:	4618      	mov	r0, r3
   b8692:	f7fb bd04 	b.w	b409e <_ZdlPv>
   b8696:	4770      	bx	lr

000b8698 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b8698:	b508      	push	{r3, lr}
   b869a:	4603      	mov	r3, r0
   b869c:	4608      	mov	r0, r1
   b869e:	685b      	ldr	r3, [r3, #4]
   b86a0:	4298      	cmp	r0, r3
   b86a2:	4611      	mov	r1, r2
   b86a4:	d903      	bls.n	b86ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b86a6:	4602      	mov	r2, r0
   b86a8:	4801      	ldr	r0, [pc, #4]	; (b86b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b86aa:	f7ff ff04 	bl	b84b6 <_ZSt24__throw_out_of_range_fmtPKcz>
   b86ae:	bd08      	pop	{r3, pc}
   b86b0:	000bcb6c 	.word	0x000bcb6c

000b86b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b86b4:	6840      	ldr	r0, [r0, #4]
   b86b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b86ba:	3901      	subs	r1, #1
   b86bc:	1a09      	subs	r1, r1, r0
   b86be:	4291      	cmp	r1, r2
   b86c0:	b508      	push	{r3, lr}
   b86c2:	d202      	bcs.n	b86ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b86c4:	4618      	mov	r0, r3
   b86c6:	f7ff fef0 	bl	b84aa <_ZSt20__throw_length_errorPKc>
   b86ca:	bd08      	pop	{r3, pc}

000b86cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b86cc:	6803      	ldr	r3, [r0, #0]
   b86ce:	428b      	cmp	r3, r1
   b86d0:	d806      	bhi.n	b86e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b86d2:	6840      	ldr	r0, [r0, #4]
   b86d4:	4418      	add	r0, r3
   b86d6:	4281      	cmp	r1, r0
   b86d8:	bf94      	ite	ls
   b86da:	2000      	movls	r0, #0
   b86dc:	2001      	movhi	r0, #1
   b86de:	4770      	bx	lr
   b86e0:	2001      	movs	r0, #1
   b86e2:	4770      	bx	lr

000b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b86e4:	2a01      	cmp	r2, #1
   b86e6:	b410      	push	{r4}
   b86e8:	d104      	bne.n	b86f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b86ea:	780a      	ldrb	r2, [r1, #0]
   b86ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   b86f0:	7002      	strb	r2, [r0, #0]
   b86f2:	4770      	bx	lr
   b86f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b86f8:	f7ff bf93 	b.w	b8622 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b86fc:	2a01      	cmp	r2, #1
   b86fe:	b430      	push	{r4, r5}
   b8700:	d103      	bne.n	b870a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b8702:	780b      	ldrb	r3, [r1, #0]
   b8704:	7003      	strb	r3, [r0, #0]
   b8706:	bc30      	pop	{r4, r5}
   b8708:	4770      	bx	lr
   b870a:	2a00      	cmp	r2, #0
   b870c:	d0fb      	beq.n	b8706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b870e:	bc30      	pop	{r4, r5}
   b8710:	f001 b814 	b.w	b973c <memmove>

000b8714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b8714:	b508      	push	{r3, lr}
   b8716:	1a52      	subs	r2, r2, r1
   b8718:	f7ff ffe4 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b871c:	bd08      	pop	{r3, pc}

000b871e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b871e:	4288      	cmp	r0, r1
   b8720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8722:	4604      	mov	r4, r0
   b8724:	460e      	mov	r6, r1
   b8726:	d01e      	beq.n	b8766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b8728:	4603      	mov	r3, r0
   b872a:	684d      	ldr	r5, [r1, #4]
   b872c:	f853 2b08 	ldr.w	r2, [r3], #8
   b8730:	429a      	cmp	r2, r3
   b8732:	bf14      	ite	ne
   b8734:	6882      	ldrne	r2, [r0, #8]
   b8736:	220f      	moveq	r2, #15
   b8738:	42aa      	cmp	r2, r5
   b873a:	d20a      	bcs.n	b8752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b873c:	a901      	add	r1, sp, #4
   b873e:	9501      	str	r5, [sp, #4]
   b8740:	f7ff ff80 	bl	b8644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b8744:	4607      	mov	r7, r0
   b8746:	4620      	mov	r0, r4
   b8748:	f7ff ff9e 	bl	b8688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b874c:	9b01      	ldr	r3, [sp, #4]
   b874e:	6027      	str	r7, [r4, #0]
   b8750:	60a3      	str	r3, [r4, #8]
   b8752:	b125      	cbz	r5, b875e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b8754:	6831      	ldr	r1, [r6, #0]
   b8756:	6820      	ldr	r0, [r4, #0]
   b8758:	462a      	mov	r2, r5
   b875a:	f7ff ffc3 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b875e:	6823      	ldr	r3, [r4, #0]
   b8760:	6065      	str	r5, [r4, #4]
   b8762:	2200      	movs	r2, #0
   b8764:	555a      	strb	r2, [r3, r5]
   b8766:	b003      	add	sp, #12
   b8768:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b876a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b876a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b876e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b8770:	461f      	mov	r7, r3
   b8772:	6843      	ldr	r3, [r0, #4]
   b8774:	eb01 0802 	add.w	r8, r1, r2
   b8778:	1ab2      	subs	r2, r6, r2
   b877a:	441a      	add	r2, r3
   b877c:	eba3 0908 	sub.w	r9, r3, r8
   b8780:	4603      	mov	r3, r0
   b8782:	9201      	str	r2, [sp, #4]
   b8784:	f853 2b08 	ldr.w	r2, [r3], #8
   b8788:	429a      	cmp	r2, r3
   b878a:	bf18      	it	ne
   b878c:	6882      	ldrne	r2, [r0, #8]
   b878e:	460d      	mov	r5, r1
   b8790:	bf08      	it	eq
   b8792:	220f      	moveq	r2, #15
   b8794:	a901      	add	r1, sp, #4
   b8796:	4604      	mov	r4, r0
   b8798:	f7ff ff54 	bl	b8644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b879c:	4682      	mov	sl, r0
   b879e:	b11d      	cbz	r5, b87a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b87a0:	6821      	ldr	r1, [r4, #0]
   b87a2:	462a      	mov	r2, r5
   b87a4:	f7ff ff9e 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b87a8:	b137      	cbz	r7, b87b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b87aa:	b12e      	cbz	r6, b87b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b87ac:	4632      	mov	r2, r6
   b87ae:	4639      	mov	r1, r7
   b87b0:	eb0a 0005 	add.w	r0, sl, r5
   b87b4:	f7ff ff96 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b87b8:	f1b9 0f00 	cmp.w	r9, #0
   b87bc:	d007      	beq.n	b87ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b87be:	6821      	ldr	r1, [r4, #0]
   b87c0:	4435      	add	r5, r6
   b87c2:	464a      	mov	r2, r9
   b87c4:	4441      	add	r1, r8
   b87c6:	eb0a 0005 	add.w	r0, sl, r5
   b87ca:	f7ff ff8b 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b87ce:	4620      	mov	r0, r4
   b87d0:	f7ff ff5a 	bl	b8688 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b87d4:	9b01      	ldr	r3, [sp, #4]
   b87d6:	f8c4 a000 	str.w	sl, [r4]
   b87da:	60a3      	str	r3, [r4, #8]
   b87dc:	b002      	add	sp, #8
   b87de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000b87e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b87e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b87e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b87ea:	4614      	mov	r4, r2
   b87ec:	4680      	mov	r8, r0
   b87ee:	462a      	mov	r2, r5
   b87f0:	4689      	mov	r9, r1
   b87f2:	461f      	mov	r7, r3
   b87f4:	4621      	mov	r1, r4
   b87f6:	4b39      	ldr	r3, [pc, #228]	; (b88dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b87f8:	f7ff ff5c 	bl	b86b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b87fc:	4642      	mov	r2, r8
   b87fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8802:	f852 6b08 	ldr.w	r6, [r2], #8
   b8806:	4296      	cmp	r6, r2
   b8808:	bf18      	it	ne
   b880a:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b880e:	eba5 0b04 	sub.w	fp, r5, r4
   b8812:	eb03 0a0b 	add.w	sl, r3, fp
   b8816:	bf08      	it	eq
   b8818:	220f      	moveq	r2, #15
   b881a:	4552      	cmp	r2, sl
   b881c:	d351      	bcc.n	b88c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b881e:	444e      	add	r6, r9
   b8820:	4639      	mov	r1, r7
   b8822:	44a1      	add	r9, r4
   b8824:	4640      	mov	r0, r8
   b8826:	eba3 0909 	sub.w	r9, r3, r9
   b882a:	f7ff ff4f 	bl	b86cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b882e:	b180      	cbz	r0, b8852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b8830:	f1b9 0f00 	cmp.w	r9, #0
   b8834:	d006      	beq.n	b8844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b8836:	42ac      	cmp	r4, r5
   b8838:	d004      	beq.n	b8844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b883a:	464a      	mov	r2, r9
   b883c:	1931      	adds	r1, r6, r4
   b883e:	1970      	adds	r0, r6, r5
   b8840:	f7ff ff5c 	bl	b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8844:	b315      	cbz	r5, b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8846:	462a      	mov	r2, r5
   b8848:	4639      	mov	r1, r7
   b884a:	4630      	mov	r0, r6
   b884c:	f7ff ff4a 	bl	b86e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b8850:	e01c      	b.n	b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8852:	b135      	cbz	r5, b8862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b8854:	42ac      	cmp	r4, r5
   b8856:	d33c      	bcc.n	b88d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b8858:	462a      	mov	r2, r5
   b885a:	4639      	mov	r1, r7
   b885c:	4630      	mov	r0, r6
   b885e:	f7ff ff4d 	bl	b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8862:	f1b9 0f00 	cmp.w	r9, #0
   b8866:	d011      	beq.n	b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b8868:	42ac      	cmp	r4, r5
   b886a:	d00f      	beq.n	b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b886c:	464a      	mov	r2, r9
   b886e:	1931      	adds	r1, r6, r4
   b8870:	1970      	adds	r0, r6, r5
   b8872:	f7ff ff43 	bl	b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b8876:	42ac      	cmp	r4, r5
   b8878:	d208      	bcs.n	b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b887a:	4434      	add	r4, r6
   b887c:	197b      	adds	r3, r7, r5
   b887e:	429c      	cmp	r4, r3
   b8880:	d30f      	bcc.n	b88a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b8882:	462a      	mov	r2, r5
   b8884:	4639      	mov	r1, r7
   b8886:	4630      	mov	r0, r6
   b8888:	f7ff ff38 	bl	b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b888c:	f8d8 3000 	ldr.w	r3, [r8]
   b8890:	f8c8 a004 	str.w	sl, [r8, #4]
   b8894:	2200      	movs	r2, #0
   b8896:	4640      	mov	r0, r8
   b8898:	f803 200a 	strb.w	r2, [r3, sl]
   b889c:	b003      	add	sp, #12
   b889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b88a2:	42bc      	cmp	r4, r7
   b88a4:	d803      	bhi.n	b88ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b88a6:	462a      	mov	r2, r5
   b88a8:	eb07 010b 	add.w	r1, r7, fp
   b88ac:	e7cd      	b.n	b884a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b88ae:	1be4      	subs	r4, r4, r7
   b88b0:	4622      	mov	r2, r4
   b88b2:	4639      	mov	r1, r7
   b88b4:	4630      	mov	r0, r6
   b88b6:	f7ff ff21 	bl	b86fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b88ba:	1b2a      	subs	r2, r5, r4
   b88bc:	1971      	adds	r1, r6, r5
   b88be:	1930      	adds	r0, r6, r4
   b88c0:	e7c4      	b.n	b884c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b88c2:	9500      	str	r5, [sp, #0]
   b88c4:	463b      	mov	r3, r7
   b88c6:	4622      	mov	r2, r4
   b88c8:	4649      	mov	r1, r9
   b88ca:	4640      	mov	r0, r8
   b88cc:	f7ff ff4d 	bl	b876a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b88d0:	e7dc      	b.n	b888c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b88d2:	f1b9 0f00 	cmp.w	r9, #0
   b88d6:	d0d0      	beq.n	b887a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b88d8:	e7c8      	b.n	b886c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b88da:	bf00      	nop
   b88dc:	000bcba3 	.word	0x000bcba3

000b88e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b88e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b88e4:	460e      	mov	r6, r1
   b88e6:	461d      	mov	r5, r3
   b88e8:	6841      	ldr	r1, [r0, #4]
   b88ea:	b923      	cbnz	r3, b88f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b88ec:	4291      	cmp	r1, r2
   b88ee:	d221      	bcs.n	b8934 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b88f0:	f04f 32ff 	mov.w	r2, #4294967295
   b88f4:	e01e      	b.n	b8934 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b88f6:	4291      	cmp	r1, r2
   b88f8:	d9fa      	bls.n	b88f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b88fa:	f8d0 8000 	ldr.w	r8, [r0]
   b88fe:	7833      	ldrb	r3, [r6, #0]
   b8900:	f88d 3007 	strb.w	r3, [sp, #7]
   b8904:	eb08 0701 	add.w	r7, r8, r1
   b8908:	eb08 0002 	add.w	r0, r8, r2
   b890c:	1a89      	subs	r1, r1, r2
   b890e:	f1c5 0901 	rsb	r9, r5, #1
   b8912:	42a9      	cmp	r1, r5
   b8914:	d3ec      	bcc.n	b88f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8916:	f10d 0207 	add.w	r2, sp, #7
   b891a:	4449      	add	r1, r9
   b891c:	f7ff fe8a 	bl	b8634 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b8920:	4604      	mov	r4, r0
   b8922:	2800      	cmp	r0, #0
   b8924:	d0e4      	beq.n	b88f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b8926:	462a      	mov	r2, r5
   b8928:	4631      	mov	r1, r6
   b892a:	f7ff fe7e 	bl	b862a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b892e:	b928      	cbnz	r0, b893c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b8930:	eba4 0208 	sub.w	r2, r4, r8
   b8934:	4610      	mov	r0, r2
   b8936:	b003      	add	sp, #12
   b8938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b893c:	1c60      	adds	r0, r4, #1
   b893e:	1a39      	subs	r1, r7, r0
   b8940:	e7e7      	b.n	b8912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b8942 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
   b8942:	b508      	push	{r3, lr}
   b8944:	e9d1 1300 	ldrd	r1, r3, [r1]
   b8948:	f7ff ffca 	bl	b88e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b894c:	bd08      	pop	{r3, pc}

000b894e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b894e:	b513      	push	{r0, r1, r4, lr}
   b8950:	4604      	mov	r4, r0
   b8952:	4608      	mov	r0, r1
   b8954:	9201      	str	r2, [sp, #4]
   b8956:	9100      	str	r1, [sp, #0]
   b8958:	f000 ff4a 	bl	b97f0 <strlen>
   b895c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8960:	4603      	mov	r3, r0
   b8962:	4620      	mov	r0, r4
   b8964:	f7ff ffbc 	bl	b88e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b8968:	b002      	add	sp, #8
   b896a:	bd10      	pop	{r4, pc}

000b896c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
   b896c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b896e:	6846      	ldr	r6, [r0, #4]
   b8970:	9101      	str	r1, [sp, #4]
   b8972:	4605      	mov	r5, r0
   b8974:	4608      	mov	r0, r1
   b8976:	f000 ff3b 	bl	b97f0 <strlen>
   b897a:	4286      	cmp	r6, r0
   b897c:	4604      	mov	r4, r0
   b897e:	4632      	mov	r2, r6
   b8980:	9901      	ldr	r1, [sp, #4]
   b8982:	bf28      	it	cs
   b8984:	4602      	movcs	r2, r0
   b8986:	6828      	ldr	r0, [r5, #0]
   b8988:	f7ff fe4f 	bl	b862a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b898c:	b900      	cbnz	r0, b8990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
   b898e:	1b30      	subs	r0, r6, r4
   b8990:	b002      	add	sp, #8
   b8992:	bd70      	pop	{r4, r5, r6, pc}

000b8994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b8994:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8996:	4604      	mov	r4, r0
   b8998:	4616      	mov	r6, r2
   b899a:	460d      	mov	r5, r1
   b899c:	b919      	cbnz	r1, b89a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b899e:	b112      	cbz	r2, b89a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b89a0:	480d      	ldr	r0, [pc, #52]	; (b89d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b89a2:	f7ff fd7c 	bl	b849e <_ZSt19__throw_logic_errorPKc>
   b89a6:	1b73      	subs	r3, r6, r5
   b89a8:	2b0f      	cmp	r3, #15
   b89aa:	9301      	str	r3, [sp, #4]
   b89ac:	d907      	bls.n	b89be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b89ae:	2200      	movs	r2, #0
   b89b0:	a901      	add	r1, sp, #4
   b89b2:	4620      	mov	r0, r4
   b89b4:	f7ff fe46 	bl	b8644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b89b8:	9b01      	ldr	r3, [sp, #4]
   b89ba:	6020      	str	r0, [r4, #0]
   b89bc:	60a3      	str	r3, [r4, #8]
   b89be:	4632      	mov	r2, r6
   b89c0:	4629      	mov	r1, r5
   b89c2:	6820      	ldr	r0, [r4, #0]
   b89c4:	f7ff fea6 	bl	b8714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b89c8:	9b01      	ldr	r3, [sp, #4]
   b89ca:	6822      	ldr	r2, [r4, #0]
   b89cc:	6063      	str	r3, [r4, #4]
   b89ce:	2100      	movs	r1, #0
   b89d0:	54d1      	strb	r1, [r2, r3]
   b89d2:	b002      	add	sp, #8
   b89d4:	bd70      	pop	{r4, r5, r6, pc}
   b89d6:	bf00      	nop
   b89d8:	000bcbbc 	.word	0x000bcbbc

000b89dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b89dc:	b508      	push	{r3, lr}
   b89de:	f04f 0300 	mov.w	r3, #0
   b89e2:	f7ff ffd7 	bl	b8994 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b89e6:	bd08      	pop	{r3, pc}

000b89e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b89e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b89ec:	460d      	mov	r5, r1
   b89ee:	4617      	mov	r7, r2
   b89f0:	4698      	mov	r8, r3
   b89f2:	f100 0308 	add.w	r3, r0, #8
   b89f6:	4604      	mov	r4, r0
   b89f8:	6003      	str	r3, [r0, #0]
   b89fa:	4639      	mov	r1, r7
   b89fc:	4a09      	ldr	r2, [pc, #36]	; (b8a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b89fe:	4628      	mov	r0, r5
   b8a00:	f7ff fe4a 	bl	b8698 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b8a04:	682e      	ldr	r6, [r5, #0]
   b8a06:	686a      	ldr	r2, [r5, #4]
   b8a08:	1831      	adds	r1, r6, r0
   b8a0a:	1bd2      	subs	r2, r2, r7
   b8a0c:	4620      	mov	r0, r4
   b8a0e:	4542      	cmp	r2, r8
   b8a10:	bf94      	ite	ls
   b8a12:	188a      	addls	r2, r1, r2
   b8a14:	eb01 0208 	addhi.w	r2, r1, r8
   b8a18:	f7ff ffe0 	bl	b89dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b8a1c:	4620      	mov	r0, r4
   b8a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8a22:	bf00      	nop
   b8a24:	000bcbe6 	.word	0x000bcbe6

000b8a28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b8a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8a2a:	460d      	mov	r5, r1
   b8a2c:	4604      	mov	r4, r0
   b8a2e:	4611      	mov	r1, r2
   b8a30:	4628      	mov	r0, r5
   b8a32:	4a06      	ldr	r2, [pc, #24]	; (b8a4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b8a34:	9301      	str	r3, [sp, #4]
   b8a36:	f7ff fe2f 	bl	b8698 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b8a3a:	9b01      	ldr	r3, [sp, #4]
   b8a3c:	4602      	mov	r2, r0
   b8a3e:	4629      	mov	r1, r5
   b8a40:	4620      	mov	r0, r4
   b8a42:	f7ff ffd1 	bl	b89e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b8a46:	4620      	mov	r0, r4
   b8a48:	b003      	add	sp, #12
   b8a4a:	bd30      	pop	{r4, r5, pc}
   b8a4c:	000bcc01 	.word	0x000bcc01

000b8a50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8a50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8a52:	2400      	movs	r4, #0
   b8a54:	2310      	movs	r3, #16
   b8a56:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8a5a:	6803      	ldr	r3, [r0, #0]
   b8a5c:	4615      	mov	r5, r2
   b8a5e:	699e      	ldr	r6, [r3, #24]
   b8a60:	6812      	ldr	r2, [r2, #0]
   b8a62:	466b      	mov	r3, sp
   b8a64:	e9cd 4400 	strd	r4, r4, [sp]
   b8a68:	47b0      	blx	r6
   b8a6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8a6e:	f003 0306 	and.w	r3, r3, #6
   b8a72:	2b06      	cmp	r3, #6
   b8a74:	bf03      	ittte	eq
   b8a76:	9b00      	ldreq	r3, [sp, #0]
   b8a78:	602b      	streq	r3, [r5, #0]
   b8a7a:	2001      	moveq	r0, #1
   b8a7c:	4620      	movne	r0, r4
   b8a7e:	b004      	add	sp, #16
   b8a80:	bd70      	pop	{r4, r5, r6, pc}

000b8a82 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8a82:	9800      	ldr	r0, [sp, #0]
   b8a84:	4290      	cmp	r0, r2
   b8a86:	bf14      	ite	ne
   b8a88:	2001      	movne	r0, #1
   b8a8a:	2006      	moveq	r0, #6
   b8a8c:	4770      	bx	lr
	...

000b8a90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8a90:	b510      	push	{r4, lr}
   b8a92:	4b03      	ldr	r3, [pc, #12]	; (b8aa0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8a94:	6003      	str	r3, [r0, #0]
   b8a96:	4604      	mov	r4, r0
   b8a98:	f000 f8cd 	bl	b8c36 <_ZNSt9type_infoD1Ev>
   b8a9c:	4620      	mov	r0, r4
   b8a9e:	bd10      	pop	{r4, pc}
   b8aa0:	000bcc50 	.word	0x000bcc50

000b8aa4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8aa4:	b510      	push	{r4, lr}
   b8aa6:	4604      	mov	r4, r0
   b8aa8:	f7ff fff2 	bl	b8a90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8aac:	4620      	mov	r0, r4
   b8aae:	2108      	movs	r1, #8
   b8ab0:	f7fb faf9 	bl	b40a6 <_ZdlPvj>
   b8ab4:	4620      	mov	r0, r4
   b8ab6:	bd10      	pop	{r4, pc}

000b8ab8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8abc:	461f      	mov	r7, r3
   b8abe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8ac2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8ac6:	4598      	cmp	r8, r3
   b8ac8:	4606      	mov	r6, r0
   b8aca:	4615      	mov	r5, r2
   b8acc:	d107      	bne.n	b8ade <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8ace:	9907      	ldr	r1, [sp, #28]
   b8ad0:	f000 f8b4 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8ad4:	b118      	cbz	r0, b8ade <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8ad6:	7165      	strb	r5, [r4, #5]
   b8ad8:	2000      	movs	r0, #0
   b8ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ade:	4639      	mov	r1, r7
   b8ae0:	4630      	mov	r0, r6
   b8ae2:	f000 f8ab 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8ae6:	2800      	cmp	r0, #0
   b8ae8:	d0f6      	beq.n	b8ad8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8aea:	2301      	movs	r3, #1
   b8aec:	f8c4 8000 	str.w	r8, [r4]
   b8af0:	7125      	strb	r5, [r4, #4]
   b8af2:	71a3      	strb	r3, [r4, #6]
   b8af4:	e7f0      	b.n	b8ad8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8af6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8af6:	b538      	push	{r3, r4, r5, lr}
   b8af8:	4615      	mov	r5, r2
   b8afa:	461c      	mov	r4, r3
   b8afc:	f000 f89e 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8b00:	b120      	cbz	r0, b8b0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8b02:	2308      	movs	r3, #8
   b8b04:	60e3      	str	r3, [r4, #12]
   b8b06:	2306      	movs	r3, #6
   b8b08:	6025      	str	r5, [r4, #0]
   b8b0a:	7123      	strb	r3, [r4, #4]
   b8b0c:	bd38      	pop	{r3, r4, r5, pc}

000b8b0e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8b10:	4605      	mov	r5, r0
   b8b12:	460c      	mov	r4, r1
   b8b14:	9201      	str	r2, [sp, #4]
   b8b16:	461e      	mov	r6, r3
   b8b18:	f000 f890 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8b1c:	b950      	cbnz	r0, b8b34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8b1e:	2e03      	cmp	r6, #3
   b8b20:	d808      	bhi.n	b8b34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8b22:	6823      	ldr	r3, [r4, #0]
   b8b24:	9a01      	ldr	r2, [sp, #4]
   b8b26:	695b      	ldr	r3, [r3, #20]
   b8b28:	4629      	mov	r1, r5
   b8b2a:	4620      	mov	r0, r4
   b8b2c:	b002      	add	sp, #8
   b8b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8b32:	4718      	bx	r3
   b8b34:	b002      	add	sp, #8
   b8b36:	bd70      	pop	{r4, r5, r6, pc}

000b8b38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8b38:	b510      	push	{r4, lr}
   b8b3a:	4b03      	ldr	r3, [pc, #12]	; (b8b48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8b3c:	6003      	str	r3, [r0, #0]
   b8b3e:	4604      	mov	r4, r0
   b8b40:	f7ff ffa6 	bl	b8a90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8b44:	4620      	mov	r0, r4
   b8b46:	bd10      	pop	{r4, pc}
   b8b48:	000bccb0 	.word	0x000bccb0

000b8b4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8b4c:	b510      	push	{r4, lr}
   b8b4e:	4604      	mov	r4, r0
   b8b50:	f7ff fff2 	bl	b8b38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8b54:	4620      	mov	r0, r4
   b8b56:	210c      	movs	r1, #12
   b8b58:	f7fb faa5 	bl	b40a6 <_ZdlPvj>
   b8b5c:	4620      	mov	r0, r4
   b8b5e:	bd10      	pop	{r4, pc}

000b8b60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8b62:	9f08      	ldr	r7, [sp, #32]
   b8b64:	4297      	cmp	r7, r2
   b8b66:	4605      	mov	r5, r0
   b8b68:	460e      	mov	r6, r1
   b8b6a:	4614      	mov	r4, r2
   b8b6c:	d00a      	beq.n	b8b84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8b6e:	68a8      	ldr	r0, [r5, #8]
   b8b70:	6802      	ldr	r2, [r0, #0]
   b8b72:	9708      	str	r7, [sp, #32]
   b8b74:	6a15      	ldr	r5, [r2, #32]
   b8b76:	4631      	mov	r1, r6
   b8b78:	4622      	mov	r2, r4
   b8b7a:	46ac      	mov	ip, r5
   b8b7c:	b003      	add	sp, #12
   b8b7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8b82:	4760      	bx	ip
   b8b84:	4619      	mov	r1, r3
   b8b86:	9301      	str	r3, [sp, #4]
   b8b88:	f000 f858 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8b8c:	9b01      	ldr	r3, [sp, #4]
   b8b8e:	2800      	cmp	r0, #0
   b8b90:	d0ed      	beq.n	b8b6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8b92:	2006      	movs	r0, #6
   b8b94:	b003      	add	sp, #12
   b8b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8b98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8b98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b9c:	460d      	mov	r5, r1
   b8b9e:	4619      	mov	r1, r3
   b8ba0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8ba4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8ba8:	4681      	mov	r9, r0
   b8baa:	4617      	mov	r7, r2
   b8bac:	4698      	mov	r8, r3
   b8bae:	f000 f845 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8bb2:	b190      	cbz	r0, b8bda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8bb4:	2d00      	cmp	r5, #0
   b8bb6:	6034      	str	r4, [r6, #0]
   b8bb8:	7137      	strb	r7, [r6, #4]
   b8bba:	db09      	blt.n	b8bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8bbc:	1961      	adds	r1, r4, r5
   b8bbe:	458a      	cmp	sl, r1
   b8bc0:	bf0c      	ite	eq
   b8bc2:	2106      	moveq	r1, #6
   b8bc4:	2101      	movne	r1, #1
   b8bc6:	71b1      	strb	r1, [r6, #6]
   b8bc8:	2000      	movs	r0, #0
   b8bca:	b001      	add	sp, #4
   b8bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8bd0:	3502      	adds	r5, #2
   b8bd2:	d1f9      	bne.n	b8bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8bd4:	2301      	movs	r3, #1
   b8bd6:	71b3      	strb	r3, [r6, #6]
   b8bd8:	e7f6      	b.n	b8bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8bda:	4554      	cmp	r4, sl
   b8bdc:	d106      	bne.n	b8bec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8bde:	4659      	mov	r1, fp
   b8be0:	4648      	mov	r0, r9
   b8be2:	f000 f82b 	bl	b8c3c <_ZNKSt9type_infoeqERKS_>
   b8be6:	b108      	cbz	r0, b8bec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8be8:	7177      	strb	r7, [r6, #5]
   b8bea:	e7ed      	b.n	b8bc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8bec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8bf0:	6803      	ldr	r3, [r0, #0]
   b8bf2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8bf6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8bfa:	69dc      	ldr	r4, [r3, #28]
   b8bfc:	463a      	mov	r2, r7
   b8bfe:	4643      	mov	r3, r8
   b8c00:	4629      	mov	r1, r5
   b8c02:	46a4      	mov	ip, r4
   b8c04:	b001      	add	sp, #4
   b8c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c0a:	4760      	bx	ip

000b8c0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8c10:	4607      	mov	r7, r0
   b8c12:	460c      	mov	r4, r1
   b8c14:	4615      	mov	r5, r2
   b8c16:	461e      	mov	r6, r3
   b8c18:	f7ff ff6d 	bl	b8af6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8c1c:	b948      	cbnz	r0, b8c32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8c1e:	68b8      	ldr	r0, [r7, #8]
   b8c20:	6803      	ldr	r3, [r0, #0]
   b8c22:	699f      	ldr	r7, [r3, #24]
   b8c24:	462a      	mov	r2, r5
   b8c26:	4633      	mov	r3, r6
   b8c28:	4621      	mov	r1, r4
   b8c2a:	46bc      	mov	ip, r7
   b8c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8c30:	4760      	bx	ip
   b8c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8c36 <_ZNSt9type_infoD1Ev>:
   b8c36:	4770      	bx	lr

000b8c38 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8c38:	2000      	movs	r0, #0
   b8c3a:	4770      	bx	lr

000b8c3c <_ZNKSt9type_infoeqERKS_>:
   b8c3c:	4281      	cmp	r1, r0
   b8c3e:	b508      	push	{r3, lr}
   b8c40:	d00e      	beq.n	b8c60 <_ZNKSt9type_infoeqERKS_+0x24>
   b8c42:	6840      	ldr	r0, [r0, #4]
   b8c44:	7803      	ldrb	r3, [r0, #0]
   b8c46:	2b2a      	cmp	r3, #42	; 0x2a
   b8c48:	d00c      	beq.n	b8c64 <_ZNKSt9type_infoeqERKS_+0x28>
   b8c4a:	6849      	ldr	r1, [r1, #4]
   b8c4c:	780b      	ldrb	r3, [r1, #0]
   b8c4e:	2b2a      	cmp	r3, #42	; 0x2a
   b8c50:	bf08      	it	eq
   b8c52:	3101      	addeq	r1, #1
   b8c54:	f000 fdc2 	bl	b97dc <strcmp>
   b8c58:	fab0 f080 	clz	r0, r0
   b8c5c:	0940      	lsrs	r0, r0, #5
   b8c5e:	bd08      	pop	{r3, pc}
   b8c60:	2001      	movs	r0, #1
   b8c62:	e7fc      	b.n	b8c5e <_ZNKSt9type_infoeqERKS_+0x22>
   b8c64:	2000      	movs	r0, #0
   b8c66:	e7fa      	b.n	b8c5e <_ZNKSt9type_infoeqERKS_+0x22>

000b8c68 <__aeabi_drsub>:
   b8c68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8c6c:	e002      	b.n	b8c74 <__adddf3>
   b8c6e:	bf00      	nop

000b8c70 <__aeabi_dsub>:
   b8c70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8c74 <__adddf3>:
   b8c74:	b530      	push	{r4, r5, lr}
   b8c76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b8c7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b8c7e:	ea94 0f05 	teq	r4, r5
   b8c82:	bf08      	it	eq
   b8c84:	ea90 0f02 	teqeq	r0, r2
   b8c88:	bf1f      	itttt	ne
   b8c8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   b8c8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   b8c92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b8c96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8c9a:	f000 80e2 	beq.w	b8e62 <__adddf3+0x1ee>
   b8c9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b8ca2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b8ca6:	bfb8      	it	lt
   b8ca8:	426d      	neglt	r5, r5
   b8caa:	dd0c      	ble.n	b8cc6 <__adddf3+0x52>
   b8cac:	442c      	add	r4, r5
   b8cae:	ea80 0202 	eor.w	r2, r0, r2
   b8cb2:	ea81 0303 	eor.w	r3, r1, r3
   b8cb6:	ea82 0000 	eor.w	r0, r2, r0
   b8cba:	ea83 0101 	eor.w	r1, r3, r1
   b8cbe:	ea80 0202 	eor.w	r2, r0, r2
   b8cc2:	ea81 0303 	eor.w	r3, r1, r3
   b8cc6:	2d36      	cmp	r5, #54	; 0x36
   b8cc8:	bf88      	it	hi
   b8cca:	bd30      	pophi	{r4, r5, pc}
   b8ccc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8cd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b8cd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8cdc:	d002      	beq.n	b8ce4 <__adddf3+0x70>
   b8cde:	4240      	negs	r0, r0
   b8ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8ce4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b8ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8cec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8cf0:	d002      	beq.n	b8cf8 <__adddf3+0x84>
   b8cf2:	4252      	negs	r2, r2
   b8cf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8cf8:	ea94 0f05 	teq	r4, r5
   b8cfc:	f000 80a7 	beq.w	b8e4e <__adddf3+0x1da>
   b8d00:	f1a4 0401 	sub.w	r4, r4, #1
   b8d04:	f1d5 0e20 	rsbs	lr, r5, #32
   b8d08:	db0d      	blt.n	b8d26 <__adddf3+0xb2>
   b8d0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8d0e:	fa22 f205 	lsr.w	r2, r2, r5
   b8d12:	1880      	adds	r0, r0, r2
   b8d14:	f141 0100 	adc.w	r1, r1, #0
   b8d18:	fa03 f20e 	lsl.w	r2, r3, lr
   b8d1c:	1880      	adds	r0, r0, r2
   b8d1e:	fa43 f305 	asr.w	r3, r3, r5
   b8d22:	4159      	adcs	r1, r3
   b8d24:	e00e      	b.n	b8d44 <__adddf3+0xd0>
   b8d26:	f1a5 0520 	sub.w	r5, r5, #32
   b8d2a:	f10e 0e20 	add.w	lr, lr, #32
   b8d2e:	2a01      	cmp	r2, #1
   b8d30:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8d34:	bf28      	it	cs
   b8d36:	f04c 0c02 	orrcs.w	ip, ip, #2
   b8d3a:	fa43 f305 	asr.w	r3, r3, r5
   b8d3e:	18c0      	adds	r0, r0, r3
   b8d40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8d48:	d507      	bpl.n	b8d5a <__adddf3+0xe6>
   b8d4a:	f04f 0e00 	mov.w	lr, #0
   b8d4e:	f1dc 0c00 	rsbs	ip, ip, #0
   b8d52:	eb7e 0000 	sbcs.w	r0, lr, r0
   b8d56:	eb6e 0101 	sbc.w	r1, lr, r1
   b8d5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8d5e:	d31b      	bcc.n	b8d98 <__adddf3+0x124>
   b8d60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8d64:	d30c      	bcc.n	b8d80 <__adddf3+0x10c>
   b8d66:	0849      	lsrs	r1, r1, #1
   b8d68:	ea5f 0030 	movs.w	r0, r0, rrx
   b8d6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8d70:	f104 0401 	add.w	r4, r4, #1
   b8d74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b8d78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b8d7c:	f080 809a 	bcs.w	b8eb4 <__adddf3+0x240>
   b8d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8d84:	bf08      	it	eq
   b8d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8d8a:	f150 0000 	adcs.w	r0, r0, #0
   b8d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8d92:	ea41 0105 	orr.w	r1, r1, r5
   b8d96:	bd30      	pop	{r4, r5, pc}
   b8d98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b8d9c:	4140      	adcs	r0, r0
   b8d9e:	eb41 0101 	adc.w	r1, r1, r1
   b8da2:	3c01      	subs	r4, #1
   b8da4:	bf28      	it	cs
   b8da6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b8daa:	d2e9      	bcs.n	b8d80 <__adddf3+0x10c>
   b8dac:	f091 0f00 	teq	r1, #0
   b8db0:	bf04      	itt	eq
   b8db2:	4601      	moveq	r1, r0
   b8db4:	2000      	moveq	r0, #0
   b8db6:	fab1 f381 	clz	r3, r1
   b8dba:	bf08      	it	eq
   b8dbc:	3320      	addeq	r3, #32
   b8dbe:	f1a3 030b 	sub.w	r3, r3, #11
   b8dc2:	f1b3 0220 	subs.w	r2, r3, #32
   b8dc6:	da0c      	bge.n	b8de2 <__adddf3+0x16e>
   b8dc8:	320c      	adds	r2, #12
   b8dca:	dd08      	ble.n	b8dde <__adddf3+0x16a>
   b8dcc:	f102 0c14 	add.w	ip, r2, #20
   b8dd0:	f1c2 020c 	rsb	r2, r2, #12
   b8dd4:	fa01 f00c 	lsl.w	r0, r1, ip
   b8dd8:	fa21 f102 	lsr.w	r1, r1, r2
   b8ddc:	e00c      	b.n	b8df8 <__adddf3+0x184>
   b8dde:	f102 0214 	add.w	r2, r2, #20
   b8de2:	bfd8      	it	le
   b8de4:	f1c2 0c20 	rsble	ip, r2, #32
   b8de8:	fa01 f102 	lsl.w	r1, r1, r2
   b8dec:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8df0:	bfdc      	itt	le
   b8df2:	ea41 010c 	orrle.w	r1, r1, ip
   b8df6:	4090      	lslle	r0, r2
   b8df8:	1ae4      	subs	r4, r4, r3
   b8dfa:	bfa2      	ittt	ge
   b8dfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8e00:	4329      	orrge	r1, r5
   b8e02:	bd30      	popge	{r4, r5, pc}
   b8e04:	ea6f 0404 	mvn.w	r4, r4
   b8e08:	3c1f      	subs	r4, #31
   b8e0a:	da1c      	bge.n	b8e46 <__adddf3+0x1d2>
   b8e0c:	340c      	adds	r4, #12
   b8e0e:	dc0e      	bgt.n	b8e2e <__adddf3+0x1ba>
   b8e10:	f104 0414 	add.w	r4, r4, #20
   b8e14:	f1c4 0220 	rsb	r2, r4, #32
   b8e18:	fa20 f004 	lsr.w	r0, r0, r4
   b8e1c:	fa01 f302 	lsl.w	r3, r1, r2
   b8e20:	ea40 0003 	orr.w	r0, r0, r3
   b8e24:	fa21 f304 	lsr.w	r3, r1, r4
   b8e28:	ea45 0103 	orr.w	r1, r5, r3
   b8e2c:	bd30      	pop	{r4, r5, pc}
   b8e2e:	f1c4 040c 	rsb	r4, r4, #12
   b8e32:	f1c4 0220 	rsb	r2, r4, #32
   b8e36:	fa20 f002 	lsr.w	r0, r0, r2
   b8e3a:	fa01 f304 	lsl.w	r3, r1, r4
   b8e3e:	ea40 0003 	orr.w	r0, r0, r3
   b8e42:	4629      	mov	r1, r5
   b8e44:	bd30      	pop	{r4, r5, pc}
   b8e46:	fa21 f004 	lsr.w	r0, r1, r4
   b8e4a:	4629      	mov	r1, r5
   b8e4c:	bd30      	pop	{r4, r5, pc}
   b8e4e:	f094 0f00 	teq	r4, #0
   b8e52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b8e56:	bf06      	itte	eq
   b8e58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8e5c:	3401      	addeq	r4, #1
   b8e5e:	3d01      	subne	r5, #1
   b8e60:	e74e      	b.n	b8d00 <__adddf3+0x8c>
   b8e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8e66:	bf18      	it	ne
   b8e68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8e6c:	d029      	beq.n	b8ec2 <__adddf3+0x24e>
   b8e6e:	ea94 0f05 	teq	r4, r5
   b8e72:	bf08      	it	eq
   b8e74:	ea90 0f02 	teqeq	r0, r2
   b8e78:	d005      	beq.n	b8e86 <__adddf3+0x212>
   b8e7a:	ea54 0c00 	orrs.w	ip, r4, r0
   b8e7e:	bf04      	itt	eq
   b8e80:	4619      	moveq	r1, r3
   b8e82:	4610      	moveq	r0, r2
   b8e84:	bd30      	pop	{r4, r5, pc}
   b8e86:	ea91 0f03 	teq	r1, r3
   b8e8a:	bf1e      	ittt	ne
   b8e8c:	2100      	movne	r1, #0
   b8e8e:	2000      	movne	r0, #0
   b8e90:	bd30      	popne	{r4, r5, pc}
   b8e92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b8e96:	d105      	bne.n	b8ea4 <__adddf3+0x230>
   b8e98:	0040      	lsls	r0, r0, #1
   b8e9a:	4149      	adcs	r1, r1
   b8e9c:	bf28      	it	cs
   b8e9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b8ea2:	bd30      	pop	{r4, r5, pc}
   b8ea4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b8ea8:	bf3c      	itt	cc
   b8eaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b8eae:	bd30      	popcc	{r4, r5, pc}
   b8eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8eb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b8eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8ebc:	f04f 0000 	mov.w	r0, #0
   b8ec0:	bd30      	pop	{r4, r5, pc}
   b8ec2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b8ec6:	bf1a      	itte	ne
   b8ec8:	4619      	movne	r1, r3
   b8eca:	4610      	movne	r0, r2
   b8ecc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b8ed0:	bf1c      	itt	ne
   b8ed2:	460b      	movne	r3, r1
   b8ed4:	4602      	movne	r2, r0
   b8ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8eda:	bf06      	itte	eq
   b8edc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8ee0:	ea91 0f03 	teqeq	r1, r3
   b8ee4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b8ee8:	bd30      	pop	{r4, r5, pc}
   b8eea:	bf00      	nop

000b8eec <__aeabi_ui2d>:
   b8eec:	f090 0f00 	teq	r0, #0
   b8ef0:	bf04      	itt	eq
   b8ef2:	2100      	moveq	r1, #0
   b8ef4:	4770      	bxeq	lr
   b8ef6:	b530      	push	{r4, r5, lr}
   b8ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8f00:	f04f 0500 	mov.w	r5, #0
   b8f04:	f04f 0100 	mov.w	r1, #0
   b8f08:	e750      	b.n	b8dac <__adddf3+0x138>
   b8f0a:	bf00      	nop

000b8f0c <__aeabi_i2d>:
   b8f0c:	f090 0f00 	teq	r0, #0
   b8f10:	bf04      	itt	eq
   b8f12:	2100      	moveq	r1, #0
   b8f14:	4770      	bxeq	lr
   b8f16:	b530      	push	{r4, r5, lr}
   b8f18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8f1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8f20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8f24:	bf48      	it	mi
   b8f26:	4240      	negmi	r0, r0
   b8f28:	f04f 0100 	mov.w	r1, #0
   b8f2c:	e73e      	b.n	b8dac <__adddf3+0x138>
   b8f2e:	bf00      	nop

000b8f30 <__aeabi_f2d>:
   b8f30:	0042      	lsls	r2, r0, #1
   b8f32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b8f36:	ea4f 0131 	mov.w	r1, r1, rrx
   b8f3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8f3e:	bf1f      	itttt	ne
   b8f40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8f44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8f48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8f4c:	4770      	bxne	lr
   b8f4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8f52:	bf08      	it	eq
   b8f54:	4770      	bxeq	lr
   b8f56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8f5a:	bf04      	itt	eq
   b8f5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8f60:	4770      	bxeq	lr
   b8f62:	b530      	push	{r4, r5, lr}
   b8f64:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8f70:	e71c      	b.n	b8dac <__adddf3+0x138>
   b8f72:	bf00      	nop

000b8f74 <__aeabi_ul2d>:
   b8f74:	ea50 0201 	orrs.w	r2, r0, r1
   b8f78:	bf08      	it	eq
   b8f7a:	4770      	bxeq	lr
   b8f7c:	b530      	push	{r4, r5, lr}
   b8f7e:	f04f 0500 	mov.w	r5, #0
   b8f82:	e00a      	b.n	b8f9a <__aeabi_l2d+0x16>

000b8f84 <__aeabi_l2d>:
   b8f84:	ea50 0201 	orrs.w	r2, r0, r1
   b8f88:	bf08      	it	eq
   b8f8a:	4770      	bxeq	lr
   b8f8c:	b530      	push	{r4, r5, lr}
   b8f8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b8f92:	d502      	bpl.n	b8f9a <__aeabi_l2d+0x16>
   b8f94:	4240      	negs	r0, r0
   b8f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8f9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8f9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8fa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b8fa6:	f43f aed8 	beq.w	b8d5a <__adddf3+0xe6>
   b8faa:	f04f 0203 	mov.w	r2, #3
   b8fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8fb2:	bf18      	it	ne
   b8fb4:	3203      	addne	r2, #3
   b8fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b8fba:	bf18      	it	ne
   b8fbc:	3203      	addne	r2, #3
   b8fbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b8fc2:	f1c2 0320 	rsb	r3, r2, #32
   b8fc6:	fa00 fc03 	lsl.w	ip, r0, r3
   b8fca:	fa20 f002 	lsr.w	r0, r0, r2
   b8fce:	fa01 fe03 	lsl.w	lr, r1, r3
   b8fd2:	ea40 000e 	orr.w	r0, r0, lr
   b8fd6:	fa21 f102 	lsr.w	r1, r1, r2
   b8fda:	4414      	add	r4, r2
   b8fdc:	e6bd      	b.n	b8d5a <__adddf3+0xe6>
   b8fde:	bf00      	nop

000b8fe0 <__aeabi_dmul>:
   b8fe0:	b570      	push	{r4, r5, r6, lr}
   b8fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8fee:	bf1d      	ittte	ne
   b8ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8ff4:	ea94 0f0c 	teqne	r4, ip
   b8ff8:	ea95 0f0c 	teqne	r5, ip
   b8ffc:	f000 f8de 	bleq	b91bc <__aeabi_dmul+0x1dc>
   b9000:	442c      	add	r4, r5
   b9002:	ea81 0603 	eor.w	r6, r1, r3
   b9006:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b900a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b900e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b9012:	bf18      	it	ne
   b9014:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b9018:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b901c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b9020:	d038      	beq.n	b9094 <__aeabi_dmul+0xb4>
   b9022:	fba0 ce02 	umull	ip, lr, r0, r2
   b9026:	f04f 0500 	mov.w	r5, #0
   b902a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b902e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b9032:	fbe0 e503 	umlal	lr, r5, r0, r3
   b9036:	f04f 0600 	mov.w	r6, #0
   b903a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b903e:	f09c 0f00 	teq	ip, #0
   b9042:	bf18      	it	ne
   b9044:	f04e 0e01 	orrne.w	lr, lr, #1
   b9048:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b904c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b9050:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b9054:	d204      	bcs.n	b9060 <__aeabi_dmul+0x80>
   b9056:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b905a:	416d      	adcs	r5, r5
   b905c:	eb46 0606 	adc.w	r6, r6, r6
   b9060:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b9064:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b9068:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b906c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b9070:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9074:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9078:	bf88      	it	hi
   b907a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b907e:	d81e      	bhi.n	b90be <__aeabi_dmul+0xde>
   b9080:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9084:	bf08      	it	eq
   b9086:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b908a:	f150 0000 	adcs.w	r0, r0, #0
   b908e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9092:	bd70      	pop	{r4, r5, r6, pc}
   b9094:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9098:	ea46 0101 	orr.w	r1, r6, r1
   b909c:	ea40 0002 	orr.w	r0, r0, r2
   b90a0:	ea81 0103 	eor.w	r1, r1, r3
   b90a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b90a8:	bfc2      	ittt	gt
   b90aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b90ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b90b2:	bd70      	popgt	{r4, r5, r6, pc}
   b90b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b90b8:	f04f 0e00 	mov.w	lr, #0
   b90bc:	3c01      	subs	r4, #1
   b90be:	f300 80ab 	bgt.w	b9218 <__aeabi_dmul+0x238>
   b90c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b90c6:	bfde      	ittt	le
   b90c8:	2000      	movle	r0, #0
   b90ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b90ce:	bd70      	pople	{r4, r5, r6, pc}
   b90d0:	f1c4 0400 	rsb	r4, r4, #0
   b90d4:	3c20      	subs	r4, #32
   b90d6:	da35      	bge.n	b9144 <__aeabi_dmul+0x164>
   b90d8:	340c      	adds	r4, #12
   b90da:	dc1b      	bgt.n	b9114 <__aeabi_dmul+0x134>
   b90dc:	f104 0414 	add.w	r4, r4, #20
   b90e0:	f1c4 0520 	rsb	r5, r4, #32
   b90e4:	fa00 f305 	lsl.w	r3, r0, r5
   b90e8:	fa20 f004 	lsr.w	r0, r0, r4
   b90ec:	fa01 f205 	lsl.w	r2, r1, r5
   b90f0:	ea40 0002 	orr.w	r0, r0, r2
   b90f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b90f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b90fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9100:	fa21 f604 	lsr.w	r6, r1, r4
   b9104:	eb42 0106 	adc.w	r1, r2, r6
   b9108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b910c:	bf08      	it	eq
   b910e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9112:	bd70      	pop	{r4, r5, r6, pc}
   b9114:	f1c4 040c 	rsb	r4, r4, #12
   b9118:	f1c4 0520 	rsb	r5, r4, #32
   b911c:	fa00 f304 	lsl.w	r3, r0, r4
   b9120:	fa20 f005 	lsr.w	r0, r0, r5
   b9124:	fa01 f204 	lsl.w	r2, r1, r4
   b9128:	ea40 0002 	orr.w	r0, r0, r2
   b912c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9130:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b9134:	f141 0100 	adc.w	r1, r1, #0
   b9138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b913c:	bf08      	it	eq
   b913e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9142:	bd70      	pop	{r4, r5, r6, pc}
   b9144:	f1c4 0520 	rsb	r5, r4, #32
   b9148:	fa00 f205 	lsl.w	r2, r0, r5
   b914c:	ea4e 0e02 	orr.w	lr, lr, r2
   b9150:	fa20 f304 	lsr.w	r3, r0, r4
   b9154:	fa01 f205 	lsl.w	r2, r1, r5
   b9158:	ea43 0302 	orr.w	r3, r3, r2
   b915c:	fa21 f004 	lsr.w	r0, r1, r4
   b9160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b9164:	fa21 f204 	lsr.w	r2, r1, r4
   b9168:	ea20 0002 	bic.w	r0, r0, r2
   b916c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b9170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9174:	bf08      	it	eq
   b9176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b917a:	bd70      	pop	{r4, r5, r6, pc}
   b917c:	f094 0f00 	teq	r4, #0
   b9180:	d10f      	bne.n	b91a2 <__aeabi_dmul+0x1c2>
   b9182:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9186:	0040      	lsls	r0, r0, #1
   b9188:	eb41 0101 	adc.w	r1, r1, r1
   b918c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9190:	bf08      	it	eq
   b9192:	3c01      	subeq	r4, #1
   b9194:	d0f7      	beq.n	b9186 <__aeabi_dmul+0x1a6>
   b9196:	ea41 0106 	orr.w	r1, r1, r6
   b919a:	f095 0f00 	teq	r5, #0
   b919e:	bf18      	it	ne
   b91a0:	4770      	bxne	lr
   b91a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b91a6:	0052      	lsls	r2, r2, #1
   b91a8:	eb43 0303 	adc.w	r3, r3, r3
   b91ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b91b0:	bf08      	it	eq
   b91b2:	3d01      	subeq	r5, #1
   b91b4:	d0f7      	beq.n	b91a6 <__aeabi_dmul+0x1c6>
   b91b6:	ea43 0306 	orr.w	r3, r3, r6
   b91ba:	4770      	bx	lr
   b91bc:	ea94 0f0c 	teq	r4, ip
   b91c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b91c4:	bf18      	it	ne
   b91c6:	ea95 0f0c 	teqne	r5, ip
   b91ca:	d00c      	beq.n	b91e6 <__aeabi_dmul+0x206>
   b91cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b91d0:	bf18      	it	ne
   b91d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b91d6:	d1d1      	bne.n	b917c <__aeabi_dmul+0x19c>
   b91d8:	ea81 0103 	eor.w	r1, r1, r3
   b91dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b91e0:	f04f 0000 	mov.w	r0, #0
   b91e4:	bd70      	pop	{r4, r5, r6, pc}
   b91e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b91ea:	bf06      	itte	eq
   b91ec:	4610      	moveq	r0, r2
   b91ee:	4619      	moveq	r1, r3
   b91f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b91f4:	d019      	beq.n	b922a <__aeabi_dmul+0x24a>
   b91f6:	ea94 0f0c 	teq	r4, ip
   b91fa:	d102      	bne.n	b9202 <__aeabi_dmul+0x222>
   b91fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b9200:	d113      	bne.n	b922a <__aeabi_dmul+0x24a>
   b9202:	ea95 0f0c 	teq	r5, ip
   b9206:	d105      	bne.n	b9214 <__aeabi_dmul+0x234>
   b9208:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b920c:	bf1c      	itt	ne
   b920e:	4610      	movne	r0, r2
   b9210:	4619      	movne	r1, r3
   b9212:	d10a      	bne.n	b922a <__aeabi_dmul+0x24a>
   b9214:	ea81 0103 	eor.w	r1, r1, r3
   b9218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b921c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b9220:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9224:	f04f 0000 	mov.w	r0, #0
   b9228:	bd70      	pop	{r4, r5, r6, pc}
   b922a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b922e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b9232:	bd70      	pop	{r4, r5, r6, pc}

000b9234 <__aeabi_ddiv>:
   b9234:	b570      	push	{r4, r5, r6, lr}
   b9236:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b923a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b923e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b9242:	bf1d      	ittte	ne
   b9244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9248:	ea94 0f0c 	teqne	r4, ip
   b924c:	ea95 0f0c 	teqne	r5, ip
   b9250:	f000 f8a7 	bleq	b93a2 <__aeabi_ddiv+0x16e>
   b9254:	eba4 0405 	sub.w	r4, r4, r5
   b9258:	ea81 0e03 	eor.w	lr, r1, r3
   b925c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9260:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9264:	f000 8088 	beq.w	b9378 <__aeabi_ddiv+0x144>
   b9268:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b926c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b9270:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9274:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9278:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b927c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b9280:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9284:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9288:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b928c:	429d      	cmp	r5, r3
   b928e:	bf08      	it	eq
   b9290:	4296      	cmpeq	r6, r2
   b9292:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9296:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b929a:	d202      	bcs.n	b92a2 <__aeabi_ddiv+0x6e>
   b929c:	085b      	lsrs	r3, r3, #1
   b929e:	ea4f 0232 	mov.w	r2, r2, rrx
   b92a2:	1ab6      	subs	r6, r6, r2
   b92a4:	eb65 0503 	sbc.w	r5, r5, r3
   b92a8:	085b      	lsrs	r3, r3, #1
   b92aa:	ea4f 0232 	mov.w	r2, r2, rrx
   b92ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b92b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b92b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b92ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b92be:	bf22      	ittt	cs
   b92c0:	1ab6      	subcs	r6, r6, r2
   b92c2:	4675      	movcs	r5, lr
   b92c4:	ea40 000c 	orrcs.w	r0, r0, ip
   b92c8:	085b      	lsrs	r3, r3, #1
   b92ca:	ea4f 0232 	mov.w	r2, r2, rrx
   b92ce:	ebb6 0e02 	subs.w	lr, r6, r2
   b92d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b92d6:	bf22      	ittt	cs
   b92d8:	1ab6      	subcs	r6, r6, r2
   b92da:	4675      	movcs	r5, lr
   b92dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b92e0:	085b      	lsrs	r3, r3, #1
   b92e2:	ea4f 0232 	mov.w	r2, r2, rrx
   b92e6:	ebb6 0e02 	subs.w	lr, r6, r2
   b92ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   b92ee:	bf22      	ittt	cs
   b92f0:	1ab6      	subcs	r6, r6, r2
   b92f2:	4675      	movcs	r5, lr
   b92f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b92f8:	085b      	lsrs	r3, r3, #1
   b92fa:	ea4f 0232 	mov.w	r2, r2, rrx
   b92fe:	ebb6 0e02 	subs.w	lr, r6, r2
   b9302:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9306:	bf22      	ittt	cs
   b9308:	1ab6      	subcs	r6, r6, r2
   b930a:	4675      	movcs	r5, lr
   b930c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b9310:	ea55 0e06 	orrs.w	lr, r5, r6
   b9314:	d018      	beq.n	b9348 <__aeabi_ddiv+0x114>
   b9316:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b931a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b931e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b9322:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b9326:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b932a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b932e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b9332:	d1c0      	bne.n	b92b6 <__aeabi_ddiv+0x82>
   b9334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b9338:	d10b      	bne.n	b9352 <__aeabi_ddiv+0x11e>
   b933a:	ea41 0100 	orr.w	r1, r1, r0
   b933e:	f04f 0000 	mov.w	r0, #0
   b9342:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b9346:	e7b6      	b.n	b92b6 <__aeabi_ddiv+0x82>
   b9348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b934c:	bf04      	itt	eq
   b934e:	4301      	orreq	r1, r0
   b9350:	2000      	moveq	r0, #0
   b9352:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9356:	bf88      	it	hi
   b9358:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b935c:	f63f aeaf 	bhi.w	b90be <__aeabi_dmul+0xde>
   b9360:	ebb5 0c03 	subs.w	ip, r5, r3
   b9364:	bf04      	itt	eq
   b9366:	ebb6 0c02 	subseq.w	ip, r6, r2
   b936a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b936e:	f150 0000 	adcs.w	r0, r0, #0
   b9372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9376:	bd70      	pop	{r4, r5, r6, pc}
   b9378:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b937c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b9380:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9384:	bfc2      	ittt	gt
   b9386:	ebd4 050c 	rsbsgt	r5, r4, ip
   b938a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b938e:	bd70      	popgt	{r4, r5, r6, pc}
   b9390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9394:	f04f 0e00 	mov.w	lr, #0
   b9398:	3c01      	subs	r4, #1
   b939a:	e690      	b.n	b90be <__aeabi_dmul+0xde>
   b939c:	ea45 0e06 	orr.w	lr, r5, r6
   b93a0:	e68d      	b.n	b90be <__aeabi_dmul+0xde>
   b93a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b93a6:	ea94 0f0c 	teq	r4, ip
   b93aa:	bf08      	it	eq
   b93ac:	ea95 0f0c 	teqeq	r5, ip
   b93b0:	f43f af3b 	beq.w	b922a <__aeabi_dmul+0x24a>
   b93b4:	ea94 0f0c 	teq	r4, ip
   b93b8:	d10a      	bne.n	b93d0 <__aeabi_ddiv+0x19c>
   b93ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b93be:	f47f af34 	bne.w	b922a <__aeabi_dmul+0x24a>
   b93c2:	ea95 0f0c 	teq	r5, ip
   b93c6:	f47f af25 	bne.w	b9214 <__aeabi_dmul+0x234>
   b93ca:	4610      	mov	r0, r2
   b93cc:	4619      	mov	r1, r3
   b93ce:	e72c      	b.n	b922a <__aeabi_dmul+0x24a>
   b93d0:	ea95 0f0c 	teq	r5, ip
   b93d4:	d106      	bne.n	b93e4 <__aeabi_ddiv+0x1b0>
   b93d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b93da:	f43f aefd 	beq.w	b91d8 <__aeabi_dmul+0x1f8>
   b93de:	4610      	mov	r0, r2
   b93e0:	4619      	mov	r1, r3
   b93e2:	e722      	b.n	b922a <__aeabi_dmul+0x24a>
   b93e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b93e8:	bf18      	it	ne
   b93ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b93ee:	f47f aec5 	bne.w	b917c <__aeabi_dmul+0x19c>
   b93f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b93f6:	f47f af0d 	bne.w	b9214 <__aeabi_dmul+0x234>
   b93fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b93fe:	f47f aeeb 	bne.w	b91d8 <__aeabi_dmul+0x1f8>
   b9402:	e712      	b.n	b922a <__aeabi_dmul+0x24a>

000b9404 <__gedf2>:
   b9404:	f04f 3cff 	mov.w	ip, #4294967295
   b9408:	e006      	b.n	b9418 <__cmpdf2+0x4>
   b940a:	bf00      	nop

000b940c <__ledf2>:
   b940c:	f04f 0c01 	mov.w	ip, #1
   b9410:	e002      	b.n	b9418 <__cmpdf2+0x4>
   b9412:	bf00      	nop

000b9414 <__cmpdf2>:
   b9414:	f04f 0c01 	mov.w	ip, #1
   b9418:	f84d cd04 	str.w	ip, [sp, #-4]!
   b941c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b9420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9428:	bf18      	it	ne
   b942a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b942e:	d01b      	beq.n	b9468 <__cmpdf2+0x54>
   b9430:	b001      	add	sp, #4
   b9432:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b9436:	bf0c      	ite	eq
   b9438:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b943c:	ea91 0f03 	teqne	r1, r3
   b9440:	bf02      	ittt	eq
   b9442:	ea90 0f02 	teqeq	r0, r2
   b9446:	2000      	moveq	r0, #0
   b9448:	4770      	bxeq	lr
   b944a:	f110 0f00 	cmn.w	r0, #0
   b944e:	ea91 0f03 	teq	r1, r3
   b9452:	bf58      	it	pl
   b9454:	4299      	cmppl	r1, r3
   b9456:	bf08      	it	eq
   b9458:	4290      	cmpeq	r0, r2
   b945a:	bf2c      	ite	cs
   b945c:	17d8      	asrcs	r0, r3, #31
   b945e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b9462:	f040 0001 	orr.w	r0, r0, #1
   b9466:	4770      	bx	lr
   b9468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b946c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9470:	d102      	bne.n	b9478 <__cmpdf2+0x64>
   b9472:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9476:	d107      	bne.n	b9488 <__cmpdf2+0x74>
   b9478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b947c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b9480:	d1d6      	bne.n	b9430 <__cmpdf2+0x1c>
   b9482:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9486:	d0d3      	beq.n	b9430 <__cmpdf2+0x1c>
   b9488:	f85d 0b04 	ldr.w	r0, [sp], #4
   b948c:	4770      	bx	lr
   b948e:	bf00      	nop

000b9490 <__aeabi_cdrcmple>:
   b9490:	4684      	mov	ip, r0
   b9492:	4610      	mov	r0, r2
   b9494:	4662      	mov	r2, ip
   b9496:	468c      	mov	ip, r1
   b9498:	4619      	mov	r1, r3
   b949a:	4663      	mov	r3, ip
   b949c:	e000      	b.n	b94a0 <__aeabi_cdcmpeq>
   b949e:	bf00      	nop

000b94a0 <__aeabi_cdcmpeq>:
   b94a0:	b501      	push	{r0, lr}
   b94a2:	f7ff ffb7 	bl	b9414 <__cmpdf2>
   b94a6:	2800      	cmp	r0, #0
   b94a8:	bf48      	it	mi
   b94aa:	f110 0f00 	cmnmi.w	r0, #0
   b94ae:	bd01      	pop	{r0, pc}

000b94b0 <__aeabi_dcmpeq>:
   b94b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94b4:	f7ff fff4 	bl	b94a0 <__aeabi_cdcmpeq>
   b94b8:	bf0c      	ite	eq
   b94ba:	2001      	moveq	r0, #1
   b94bc:	2000      	movne	r0, #0
   b94be:	f85d fb08 	ldr.w	pc, [sp], #8
   b94c2:	bf00      	nop

000b94c4 <__aeabi_dcmplt>:
   b94c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94c8:	f7ff ffea 	bl	b94a0 <__aeabi_cdcmpeq>
   b94cc:	bf34      	ite	cc
   b94ce:	2001      	movcc	r0, #1
   b94d0:	2000      	movcs	r0, #0
   b94d2:	f85d fb08 	ldr.w	pc, [sp], #8
   b94d6:	bf00      	nop

000b94d8 <__aeabi_dcmple>:
   b94d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94dc:	f7ff ffe0 	bl	b94a0 <__aeabi_cdcmpeq>
   b94e0:	bf94      	ite	ls
   b94e2:	2001      	movls	r0, #1
   b94e4:	2000      	movhi	r0, #0
   b94e6:	f85d fb08 	ldr.w	pc, [sp], #8
   b94ea:	bf00      	nop

000b94ec <__aeabi_dcmpge>:
   b94ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   b94f0:	f7ff ffce 	bl	b9490 <__aeabi_cdrcmple>
   b94f4:	bf94      	ite	ls
   b94f6:	2001      	movls	r0, #1
   b94f8:	2000      	movhi	r0, #0
   b94fa:	f85d fb08 	ldr.w	pc, [sp], #8
   b94fe:	bf00      	nop

000b9500 <__aeabi_dcmpgt>:
   b9500:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9504:	f7ff ffc4 	bl	b9490 <__aeabi_cdrcmple>
   b9508:	bf34      	ite	cc
   b950a:	2001      	movcc	r0, #1
   b950c:	2000      	movcs	r0, #0
   b950e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9512:	bf00      	nop

000b9514 <__aeabi_d2uiz>:
   b9514:	004a      	lsls	r2, r1, #1
   b9516:	d211      	bcs.n	b953c <__aeabi_d2uiz+0x28>
   b9518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b951c:	d211      	bcs.n	b9542 <__aeabi_d2uiz+0x2e>
   b951e:	d50d      	bpl.n	b953c <__aeabi_d2uiz+0x28>
   b9520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b9524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b9528:	d40e      	bmi.n	b9548 <__aeabi_d2uiz+0x34>
   b952a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b952e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b9532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b9536:	fa23 f002 	lsr.w	r0, r3, r2
   b953a:	4770      	bx	lr
   b953c:	f04f 0000 	mov.w	r0, #0
   b9540:	4770      	bx	lr
   b9542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b9546:	d102      	bne.n	b954e <__aeabi_d2uiz+0x3a>
   b9548:	f04f 30ff 	mov.w	r0, #4294967295
   b954c:	4770      	bx	lr
   b954e:	f04f 0000 	mov.w	r0, #0
   b9552:	4770      	bx	lr

000b9554 <__aeabi_d2f>:
   b9554:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b9558:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b955c:	bf24      	itt	cs
   b955e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b9562:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b9566:	d90d      	bls.n	b9584 <__aeabi_d2f+0x30>
   b9568:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b956c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b9570:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b9574:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b9578:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b957c:	bf08      	it	eq
   b957e:	f020 0001 	biceq.w	r0, r0, #1
   b9582:	4770      	bx	lr
   b9584:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9588:	d121      	bne.n	b95ce <__aeabi_d2f+0x7a>
   b958a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b958e:	bfbc      	itt	lt
   b9590:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b9594:	4770      	bxlt	lr
   b9596:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b959a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b959e:	f1c2 0218 	rsb	r2, r2, #24
   b95a2:	f1c2 0c20 	rsb	ip, r2, #32
   b95a6:	fa10 f30c 	lsls.w	r3, r0, ip
   b95aa:	fa20 f002 	lsr.w	r0, r0, r2
   b95ae:	bf18      	it	ne
   b95b0:	f040 0001 	orrne.w	r0, r0, #1
   b95b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b95b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b95bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b95c0:	ea40 000c 	orr.w	r0, r0, ip
   b95c4:	fa23 f302 	lsr.w	r3, r3, r2
   b95c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b95cc:	e7cc      	b.n	b9568 <__aeabi_d2f+0x14>
   b95ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b95d2:	d107      	bne.n	b95e4 <__aeabi_d2f+0x90>
   b95d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b95d8:	bf1e      	ittt	ne
   b95da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b95de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b95e2:	4770      	bxne	lr
   b95e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b95e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b95ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b95f0:	4770      	bx	lr
   b95f2:	bf00      	nop

000b95f4 <__aeabi_d2ulz>:
   b95f4:	b5d0      	push	{r4, r6, r7, lr}
   b95f6:	4b0c      	ldr	r3, [pc, #48]	; (b9628 <__aeabi_d2ulz+0x34>)
   b95f8:	2200      	movs	r2, #0
   b95fa:	4606      	mov	r6, r0
   b95fc:	460f      	mov	r7, r1
   b95fe:	f7ff fcef 	bl	b8fe0 <__aeabi_dmul>
   b9602:	f7ff ff87 	bl	b9514 <__aeabi_d2uiz>
   b9606:	4604      	mov	r4, r0
   b9608:	f7ff fc70 	bl	b8eec <__aeabi_ui2d>
   b960c:	4b07      	ldr	r3, [pc, #28]	; (b962c <__aeabi_d2ulz+0x38>)
   b960e:	2200      	movs	r2, #0
   b9610:	f7ff fce6 	bl	b8fe0 <__aeabi_dmul>
   b9614:	4602      	mov	r2, r0
   b9616:	460b      	mov	r3, r1
   b9618:	4630      	mov	r0, r6
   b961a:	4639      	mov	r1, r7
   b961c:	f7ff fb28 	bl	b8c70 <__aeabi_dsub>
   b9620:	f7ff ff78 	bl	b9514 <__aeabi_d2uiz>
   b9624:	4621      	mov	r1, r4
   b9626:	bdd0      	pop	{r4, r6, r7, pc}
   b9628:	3df00000 	.word	0x3df00000
   b962c:	41f00000 	.word	0x41f00000

000b9630 <atexit>:
   b9630:	2300      	movs	r3, #0
   b9632:	4601      	mov	r1, r0
   b9634:	461a      	mov	r2, r3
   b9636:	4618      	mov	r0, r3
   b9638:	f000 bfc4 	b.w	ba5c4 <__register_exitproc>

000b963c <atof>:
   b963c:	2100      	movs	r1, #0
   b963e:	f000 bf29 	b.w	ba494 <strtod>

000b9642 <atoi>:
   b9642:	220a      	movs	r2, #10
   b9644:	2100      	movs	r1, #0
   b9646:	f000 bfb3 	b.w	ba5b0 <strtol>

000b964a <atol>:
   b964a:	220a      	movs	r2, #10
   b964c:	2100      	movs	r1, #0
   b964e:	f000 bfaf 	b.w	ba5b0 <strtol>
	...

000b9660 <memchr>:
   b9660:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b9664:	2a10      	cmp	r2, #16
   b9666:	db2b      	blt.n	b96c0 <memchr+0x60>
   b9668:	f010 0f07 	tst.w	r0, #7
   b966c:	d008      	beq.n	b9680 <memchr+0x20>
   b966e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b9672:	3a01      	subs	r2, #1
   b9674:	428b      	cmp	r3, r1
   b9676:	d02d      	beq.n	b96d4 <memchr+0x74>
   b9678:	f010 0f07 	tst.w	r0, #7
   b967c:	b342      	cbz	r2, b96d0 <memchr+0x70>
   b967e:	d1f6      	bne.n	b966e <memchr+0xe>
   b9680:	b4f0      	push	{r4, r5, r6, r7}
   b9682:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b9686:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b968a:	f022 0407 	bic.w	r4, r2, #7
   b968e:	f07f 0700 	mvns.w	r7, #0
   b9692:	2300      	movs	r3, #0
   b9694:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b9698:	3c08      	subs	r4, #8
   b969a:	ea85 0501 	eor.w	r5, r5, r1
   b969e:	ea86 0601 	eor.w	r6, r6, r1
   b96a2:	fa85 f547 	uadd8	r5, r5, r7
   b96a6:	faa3 f587 	sel	r5, r3, r7
   b96aa:	fa86 f647 	uadd8	r6, r6, r7
   b96ae:	faa5 f687 	sel	r6, r5, r7
   b96b2:	b98e      	cbnz	r6, b96d8 <memchr+0x78>
   b96b4:	d1ee      	bne.n	b9694 <memchr+0x34>
   b96b6:	bcf0      	pop	{r4, r5, r6, r7}
   b96b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b96bc:	f002 0207 	and.w	r2, r2, #7
   b96c0:	b132      	cbz	r2, b96d0 <memchr+0x70>
   b96c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b96c6:	3a01      	subs	r2, #1
   b96c8:	ea83 0301 	eor.w	r3, r3, r1
   b96cc:	b113      	cbz	r3, b96d4 <memchr+0x74>
   b96ce:	d1f8      	bne.n	b96c2 <memchr+0x62>
   b96d0:	2000      	movs	r0, #0
   b96d2:	4770      	bx	lr
   b96d4:	3801      	subs	r0, #1
   b96d6:	4770      	bx	lr
   b96d8:	2d00      	cmp	r5, #0
   b96da:	bf06      	itte	eq
   b96dc:	4635      	moveq	r5, r6
   b96de:	3803      	subeq	r0, #3
   b96e0:	3807      	subne	r0, #7
   b96e2:	f015 0f01 	tst.w	r5, #1
   b96e6:	d107      	bne.n	b96f8 <memchr+0x98>
   b96e8:	3001      	adds	r0, #1
   b96ea:	f415 7f80 	tst.w	r5, #256	; 0x100
   b96ee:	bf02      	ittt	eq
   b96f0:	3001      	addeq	r0, #1
   b96f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b96f6:	3001      	addeq	r0, #1
   b96f8:	bcf0      	pop	{r4, r5, r6, r7}
   b96fa:	3801      	subs	r0, #1
   b96fc:	4770      	bx	lr
   b96fe:	bf00      	nop

000b9700 <memcmp>:
   b9700:	b510      	push	{r4, lr}
   b9702:	3901      	subs	r1, #1
   b9704:	4402      	add	r2, r0
   b9706:	4290      	cmp	r0, r2
   b9708:	d101      	bne.n	b970e <memcmp+0xe>
   b970a:	2000      	movs	r0, #0
   b970c:	e005      	b.n	b971a <memcmp+0x1a>
   b970e:	7803      	ldrb	r3, [r0, #0]
   b9710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9714:	42a3      	cmp	r3, r4
   b9716:	d001      	beq.n	b971c <memcmp+0x1c>
   b9718:	1b18      	subs	r0, r3, r4
   b971a:	bd10      	pop	{r4, pc}
   b971c:	3001      	adds	r0, #1
   b971e:	e7f2      	b.n	b9706 <memcmp+0x6>

000b9720 <memcpy>:
   b9720:	440a      	add	r2, r1
   b9722:	4291      	cmp	r1, r2
   b9724:	f100 33ff 	add.w	r3, r0, #4294967295
   b9728:	d100      	bne.n	b972c <memcpy+0xc>
   b972a:	4770      	bx	lr
   b972c:	b510      	push	{r4, lr}
   b972e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9732:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9736:	4291      	cmp	r1, r2
   b9738:	d1f9      	bne.n	b972e <memcpy+0xe>
   b973a:	bd10      	pop	{r4, pc}

000b973c <memmove>:
   b973c:	4288      	cmp	r0, r1
   b973e:	b510      	push	{r4, lr}
   b9740:	eb01 0402 	add.w	r4, r1, r2
   b9744:	d902      	bls.n	b974c <memmove+0x10>
   b9746:	4284      	cmp	r4, r0
   b9748:	4623      	mov	r3, r4
   b974a:	d807      	bhi.n	b975c <memmove+0x20>
   b974c:	1e43      	subs	r3, r0, #1
   b974e:	42a1      	cmp	r1, r4
   b9750:	d008      	beq.n	b9764 <memmove+0x28>
   b9752:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9756:	f803 2f01 	strb.w	r2, [r3, #1]!
   b975a:	e7f8      	b.n	b974e <memmove+0x12>
   b975c:	4402      	add	r2, r0
   b975e:	4601      	mov	r1, r0
   b9760:	428a      	cmp	r2, r1
   b9762:	d100      	bne.n	b9766 <memmove+0x2a>
   b9764:	bd10      	pop	{r4, pc}
   b9766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b976a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b976e:	e7f7      	b.n	b9760 <memmove+0x24>

000b9770 <memset>:
   b9770:	4402      	add	r2, r0
   b9772:	4603      	mov	r3, r0
   b9774:	4293      	cmp	r3, r2
   b9776:	d100      	bne.n	b977a <memset+0xa>
   b9778:	4770      	bx	lr
   b977a:	f803 1b01 	strb.w	r1, [r3], #1
   b977e:	e7f9      	b.n	b9774 <memset+0x4>

000b9780 <srand>:
   b9780:	b538      	push	{r3, r4, r5, lr}
   b9782:	4b10      	ldr	r3, [pc, #64]	; (b97c4 <srand+0x44>)
   b9784:	681d      	ldr	r5, [r3, #0]
   b9786:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9788:	4604      	mov	r4, r0
   b978a:	b9b3      	cbnz	r3, b97ba <srand+0x3a>
   b978c:	2018      	movs	r0, #24
   b978e:	f7fd fc5d 	bl	b704c <malloc>
   b9792:	4602      	mov	r2, r0
   b9794:	63a8      	str	r0, [r5, #56]	; 0x38
   b9796:	b920      	cbnz	r0, b97a2 <srand+0x22>
   b9798:	4b0b      	ldr	r3, [pc, #44]	; (b97c8 <srand+0x48>)
   b979a:	480c      	ldr	r0, [pc, #48]	; (b97cc <srand+0x4c>)
   b979c:	2142      	movs	r1, #66	; 0x42
   b979e:	f7fd fc95 	bl	b70cc <__assert_func>
   b97a2:	490b      	ldr	r1, [pc, #44]	; (b97d0 <srand+0x50>)
   b97a4:	4b0b      	ldr	r3, [pc, #44]	; (b97d4 <srand+0x54>)
   b97a6:	e9c0 1300 	strd	r1, r3, [r0]
   b97aa:	4b0b      	ldr	r3, [pc, #44]	; (b97d8 <srand+0x58>)
   b97ac:	6083      	str	r3, [r0, #8]
   b97ae:	230b      	movs	r3, #11
   b97b0:	8183      	strh	r3, [r0, #12]
   b97b2:	2100      	movs	r1, #0
   b97b4:	2001      	movs	r0, #1
   b97b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b97ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b97bc:	2200      	movs	r2, #0
   b97be:	611c      	str	r4, [r3, #16]
   b97c0:	615a      	str	r2, [r3, #20]
   b97c2:	bd38      	pop	{r3, r4, r5, pc}
   b97c4:	2003e0cc 	.word	0x2003e0cc
   b97c8:	000bcce9 	.word	0x000bcce9
   b97cc:	000bcd00 	.word	0x000bcd00
   b97d0:	abcd330e 	.word	0xabcd330e
   b97d4:	e66d1234 	.word	0xe66d1234
   b97d8:	0005deec 	.word	0x0005deec

000b97dc <strcmp>:
   b97dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b97e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b97e4:	2a01      	cmp	r2, #1
   b97e6:	bf28      	it	cs
   b97e8:	429a      	cmpcs	r2, r3
   b97ea:	d0f7      	beq.n	b97dc <strcmp>
   b97ec:	1ad0      	subs	r0, r2, r3
   b97ee:	4770      	bx	lr

000b97f0 <strlen>:
   b97f0:	4603      	mov	r3, r0
   b97f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b97f6:	2a00      	cmp	r2, #0
   b97f8:	d1fb      	bne.n	b97f2 <strlen+0x2>
   b97fa:	1a18      	subs	r0, r3, r0
   b97fc:	3801      	subs	r0, #1
   b97fe:	4770      	bx	lr

000b9800 <strncmp>:
   b9800:	b510      	push	{r4, lr}
   b9802:	b17a      	cbz	r2, b9824 <strncmp+0x24>
   b9804:	4603      	mov	r3, r0
   b9806:	3901      	subs	r1, #1
   b9808:	1884      	adds	r4, r0, r2
   b980a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b980e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9812:	4290      	cmp	r0, r2
   b9814:	d101      	bne.n	b981a <strncmp+0x1a>
   b9816:	42a3      	cmp	r3, r4
   b9818:	d101      	bne.n	b981e <strncmp+0x1e>
   b981a:	1a80      	subs	r0, r0, r2
   b981c:	bd10      	pop	{r4, pc}
   b981e:	2800      	cmp	r0, #0
   b9820:	d1f3      	bne.n	b980a <strncmp+0xa>
   b9822:	e7fa      	b.n	b981a <strncmp+0x1a>
   b9824:	4610      	mov	r0, r2
   b9826:	e7f9      	b.n	b981c <strncmp+0x1c>

000b9828 <strncpy>:
   b9828:	b510      	push	{r4, lr}
   b982a:	3901      	subs	r1, #1
   b982c:	4603      	mov	r3, r0
   b982e:	b132      	cbz	r2, b983e <strncpy+0x16>
   b9830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9834:	f803 4b01 	strb.w	r4, [r3], #1
   b9838:	3a01      	subs	r2, #1
   b983a:	2c00      	cmp	r4, #0
   b983c:	d1f7      	bne.n	b982e <strncpy+0x6>
   b983e:	441a      	add	r2, r3
   b9840:	2100      	movs	r1, #0
   b9842:	4293      	cmp	r3, r2
   b9844:	d100      	bne.n	b9848 <strncpy+0x20>
   b9846:	bd10      	pop	{r4, pc}
   b9848:	f803 1b01 	strb.w	r1, [r3], #1
   b984c:	e7f9      	b.n	b9842 <strncpy+0x1a>

000b984e <sulp>:
   b984e:	b570      	push	{r4, r5, r6, lr}
   b9850:	4604      	mov	r4, r0
   b9852:	460d      	mov	r5, r1
   b9854:	ec45 4b10 	vmov	d0, r4, r5
   b9858:	4616      	mov	r6, r2
   b985a:	f001 fe0d 	bl	bb478 <__ulp>
   b985e:	ec51 0b10 	vmov	r0, r1, d0
   b9862:	b17e      	cbz	r6, b9884 <sulp+0x36>
   b9864:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b9868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b986c:	2b00      	cmp	r3, #0
   b986e:	dd09      	ble.n	b9884 <sulp+0x36>
   b9870:	051b      	lsls	r3, r3, #20
   b9872:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b9876:	2400      	movs	r4, #0
   b9878:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b987c:	4622      	mov	r2, r4
   b987e:	462b      	mov	r3, r5
   b9880:	f7ff fbae 	bl	b8fe0 <__aeabi_dmul>
   b9884:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9888 <_strtod_l>:
   b9888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b988c:	ed2d 8b02 	vpush	{d8}
   b9890:	b09d      	sub	sp, #116	; 0x74
   b9892:	461f      	mov	r7, r3
   b9894:	2300      	movs	r3, #0
   b9896:	9318      	str	r3, [sp, #96]	; 0x60
   b9898:	4ba2      	ldr	r3, [pc, #648]	; (b9b24 <_strtod_l+0x29c>)
   b989a:	9213      	str	r2, [sp, #76]	; 0x4c
   b989c:	681b      	ldr	r3, [r3, #0]
   b989e:	9305      	str	r3, [sp, #20]
   b98a0:	4604      	mov	r4, r0
   b98a2:	4618      	mov	r0, r3
   b98a4:	4688      	mov	r8, r1
   b98a6:	f7ff ffa3 	bl	b97f0 <strlen>
   b98aa:	f04f 0a00 	mov.w	sl, #0
   b98ae:	4605      	mov	r5, r0
   b98b0:	f04f 0b00 	mov.w	fp, #0
   b98b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b98b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b98ba:	781a      	ldrb	r2, [r3, #0]
   b98bc:	2a2b      	cmp	r2, #43	; 0x2b
   b98be:	d04e      	beq.n	b995e <_strtod_l+0xd6>
   b98c0:	d83b      	bhi.n	b993a <_strtod_l+0xb2>
   b98c2:	2a0d      	cmp	r2, #13
   b98c4:	d834      	bhi.n	b9930 <_strtod_l+0xa8>
   b98c6:	2a08      	cmp	r2, #8
   b98c8:	d834      	bhi.n	b9934 <_strtod_l+0xac>
   b98ca:	2a00      	cmp	r2, #0
   b98cc:	d03e      	beq.n	b994c <_strtod_l+0xc4>
   b98ce:	2300      	movs	r3, #0
   b98d0:	930a      	str	r3, [sp, #40]	; 0x28
   b98d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b98d4:	7833      	ldrb	r3, [r6, #0]
   b98d6:	2b30      	cmp	r3, #48	; 0x30
   b98d8:	f040 80b0 	bne.w	b9a3c <_strtod_l+0x1b4>
   b98dc:	7873      	ldrb	r3, [r6, #1]
   b98de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b98e2:	2b58      	cmp	r3, #88	; 0x58
   b98e4:	d168      	bne.n	b99b8 <_strtod_l+0x130>
   b98e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b98e8:	9301      	str	r3, [sp, #4]
   b98ea:	ab18      	add	r3, sp, #96	; 0x60
   b98ec:	9702      	str	r7, [sp, #8]
   b98ee:	9300      	str	r3, [sp, #0]
   b98f0:	4a8d      	ldr	r2, [pc, #564]	; (b9b28 <_strtod_l+0x2a0>)
   b98f2:	ab19      	add	r3, sp, #100	; 0x64
   b98f4:	a917      	add	r1, sp, #92	; 0x5c
   b98f6:	4620      	mov	r0, r4
   b98f8:	f000 ff2e 	bl	ba758 <__gethex>
   b98fc:	f010 0707 	ands.w	r7, r0, #7
   b9900:	4605      	mov	r5, r0
   b9902:	d005      	beq.n	b9910 <_strtod_l+0x88>
   b9904:	2f06      	cmp	r7, #6
   b9906:	d12c      	bne.n	b9962 <_strtod_l+0xda>
   b9908:	3601      	adds	r6, #1
   b990a:	2300      	movs	r3, #0
   b990c:	9617      	str	r6, [sp, #92]	; 0x5c
   b990e:	930a      	str	r3, [sp, #40]	; 0x28
   b9910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9912:	2b00      	cmp	r3, #0
   b9914:	f040 8590 	bne.w	ba438 <_strtod_l+0xbb0>
   b9918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b991a:	b1eb      	cbz	r3, b9958 <_strtod_l+0xd0>
   b991c:	4652      	mov	r2, sl
   b991e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b9922:	ec43 2b10 	vmov	d0, r2, r3
   b9926:	b01d      	add	sp, #116	; 0x74
   b9928:	ecbd 8b02 	vpop	{d8}
   b992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9930:	2a20      	cmp	r2, #32
   b9932:	d1cc      	bne.n	b98ce <_strtod_l+0x46>
   b9934:	3301      	adds	r3, #1
   b9936:	9317      	str	r3, [sp, #92]	; 0x5c
   b9938:	e7be      	b.n	b98b8 <_strtod_l+0x30>
   b993a:	2a2d      	cmp	r2, #45	; 0x2d
   b993c:	d1c7      	bne.n	b98ce <_strtod_l+0x46>
   b993e:	2201      	movs	r2, #1
   b9940:	920a      	str	r2, [sp, #40]	; 0x28
   b9942:	1c5a      	adds	r2, r3, #1
   b9944:	9217      	str	r2, [sp, #92]	; 0x5c
   b9946:	785b      	ldrb	r3, [r3, #1]
   b9948:	2b00      	cmp	r3, #0
   b994a:	d1c2      	bne.n	b98d2 <_strtod_l+0x4a>
   b994c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b994e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9952:	2b00      	cmp	r3, #0
   b9954:	f040 856e 	bne.w	ba434 <_strtod_l+0xbac>
   b9958:	4652      	mov	r2, sl
   b995a:	465b      	mov	r3, fp
   b995c:	e7e1      	b.n	b9922 <_strtod_l+0x9a>
   b995e:	2200      	movs	r2, #0
   b9960:	e7ee      	b.n	b9940 <_strtod_l+0xb8>
   b9962:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9964:	b13a      	cbz	r2, b9976 <_strtod_l+0xee>
   b9966:	2135      	movs	r1, #53	; 0x35
   b9968:	a81a      	add	r0, sp, #104	; 0x68
   b996a:	f001 fe90 	bl	bb68e <__copybits>
   b996e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9970:	4620      	mov	r0, r4
   b9972:	f001 fa4f 	bl	bae14 <_Bfree>
   b9976:	3f01      	subs	r7, #1
   b9978:	2f04      	cmp	r7, #4
   b997a:	d806      	bhi.n	b998a <_strtod_l+0x102>
   b997c:	e8df f007 	tbb	[pc, r7]
   b9980:	1714030a 	.word	0x1714030a
   b9984:	0a          	.byte	0x0a
   b9985:	00          	.byte	0x00
   b9986:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b998a:	0728      	lsls	r0, r5, #28
   b998c:	d5c0      	bpl.n	b9910 <_strtod_l+0x88>
   b998e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b9992:	e7bd      	b.n	b9910 <_strtod_l+0x88>
   b9994:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b9998:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b999a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b999e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b99a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b99a6:	e7f0      	b.n	b998a <_strtod_l+0x102>
   b99a8:	f8df b180 	ldr.w	fp, [pc, #384]	; b9b2c <_strtod_l+0x2a4>
   b99ac:	e7ed      	b.n	b998a <_strtod_l+0x102>
   b99ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b99b2:	f04f 3aff 	mov.w	sl, #4294967295
   b99b6:	e7e8      	b.n	b998a <_strtod_l+0x102>
   b99b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b99ba:	1c5a      	adds	r2, r3, #1
   b99bc:	9217      	str	r2, [sp, #92]	; 0x5c
   b99be:	785b      	ldrb	r3, [r3, #1]
   b99c0:	2b30      	cmp	r3, #48	; 0x30
   b99c2:	d0f9      	beq.n	b99b8 <_strtod_l+0x130>
   b99c4:	2b00      	cmp	r3, #0
   b99c6:	d0a3      	beq.n	b9910 <_strtod_l+0x88>
   b99c8:	2301      	movs	r3, #1
   b99ca:	f04f 0900 	mov.w	r9, #0
   b99ce:	9304      	str	r3, [sp, #16]
   b99d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b99d2:	9308      	str	r3, [sp, #32]
   b99d4:	f8cd 901c 	str.w	r9, [sp, #28]
   b99d8:	464f      	mov	r7, r9
   b99da:	220a      	movs	r2, #10
   b99dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b99de:	7806      	ldrb	r6, [r0, #0]
   b99e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b99e4:	b2d9      	uxtb	r1, r3
   b99e6:	2909      	cmp	r1, #9
   b99e8:	d92a      	bls.n	b9a40 <_strtod_l+0x1b8>
   b99ea:	9905      	ldr	r1, [sp, #20]
   b99ec:	462a      	mov	r2, r5
   b99ee:	f7ff ff07 	bl	b9800 <strncmp>
   b99f2:	b398      	cbz	r0, b9a5c <_strtod_l+0x1d4>
   b99f4:	2000      	movs	r0, #0
   b99f6:	4632      	mov	r2, r6
   b99f8:	463d      	mov	r5, r7
   b99fa:	9005      	str	r0, [sp, #20]
   b99fc:	4603      	mov	r3, r0
   b99fe:	2a65      	cmp	r2, #101	; 0x65
   b9a00:	d001      	beq.n	b9a06 <_strtod_l+0x17e>
   b9a02:	2a45      	cmp	r2, #69	; 0x45
   b9a04:	d118      	bne.n	b9a38 <_strtod_l+0x1b0>
   b9a06:	b91d      	cbnz	r5, b9a10 <_strtod_l+0x188>
   b9a08:	9a04      	ldr	r2, [sp, #16]
   b9a0a:	4302      	orrs	r2, r0
   b9a0c:	d09e      	beq.n	b994c <_strtod_l+0xc4>
   b9a0e:	2500      	movs	r5, #0
   b9a10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9a14:	f108 0201 	add.w	r2, r8, #1
   b9a18:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a1a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9a1e:	2a2b      	cmp	r2, #43	; 0x2b
   b9a20:	d075      	beq.n	b9b0e <_strtod_l+0x286>
   b9a22:	2a2d      	cmp	r2, #45	; 0x2d
   b9a24:	d07b      	beq.n	b9b1e <_strtod_l+0x296>
   b9a26:	f04f 0c00 	mov.w	ip, #0
   b9a2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9a2e:	2909      	cmp	r1, #9
   b9a30:	f240 8082 	bls.w	b9b38 <_strtod_l+0x2b0>
   b9a34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9a38:	2600      	movs	r6, #0
   b9a3a:	e09d      	b.n	b9b78 <_strtod_l+0x2f0>
   b9a3c:	2300      	movs	r3, #0
   b9a3e:	e7c4      	b.n	b99ca <_strtod_l+0x142>
   b9a40:	2f08      	cmp	r7, #8
   b9a42:	bfd8      	it	le
   b9a44:	9907      	ldrle	r1, [sp, #28]
   b9a46:	f100 0001 	add.w	r0, r0, #1
   b9a4a:	bfda      	itte	le
   b9a4c:	fb02 3301 	mlale	r3, r2, r1, r3
   b9a50:	9307      	strle	r3, [sp, #28]
   b9a52:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9a56:	3701      	adds	r7, #1
   b9a58:	9017      	str	r0, [sp, #92]	; 0x5c
   b9a5a:	e7bf      	b.n	b99dc <_strtod_l+0x154>
   b9a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a5e:	195a      	adds	r2, r3, r5
   b9a60:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a62:	5d5a      	ldrb	r2, [r3, r5]
   b9a64:	2f00      	cmp	r7, #0
   b9a66:	d037      	beq.n	b9ad8 <_strtod_l+0x250>
   b9a68:	9005      	str	r0, [sp, #20]
   b9a6a:	463d      	mov	r5, r7
   b9a6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9a70:	2b09      	cmp	r3, #9
   b9a72:	d912      	bls.n	b9a9a <_strtod_l+0x212>
   b9a74:	2301      	movs	r3, #1
   b9a76:	e7c2      	b.n	b99fe <_strtod_l+0x176>
   b9a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a7a:	1c5a      	adds	r2, r3, #1
   b9a7c:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a7e:	785a      	ldrb	r2, [r3, #1]
   b9a80:	3001      	adds	r0, #1
   b9a82:	2a30      	cmp	r2, #48	; 0x30
   b9a84:	d0f8      	beq.n	b9a78 <_strtod_l+0x1f0>
   b9a86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9a8a:	2b08      	cmp	r3, #8
   b9a8c:	f200 84d9 	bhi.w	ba442 <_strtod_l+0xbba>
   b9a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a92:	9005      	str	r0, [sp, #20]
   b9a94:	2000      	movs	r0, #0
   b9a96:	9308      	str	r3, [sp, #32]
   b9a98:	4605      	mov	r5, r0
   b9a9a:	3a30      	subs	r2, #48	; 0x30
   b9a9c:	f100 0301 	add.w	r3, r0, #1
   b9aa0:	d014      	beq.n	b9acc <_strtod_l+0x244>
   b9aa2:	9905      	ldr	r1, [sp, #20]
   b9aa4:	4419      	add	r1, r3
   b9aa6:	9105      	str	r1, [sp, #20]
   b9aa8:	462b      	mov	r3, r5
   b9aaa:	eb00 0e05 	add.w	lr, r0, r5
   b9aae:	210a      	movs	r1, #10
   b9ab0:	4573      	cmp	r3, lr
   b9ab2:	d113      	bne.n	b9adc <_strtod_l+0x254>
   b9ab4:	182b      	adds	r3, r5, r0
   b9ab6:	2b08      	cmp	r3, #8
   b9ab8:	f105 0501 	add.w	r5, r5, #1
   b9abc:	4405      	add	r5, r0
   b9abe:	dc1c      	bgt.n	b9afa <_strtod_l+0x272>
   b9ac0:	9907      	ldr	r1, [sp, #28]
   b9ac2:	230a      	movs	r3, #10
   b9ac4:	fb03 2301 	mla	r3, r3, r1, r2
   b9ac8:	9307      	str	r3, [sp, #28]
   b9aca:	2300      	movs	r3, #0
   b9acc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9ace:	1c51      	adds	r1, r2, #1
   b9ad0:	9117      	str	r1, [sp, #92]	; 0x5c
   b9ad2:	7852      	ldrb	r2, [r2, #1]
   b9ad4:	4618      	mov	r0, r3
   b9ad6:	e7c9      	b.n	b9a6c <_strtod_l+0x1e4>
   b9ad8:	4638      	mov	r0, r7
   b9ada:	e7d2      	b.n	b9a82 <_strtod_l+0x1fa>
   b9adc:	2b08      	cmp	r3, #8
   b9ade:	dc04      	bgt.n	b9aea <_strtod_l+0x262>
   b9ae0:	9e07      	ldr	r6, [sp, #28]
   b9ae2:	434e      	muls	r6, r1
   b9ae4:	9607      	str	r6, [sp, #28]
   b9ae6:	3301      	adds	r3, #1
   b9ae8:	e7e2      	b.n	b9ab0 <_strtod_l+0x228>
   b9aea:	f103 0c01 	add.w	ip, r3, #1
   b9aee:	f1bc 0f10 	cmp.w	ip, #16
   b9af2:	bfd8      	it	le
   b9af4:	fb01 f909 	mulle.w	r9, r1, r9
   b9af8:	e7f5      	b.n	b9ae6 <_strtod_l+0x25e>
   b9afa:	2d10      	cmp	r5, #16
   b9afc:	bfdc      	itt	le
   b9afe:	230a      	movle	r3, #10
   b9b00:	fb03 2909 	mlale	r9, r3, r9, r2
   b9b04:	e7e1      	b.n	b9aca <_strtod_l+0x242>
   b9b06:	2300      	movs	r3, #0
   b9b08:	9305      	str	r3, [sp, #20]
   b9b0a:	2301      	movs	r3, #1
   b9b0c:	e77c      	b.n	b9a08 <_strtod_l+0x180>
   b9b0e:	f04f 0c00 	mov.w	ip, #0
   b9b12:	f108 0202 	add.w	r2, r8, #2
   b9b16:	9217      	str	r2, [sp, #92]	; 0x5c
   b9b18:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9b1c:	e785      	b.n	b9a2a <_strtod_l+0x1a2>
   b9b1e:	f04f 0c01 	mov.w	ip, #1
   b9b22:	e7f6      	b.n	b9b12 <_strtod_l+0x28a>
   b9b24:	000bcf7c 	.word	0x000bcf7c
   b9b28:	000bcd8c 	.word	0x000bcd8c
   b9b2c:	7ff00000 	.word	0x7ff00000
   b9b30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b32:	1c51      	adds	r1, r2, #1
   b9b34:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b36:	7852      	ldrb	r2, [r2, #1]
   b9b38:	2a30      	cmp	r2, #48	; 0x30
   b9b3a:	d0f9      	beq.n	b9b30 <_strtod_l+0x2a8>
   b9b3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9b40:	2908      	cmp	r1, #8
   b9b42:	f63f af79 	bhi.w	b9a38 <_strtod_l+0x1b0>
   b9b46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9b4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b4c:	9206      	str	r2, [sp, #24]
   b9b4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b50:	1c51      	adds	r1, r2, #1
   b9b52:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b54:	7852      	ldrb	r2, [r2, #1]
   b9b56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9b5a:	2e09      	cmp	r6, #9
   b9b5c:	d937      	bls.n	b9bce <_strtod_l+0x346>
   b9b5e:	9e06      	ldr	r6, [sp, #24]
   b9b60:	1b89      	subs	r1, r1, r6
   b9b62:	2908      	cmp	r1, #8
   b9b64:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9b68:	dc02      	bgt.n	b9b70 <_strtod_l+0x2e8>
   b9b6a:	4576      	cmp	r6, lr
   b9b6c:	bfa8      	it	ge
   b9b6e:	4676      	movge	r6, lr
   b9b70:	f1bc 0f00 	cmp.w	ip, #0
   b9b74:	d000      	beq.n	b9b78 <_strtod_l+0x2f0>
   b9b76:	4276      	negs	r6, r6
   b9b78:	2d00      	cmp	r5, #0
   b9b7a:	d14d      	bne.n	b9c18 <_strtod_l+0x390>
   b9b7c:	9904      	ldr	r1, [sp, #16]
   b9b7e:	4301      	orrs	r1, r0
   b9b80:	f47f aec6 	bne.w	b9910 <_strtod_l+0x88>
   b9b84:	2b00      	cmp	r3, #0
   b9b86:	f47f aee1 	bne.w	b994c <_strtod_l+0xc4>
   b9b8a:	2a69      	cmp	r2, #105	; 0x69
   b9b8c:	d027      	beq.n	b9bde <_strtod_l+0x356>
   b9b8e:	dc24      	bgt.n	b9bda <_strtod_l+0x352>
   b9b90:	2a49      	cmp	r2, #73	; 0x49
   b9b92:	d024      	beq.n	b9bde <_strtod_l+0x356>
   b9b94:	2a4e      	cmp	r2, #78	; 0x4e
   b9b96:	f47f aed9 	bne.w	b994c <_strtod_l+0xc4>
   b9b9a:	499f      	ldr	r1, [pc, #636]	; (b9e18 <_strtod_l+0x590>)
   b9b9c:	a817      	add	r0, sp, #92	; 0x5c
   b9b9e:	f001 f833 	bl	bac08 <__match>
   b9ba2:	2800      	cmp	r0, #0
   b9ba4:	f43f aed2 	beq.w	b994c <_strtod_l+0xc4>
   b9ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9baa:	781b      	ldrb	r3, [r3, #0]
   b9bac:	2b28      	cmp	r3, #40	; 0x28
   b9bae:	d12d      	bne.n	b9c0c <_strtod_l+0x384>
   b9bb0:	499a      	ldr	r1, [pc, #616]	; (b9e1c <_strtod_l+0x594>)
   b9bb2:	aa1a      	add	r2, sp, #104	; 0x68
   b9bb4:	a817      	add	r0, sp, #92	; 0x5c
   b9bb6:	f001 f83b 	bl	bac30 <__hexnan>
   b9bba:	2805      	cmp	r0, #5
   b9bbc:	d126      	bne.n	b9c0c <_strtod_l+0x384>
   b9bbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9bc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9bc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9bc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9bcc:	e6a0      	b.n	b9910 <_strtod_l+0x88>
   b9bce:	210a      	movs	r1, #10
   b9bd0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9bd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9bd8:	e7b9      	b.n	b9b4e <_strtod_l+0x2c6>
   b9bda:	2a6e      	cmp	r2, #110	; 0x6e
   b9bdc:	e7db      	b.n	b9b96 <_strtod_l+0x30e>
   b9bde:	4990      	ldr	r1, [pc, #576]	; (b9e20 <_strtod_l+0x598>)
   b9be0:	a817      	add	r0, sp, #92	; 0x5c
   b9be2:	f001 f811 	bl	bac08 <__match>
   b9be6:	2800      	cmp	r0, #0
   b9be8:	f43f aeb0 	beq.w	b994c <_strtod_l+0xc4>
   b9bec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9bee:	498d      	ldr	r1, [pc, #564]	; (b9e24 <_strtod_l+0x59c>)
   b9bf0:	3b01      	subs	r3, #1
   b9bf2:	a817      	add	r0, sp, #92	; 0x5c
   b9bf4:	9317      	str	r3, [sp, #92]	; 0x5c
   b9bf6:	f001 f807 	bl	bac08 <__match>
   b9bfa:	b910      	cbnz	r0, b9c02 <_strtod_l+0x37a>
   b9bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9bfe:	3301      	adds	r3, #1
   b9c00:	9317      	str	r3, [sp, #92]	; 0x5c
   b9c02:	f8df b230 	ldr.w	fp, [pc, #560]	; b9e34 <_strtod_l+0x5ac>
   b9c06:	f04f 0a00 	mov.w	sl, #0
   b9c0a:	e681      	b.n	b9910 <_strtod_l+0x88>
   b9c0c:	4886      	ldr	r0, [pc, #536]	; (b9e28 <_strtod_l+0x5a0>)
   b9c0e:	f001 fd93 	bl	bb738 <nan>
   b9c12:	ec5b ab10 	vmov	sl, fp, d0
   b9c16:	e67b      	b.n	b9910 <_strtod_l+0x88>
   b9c18:	9b05      	ldr	r3, [sp, #20]
   b9c1a:	9807      	ldr	r0, [sp, #28]
   b9c1c:	1af3      	subs	r3, r6, r3
   b9c1e:	2f00      	cmp	r7, #0
   b9c20:	bf08      	it	eq
   b9c22:	462f      	moveq	r7, r5
   b9c24:	2d10      	cmp	r5, #16
   b9c26:	9306      	str	r3, [sp, #24]
   b9c28:	46a8      	mov	r8, r5
   b9c2a:	bfa8      	it	ge
   b9c2c:	f04f 0810 	movge.w	r8, #16
   b9c30:	f7ff f95c 	bl	b8eec <__aeabi_ui2d>
   b9c34:	2d09      	cmp	r5, #9
   b9c36:	4682      	mov	sl, r0
   b9c38:	468b      	mov	fp, r1
   b9c3a:	dd13      	ble.n	b9c64 <_strtod_l+0x3dc>
   b9c3c:	4b7b      	ldr	r3, [pc, #492]	; (b9e2c <_strtod_l+0x5a4>)
   b9c3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9c42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9c46:	f7ff f9cb 	bl	b8fe0 <__aeabi_dmul>
   b9c4a:	4682      	mov	sl, r0
   b9c4c:	4648      	mov	r0, r9
   b9c4e:	468b      	mov	fp, r1
   b9c50:	f7ff f94c 	bl	b8eec <__aeabi_ui2d>
   b9c54:	4602      	mov	r2, r0
   b9c56:	460b      	mov	r3, r1
   b9c58:	4650      	mov	r0, sl
   b9c5a:	4659      	mov	r1, fp
   b9c5c:	f7ff f80a 	bl	b8c74 <__adddf3>
   b9c60:	4682      	mov	sl, r0
   b9c62:	468b      	mov	fp, r1
   b9c64:	2d0f      	cmp	r5, #15
   b9c66:	dc38      	bgt.n	b9cda <_strtod_l+0x452>
   b9c68:	9b06      	ldr	r3, [sp, #24]
   b9c6a:	2b00      	cmp	r3, #0
   b9c6c:	f43f ae50 	beq.w	b9910 <_strtod_l+0x88>
   b9c70:	dd24      	ble.n	b9cbc <_strtod_l+0x434>
   b9c72:	2b16      	cmp	r3, #22
   b9c74:	dc0b      	bgt.n	b9c8e <_strtod_l+0x406>
   b9c76:	496d      	ldr	r1, [pc, #436]	; (b9e2c <_strtod_l+0x5a4>)
   b9c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9c80:	4652      	mov	r2, sl
   b9c82:	465b      	mov	r3, fp
   b9c84:	f7ff f9ac 	bl	b8fe0 <__aeabi_dmul>
   b9c88:	4682      	mov	sl, r0
   b9c8a:	468b      	mov	fp, r1
   b9c8c:	e640      	b.n	b9910 <_strtod_l+0x88>
   b9c8e:	9a06      	ldr	r2, [sp, #24]
   b9c90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9c94:	4293      	cmp	r3, r2
   b9c96:	db20      	blt.n	b9cda <_strtod_l+0x452>
   b9c98:	4c64      	ldr	r4, [pc, #400]	; (b9e2c <_strtod_l+0x5a4>)
   b9c9a:	f1c5 050f 	rsb	r5, r5, #15
   b9c9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9ca2:	4652      	mov	r2, sl
   b9ca4:	465b      	mov	r3, fp
   b9ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9caa:	f7ff f999 	bl	b8fe0 <__aeabi_dmul>
   b9cae:	9b06      	ldr	r3, [sp, #24]
   b9cb0:	1b5d      	subs	r5, r3, r5
   b9cb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9cb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9cba:	e7e3      	b.n	b9c84 <_strtod_l+0x3fc>
   b9cbc:	9b06      	ldr	r3, [sp, #24]
   b9cbe:	3316      	adds	r3, #22
   b9cc0:	db0b      	blt.n	b9cda <_strtod_l+0x452>
   b9cc2:	9b05      	ldr	r3, [sp, #20]
   b9cc4:	1b9e      	subs	r6, r3, r6
   b9cc6:	4b59      	ldr	r3, [pc, #356]	; (b9e2c <_strtod_l+0x5a4>)
   b9cc8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9ccc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9cd0:	4650      	mov	r0, sl
   b9cd2:	4659      	mov	r1, fp
   b9cd4:	f7ff faae 	bl	b9234 <__aeabi_ddiv>
   b9cd8:	e7d6      	b.n	b9c88 <_strtod_l+0x400>
   b9cda:	9b06      	ldr	r3, [sp, #24]
   b9cdc:	eba5 0808 	sub.w	r8, r5, r8
   b9ce0:	4498      	add	r8, r3
   b9ce2:	f1b8 0f00 	cmp.w	r8, #0
   b9ce6:	dd74      	ble.n	b9dd2 <_strtod_l+0x54a>
   b9ce8:	f018 030f 	ands.w	r3, r8, #15
   b9cec:	d00a      	beq.n	b9d04 <_strtod_l+0x47c>
   b9cee:	494f      	ldr	r1, [pc, #316]	; (b9e2c <_strtod_l+0x5a4>)
   b9cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9cf4:	4652      	mov	r2, sl
   b9cf6:	465b      	mov	r3, fp
   b9cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cfc:	f7ff f970 	bl	b8fe0 <__aeabi_dmul>
   b9d00:	4682      	mov	sl, r0
   b9d02:	468b      	mov	fp, r1
   b9d04:	f038 080f 	bics.w	r8, r8, #15
   b9d08:	d04f      	beq.n	b9daa <_strtod_l+0x522>
   b9d0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9d0e:	dd22      	ble.n	b9d56 <_strtod_l+0x4ce>
   b9d10:	2500      	movs	r5, #0
   b9d12:	462e      	mov	r6, r5
   b9d14:	9507      	str	r5, [sp, #28]
   b9d16:	9505      	str	r5, [sp, #20]
   b9d18:	2322      	movs	r3, #34	; 0x22
   b9d1a:	f8df b118 	ldr.w	fp, [pc, #280]	; b9e34 <_strtod_l+0x5ac>
   b9d1e:	6023      	str	r3, [r4, #0]
   b9d20:	f04f 0a00 	mov.w	sl, #0
   b9d24:	9b07      	ldr	r3, [sp, #28]
   b9d26:	2b00      	cmp	r3, #0
   b9d28:	f43f adf2 	beq.w	b9910 <_strtod_l+0x88>
   b9d2c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d2e:	4620      	mov	r0, r4
   b9d30:	f001 f870 	bl	bae14 <_Bfree>
   b9d34:	9905      	ldr	r1, [sp, #20]
   b9d36:	4620      	mov	r0, r4
   b9d38:	f001 f86c 	bl	bae14 <_Bfree>
   b9d3c:	4631      	mov	r1, r6
   b9d3e:	4620      	mov	r0, r4
   b9d40:	f001 f868 	bl	bae14 <_Bfree>
   b9d44:	9907      	ldr	r1, [sp, #28]
   b9d46:	4620      	mov	r0, r4
   b9d48:	f001 f864 	bl	bae14 <_Bfree>
   b9d4c:	4629      	mov	r1, r5
   b9d4e:	4620      	mov	r0, r4
   b9d50:	f001 f860 	bl	bae14 <_Bfree>
   b9d54:	e5dc      	b.n	b9910 <_strtod_l+0x88>
   b9d56:	4b36      	ldr	r3, [pc, #216]	; (b9e30 <_strtod_l+0x5a8>)
   b9d58:	9304      	str	r3, [sp, #16]
   b9d5a:	2300      	movs	r3, #0
   b9d5c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9d60:	4650      	mov	r0, sl
   b9d62:	4659      	mov	r1, fp
   b9d64:	4699      	mov	r9, r3
   b9d66:	f1b8 0f01 	cmp.w	r8, #1
   b9d6a:	dc21      	bgt.n	b9db0 <_strtod_l+0x528>
   b9d6c:	b10b      	cbz	r3, b9d72 <_strtod_l+0x4ea>
   b9d6e:	4682      	mov	sl, r0
   b9d70:	468b      	mov	fp, r1
   b9d72:	4b2f      	ldr	r3, [pc, #188]	; (b9e30 <_strtod_l+0x5a8>)
   b9d74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9d78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9d7c:	4652      	mov	r2, sl
   b9d7e:	465b      	mov	r3, fp
   b9d80:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9d84:	f7ff f92c 	bl	b8fe0 <__aeabi_dmul>
   b9d88:	4b2a      	ldr	r3, [pc, #168]	; (b9e34 <_strtod_l+0x5ac>)
   b9d8a:	460a      	mov	r2, r1
   b9d8c:	400b      	ands	r3, r1
   b9d8e:	492a      	ldr	r1, [pc, #168]	; (b9e38 <_strtod_l+0x5b0>)
   b9d90:	428b      	cmp	r3, r1
   b9d92:	4682      	mov	sl, r0
   b9d94:	d8bc      	bhi.n	b9d10 <_strtod_l+0x488>
   b9d96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9d9a:	428b      	cmp	r3, r1
   b9d9c:	bf86      	itte	hi
   b9d9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9e3c <_strtod_l+0x5b4>
   b9da2:	f04f 3aff 	movhi.w	sl, #4294967295
   b9da6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9daa:	2300      	movs	r3, #0
   b9dac:	9304      	str	r3, [sp, #16]
   b9dae:	e084      	b.n	b9eba <_strtod_l+0x632>
   b9db0:	f018 0f01 	tst.w	r8, #1
   b9db4:	d005      	beq.n	b9dc2 <_strtod_l+0x53a>
   b9db6:	9b04      	ldr	r3, [sp, #16]
   b9db8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9dbc:	f7ff f910 	bl	b8fe0 <__aeabi_dmul>
   b9dc0:	2301      	movs	r3, #1
   b9dc2:	9a04      	ldr	r2, [sp, #16]
   b9dc4:	3208      	adds	r2, #8
   b9dc6:	f109 0901 	add.w	r9, r9, #1
   b9dca:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9dce:	9204      	str	r2, [sp, #16]
   b9dd0:	e7c9      	b.n	b9d66 <_strtod_l+0x4de>
   b9dd2:	d0ea      	beq.n	b9daa <_strtod_l+0x522>
   b9dd4:	f1c8 0800 	rsb	r8, r8, #0
   b9dd8:	f018 020f 	ands.w	r2, r8, #15
   b9ddc:	d00a      	beq.n	b9df4 <_strtod_l+0x56c>
   b9dde:	4b13      	ldr	r3, [pc, #76]	; (b9e2c <_strtod_l+0x5a4>)
   b9de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9de4:	4650      	mov	r0, sl
   b9de6:	4659      	mov	r1, fp
   b9de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9dec:	f7ff fa22 	bl	b9234 <__aeabi_ddiv>
   b9df0:	4682      	mov	sl, r0
   b9df2:	468b      	mov	fp, r1
   b9df4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9df8:	d0d7      	beq.n	b9daa <_strtod_l+0x522>
   b9dfa:	f1b8 0f1f 	cmp.w	r8, #31
   b9dfe:	dd1f      	ble.n	b9e40 <_strtod_l+0x5b8>
   b9e00:	2500      	movs	r5, #0
   b9e02:	462e      	mov	r6, r5
   b9e04:	9507      	str	r5, [sp, #28]
   b9e06:	9505      	str	r5, [sp, #20]
   b9e08:	2322      	movs	r3, #34	; 0x22
   b9e0a:	f04f 0a00 	mov.w	sl, #0
   b9e0e:	f04f 0b00 	mov.w	fp, #0
   b9e12:	6023      	str	r3, [r4, #0]
   b9e14:	e786      	b.n	b9d24 <_strtod_l+0x49c>
   b9e16:	bf00      	nop
   b9e18:	000bcd86 	.word	0x000bcd86
   b9e1c:	000bcda0 	.word	0x000bcda0
   b9e20:	000bcd7d 	.word	0x000bcd7d
   b9e24:	000bcd80 	.word	0x000bcd80
   b9e28:	000bcb48 	.word	0x000bcb48
   b9e2c:	000bd038 	.word	0x000bd038
   b9e30:	000bd010 	.word	0x000bd010
   b9e34:	7ff00000 	.word	0x7ff00000
   b9e38:	7ca00000 	.word	0x7ca00000
   b9e3c:	7fefffff 	.word	0x7fefffff
   b9e40:	f018 0310 	ands.w	r3, r8, #16
   b9e44:	bf18      	it	ne
   b9e46:	236a      	movne	r3, #106	; 0x6a
   b9e48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba1f8 <_strtod_l+0x970>
   b9e4c:	9304      	str	r3, [sp, #16]
   b9e4e:	4650      	mov	r0, sl
   b9e50:	4659      	mov	r1, fp
   b9e52:	2300      	movs	r3, #0
   b9e54:	f018 0f01 	tst.w	r8, #1
   b9e58:	d004      	beq.n	b9e64 <_strtod_l+0x5dc>
   b9e5a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9e5e:	f7ff f8bf 	bl	b8fe0 <__aeabi_dmul>
   b9e62:	2301      	movs	r3, #1
   b9e64:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9e68:	f109 0908 	add.w	r9, r9, #8
   b9e6c:	d1f2      	bne.n	b9e54 <_strtod_l+0x5cc>
   b9e6e:	b10b      	cbz	r3, b9e74 <_strtod_l+0x5ec>
   b9e70:	4682      	mov	sl, r0
   b9e72:	468b      	mov	fp, r1
   b9e74:	9b04      	ldr	r3, [sp, #16]
   b9e76:	b1c3      	cbz	r3, b9eaa <_strtod_l+0x622>
   b9e78:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9e7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9e80:	2b00      	cmp	r3, #0
   b9e82:	4659      	mov	r1, fp
   b9e84:	dd11      	ble.n	b9eaa <_strtod_l+0x622>
   b9e86:	2b1f      	cmp	r3, #31
   b9e88:	f340 8124 	ble.w	ba0d4 <_strtod_l+0x84c>
   b9e8c:	2b34      	cmp	r3, #52	; 0x34
   b9e8e:	bfde      	ittt	le
   b9e90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9e94:	f04f 33ff 	movle.w	r3, #4294967295
   b9e98:	fa03 f202 	lslle.w	r2, r3, r2
   b9e9c:	f04f 0a00 	mov.w	sl, #0
   b9ea0:	bfcc      	ite	gt
   b9ea2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9ea6:	ea02 0b01 	andle.w	fp, r2, r1
   b9eaa:	2200      	movs	r2, #0
   b9eac:	2300      	movs	r3, #0
   b9eae:	4650      	mov	r0, sl
   b9eb0:	4659      	mov	r1, fp
   b9eb2:	f7ff fafd 	bl	b94b0 <__aeabi_dcmpeq>
   b9eb6:	2800      	cmp	r0, #0
   b9eb8:	d1a2      	bne.n	b9e00 <_strtod_l+0x578>
   b9eba:	9b07      	ldr	r3, [sp, #28]
   b9ebc:	9300      	str	r3, [sp, #0]
   b9ebe:	9908      	ldr	r1, [sp, #32]
   b9ec0:	462b      	mov	r3, r5
   b9ec2:	463a      	mov	r2, r7
   b9ec4:	4620      	mov	r0, r4
   b9ec6:	f001 f80d 	bl	baee4 <__s2b>
   b9eca:	9007      	str	r0, [sp, #28]
   b9ecc:	2800      	cmp	r0, #0
   b9ece:	f43f af1f 	beq.w	b9d10 <_strtod_l+0x488>
   b9ed2:	9b05      	ldr	r3, [sp, #20]
   b9ed4:	1b9e      	subs	r6, r3, r6
   b9ed6:	9b06      	ldr	r3, [sp, #24]
   b9ed8:	2b00      	cmp	r3, #0
   b9eda:	bfb4      	ite	lt
   b9edc:	4633      	movlt	r3, r6
   b9ede:	2300      	movge	r3, #0
   b9ee0:	930c      	str	r3, [sp, #48]	; 0x30
   b9ee2:	9b06      	ldr	r3, [sp, #24]
   b9ee4:	2500      	movs	r5, #0
   b9ee6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9eea:	9312      	str	r3, [sp, #72]	; 0x48
   b9eec:	462e      	mov	r6, r5
   b9eee:	9b07      	ldr	r3, [sp, #28]
   b9ef0:	4620      	mov	r0, r4
   b9ef2:	6859      	ldr	r1, [r3, #4]
   b9ef4:	f000 ff4e 	bl	bad94 <_Balloc>
   b9ef8:	9005      	str	r0, [sp, #20]
   b9efa:	2800      	cmp	r0, #0
   b9efc:	f43f af0c 	beq.w	b9d18 <_strtod_l+0x490>
   b9f00:	9b07      	ldr	r3, [sp, #28]
   b9f02:	691a      	ldr	r2, [r3, #16]
   b9f04:	3202      	adds	r2, #2
   b9f06:	f103 010c 	add.w	r1, r3, #12
   b9f0a:	0092      	lsls	r2, r2, #2
   b9f0c:	300c      	adds	r0, #12
   b9f0e:	f7ff fc07 	bl	b9720 <memcpy>
   b9f12:	ec4b ab10 	vmov	d0, sl, fp
   b9f16:	aa1a      	add	r2, sp, #104	; 0x68
   b9f18:	a919      	add	r1, sp, #100	; 0x64
   b9f1a:	4620      	mov	r0, r4
   b9f1c:	f001 fb28 	bl	bb570 <__d2b>
   b9f20:	ec4b ab18 	vmov	d8, sl, fp
   b9f24:	9018      	str	r0, [sp, #96]	; 0x60
   b9f26:	2800      	cmp	r0, #0
   b9f28:	f43f aef6 	beq.w	b9d18 <_strtod_l+0x490>
   b9f2c:	2101      	movs	r1, #1
   b9f2e:	4620      	mov	r0, r4
   b9f30:	f001 f872 	bl	bb018 <__i2b>
   b9f34:	4606      	mov	r6, r0
   b9f36:	2800      	cmp	r0, #0
   b9f38:	f43f aeee 	beq.w	b9d18 <_strtod_l+0x490>
   b9f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9f3e:	9904      	ldr	r1, [sp, #16]
   b9f40:	2b00      	cmp	r3, #0
   b9f42:	bfab      	itete	ge
   b9f44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9f46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9f48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9f4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9f4e:	bfac      	ite	ge
   b9f50:	eb03 0902 	addge.w	r9, r3, r2
   b9f54:	1ad7      	sublt	r7, r2, r3
   b9f56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9f58:	eba3 0801 	sub.w	r8, r3, r1
   b9f5c:	4490      	add	r8, r2
   b9f5e:	4ba1      	ldr	r3, [pc, #644]	; (ba1e4 <_strtod_l+0x95c>)
   b9f60:	f108 38ff 	add.w	r8, r8, #4294967295
   b9f64:	4598      	cmp	r8, r3
   b9f66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9f6a:	f280 80c7 	bge.w	ba0fc <_strtod_l+0x874>
   b9f6e:	eba3 0308 	sub.w	r3, r3, r8
   b9f72:	2b1f      	cmp	r3, #31
   b9f74:	eba2 0203 	sub.w	r2, r2, r3
   b9f78:	f04f 0101 	mov.w	r1, #1
   b9f7c:	f300 80b1 	bgt.w	ba0e2 <_strtod_l+0x85a>
   b9f80:	fa01 f303 	lsl.w	r3, r1, r3
   b9f84:	930d      	str	r3, [sp, #52]	; 0x34
   b9f86:	2300      	movs	r3, #0
   b9f88:	9308      	str	r3, [sp, #32]
   b9f8a:	eb09 0802 	add.w	r8, r9, r2
   b9f8e:	9b04      	ldr	r3, [sp, #16]
   b9f90:	45c1      	cmp	r9, r8
   b9f92:	4417      	add	r7, r2
   b9f94:	441f      	add	r7, r3
   b9f96:	464b      	mov	r3, r9
   b9f98:	bfa8      	it	ge
   b9f9a:	4643      	movge	r3, r8
   b9f9c:	42bb      	cmp	r3, r7
   b9f9e:	bfa8      	it	ge
   b9fa0:	463b      	movge	r3, r7
   b9fa2:	2b00      	cmp	r3, #0
   b9fa4:	bfc2      	ittt	gt
   b9fa6:	eba8 0803 	subgt.w	r8, r8, r3
   b9faa:	1aff      	subgt	r7, r7, r3
   b9fac:	eba9 0903 	subgt.w	r9, r9, r3
   b9fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9fb2:	2b00      	cmp	r3, #0
   b9fb4:	dd17      	ble.n	b9fe6 <_strtod_l+0x75e>
   b9fb6:	4631      	mov	r1, r6
   b9fb8:	461a      	mov	r2, r3
   b9fba:	4620      	mov	r0, r4
   b9fbc:	f001 f8ec 	bl	bb198 <__pow5mult>
   b9fc0:	4606      	mov	r6, r0
   b9fc2:	2800      	cmp	r0, #0
   b9fc4:	f43f aea8 	beq.w	b9d18 <_strtod_l+0x490>
   b9fc8:	4601      	mov	r1, r0
   b9fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b9fcc:	4620      	mov	r0, r4
   b9fce:	f001 f839 	bl	bb044 <__multiply>
   b9fd2:	900b      	str	r0, [sp, #44]	; 0x2c
   b9fd4:	2800      	cmp	r0, #0
   b9fd6:	f43f ae9f 	beq.w	b9d18 <_strtod_l+0x490>
   b9fda:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9fdc:	4620      	mov	r0, r4
   b9fde:	f000 ff19 	bl	bae14 <_Bfree>
   b9fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b9fe4:	9318      	str	r3, [sp, #96]	; 0x60
   b9fe6:	f1b8 0f00 	cmp.w	r8, #0
   b9fea:	f300 808c 	bgt.w	ba106 <_strtod_l+0x87e>
   b9fee:	9b06      	ldr	r3, [sp, #24]
   b9ff0:	2b00      	cmp	r3, #0
   b9ff2:	dd08      	ble.n	ba006 <_strtod_l+0x77e>
   b9ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b9ff6:	9905      	ldr	r1, [sp, #20]
   b9ff8:	4620      	mov	r0, r4
   b9ffa:	f001 f8cd 	bl	bb198 <__pow5mult>
   b9ffe:	9005      	str	r0, [sp, #20]
   ba000:	2800      	cmp	r0, #0
   ba002:	f43f ae89 	beq.w	b9d18 <_strtod_l+0x490>
   ba006:	2f00      	cmp	r7, #0
   ba008:	dd08      	ble.n	ba01c <_strtod_l+0x794>
   ba00a:	9905      	ldr	r1, [sp, #20]
   ba00c:	463a      	mov	r2, r7
   ba00e:	4620      	mov	r0, r4
   ba010:	f001 f91c 	bl	bb24c <__lshift>
   ba014:	9005      	str	r0, [sp, #20]
   ba016:	2800      	cmp	r0, #0
   ba018:	f43f ae7e 	beq.w	b9d18 <_strtod_l+0x490>
   ba01c:	f1b9 0f00 	cmp.w	r9, #0
   ba020:	dd08      	ble.n	ba034 <_strtod_l+0x7ac>
   ba022:	4631      	mov	r1, r6
   ba024:	464a      	mov	r2, r9
   ba026:	4620      	mov	r0, r4
   ba028:	f001 f910 	bl	bb24c <__lshift>
   ba02c:	4606      	mov	r6, r0
   ba02e:	2800      	cmp	r0, #0
   ba030:	f43f ae72 	beq.w	b9d18 <_strtod_l+0x490>
   ba034:	9a05      	ldr	r2, [sp, #20]
   ba036:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba038:	4620      	mov	r0, r4
   ba03a:	f001 f993 	bl	bb364 <__mdiff>
   ba03e:	4605      	mov	r5, r0
   ba040:	2800      	cmp	r0, #0
   ba042:	f43f ae69 	beq.w	b9d18 <_strtod_l+0x490>
   ba046:	68c3      	ldr	r3, [r0, #12]
   ba048:	930b      	str	r3, [sp, #44]	; 0x2c
   ba04a:	2300      	movs	r3, #0
   ba04c:	60c3      	str	r3, [r0, #12]
   ba04e:	4631      	mov	r1, r6
   ba050:	f001 f96c 	bl	bb32c <__mcmp>
   ba054:	2800      	cmp	r0, #0
   ba056:	da60      	bge.n	ba11a <_strtod_l+0x892>
   ba058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba05a:	ea53 030a 	orrs.w	r3, r3, sl
   ba05e:	f040 8082 	bne.w	ba166 <_strtod_l+0x8de>
   ba062:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba066:	2b00      	cmp	r3, #0
   ba068:	d17d      	bne.n	ba166 <_strtod_l+0x8de>
   ba06a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba06e:	0d1b      	lsrs	r3, r3, #20
   ba070:	051b      	lsls	r3, r3, #20
   ba072:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba076:	d976      	bls.n	ba166 <_strtod_l+0x8de>
   ba078:	696b      	ldr	r3, [r5, #20]
   ba07a:	b913      	cbnz	r3, ba082 <_strtod_l+0x7fa>
   ba07c:	692b      	ldr	r3, [r5, #16]
   ba07e:	2b01      	cmp	r3, #1
   ba080:	dd71      	ble.n	ba166 <_strtod_l+0x8de>
   ba082:	4629      	mov	r1, r5
   ba084:	2201      	movs	r2, #1
   ba086:	4620      	mov	r0, r4
   ba088:	f001 f8e0 	bl	bb24c <__lshift>
   ba08c:	4631      	mov	r1, r6
   ba08e:	4605      	mov	r5, r0
   ba090:	f001 f94c 	bl	bb32c <__mcmp>
   ba094:	2800      	cmp	r0, #0
   ba096:	dd66      	ble.n	ba166 <_strtod_l+0x8de>
   ba098:	9904      	ldr	r1, [sp, #16]
   ba09a:	4a53      	ldr	r2, [pc, #332]	; (ba1e8 <_strtod_l+0x960>)
   ba09c:	465b      	mov	r3, fp
   ba09e:	2900      	cmp	r1, #0
   ba0a0:	f000 8081 	beq.w	ba1a6 <_strtod_l+0x91e>
   ba0a4:	ea02 010b 	and.w	r1, r2, fp
   ba0a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba0ac:	dc7b      	bgt.n	ba1a6 <_strtod_l+0x91e>
   ba0ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba0b2:	f77f aea9 	ble.w	b9e08 <_strtod_l+0x580>
   ba0b6:	4b4d      	ldr	r3, [pc, #308]	; (ba1ec <_strtod_l+0x964>)
   ba0b8:	4650      	mov	r0, sl
   ba0ba:	4659      	mov	r1, fp
   ba0bc:	2200      	movs	r2, #0
   ba0be:	f7fe ff8f 	bl	b8fe0 <__aeabi_dmul>
   ba0c2:	460b      	mov	r3, r1
   ba0c4:	4303      	orrs	r3, r0
   ba0c6:	bf08      	it	eq
   ba0c8:	2322      	moveq	r3, #34	; 0x22
   ba0ca:	4682      	mov	sl, r0
   ba0cc:	468b      	mov	fp, r1
   ba0ce:	bf08      	it	eq
   ba0d0:	6023      	streq	r3, [r4, #0]
   ba0d2:	e62b      	b.n	b9d2c <_strtod_l+0x4a4>
   ba0d4:	f04f 32ff 	mov.w	r2, #4294967295
   ba0d8:	fa02 f303 	lsl.w	r3, r2, r3
   ba0dc:	ea03 0a0a 	and.w	sl, r3, sl
   ba0e0:	e6e3      	b.n	b9eaa <_strtod_l+0x622>
   ba0e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba0e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba0ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba0ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba0f2:	fa01 f308 	lsl.w	r3, r1, r8
   ba0f6:	9308      	str	r3, [sp, #32]
   ba0f8:	910d      	str	r1, [sp, #52]	; 0x34
   ba0fa:	e746      	b.n	b9f8a <_strtod_l+0x702>
   ba0fc:	2300      	movs	r3, #0
   ba0fe:	9308      	str	r3, [sp, #32]
   ba100:	2301      	movs	r3, #1
   ba102:	930d      	str	r3, [sp, #52]	; 0x34
   ba104:	e741      	b.n	b9f8a <_strtod_l+0x702>
   ba106:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba108:	4642      	mov	r2, r8
   ba10a:	4620      	mov	r0, r4
   ba10c:	f001 f89e 	bl	bb24c <__lshift>
   ba110:	9018      	str	r0, [sp, #96]	; 0x60
   ba112:	2800      	cmp	r0, #0
   ba114:	f47f af6b 	bne.w	b9fee <_strtod_l+0x766>
   ba118:	e5fe      	b.n	b9d18 <_strtod_l+0x490>
   ba11a:	465f      	mov	r7, fp
   ba11c:	d16e      	bne.n	ba1fc <_strtod_l+0x974>
   ba11e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba120:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba124:	b342      	cbz	r2, ba178 <_strtod_l+0x8f0>
   ba126:	4a32      	ldr	r2, [pc, #200]	; (ba1f0 <_strtod_l+0x968>)
   ba128:	4293      	cmp	r3, r2
   ba12a:	d128      	bne.n	ba17e <_strtod_l+0x8f6>
   ba12c:	9b04      	ldr	r3, [sp, #16]
   ba12e:	4651      	mov	r1, sl
   ba130:	b1eb      	cbz	r3, ba16e <_strtod_l+0x8e6>
   ba132:	4b2d      	ldr	r3, [pc, #180]	; (ba1e8 <_strtod_l+0x960>)
   ba134:	403b      	ands	r3, r7
   ba136:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba13a:	f04f 32ff 	mov.w	r2, #4294967295
   ba13e:	d819      	bhi.n	ba174 <_strtod_l+0x8ec>
   ba140:	0d1b      	lsrs	r3, r3, #20
   ba142:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba146:	fa02 f303 	lsl.w	r3, r2, r3
   ba14a:	4299      	cmp	r1, r3
   ba14c:	d117      	bne.n	ba17e <_strtod_l+0x8f6>
   ba14e:	4b29      	ldr	r3, [pc, #164]	; (ba1f4 <_strtod_l+0x96c>)
   ba150:	429f      	cmp	r7, r3
   ba152:	d102      	bne.n	ba15a <_strtod_l+0x8d2>
   ba154:	3101      	adds	r1, #1
   ba156:	f43f addf 	beq.w	b9d18 <_strtod_l+0x490>
   ba15a:	4b23      	ldr	r3, [pc, #140]	; (ba1e8 <_strtod_l+0x960>)
   ba15c:	403b      	ands	r3, r7
   ba15e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba162:	f04f 0a00 	mov.w	sl, #0
   ba166:	9b04      	ldr	r3, [sp, #16]
   ba168:	2b00      	cmp	r3, #0
   ba16a:	d1a4      	bne.n	ba0b6 <_strtod_l+0x82e>
   ba16c:	e5de      	b.n	b9d2c <_strtod_l+0x4a4>
   ba16e:	f04f 33ff 	mov.w	r3, #4294967295
   ba172:	e7ea      	b.n	ba14a <_strtod_l+0x8c2>
   ba174:	4613      	mov	r3, r2
   ba176:	e7e8      	b.n	ba14a <_strtod_l+0x8c2>
   ba178:	ea53 030a 	orrs.w	r3, r3, sl
   ba17c:	d08c      	beq.n	ba098 <_strtod_l+0x810>
   ba17e:	9b08      	ldr	r3, [sp, #32]
   ba180:	b1db      	cbz	r3, ba1ba <_strtod_l+0x932>
   ba182:	423b      	tst	r3, r7
   ba184:	d0ef      	beq.n	ba166 <_strtod_l+0x8de>
   ba186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba188:	9a04      	ldr	r2, [sp, #16]
   ba18a:	4650      	mov	r0, sl
   ba18c:	4659      	mov	r1, fp
   ba18e:	b1c3      	cbz	r3, ba1c2 <_strtod_l+0x93a>
   ba190:	f7ff fb5d 	bl	b984e <sulp>
   ba194:	4602      	mov	r2, r0
   ba196:	460b      	mov	r3, r1
   ba198:	ec51 0b18 	vmov	r0, r1, d8
   ba19c:	f7fe fd6a 	bl	b8c74 <__adddf3>
   ba1a0:	4682      	mov	sl, r0
   ba1a2:	468b      	mov	fp, r1
   ba1a4:	e7df      	b.n	ba166 <_strtod_l+0x8de>
   ba1a6:	4013      	ands	r3, r2
   ba1a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba1ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba1b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba1b4:	f04f 3aff 	mov.w	sl, #4294967295
   ba1b8:	e7d5      	b.n	ba166 <_strtod_l+0x8de>
   ba1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba1bc:	ea13 0f0a 	tst.w	r3, sl
   ba1c0:	e7e0      	b.n	ba184 <_strtod_l+0x8fc>
   ba1c2:	f7ff fb44 	bl	b984e <sulp>
   ba1c6:	4602      	mov	r2, r0
   ba1c8:	460b      	mov	r3, r1
   ba1ca:	ec51 0b18 	vmov	r0, r1, d8
   ba1ce:	f7fe fd4f 	bl	b8c70 <__aeabi_dsub>
   ba1d2:	2200      	movs	r2, #0
   ba1d4:	2300      	movs	r3, #0
   ba1d6:	4682      	mov	sl, r0
   ba1d8:	468b      	mov	fp, r1
   ba1da:	f7ff f969 	bl	b94b0 <__aeabi_dcmpeq>
   ba1de:	2800      	cmp	r0, #0
   ba1e0:	d0c1      	beq.n	ba166 <_strtod_l+0x8de>
   ba1e2:	e611      	b.n	b9e08 <_strtod_l+0x580>
   ba1e4:	fffffc02 	.word	0xfffffc02
   ba1e8:	7ff00000 	.word	0x7ff00000
   ba1ec:	39500000 	.word	0x39500000
   ba1f0:	000fffff 	.word	0x000fffff
   ba1f4:	7fefffff 	.word	0x7fefffff
   ba1f8:	000bcdb8 	.word	0x000bcdb8
   ba1fc:	4631      	mov	r1, r6
   ba1fe:	4628      	mov	r0, r5
   ba200:	f001 fa12 	bl	bb628 <__ratio>
   ba204:	ec59 8b10 	vmov	r8, r9, d0
   ba208:	ee10 0a10 	vmov	r0, s0
   ba20c:	2200      	movs	r2, #0
   ba20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba212:	4649      	mov	r1, r9
   ba214:	f7ff f960 	bl	b94d8 <__aeabi_dcmple>
   ba218:	2800      	cmp	r0, #0
   ba21a:	d07a      	beq.n	ba312 <_strtod_l+0xa8a>
   ba21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba21e:	2b00      	cmp	r3, #0
   ba220:	d04a      	beq.n	ba2b8 <_strtod_l+0xa30>
   ba222:	4b95      	ldr	r3, [pc, #596]	; (ba478 <_strtod_l+0xbf0>)
   ba224:	2200      	movs	r2, #0
   ba226:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba22a:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba478 <_strtod_l+0xbf0>
   ba22e:	f04f 0800 	mov.w	r8, #0
   ba232:	4b92      	ldr	r3, [pc, #584]	; (ba47c <_strtod_l+0xbf4>)
   ba234:	403b      	ands	r3, r7
   ba236:	930d      	str	r3, [sp, #52]	; 0x34
   ba238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba23a:	4b91      	ldr	r3, [pc, #580]	; (ba480 <_strtod_l+0xbf8>)
   ba23c:	429a      	cmp	r2, r3
   ba23e:	f040 80b0 	bne.w	ba3a2 <_strtod_l+0xb1a>
   ba242:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba246:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba24a:	ec4b ab10 	vmov	d0, sl, fp
   ba24e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba252:	f001 f911 	bl	bb478 <__ulp>
   ba256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba25a:	ec53 2b10 	vmov	r2, r3, d0
   ba25e:	f7fe febf 	bl	b8fe0 <__aeabi_dmul>
   ba262:	4652      	mov	r2, sl
   ba264:	465b      	mov	r3, fp
   ba266:	f7fe fd05 	bl	b8c74 <__adddf3>
   ba26a:	460b      	mov	r3, r1
   ba26c:	4983      	ldr	r1, [pc, #524]	; (ba47c <_strtod_l+0xbf4>)
   ba26e:	4a85      	ldr	r2, [pc, #532]	; (ba484 <_strtod_l+0xbfc>)
   ba270:	4019      	ands	r1, r3
   ba272:	4291      	cmp	r1, r2
   ba274:	4682      	mov	sl, r0
   ba276:	d960      	bls.n	ba33a <_strtod_l+0xab2>
   ba278:	ee18 3a90 	vmov	r3, s17
   ba27c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba280:	4293      	cmp	r3, r2
   ba282:	d104      	bne.n	ba28e <_strtod_l+0xa06>
   ba284:	ee18 3a10 	vmov	r3, s16
   ba288:	3301      	adds	r3, #1
   ba28a:	f43f ad45 	beq.w	b9d18 <_strtod_l+0x490>
   ba28e:	f8df b200 	ldr.w	fp, [pc, #512]	; ba490 <_strtod_l+0xc08>
   ba292:	f04f 3aff 	mov.w	sl, #4294967295
   ba296:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba298:	4620      	mov	r0, r4
   ba29a:	f000 fdbb 	bl	bae14 <_Bfree>
   ba29e:	9905      	ldr	r1, [sp, #20]
   ba2a0:	4620      	mov	r0, r4
   ba2a2:	f000 fdb7 	bl	bae14 <_Bfree>
   ba2a6:	4631      	mov	r1, r6
   ba2a8:	4620      	mov	r0, r4
   ba2aa:	f000 fdb3 	bl	bae14 <_Bfree>
   ba2ae:	4629      	mov	r1, r5
   ba2b0:	4620      	mov	r0, r4
   ba2b2:	f000 fdaf 	bl	bae14 <_Bfree>
   ba2b6:	e61a      	b.n	b9eee <_strtod_l+0x666>
   ba2b8:	f1ba 0f00 	cmp.w	sl, #0
   ba2bc:	d11b      	bne.n	ba2f6 <_strtod_l+0xa6e>
   ba2be:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba2c2:	b9f3      	cbnz	r3, ba302 <_strtod_l+0xa7a>
   ba2c4:	4b6c      	ldr	r3, [pc, #432]	; (ba478 <_strtod_l+0xbf0>)
   ba2c6:	2200      	movs	r2, #0
   ba2c8:	4640      	mov	r0, r8
   ba2ca:	4649      	mov	r1, r9
   ba2cc:	f7ff f8fa 	bl	b94c4 <__aeabi_dcmplt>
   ba2d0:	b9d0      	cbnz	r0, ba308 <_strtod_l+0xa80>
   ba2d2:	4640      	mov	r0, r8
   ba2d4:	4649      	mov	r1, r9
   ba2d6:	4b6c      	ldr	r3, [pc, #432]	; (ba488 <_strtod_l+0xc00>)
   ba2d8:	2200      	movs	r2, #0
   ba2da:	f7fe fe81 	bl	b8fe0 <__aeabi_dmul>
   ba2de:	4680      	mov	r8, r0
   ba2e0:	4689      	mov	r9, r1
   ba2e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba2e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba2ea:	9315      	str	r3, [sp, #84]	; 0x54
   ba2ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba2f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba2f4:	e79d      	b.n	ba232 <_strtod_l+0x9aa>
   ba2f6:	f1ba 0f01 	cmp.w	sl, #1
   ba2fa:	d102      	bne.n	ba302 <_strtod_l+0xa7a>
   ba2fc:	2f00      	cmp	r7, #0
   ba2fe:	f43f ad83 	beq.w	b9e08 <_strtod_l+0x580>
   ba302:	4b62      	ldr	r3, [pc, #392]	; (ba48c <_strtod_l+0xc04>)
   ba304:	2200      	movs	r2, #0
   ba306:	e78e      	b.n	ba226 <_strtod_l+0x99e>
   ba308:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba488 <_strtod_l+0xc00>
   ba30c:	f04f 0800 	mov.w	r8, #0
   ba310:	e7e7      	b.n	ba2e2 <_strtod_l+0xa5a>
   ba312:	4b5d      	ldr	r3, [pc, #372]	; (ba488 <_strtod_l+0xc00>)
   ba314:	4640      	mov	r0, r8
   ba316:	4649      	mov	r1, r9
   ba318:	2200      	movs	r2, #0
   ba31a:	f7fe fe61 	bl	b8fe0 <__aeabi_dmul>
   ba31e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba320:	4680      	mov	r8, r0
   ba322:	4689      	mov	r9, r1
   ba324:	b933      	cbnz	r3, ba334 <_strtod_l+0xaac>
   ba326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba32a:	900e      	str	r0, [sp, #56]	; 0x38
   ba32c:	930f      	str	r3, [sp, #60]	; 0x3c
   ba32e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba332:	e7dd      	b.n	ba2f0 <_strtod_l+0xa68>
   ba334:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba338:	e7f9      	b.n	ba32e <_strtod_l+0xaa6>
   ba33a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba33e:	9b04      	ldr	r3, [sp, #16]
   ba340:	2b00      	cmp	r3, #0
   ba342:	d1a8      	bne.n	ba296 <_strtod_l+0xa0e>
   ba344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba34a:	0d1b      	lsrs	r3, r3, #20
   ba34c:	051b      	lsls	r3, r3, #20
   ba34e:	429a      	cmp	r2, r3
   ba350:	d1a1      	bne.n	ba296 <_strtod_l+0xa0e>
   ba352:	4640      	mov	r0, r8
   ba354:	4649      	mov	r1, r9
   ba356:	f001 fa05 	bl	bb764 <__aeabi_d2lz>
   ba35a:	f7fe fe13 	bl	b8f84 <__aeabi_l2d>
   ba35e:	4602      	mov	r2, r0
   ba360:	460b      	mov	r3, r1
   ba362:	4640      	mov	r0, r8
   ba364:	4649      	mov	r1, r9
   ba366:	f7fe fc83 	bl	b8c70 <__aeabi_dsub>
   ba36a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba36c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba370:	ea43 030a 	orr.w	r3, r3, sl
   ba374:	4313      	orrs	r3, r2
   ba376:	4680      	mov	r8, r0
   ba378:	4689      	mov	r9, r1
   ba37a:	d055      	beq.n	ba428 <_strtod_l+0xba0>
   ba37c:	a336      	add	r3, pc, #216	; (adr r3, ba458 <_strtod_l+0xbd0>)
   ba37e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba382:	f7ff f89f 	bl	b94c4 <__aeabi_dcmplt>
   ba386:	2800      	cmp	r0, #0
   ba388:	f47f acd0 	bne.w	b9d2c <_strtod_l+0x4a4>
   ba38c:	a334      	add	r3, pc, #208	; (adr r3, ba460 <_strtod_l+0xbd8>)
   ba38e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba392:	4640      	mov	r0, r8
   ba394:	4649      	mov	r1, r9
   ba396:	f7ff f8b3 	bl	b9500 <__aeabi_dcmpgt>
   ba39a:	2800      	cmp	r0, #0
   ba39c:	f43f af7b 	beq.w	ba296 <_strtod_l+0xa0e>
   ba3a0:	e4c4      	b.n	b9d2c <_strtod_l+0x4a4>
   ba3a2:	9b04      	ldr	r3, [sp, #16]
   ba3a4:	b333      	cbz	r3, ba3f4 <_strtod_l+0xb6c>
   ba3a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba3a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba3ac:	d822      	bhi.n	ba3f4 <_strtod_l+0xb6c>
   ba3ae:	a32e      	add	r3, pc, #184	; (adr r3, ba468 <_strtod_l+0xbe0>)
   ba3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3b4:	4640      	mov	r0, r8
   ba3b6:	4649      	mov	r1, r9
   ba3b8:	f7ff f88e 	bl	b94d8 <__aeabi_dcmple>
   ba3bc:	b1a0      	cbz	r0, ba3e8 <_strtod_l+0xb60>
   ba3be:	4649      	mov	r1, r9
   ba3c0:	4640      	mov	r0, r8
   ba3c2:	f7ff f8a7 	bl	b9514 <__aeabi_d2uiz>
   ba3c6:	2801      	cmp	r0, #1
   ba3c8:	bf38      	it	cc
   ba3ca:	2001      	movcc	r0, #1
   ba3cc:	f7fe fd8e 	bl	b8eec <__aeabi_ui2d>
   ba3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba3d2:	4680      	mov	r8, r0
   ba3d4:	4689      	mov	r9, r1
   ba3d6:	bb23      	cbnz	r3, ba422 <_strtod_l+0xb9a>
   ba3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba3dc:	9010      	str	r0, [sp, #64]	; 0x40
   ba3de:	9311      	str	r3, [sp, #68]	; 0x44
   ba3e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba3e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba3ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba3f0:	1a9b      	subs	r3, r3, r2
   ba3f2:	9309      	str	r3, [sp, #36]	; 0x24
   ba3f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba3f8:	eeb0 0a48 	vmov.f32	s0, s16
   ba3fc:	eef0 0a68 	vmov.f32	s1, s17
   ba400:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba404:	f001 f838 	bl	bb478 <__ulp>
   ba408:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba40c:	ec53 2b10 	vmov	r2, r3, d0
   ba410:	f7fe fde6 	bl	b8fe0 <__aeabi_dmul>
   ba414:	ec53 2b18 	vmov	r2, r3, d8
   ba418:	f7fe fc2c 	bl	b8c74 <__adddf3>
   ba41c:	4682      	mov	sl, r0
   ba41e:	468b      	mov	fp, r1
   ba420:	e78d      	b.n	ba33e <_strtod_l+0xab6>
   ba422:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba426:	e7db      	b.n	ba3e0 <_strtod_l+0xb58>
   ba428:	a311      	add	r3, pc, #68	; (adr r3, ba470 <_strtod_l+0xbe8>)
   ba42a:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba42e:	f7ff f849 	bl	b94c4 <__aeabi_dcmplt>
   ba432:	e7b2      	b.n	ba39a <_strtod_l+0xb12>
   ba434:	2300      	movs	r3, #0
   ba436:	930a      	str	r3, [sp, #40]	; 0x28
   ba438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba43a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba43c:	6013      	str	r3, [r2, #0]
   ba43e:	f7ff ba6b 	b.w	b9918 <_strtod_l+0x90>
   ba442:	2a65      	cmp	r2, #101	; 0x65
   ba444:	f43f ab5f 	beq.w	b9b06 <_strtod_l+0x27e>
   ba448:	2a45      	cmp	r2, #69	; 0x45
   ba44a:	f43f ab5c 	beq.w	b9b06 <_strtod_l+0x27e>
   ba44e:	2301      	movs	r3, #1
   ba450:	f7ff bb94 	b.w	b9b7c <_strtod_l+0x2f4>
   ba454:	f3af 8000 	nop.w
   ba458:	94a03595 	.word	0x94a03595
   ba45c:	3fdfffff 	.word	0x3fdfffff
   ba460:	35afe535 	.word	0x35afe535
   ba464:	3fe00000 	.word	0x3fe00000
   ba468:	ffc00000 	.word	0xffc00000
   ba46c:	41dfffff 	.word	0x41dfffff
   ba470:	94a03595 	.word	0x94a03595
   ba474:	3fcfffff 	.word	0x3fcfffff
   ba478:	3ff00000 	.word	0x3ff00000
   ba47c:	7ff00000 	.word	0x7ff00000
   ba480:	7fe00000 	.word	0x7fe00000
   ba484:	7c9fffff 	.word	0x7c9fffff
   ba488:	3fe00000 	.word	0x3fe00000
   ba48c:	bff00000 	.word	0xbff00000
   ba490:	7fefffff 	.word	0x7fefffff

000ba494 <strtod>:
   ba494:	460a      	mov	r2, r1
   ba496:	4601      	mov	r1, r0
   ba498:	4802      	ldr	r0, [pc, #8]	; (ba4a4 <strtod+0x10>)
   ba49a:	4b03      	ldr	r3, [pc, #12]	; (ba4a8 <strtod+0x14>)
   ba49c:	6800      	ldr	r0, [r0, #0]
   ba49e:	f7ff b9f3 	b.w	b9888 <_strtod_l>
   ba4a2:	bf00      	nop
   ba4a4:	2003e0cc 	.word	0x2003e0cc
   ba4a8:	2003e138 	.word	0x2003e138

000ba4ac <_strtol_l.constprop.0>:
   ba4ac:	2b01      	cmp	r3, #1
   ba4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba4b2:	d001      	beq.n	ba4b8 <_strtol_l.constprop.0+0xc>
   ba4b4:	2b24      	cmp	r3, #36	; 0x24
   ba4b6:	d906      	bls.n	ba4c6 <_strtol_l.constprop.0+0x1a>
   ba4b8:	f7fc fe00 	bl	b70bc <__errno>
   ba4bc:	2316      	movs	r3, #22
   ba4be:	6003      	str	r3, [r0, #0]
   ba4c0:	2000      	movs	r0, #0
   ba4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba4c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba5ac <_strtol_l.constprop.0+0x100>
   ba4ca:	460d      	mov	r5, r1
   ba4cc:	462e      	mov	r6, r5
   ba4ce:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba4d2:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba4d6:	f017 0708 	ands.w	r7, r7, #8
   ba4da:	d1f7      	bne.n	ba4cc <_strtol_l.constprop.0+0x20>
   ba4dc:	2c2d      	cmp	r4, #45	; 0x2d
   ba4de:	d132      	bne.n	ba546 <_strtol_l.constprop.0+0x9a>
   ba4e0:	782c      	ldrb	r4, [r5, #0]
   ba4e2:	2701      	movs	r7, #1
   ba4e4:	1cb5      	adds	r5, r6, #2
   ba4e6:	2b00      	cmp	r3, #0
   ba4e8:	d05b      	beq.n	ba5a2 <_strtol_l.constprop.0+0xf6>
   ba4ea:	2b10      	cmp	r3, #16
   ba4ec:	d109      	bne.n	ba502 <_strtol_l.constprop.0+0x56>
   ba4ee:	2c30      	cmp	r4, #48	; 0x30
   ba4f0:	d107      	bne.n	ba502 <_strtol_l.constprop.0+0x56>
   ba4f2:	782c      	ldrb	r4, [r5, #0]
   ba4f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba4f8:	2c58      	cmp	r4, #88	; 0x58
   ba4fa:	d14d      	bne.n	ba598 <_strtol_l.constprop.0+0xec>
   ba4fc:	786c      	ldrb	r4, [r5, #1]
   ba4fe:	2310      	movs	r3, #16
   ba500:	3502      	adds	r5, #2
   ba502:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba506:	f108 38ff 	add.w	r8, r8, #4294967295
   ba50a:	f04f 0c00 	mov.w	ip, #0
   ba50e:	fbb8 f9f3 	udiv	r9, r8, r3
   ba512:	4666      	mov	r6, ip
   ba514:	fb03 8a19 	mls	sl, r3, r9, r8
   ba518:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba51c:	f1be 0f09 	cmp.w	lr, #9
   ba520:	d816      	bhi.n	ba550 <_strtol_l.constprop.0+0xa4>
   ba522:	4674      	mov	r4, lr
   ba524:	42a3      	cmp	r3, r4
   ba526:	dd24      	ble.n	ba572 <_strtol_l.constprop.0+0xc6>
   ba528:	f1bc 0f00 	cmp.w	ip, #0
   ba52c:	db1e      	blt.n	ba56c <_strtol_l.constprop.0+0xc0>
   ba52e:	45b1      	cmp	r9, r6
   ba530:	d31c      	bcc.n	ba56c <_strtol_l.constprop.0+0xc0>
   ba532:	d101      	bne.n	ba538 <_strtol_l.constprop.0+0x8c>
   ba534:	45a2      	cmp	sl, r4
   ba536:	db19      	blt.n	ba56c <_strtol_l.constprop.0+0xc0>
   ba538:	fb06 4603 	mla	r6, r6, r3, r4
   ba53c:	f04f 0c01 	mov.w	ip, #1
   ba540:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba544:	e7e8      	b.n	ba518 <_strtol_l.constprop.0+0x6c>
   ba546:	2c2b      	cmp	r4, #43	; 0x2b
   ba548:	bf04      	itt	eq
   ba54a:	782c      	ldrbeq	r4, [r5, #0]
   ba54c:	1cb5      	addeq	r5, r6, #2
   ba54e:	e7ca      	b.n	ba4e6 <_strtol_l.constprop.0+0x3a>
   ba550:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba554:	f1be 0f19 	cmp.w	lr, #25
   ba558:	d801      	bhi.n	ba55e <_strtol_l.constprop.0+0xb2>
   ba55a:	3c37      	subs	r4, #55	; 0x37
   ba55c:	e7e2      	b.n	ba524 <_strtol_l.constprop.0+0x78>
   ba55e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba562:	f1be 0f19 	cmp.w	lr, #25
   ba566:	d804      	bhi.n	ba572 <_strtol_l.constprop.0+0xc6>
   ba568:	3c57      	subs	r4, #87	; 0x57
   ba56a:	e7db      	b.n	ba524 <_strtol_l.constprop.0+0x78>
   ba56c:	f04f 3cff 	mov.w	ip, #4294967295
   ba570:	e7e6      	b.n	ba540 <_strtol_l.constprop.0+0x94>
   ba572:	f1bc 0f00 	cmp.w	ip, #0
   ba576:	da05      	bge.n	ba584 <_strtol_l.constprop.0+0xd8>
   ba578:	2322      	movs	r3, #34	; 0x22
   ba57a:	6003      	str	r3, [r0, #0]
   ba57c:	4646      	mov	r6, r8
   ba57e:	b942      	cbnz	r2, ba592 <_strtol_l.constprop.0+0xe6>
   ba580:	4630      	mov	r0, r6
   ba582:	e79e      	b.n	ba4c2 <_strtol_l.constprop.0+0x16>
   ba584:	b107      	cbz	r7, ba588 <_strtol_l.constprop.0+0xdc>
   ba586:	4276      	negs	r6, r6
   ba588:	2a00      	cmp	r2, #0
   ba58a:	d0f9      	beq.n	ba580 <_strtol_l.constprop.0+0xd4>
   ba58c:	f1bc 0f00 	cmp.w	ip, #0
   ba590:	d000      	beq.n	ba594 <_strtol_l.constprop.0+0xe8>
   ba592:	1e69      	subs	r1, r5, #1
   ba594:	6011      	str	r1, [r2, #0]
   ba596:	e7f3      	b.n	ba580 <_strtol_l.constprop.0+0xd4>
   ba598:	2430      	movs	r4, #48	; 0x30
   ba59a:	2b00      	cmp	r3, #0
   ba59c:	d1b1      	bne.n	ba502 <_strtol_l.constprop.0+0x56>
   ba59e:	2308      	movs	r3, #8
   ba5a0:	e7af      	b.n	ba502 <_strtol_l.constprop.0+0x56>
   ba5a2:	2c30      	cmp	r4, #48	; 0x30
   ba5a4:	d0a5      	beq.n	ba4f2 <_strtol_l.constprop.0+0x46>
   ba5a6:	230a      	movs	r3, #10
   ba5a8:	e7ab      	b.n	ba502 <_strtol_l.constprop.0+0x56>
   ba5aa:	bf00      	nop
   ba5ac:	000bcde1 	.word	0x000bcde1

000ba5b0 <strtol>:
   ba5b0:	4613      	mov	r3, r2
   ba5b2:	460a      	mov	r2, r1
   ba5b4:	4601      	mov	r1, r0
   ba5b6:	4802      	ldr	r0, [pc, #8]	; (ba5c0 <strtol+0x10>)
   ba5b8:	6800      	ldr	r0, [r0, #0]
   ba5ba:	f7ff bf77 	b.w	ba4ac <_strtol_l.constprop.0>
   ba5be:	bf00      	nop
   ba5c0:	2003e0cc 	.word	0x2003e0cc

000ba5c4 <__register_exitproc>:
   ba5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba5c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba684 <__register_exitproc+0xc0>
   ba5cc:	4606      	mov	r6, r0
   ba5ce:	f8d8 0000 	ldr.w	r0, [r8]
   ba5d2:	461f      	mov	r7, r3
   ba5d4:	460d      	mov	r5, r1
   ba5d6:	4691      	mov	r9, r2
   ba5d8:	f000 fbc6 	bl	bad68 <__retarget_lock_acquire_recursive>
   ba5dc:	4b25      	ldr	r3, [pc, #148]	; (ba674 <__register_exitproc+0xb0>)
   ba5de:	681c      	ldr	r4, [r3, #0]
   ba5e0:	b934      	cbnz	r4, ba5f0 <__register_exitproc+0x2c>
   ba5e2:	4c25      	ldr	r4, [pc, #148]	; (ba678 <__register_exitproc+0xb4>)
   ba5e4:	601c      	str	r4, [r3, #0]
   ba5e6:	4b25      	ldr	r3, [pc, #148]	; (ba67c <__register_exitproc+0xb8>)
   ba5e8:	b113      	cbz	r3, ba5f0 <__register_exitproc+0x2c>
   ba5ea:	681b      	ldr	r3, [r3, #0]
   ba5ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba5f0:	6863      	ldr	r3, [r4, #4]
   ba5f2:	2b1f      	cmp	r3, #31
   ba5f4:	dd07      	ble.n	ba606 <__register_exitproc+0x42>
   ba5f6:	f8d8 0000 	ldr.w	r0, [r8]
   ba5fa:	f000 fbb7 	bl	bad6c <__retarget_lock_release_recursive>
   ba5fe:	f04f 30ff 	mov.w	r0, #4294967295
   ba602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba606:	b34e      	cbz	r6, ba65c <__register_exitproc+0x98>
   ba608:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba60c:	b988      	cbnz	r0, ba632 <__register_exitproc+0x6e>
   ba60e:	4b1c      	ldr	r3, [pc, #112]	; (ba680 <__register_exitproc+0xbc>)
   ba610:	b923      	cbnz	r3, ba61c <__register_exitproc+0x58>
   ba612:	f8d8 0000 	ldr.w	r0, [r8]
   ba616:	f000 fba8 	bl	bad6a <__retarget_lock_release>
   ba61a:	e7f0      	b.n	ba5fe <__register_exitproc+0x3a>
   ba61c:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba620:	f7fc fd14 	bl	b704c <malloc>
   ba624:	2800      	cmp	r0, #0
   ba626:	d0f4      	beq.n	ba612 <__register_exitproc+0x4e>
   ba628:	2300      	movs	r3, #0
   ba62a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba62e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba632:	6863      	ldr	r3, [r4, #4]
   ba634:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba638:	2201      	movs	r2, #1
   ba63a:	409a      	lsls	r2, r3
   ba63c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba640:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba644:	4313      	orrs	r3, r2
   ba646:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba64a:	2e02      	cmp	r6, #2
   ba64c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba650:	bf02      	ittt	eq
   ba652:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba656:	4313      	orreq	r3, r2
   ba658:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba65c:	6863      	ldr	r3, [r4, #4]
   ba65e:	f8d8 0000 	ldr.w	r0, [r8]
   ba662:	1c5a      	adds	r2, r3, #1
   ba664:	3302      	adds	r3, #2
   ba666:	6062      	str	r2, [r4, #4]
   ba668:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba66c:	f000 fb7e 	bl	bad6c <__retarget_lock_release_recursive>
   ba670:	2000      	movs	r0, #0
   ba672:	e7c6      	b.n	ba602 <__register_exitproc+0x3e>
   ba674:	2003e7ec 	.word	0x2003e7ec
   ba678:	2003e760 	.word	0x2003e760
   ba67c:	00000000 	.word	0x00000000
   ba680:	000b704d 	.word	0x000b704d
   ba684:	2003e130 	.word	0x2003e130

000ba688 <rshift>:
   ba688:	6903      	ldr	r3, [r0, #16]
   ba68a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba68e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba692:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba696:	f100 0414 	add.w	r4, r0, #20
   ba69a:	dd45      	ble.n	ba728 <rshift+0xa0>
   ba69c:	f011 011f 	ands.w	r1, r1, #31
   ba6a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba6a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba6a8:	d10c      	bne.n	ba6c4 <rshift+0x3c>
   ba6aa:	f100 0710 	add.w	r7, r0, #16
   ba6ae:	4629      	mov	r1, r5
   ba6b0:	42b1      	cmp	r1, r6
   ba6b2:	d334      	bcc.n	ba71e <rshift+0x96>
   ba6b4:	1a9b      	subs	r3, r3, r2
   ba6b6:	009b      	lsls	r3, r3, #2
   ba6b8:	1eea      	subs	r2, r5, #3
   ba6ba:	4296      	cmp	r6, r2
   ba6bc:	bf38      	it	cc
   ba6be:	2300      	movcc	r3, #0
   ba6c0:	4423      	add	r3, r4
   ba6c2:	e015      	b.n	ba6f0 <rshift+0x68>
   ba6c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba6c8:	f1c1 0820 	rsb	r8, r1, #32
   ba6cc:	40cf      	lsrs	r7, r1
   ba6ce:	f105 0e04 	add.w	lr, r5, #4
   ba6d2:	46a1      	mov	r9, r4
   ba6d4:	4576      	cmp	r6, lr
   ba6d6:	46f4      	mov	ip, lr
   ba6d8:	d815      	bhi.n	ba706 <rshift+0x7e>
   ba6da:	1a9a      	subs	r2, r3, r2
   ba6dc:	0092      	lsls	r2, r2, #2
   ba6de:	3a04      	subs	r2, #4
   ba6e0:	3501      	adds	r5, #1
   ba6e2:	42ae      	cmp	r6, r5
   ba6e4:	bf38      	it	cc
   ba6e6:	2200      	movcc	r2, #0
   ba6e8:	18a3      	adds	r3, r4, r2
   ba6ea:	50a7      	str	r7, [r4, r2]
   ba6ec:	b107      	cbz	r7, ba6f0 <rshift+0x68>
   ba6ee:	3304      	adds	r3, #4
   ba6f0:	1b1a      	subs	r2, r3, r4
   ba6f2:	42a3      	cmp	r3, r4
   ba6f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba6f8:	bf08      	it	eq
   ba6fa:	2300      	moveq	r3, #0
   ba6fc:	6102      	str	r2, [r0, #16]
   ba6fe:	bf08      	it	eq
   ba700:	6143      	streq	r3, [r0, #20]
   ba702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba706:	f8dc c000 	ldr.w	ip, [ip]
   ba70a:	fa0c fc08 	lsl.w	ip, ip, r8
   ba70e:	ea4c 0707 	orr.w	r7, ip, r7
   ba712:	f849 7b04 	str.w	r7, [r9], #4
   ba716:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba71a:	40cf      	lsrs	r7, r1
   ba71c:	e7da      	b.n	ba6d4 <rshift+0x4c>
   ba71e:	f851 cb04 	ldr.w	ip, [r1], #4
   ba722:	f847 cf04 	str.w	ip, [r7, #4]!
   ba726:	e7c3      	b.n	ba6b0 <rshift+0x28>
   ba728:	4623      	mov	r3, r4
   ba72a:	e7e1      	b.n	ba6f0 <rshift+0x68>

000ba72c <__hexdig_fun>:
   ba72c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba730:	2b09      	cmp	r3, #9
   ba732:	d802      	bhi.n	ba73a <__hexdig_fun+0xe>
   ba734:	3820      	subs	r0, #32
   ba736:	b2c0      	uxtb	r0, r0
   ba738:	4770      	bx	lr
   ba73a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba73e:	2b05      	cmp	r3, #5
   ba740:	d801      	bhi.n	ba746 <__hexdig_fun+0x1a>
   ba742:	3847      	subs	r0, #71	; 0x47
   ba744:	e7f7      	b.n	ba736 <__hexdig_fun+0xa>
   ba746:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba74a:	2b05      	cmp	r3, #5
   ba74c:	d801      	bhi.n	ba752 <__hexdig_fun+0x26>
   ba74e:	3827      	subs	r0, #39	; 0x27
   ba750:	e7f1      	b.n	ba736 <__hexdig_fun+0xa>
   ba752:	2000      	movs	r0, #0
   ba754:	4770      	bx	lr
	...

000ba758 <__gethex>:
   ba758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba75c:	ed2d 8b02 	vpush	{d8}
   ba760:	b089      	sub	sp, #36	; 0x24
   ba762:	ee08 0a10 	vmov	s16, r0
   ba766:	9304      	str	r3, [sp, #16]
   ba768:	4bb4      	ldr	r3, [pc, #720]	; (baa3c <__gethex+0x2e4>)
   ba76a:	681b      	ldr	r3, [r3, #0]
   ba76c:	9301      	str	r3, [sp, #4]
   ba76e:	4618      	mov	r0, r3
   ba770:	468b      	mov	fp, r1
   ba772:	4690      	mov	r8, r2
   ba774:	f7ff f83c 	bl	b97f0 <strlen>
   ba778:	9b01      	ldr	r3, [sp, #4]
   ba77a:	f8db 2000 	ldr.w	r2, [fp]
   ba77e:	4403      	add	r3, r0
   ba780:	4682      	mov	sl, r0
   ba782:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba786:	9305      	str	r3, [sp, #20]
   ba788:	1c93      	adds	r3, r2, #2
   ba78a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba78e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba792:	32fe      	adds	r2, #254	; 0xfe
   ba794:	18d1      	adds	r1, r2, r3
   ba796:	461f      	mov	r7, r3
   ba798:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba79c:	9100      	str	r1, [sp, #0]
   ba79e:	2830      	cmp	r0, #48	; 0x30
   ba7a0:	d0f8      	beq.n	ba794 <__gethex+0x3c>
   ba7a2:	f7ff ffc3 	bl	ba72c <__hexdig_fun>
   ba7a6:	4604      	mov	r4, r0
   ba7a8:	2800      	cmp	r0, #0
   ba7aa:	d13a      	bne.n	ba822 <__gethex+0xca>
   ba7ac:	9901      	ldr	r1, [sp, #4]
   ba7ae:	4652      	mov	r2, sl
   ba7b0:	4638      	mov	r0, r7
   ba7b2:	f7ff f825 	bl	b9800 <strncmp>
   ba7b6:	4605      	mov	r5, r0
   ba7b8:	2800      	cmp	r0, #0
   ba7ba:	d168      	bne.n	ba88e <__gethex+0x136>
   ba7bc:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba7c0:	eb07 060a 	add.w	r6, r7, sl
   ba7c4:	f7ff ffb2 	bl	ba72c <__hexdig_fun>
   ba7c8:	2800      	cmp	r0, #0
   ba7ca:	d062      	beq.n	ba892 <__gethex+0x13a>
   ba7cc:	4633      	mov	r3, r6
   ba7ce:	7818      	ldrb	r0, [r3, #0]
   ba7d0:	2830      	cmp	r0, #48	; 0x30
   ba7d2:	461f      	mov	r7, r3
   ba7d4:	f103 0301 	add.w	r3, r3, #1
   ba7d8:	d0f9      	beq.n	ba7ce <__gethex+0x76>
   ba7da:	f7ff ffa7 	bl	ba72c <__hexdig_fun>
   ba7de:	2301      	movs	r3, #1
   ba7e0:	fab0 f480 	clz	r4, r0
   ba7e4:	0964      	lsrs	r4, r4, #5
   ba7e6:	4635      	mov	r5, r6
   ba7e8:	9300      	str	r3, [sp, #0]
   ba7ea:	463a      	mov	r2, r7
   ba7ec:	4616      	mov	r6, r2
   ba7ee:	3201      	adds	r2, #1
   ba7f0:	7830      	ldrb	r0, [r6, #0]
   ba7f2:	f7ff ff9b 	bl	ba72c <__hexdig_fun>
   ba7f6:	2800      	cmp	r0, #0
   ba7f8:	d1f8      	bne.n	ba7ec <__gethex+0x94>
   ba7fa:	9901      	ldr	r1, [sp, #4]
   ba7fc:	4652      	mov	r2, sl
   ba7fe:	4630      	mov	r0, r6
   ba800:	f7fe fffe 	bl	b9800 <strncmp>
   ba804:	b980      	cbnz	r0, ba828 <__gethex+0xd0>
   ba806:	b94d      	cbnz	r5, ba81c <__gethex+0xc4>
   ba808:	eb06 050a 	add.w	r5, r6, sl
   ba80c:	462a      	mov	r2, r5
   ba80e:	4616      	mov	r6, r2
   ba810:	3201      	adds	r2, #1
   ba812:	7830      	ldrb	r0, [r6, #0]
   ba814:	f7ff ff8a 	bl	ba72c <__hexdig_fun>
   ba818:	2800      	cmp	r0, #0
   ba81a:	d1f8      	bne.n	ba80e <__gethex+0xb6>
   ba81c:	1bad      	subs	r5, r5, r6
   ba81e:	00ad      	lsls	r5, r5, #2
   ba820:	e004      	b.n	ba82c <__gethex+0xd4>
   ba822:	2400      	movs	r4, #0
   ba824:	4625      	mov	r5, r4
   ba826:	e7e0      	b.n	ba7ea <__gethex+0x92>
   ba828:	2d00      	cmp	r5, #0
   ba82a:	d1f7      	bne.n	ba81c <__gethex+0xc4>
   ba82c:	7833      	ldrb	r3, [r6, #0]
   ba82e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba832:	2b50      	cmp	r3, #80	; 0x50
   ba834:	d13b      	bne.n	ba8ae <__gethex+0x156>
   ba836:	7873      	ldrb	r3, [r6, #1]
   ba838:	2b2b      	cmp	r3, #43	; 0x2b
   ba83a:	d02c      	beq.n	ba896 <__gethex+0x13e>
   ba83c:	2b2d      	cmp	r3, #45	; 0x2d
   ba83e:	d02e      	beq.n	ba89e <__gethex+0x146>
   ba840:	1c71      	adds	r1, r6, #1
   ba842:	f04f 0900 	mov.w	r9, #0
   ba846:	7808      	ldrb	r0, [r1, #0]
   ba848:	f7ff ff70 	bl	ba72c <__hexdig_fun>
   ba84c:	1e43      	subs	r3, r0, #1
   ba84e:	b2db      	uxtb	r3, r3
   ba850:	2b18      	cmp	r3, #24
   ba852:	d82c      	bhi.n	ba8ae <__gethex+0x156>
   ba854:	f1a0 0210 	sub.w	r2, r0, #16
   ba858:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba85c:	f7ff ff66 	bl	ba72c <__hexdig_fun>
   ba860:	1e43      	subs	r3, r0, #1
   ba862:	b2db      	uxtb	r3, r3
   ba864:	2b18      	cmp	r3, #24
   ba866:	d91d      	bls.n	ba8a4 <__gethex+0x14c>
   ba868:	f1b9 0f00 	cmp.w	r9, #0
   ba86c:	d000      	beq.n	ba870 <__gethex+0x118>
   ba86e:	4252      	negs	r2, r2
   ba870:	4415      	add	r5, r2
   ba872:	f8cb 1000 	str.w	r1, [fp]
   ba876:	b1e4      	cbz	r4, ba8b2 <__gethex+0x15a>
   ba878:	9b00      	ldr	r3, [sp, #0]
   ba87a:	2b00      	cmp	r3, #0
   ba87c:	bf14      	ite	ne
   ba87e:	2700      	movne	r7, #0
   ba880:	2706      	moveq	r7, #6
   ba882:	4638      	mov	r0, r7
   ba884:	b009      	add	sp, #36	; 0x24
   ba886:	ecbd 8b02 	vpop	{d8}
   ba88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba88e:	463e      	mov	r6, r7
   ba890:	4625      	mov	r5, r4
   ba892:	2401      	movs	r4, #1
   ba894:	e7ca      	b.n	ba82c <__gethex+0xd4>
   ba896:	f04f 0900 	mov.w	r9, #0
   ba89a:	1cb1      	adds	r1, r6, #2
   ba89c:	e7d3      	b.n	ba846 <__gethex+0xee>
   ba89e:	f04f 0901 	mov.w	r9, #1
   ba8a2:	e7fa      	b.n	ba89a <__gethex+0x142>
   ba8a4:	230a      	movs	r3, #10
   ba8a6:	fb03 0202 	mla	r2, r3, r2, r0
   ba8aa:	3a10      	subs	r2, #16
   ba8ac:	e7d4      	b.n	ba858 <__gethex+0x100>
   ba8ae:	4631      	mov	r1, r6
   ba8b0:	e7df      	b.n	ba872 <__gethex+0x11a>
   ba8b2:	1bf3      	subs	r3, r6, r7
   ba8b4:	3b01      	subs	r3, #1
   ba8b6:	4621      	mov	r1, r4
   ba8b8:	2b07      	cmp	r3, #7
   ba8ba:	dc0b      	bgt.n	ba8d4 <__gethex+0x17c>
   ba8bc:	ee18 0a10 	vmov	r0, s16
   ba8c0:	f000 fa68 	bl	bad94 <_Balloc>
   ba8c4:	4604      	mov	r4, r0
   ba8c6:	b940      	cbnz	r0, ba8da <__gethex+0x182>
   ba8c8:	4b5d      	ldr	r3, [pc, #372]	; (baa40 <__gethex+0x2e8>)
   ba8ca:	4602      	mov	r2, r0
   ba8cc:	21de      	movs	r1, #222	; 0xde
   ba8ce:	485d      	ldr	r0, [pc, #372]	; (baa44 <__gethex+0x2ec>)
   ba8d0:	f7fc fbfc 	bl	b70cc <__assert_func>
   ba8d4:	3101      	adds	r1, #1
   ba8d6:	105b      	asrs	r3, r3, #1
   ba8d8:	e7ee      	b.n	ba8b8 <__gethex+0x160>
   ba8da:	f100 0914 	add.w	r9, r0, #20
   ba8de:	f04f 0b00 	mov.w	fp, #0
   ba8e2:	f1ca 0301 	rsb	r3, sl, #1
   ba8e6:	f8cd 9008 	str.w	r9, [sp, #8]
   ba8ea:	f8cd b000 	str.w	fp, [sp]
   ba8ee:	9306      	str	r3, [sp, #24]
   ba8f0:	42b7      	cmp	r7, r6
   ba8f2:	d340      	bcc.n	ba976 <__gethex+0x21e>
   ba8f4:	9802      	ldr	r0, [sp, #8]
   ba8f6:	9b00      	ldr	r3, [sp, #0]
   ba8f8:	f840 3b04 	str.w	r3, [r0], #4
   ba8fc:	eba0 0009 	sub.w	r0, r0, r9
   ba900:	1080      	asrs	r0, r0, #2
   ba902:	0146      	lsls	r6, r0, #5
   ba904:	6120      	str	r0, [r4, #16]
   ba906:	4618      	mov	r0, r3
   ba908:	f000 fb36 	bl	baf78 <__hi0bits>
   ba90c:	1a30      	subs	r0, r6, r0
   ba90e:	f8d8 6000 	ldr.w	r6, [r8]
   ba912:	42b0      	cmp	r0, r6
   ba914:	dd63      	ble.n	ba9de <__gethex+0x286>
   ba916:	1b87      	subs	r7, r0, r6
   ba918:	4639      	mov	r1, r7
   ba91a:	4620      	mov	r0, r4
   ba91c:	f000 feda 	bl	bb6d4 <__any_on>
   ba920:	4682      	mov	sl, r0
   ba922:	b1a8      	cbz	r0, ba950 <__gethex+0x1f8>
   ba924:	1e7b      	subs	r3, r7, #1
   ba926:	1159      	asrs	r1, r3, #5
   ba928:	f003 021f 	and.w	r2, r3, #31
   ba92c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba930:	f04f 0a01 	mov.w	sl, #1
   ba934:	fa0a f202 	lsl.w	r2, sl, r2
   ba938:	420a      	tst	r2, r1
   ba93a:	d009      	beq.n	ba950 <__gethex+0x1f8>
   ba93c:	4553      	cmp	r3, sl
   ba93e:	dd05      	ble.n	ba94c <__gethex+0x1f4>
   ba940:	1eb9      	subs	r1, r7, #2
   ba942:	4620      	mov	r0, r4
   ba944:	f000 fec6 	bl	bb6d4 <__any_on>
   ba948:	2800      	cmp	r0, #0
   ba94a:	d145      	bne.n	ba9d8 <__gethex+0x280>
   ba94c:	f04f 0a02 	mov.w	sl, #2
   ba950:	4639      	mov	r1, r7
   ba952:	4620      	mov	r0, r4
   ba954:	f7ff fe98 	bl	ba688 <rshift>
   ba958:	443d      	add	r5, r7
   ba95a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba95e:	42ab      	cmp	r3, r5
   ba960:	da4c      	bge.n	ba9fc <__gethex+0x2a4>
   ba962:	ee18 0a10 	vmov	r0, s16
   ba966:	4621      	mov	r1, r4
   ba968:	f000 fa54 	bl	bae14 <_Bfree>
   ba96c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba96e:	2300      	movs	r3, #0
   ba970:	6013      	str	r3, [r2, #0]
   ba972:	27a3      	movs	r7, #163	; 0xa3
   ba974:	e785      	b.n	ba882 <__gethex+0x12a>
   ba976:	1e73      	subs	r3, r6, #1
   ba978:	9a05      	ldr	r2, [sp, #20]
   ba97a:	9303      	str	r3, [sp, #12]
   ba97c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba980:	4293      	cmp	r3, r2
   ba982:	d019      	beq.n	ba9b8 <__gethex+0x260>
   ba984:	f1bb 0f20 	cmp.w	fp, #32
   ba988:	d107      	bne.n	ba99a <__gethex+0x242>
   ba98a:	9b02      	ldr	r3, [sp, #8]
   ba98c:	9a00      	ldr	r2, [sp, #0]
   ba98e:	f843 2b04 	str.w	r2, [r3], #4
   ba992:	9302      	str	r3, [sp, #8]
   ba994:	2300      	movs	r3, #0
   ba996:	9300      	str	r3, [sp, #0]
   ba998:	469b      	mov	fp, r3
   ba99a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba99e:	f7ff fec5 	bl	ba72c <__hexdig_fun>
   ba9a2:	9b00      	ldr	r3, [sp, #0]
   ba9a4:	f000 000f 	and.w	r0, r0, #15
   ba9a8:	fa00 f00b 	lsl.w	r0, r0, fp
   ba9ac:	4303      	orrs	r3, r0
   ba9ae:	9300      	str	r3, [sp, #0]
   ba9b0:	f10b 0b04 	add.w	fp, fp, #4
   ba9b4:	9b03      	ldr	r3, [sp, #12]
   ba9b6:	e00d      	b.n	ba9d4 <__gethex+0x27c>
   ba9b8:	9b03      	ldr	r3, [sp, #12]
   ba9ba:	9a06      	ldr	r2, [sp, #24]
   ba9bc:	4413      	add	r3, r2
   ba9be:	42bb      	cmp	r3, r7
   ba9c0:	d3e0      	bcc.n	ba984 <__gethex+0x22c>
   ba9c2:	4618      	mov	r0, r3
   ba9c4:	9901      	ldr	r1, [sp, #4]
   ba9c6:	9307      	str	r3, [sp, #28]
   ba9c8:	4652      	mov	r2, sl
   ba9ca:	f7fe ff19 	bl	b9800 <strncmp>
   ba9ce:	9b07      	ldr	r3, [sp, #28]
   ba9d0:	2800      	cmp	r0, #0
   ba9d2:	d1d7      	bne.n	ba984 <__gethex+0x22c>
   ba9d4:	461e      	mov	r6, r3
   ba9d6:	e78b      	b.n	ba8f0 <__gethex+0x198>
   ba9d8:	f04f 0a03 	mov.w	sl, #3
   ba9dc:	e7b8      	b.n	ba950 <__gethex+0x1f8>
   ba9de:	da0a      	bge.n	ba9f6 <__gethex+0x29e>
   ba9e0:	1a37      	subs	r7, r6, r0
   ba9e2:	4621      	mov	r1, r4
   ba9e4:	ee18 0a10 	vmov	r0, s16
   ba9e8:	463a      	mov	r2, r7
   ba9ea:	f000 fc2f 	bl	bb24c <__lshift>
   ba9ee:	1bed      	subs	r5, r5, r7
   ba9f0:	4604      	mov	r4, r0
   ba9f2:	f100 0914 	add.w	r9, r0, #20
   ba9f6:	f04f 0a00 	mov.w	sl, #0
   ba9fa:	e7ae      	b.n	ba95a <__gethex+0x202>
   ba9fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   baa00:	42a8      	cmp	r0, r5
   baa02:	dd72      	ble.n	baaea <__gethex+0x392>
   baa04:	1b45      	subs	r5, r0, r5
   baa06:	42ae      	cmp	r6, r5
   baa08:	dc36      	bgt.n	baa78 <__gethex+0x320>
   baa0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   baa0e:	2b02      	cmp	r3, #2
   baa10:	d02a      	beq.n	baa68 <__gethex+0x310>
   baa12:	2b03      	cmp	r3, #3
   baa14:	d02c      	beq.n	baa70 <__gethex+0x318>
   baa16:	2b01      	cmp	r3, #1
   baa18:	d11c      	bne.n	baa54 <__gethex+0x2fc>
   baa1a:	42ae      	cmp	r6, r5
   baa1c:	d11a      	bne.n	baa54 <__gethex+0x2fc>
   baa1e:	2e01      	cmp	r6, #1
   baa20:	d112      	bne.n	baa48 <__gethex+0x2f0>
   baa22:	9a04      	ldr	r2, [sp, #16]
   baa24:	f8d8 3004 	ldr.w	r3, [r8, #4]
   baa28:	6013      	str	r3, [r2, #0]
   baa2a:	2301      	movs	r3, #1
   baa2c:	6123      	str	r3, [r4, #16]
   baa2e:	f8c9 3000 	str.w	r3, [r9]
   baa32:	9b14      	ldr	r3, [sp, #80]	; 0x50
   baa34:	2762      	movs	r7, #98	; 0x62
   baa36:	601c      	str	r4, [r3, #0]
   baa38:	e723      	b.n	ba882 <__gethex+0x12a>
   baa3a:	bf00      	nop
   baa3c:	000bcf7c 	.word	0x000bcf7c
   baa40:	000bcee1 	.word	0x000bcee1
   baa44:	000bcef2 	.word	0x000bcef2
   baa48:	1e71      	subs	r1, r6, #1
   baa4a:	4620      	mov	r0, r4
   baa4c:	f000 fe42 	bl	bb6d4 <__any_on>
   baa50:	2800      	cmp	r0, #0
   baa52:	d1e6      	bne.n	baa22 <__gethex+0x2ca>
   baa54:	ee18 0a10 	vmov	r0, s16
   baa58:	4621      	mov	r1, r4
   baa5a:	f000 f9db 	bl	bae14 <_Bfree>
   baa5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   baa60:	2300      	movs	r3, #0
   baa62:	6013      	str	r3, [r2, #0]
   baa64:	2750      	movs	r7, #80	; 0x50
   baa66:	e70c      	b.n	ba882 <__gethex+0x12a>
   baa68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baa6a:	2b00      	cmp	r3, #0
   baa6c:	d1f2      	bne.n	baa54 <__gethex+0x2fc>
   baa6e:	e7d8      	b.n	baa22 <__gethex+0x2ca>
   baa70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baa72:	2b00      	cmp	r3, #0
   baa74:	d1d5      	bne.n	baa22 <__gethex+0x2ca>
   baa76:	e7ed      	b.n	baa54 <__gethex+0x2fc>
   baa78:	1e6f      	subs	r7, r5, #1
   baa7a:	f1ba 0f00 	cmp.w	sl, #0
   baa7e:	d131      	bne.n	baae4 <__gethex+0x38c>
   baa80:	b127      	cbz	r7, baa8c <__gethex+0x334>
   baa82:	4639      	mov	r1, r7
   baa84:	4620      	mov	r0, r4
   baa86:	f000 fe25 	bl	bb6d4 <__any_on>
   baa8a:	4682      	mov	sl, r0
   baa8c:	117b      	asrs	r3, r7, #5
   baa8e:	2101      	movs	r1, #1
   baa90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   baa94:	f007 071f 	and.w	r7, r7, #31
   baa98:	fa01 f707 	lsl.w	r7, r1, r7
   baa9c:	421f      	tst	r7, r3
   baa9e:	4629      	mov	r1, r5
   baaa0:	4620      	mov	r0, r4
   baaa2:	bf18      	it	ne
   baaa4:	f04a 0a02 	orrne.w	sl, sl, #2
   baaa8:	1b76      	subs	r6, r6, r5
   baaaa:	f7ff fded 	bl	ba688 <rshift>
   baaae:	f8d8 5004 	ldr.w	r5, [r8, #4]
   baab2:	2702      	movs	r7, #2
   baab4:	f1ba 0f00 	cmp.w	sl, #0
   baab8:	d048      	beq.n	bab4c <__gethex+0x3f4>
   baaba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   baabe:	2b02      	cmp	r3, #2
   baac0:	d015      	beq.n	baaee <__gethex+0x396>
   baac2:	2b03      	cmp	r3, #3
   baac4:	d017      	beq.n	baaf6 <__gethex+0x39e>
   baac6:	2b01      	cmp	r3, #1
   baac8:	d109      	bne.n	baade <__gethex+0x386>
   baaca:	f01a 0f02 	tst.w	sl, #2
   baace:	d006      	beq.n	baade <__gethex+0x386>
   baad0:	f8d9 0000 	ldr.w	r0, [r9]
   baad4:	ea4a 0a00 	orr.w	sl, sl, r0
   baad8:	f01a 0f01 	tst.w	sl, #1
   baadc:	d10e      	bne.n	baafc <__gethex+0x3a4>
   baade:	f047 0710 	orr.w	r7, r7, #16
   baae2:	e033      	b.n	bab4c <__gethex+0x3f4>
   baae4:	f04f 0a01 	mov.w	sl, #1
   baae8:	e7d0      	b.n	baa8c <__gethex+0x334>
   baaea:	2701      	movs	r7, #1
   baaec:	e7e2      	b.n	baab4 <__gethex+0x35c>
   baaee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baaf0:	f1c3 0301 	rsb	r3, r3, #1
   baaf4:	9315      	str	r3, [sp, #84]	; 0x54
   baaf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baaf8:	2b00      	cmp	r3, #0
   baafa:	d0f0      	beq.n	baade <__gethex+0x386>
   baafc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bab00:	f104 0314 	add.w	r3, r4, #20
   bab04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bab08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bab0c:	f04f 0c00 	mov.w	ip, #0
   bab10:	4618      	mov	r0, r3
   bab12:	f853 2b04 	ldr.w	r2, [r3], #4
   bab16:	f1b2 3fff 	cmp.w	r2, #4294967295
   bab1a:	d01c      	beq.n	bab56 <__gethex+0x3fe>
   bab1c:	3201      	adds	r2, #1
   bab1e:	6002      	str	r2, [r0, #0]
   bab20:	2f02      	cmp	r7, #2
   bab22:	f104 0314 	add.w	r3, r4, #20
   bab26:	d13f      	bne.n	baba8 <__gethex+0x450>
   bab28:	f8d8 2000 	ldr.w	r2, [r8]
   bab2c:	3a01      	subs	r2, #1
   bab2e:	42b2      	cmp	r2, r6
   bab30:	d10a      	bne.n	bab48 <__gethex+0x3f0>
   bab32:	1171      	asrs	r1, r6, #5
   bab34:	2201      	movs	r2, #1
   bab36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bab3a:	f006 061f 	and.w	r6, r6, #31
   bab3e:	fa02 f606 	lsl.w	r6, r2, r6
   bab42:	421e      	tst	r6, r3
   bab44:	bf18      	it	ne
   bab46:	4617      	movne	r7, r2
   bab48:	f047 0720 	orr.w	r7, r7, #32
   bab4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bab4e:	601c      	str	r4, [r3, #0]
   bab50:	9b04      	ldr	r3, [sp, #16]
   bab52:	601d      	str	r5, [r3, #0]
   bab54:	e695      	b.n	ba882 <__gethex+0x12a>
   bab56:	4299      	cmp	r1, r3
   bab58:	f843 cc04 	str.w	ip, [r3, #-4]
   bab5c:	d8d8      	bhi.n	bab10 <__gethex+0x3b8>
   bab5e:	68a3      	ldr	r3, [r4, #8]
   bab60:	459b      	cmp	fp, r3
   bab62:	db19      	blt.n	bab98 <__gethex+0x440>
   bab64:	6861      	ldr	r1, [r4, #4]
   bab66:	ee18 0a10 	vmov	r0, s16
   bab6a:	3101      	adds	r1, #1
   bab6c:	f000 f912 	bl	bad94 <_Balloc>
   bab70:	4681      	mov	r9, r0
   bab72:	b918      	cbnz	r0, bab7c <__gethex+0x424>
   bab74:	4b1a      	ldr	r3, [pc, #104]	; (babe0 <__gethex+0x488>)
   bab76:	4602      	mov	r2, r0
   bab78:	2184      	movs	r1, #132	; 0x84
   bab7a:	e6a8      	b.n	ba8ce <__gethex+0x176>
   bab7c:	6922      	ldr	r2, [r4, #16]
   bab7e:	3202      	adds	r2, #2
   bab80:	f104 010c 	add.w	r1, r4, #12
   bab84:	0092      	lsls	r2, r2, #2
   bab86:	300c      	adds	r0, #12
   bab88:	f7fe fdca 	bl	b9720 <memcpy>
   bab8c:	4621      	mov	r1, r4
   bab8e:	ee18 0a10 	vmov	r0, s16
   bab92:	f000 f93f 	bl	bae14 <_Bfree>
   bab96:	464c      	mov	r4, r9
   bab98:	6923      	ldr	r3, [r4, #16]
   bab9a:	1c5a      	adds	r2, r3, #1
   bab9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   baba0:	6122      	str	r2, [r4, #16]
   baba2:	2201      	movs	r2, #1
   baba4:	615a      	str	r2, [r3, #20]
   baba6:	e7bb      	b.n	bab20 <__gethex+0x3c8>
   baba8:	6922      	ldr	r2, [r4, #16]
   babaa:	455a      	cmp	r2, fp
   babac:	dd0b      	ble.n	babc6 <__gethex+0x46e>
   babae:	2101      	movs	r1, #1
   babb0:	4620      	mov	r0, r4
   babb2:	f7ff fd69 	bl	ba688 <rshift>
   babb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   babba:	3501      	adds	r5, #1
   babbc:	42ab      	cmp	r3, r5
   babbe:	f6ff aed0 	blt.w	ba962 <__gethex+0x20a>
   babc2:	2701      	movs	r7, #1
   babc4:	e7c0      	b.n	bab48 <__gethex+0x3f0>
   babc6:	f016 061f 	ands.w	r6, r6, #31
   babca:	d0fa      	beq.n	babc2 <__gethex+0x46a>
   babcc:	4453      	add	r3, sl
   babce:	f1c6 0620 	rsb	r6, r6, #32
   babd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   babd6:	f000 f9cf 	bl	baf78 <__hi0bits>
   babda:	42b0      	cmp	r0, r6
   babdc:	dbe7      	blt.n	babae <__gethex+0x456>
   babde:	e7f0      	b.n	babc2 <__gethex+0x46a>
   babe0:	000bcee1 	.word	0x000bcee1

000babe4 <L_shift>:
   babe4:	f1c2 0208 	rsb	r2, r2, #8
   babe8:	0092      	lsls	r2, r2, #2
   babea:	b570      	push	{r4, r5, r6, lr}
   babec:	f1c2 0620 	rsb	r6, r2, #32
   babf0:	6843      	ldr	r3, [r0, #4]
   babf2:	6804      	ldr	r4, [r0, #0]
   babf4:	fa03 f506 	lsl.w	r5, r3, r6
   babf8:	432c      	orrs	r4, r5
   babfa:	40d3      	lsrs	r3, r2
   babfc:	6004      	str	r4, [r0, #0]
   babfe:	f840 3f04 	str.w	r3, [r0, #4]!
   bac02:	4288      	cmp	r0, r1
   bac04:	d3f4      	bcc.n	babf0 <L_shift+0xc>
   bac06:	bd70      	pop	{r4, r5, r6, pc}

000bac08 <__match>:
   bac08:	b530      	push	{r4, r5, lr}
   bac0a:	6803      	ldr	r3, [r0, #0]
   bac0c:	3301      	adds	r3, #1
   bac0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bac12:	b914      	cbnz	r4, bac1a <__match+0x12>
   bac14:	6003      	str	r3, [r0, #0]
   bac16:	2001      	movs	r0, #1
   bac18:	bd30      	pop	{r4, r5, pc}
   bac1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bac1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bac22:	2d19      	cmp	r5, #25
   bac24:	bf98      	it	ls
   bac26:	3220      	addls	r2, #32
   bac28:	42a2      	cmp	r2, r4
   bac2a:	d0f0      	beq.n	bac0e <__match+0x6>
   bac2c:	2000      	movs	r0, #0
   bac2e:	e7f3      	b.n	bac18 <__match+0x10>

000bac30 <__hexnan>:
   bac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac34:	680b      	ldr	r3, [r1, #0]
   bac36:	115e      	asrs	r6, r3, #5
   bac38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bac3c:	f013 031f 	ands.w	r3, r3, #31
   bac40:	b087      	sub	sp, #28
   bac42:	bf18      	it	ne
   bac44:	3604      	addne	r6, #4
   bac46:	2500      	movs	r5, #0
   bac48:	1f37      	subs	r7, r6, #4
   bac4a:	4690      	mov	r8, r2
   bac4c:	6802      	ldr	r2, [r0, #0]
   bac4e:	9301      	str	r3, [sp, #4]
   bac50:	4682      	mov	sl, r0
   bac52:	f846 5c04 	str.w	r5, [r6, #-4]
   bac56:	46b9      	mov	r9, r7
   bac58:	463c      	mov	r4, r7
   bac5a:	9502      	str	r5, [sp, #8]
   bac5c:	46ab      	mov	fp, r5
   bac5e:	7851      	ldrb	r1, [r2, #1]
   bac60:	1c53      	adds	r3, r2, #1
   bac62:	9303      	str	r3, [sp, #12]
   bac64:	b341      	cbz	r1, bacb8 <__hexnan+0x88>
   bac66:	4608      	mov	r0, r1
   bac68:	9205      	str	r2, [sp, #20]
   bac6a:	9104      	str	r1, [sp, #16]
   bac6c:	f7ff fd5e 	bl	ba72c <__hexdig_fun>
   bac70:	2800      	cmp	r0, #0
   bac72:	d14f      	bne.n	bad14 <__hexnan+0xe4>
   bac74:	9904      	ldr	r1, [sp, #16]
   bac76:	9a05      	ldr	r2, [sp, #20]
   bac78:	2920      	cmp	r1, #32
   bac7a:	d818      	bhi.n	bacae <__hexnan+0x7e>
   bac7c:	9b02      	ldr	r3, [sp, #8]
   bac7e:	459b      	cmp	fp, r3
   bac80:	dd13      	ble.n	bacaa <__hexnan+0x7a>
   bac82:	454c      	cmp	r4, r9
   bac84:	d206      	bcs.n	bac94 <__hexnan+0x64>
   bac86:	2d07      	cmp	r5, #7
   bac88:	dc04      	bgt.n	bac94 <__hexnan+0x64>
   bac8a:	462a      	mov	r2, r5
   bac8c:	4649      	mov	r1, r9
   bac8e:	4620      	mov	r0, r4
   bac90:	f7ff ffa8 	bl	babe4 <L_shift>
   bac94:	4544      	cmp	r4, r8
   bac96:	d950      	bls.n	bad3a <__hexnan+0x10a>
   bac98:	2300      	movs	r3, #0
   bac9a:	f1a4 0904 	sub.w	r9, r4, #4
   bac9e:	f844 3c04 	str.w	r3, [r4, #-4]
   baca2:	f8cd b008 	str.w	fp, [sp, #8]
   baca6:	464c      	mov	r4, r9
   baca8:	461d      	mov	r5, r3
   bacaa:	9a03      	ldr	r2, [sp, #12]
   bacac:	e7d7      	b.n	bac5e <__hexnan+0x2e>
   bacae:	2929      	cmp	r1, #41	; 0x29
   bacb0:	d156      	bne.n	bad60 <__hexnan+0x130>
   bacb2:	3202      	adds	r2, #2
   bacb4:	f8ca 2000 	str.w	r2, [sl]
   bacb8:	f1bb 0f00 	cmp.w	fp, #0
   bacbc:	d050      	beq.n	bad60 <__hexnan+0x130>
   bacbe:	454c      	cmp	r4, r9
   bacc0:	d206      	bcs.n	bacd0 <__hexnan+0xa0>
   bacc2:	2d07      	cmp	r5, #7
   bacc4:	dc04      	bgt.n	bacd0 <__hexnan+0xa0>
   bacc6:	462a      	mov	r2, r5
   bacc8:	4649      	mov	r1, r9
   bacca:	4620      	mov	r0, r4
   baccc:	f7ff ff8a 	bl	babe4 <L_shift>
   bacd0:	4544      	cmp	r4, r8
   bacd2:	d934      	bls.n	bad3e <__hexnan+0x10e>
   bacd4:	f1a8 0204 	sub.w	r2, r8, #4
   bacd8:	4623      	mov	r3, r4
   bacda:	f853 1b04 	ldr.w	r1, [r3], #4
   bacde:	f842 1f04 	str.w	r1, [r2, #4]!
   bace2:	429f      	cmp	r7, r3
   bace4:	d2f9      	bcs.n	bacda <__hexnan+0xaa>
   bace6:	1b3b      	subs	r3, r7, r4
   bace8:	f023 0303 	bic.w	r3, r3, #3
   bacec:	3304      	adds	r3, #4
   bacee:	3401      	adds	r4, #1
   bacf0:	3e03      	subs	r6, #3
   bacf2:	42b4      	cmp	r4, r6
   bacf4:	bf88      	it	hi
   bacf6:	2304      	movhi	r3, #4
   bacf8:	4443      	add	r3, r8
   bacfa:	2200      	movs	r2, #0
   bacfc:	f843 2b04 	str.w	r2, [r3], #4
   bad00:	429f      	cmp	r7, r3
   bad02:	d2fb      	bcs.n	bacfc <__hexnan+0xcc>
   bad04:	683b      	ldr	r3, [r7, #0]
   bad06:	b91b      	cbnz	r3, bad10 <__hexnan+0xe0>
   bad08:	4547      	cmp	r7, r8
   bad0a:	d127      	bne.n	bad5c <__hexnan+0x12c>
   bad0c:	2301      	movs	r3, #1
   bad0e:	603b      	str	r3, [r7, #0]
   bad10:	2005      	movs	r0, #5
   bad12:	e026      	b.n	bad62 <__hexnan+0x132>
   bad14:	3501      	adds	r5, #1
   bad16:	2d08      	cmp	r5, #8
   bad18:	f10b 0b01 	add.w	fp, fp, #1
   bad1c:	dd06      	ble.n	bad2c <__hexnan+0xfc>
   bad1e:	4544      	cmp	r4, r8
   bad20:	d9c3      	bls.n	bacaa <__hexnan+0x7a>
   bad22:	2300      	movs	r3, #0
   bad24:	f844 3c04 	str.w	r3, [r4, #-4]
   bad28:	2501      	movs	r5, #1
   bad2a:	3c04      	subs	r4, #4
   bad2c:	6822      	ldr	r2, [r4, #0]
   bad2e:	f000 000f 	and.w	r0, r0, #15
   bad32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bad36:	6022      	str	r2, [r4, #0]
   bad38:	e7b7      	b.n	bacaa <__hexnan+0x7a>
   bad3a:	2508      	movs	r5, #8
   bad3c:	e7b5      	b.n	bacaa <__hexnan+0x7a>
   bad3e:	9b01      	ldr	r3, [sp, #4]
   bad40:	2b00      	cmp	r3, #0
   bad42:	d0df      	beq.n	bad04 <__hexnan+0xd4>
   bad44:	f04f 32ff 	mov.w	r2, #4294967295
   bad48:	f1c3 0320 	rsb	r3, r3, #32
   bad4c:	fa22 f303 	lsr.w	r3, r2, r3
   bad50:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bad54:	401a      	ands	r2, r3
   bad56:	f846 2c04 	str.w	r2, [r6, #-4]
   bad5a:	e7d3      	b.n	bad04 <__hexnan+0xd4>
   bad5c:	3f04      	subs	r7, #4
   bad5e:	e7d1      	b.n	bad04 <__hexnan+0xd4>
   bad60:	2004      	movs	r0, #4
   bad62:	b007      	add	sp, #28
   bad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bad68 <__retarget_lock_acquire_recursive>:
   bad68:	4770      	bx	lr

000bad6a <__retarget_lock_release>:
   bad6a:	4770      	bx	lr

000bad6c <__retarget_lock_release_recursive>:
   bad6c:	4770      	bx	lr

000bad6e <__ascii_mbtowc>:
   bad6e:	b082      	sub	sp, #8
   bad70:	b901      	cbnz	r1, bad74 <__ascii_mbtowc+0x6>
   bad72:	a901      	add	r1, sp, #4
   bad74:	b142      	cbz	r2, bad88 <__ascii_mbtowc+0x1a>
   bad76:	b14b      	cbz	r3, bad8c <__ascii_mbtowc+0x1e>
   bad78:	7813      	ldrb	r3, [r2, #0]
   bad7a:	600b      	str	r3, [r1, #0]
   bad7c:	7812      	ldrb	r2, [r2, #0]
   bad7e:	1e10      	subs	r0, r2, #0
   bad80:	bf18      	it	ne
   bad82:	2001      	movne	r0, #1
   bad84:	b002      	add	sp, #8
   bad86:	4770      	bx	lr
   bad88:	4610      	mov	r0, r2
   bad8a:	e7fb      	b.n	bad84 <__ascii_mbtowc+0x16>
   bad8c:	f06f 0001 	mvn.w	r0, #1
   bad90:	e7f8      	b.n	bad84 <__ascii_mbtowc+0x16>
	...

000bad94 <_Balloc>:
   bad94:	b570      	push	{r4, r5, r6, lr}
   bad96:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bad98:	4604      	mov	r4, r0
   bad9a:	460d      	mov	r5, r1
   bad9c:	b976      	cbnz	r6, badbc <_Balloc+0x28>
   bad9e:	2010      	movs	r0, #16
   bada0:	f7fc f954 	bl	b704c <malloc>
   bada4:	4602      	mov	r2, r0
   bada6:	6260      	str	r0, [r4, #36]	; 0x24
   bada8:	b920      	cbnz	r0, badb4 <_Balloc+0x20>
   badaa:	4b18      	ldr	r3, [pc, #96]	; (bae0c <_Balloc+0x78>)
   badac:	4818      	ldr	r0, [pc, #96]	; (bae10 <_Balloc+0x7c>)
   badae:	2166      	movs	r1, #102	; 0x66
   badb0:	f7fc f98c 	bl	b70cc <__assert_func>
   badb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   badb8:	6006      	str	r6, [r0, #0]
   badba:	60c6      	str	r6, [r0, #12]
   badbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   badbe:	68f3      	ldr	r3, [r6, #12]
   badc0:	b183      	cbz	r3, bade4 <_Balloc+0x50>
   badc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   badc4:	68db      	ldr	r3, [r3, #12]
   badc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   badca:	b9b8      	cbnz	r0, badfc <_Balloc+0x68>
   badcc:	2101      	movs	r1, #1
   badce:	fa01 f605 	lsl.w	r6, r1, r5
   badd2:	1d72      	adds	r2, r6, #5
   badd4:	0092      	lsls	r2, r2, #2
   badd6:	4620      	mov	r0, r4
   badd8:	f000 fc9d 	bl	bb716 <_calloc_r>
   baddc:	b160      	cbz	r0, badf8 <_Balloc+0x64>
   badde:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bade2:	e00e      	b.n	bae02 <_Balloc+0x6e>
   bade4:	2221      	movs	r2, #33	; 0x21
   bade6:	2104      	movs	r1, #4
   bade8:	4620      	mov	r0, r4
   badea:	f000 fc94 	bl	bb716 <_calloc_r>
   badee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   badf0:	60f0      	str	r0, [r6, #12]
   badf2:	68db      	ldr	r3, [r3, #12]
   badf4:	2b00      	cmp	r3, #0
   badf6:	d1e4      	bne.n	badc2 <_Balloc+0x2e>
   badf8:	2000      	movs	r0, #0
   badfa:	bd70      	pop	{r4, r5, r6, pc}
   badfc:	6802      	ldr	r2, [r0, #0]
   badfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bae02:	2300      	movs	r3, #0
   bae04:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bae08:	e7f7      	b.n	badfa <_Balloc+0x66>
   bae0a:	bf00      	nop
   bae0c:	000bcce9 	.word	0x000bcce9
   bae10:	000bcf8e 	.word	0x000bcf8e

000bae14 <_Bfree>:
   bae14:	b570      	push	{r4, r5, r6, lr}
   bae16:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bae18:	4605      	mov	r5, r0
   bae1a:	460c      	mov	r4, r1
   bae1c:	b976      	cbnz	r6, bae3c <_Bfree+0x28>
   bae1e:	2010      	movs	r0, #16
   bae20:	f7fc f914 	bl	b704c <malloc>
   bae24:	4602      	mov	r2, r0
   bae26:	6268      	str	r0, [r5, #36]	; 0x24
   bae28:	b920      	cbnz	r0, bae34 <_Bfree+0x20>
   bae2a:	4b09      	ldr	r3, [pc, #36]	; (bae50 <_Bfree+0x3c>)
   bae2c:	4809      	ldr	r0, [pc, #36]	; (bae54 <_Bfree+0x40>)
   bae2e:	218a      	movs	r1, #138	; 0x8a
   bae30:	f7fc f94c 	bl	b70cc <__assert_func>
   bae34:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bae38:	6006      	str	r6, [r0, #0]
   bae3a:	60c6      	str	r6, [r0, #12]
   bae3c:	b13c      	cbz	r4, bae4e <_Bfree+0x3a>
   bae3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bae40:	6862      	ldr	r2, [r4, #4]
   bae42:	68db      	ldr	r3, [r3, #12]
   bae44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bae48:	6021      	str	r1, [r4, #0]
   bae4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bae4e:	bd70      	pop	{r4, r5, r6, pc}
   bae50:	000bcce9 	.word	0x000bcce9
   bae54:	000bcf8e 	.word	0x000bcf8e

000bae58 <__multadd>:
   bae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bae5c:	690d      	ldr	r5, [r1, #16]
   bae5e:	4607      	mov	r7, r0
   bae60:	460c      	mov	r4, r1
   bae62:	461e      	mov	r6, r3
   bae64:	f101 0c14 	add.w	ip, r1, #20
   bae68:	2000      	movs	r0, #0
   bae6a:	f8dc 3000 	ldr.w	r3, [ip]
   bae6e:	b299      	uxth	r1, r3
   bae70:	fb02 6101 	mla	r1, r2, r1, r6
   bae74:	0c1e      	lsrs	r6, r3, #16
   bae76:	0c0b      	lsrs	r3, r1, #16
   bae78:	fb02 3306 	mla	r3, r2, r6, r3
   bae7c:	b289      	uxth	r1, r1
   bae7e:	3001      	adds	r0, #1
   bae80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bae84:	4285      	cmp	r5, r0
   bae86:	f84c 1b04 	str.w	r1, [ip], #4
   bae8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bae8e:	dcec      	bgt.n	bae6a <__multadd+0x12>
   bae90:	b30e      	cbz	r6, baed6 <__multadd+0x7e>
   bae92:	68a3      	ldr	r3, [r4, #8]
   bae94:	42ab      	cmp	r3, r5
   bae96:	dc19      	bgt.n	baecc <__multadd+0x74>
   bae98:	6861      	ldr	r1, [r4, #4]
   bae9a:	4638      	mov	r0, r7
   bae9c:	3101      	adds	r1, #1
   bae9e:	f7ff ff79 	bl	bad94 <_Balloc>
   baea2:	4680      	mov	r8, r0
   baea4:	b928      	cbnz	r0, baeb2 <__multadd+0x5a>
   baea6:	4602      	mov	r2, r0
   baea8:	4b0c      	ldr	r3, [pc, #48]	; (baedc <__multadd+0x84>)
   baeaa:	480d      	ldr	r0, [pc, #52]	; (baee0 <__multadd+0x88>)
   baeac:	21b5      	movs	r1, #181	; 0xb5
   baeae:	f7fc f90d 	bl	b70cc <__assert_func>
   baeb2:	6922      	ldr	r2, [r4, #16]
   baeb4:	3202      	adds	r2, #2
   baeb6:	f104 010c 	add.w	r1, r4, #12
   baeba:	0092      	lsls	r2, r2, #2
   baebc:	300c      	adds	r0, #12
   baebe:	f7fe fc2f 	bl	b9720 <memcpy>
   baec2:	4621      	mov	r1, r4
   baec4:	4638      	mov	r0, r7
   baec6:	f7ff ffa5 	bl	bae14 <_Bfree>
   baeca:	4644      	mov	r4, r8
   baecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   baed0:	3501      	adds	r5, #1
   baed2:	615e      	str	r6, [r3, #20]
   baed4:	6125      	str	r5, [r4, #16]
   baed6:	4620      	mov	r0, r4
   baed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baedc:	000bcee1 	.word	0x000bcee1
   baee0:	000bcf8e 	.word	0x000bcf8e

000baee4 <__s2b>:
   baee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baee8:	460c      	mov	r4, r1
   baeea:	4615      	mov	r5, r2
   baeec:	461f      	mov	r7, r3
   baeee:	2209      	movs	r2, #9
   baef0:	3308      	adds	r3, #8
   baef2:	4606      	mov	r6, r0
   baef4:	fb93 f3f2 	sdiv	r3, r3, r2
   baef8:	2100      	movs	r1, #0
   baefa:	2201      	movs	r2, #1
   baefc:	429a      	cmp	r2, r3
   baefe:	db09      	blt.n	baf14 <__s2b+0x30>
   baf00:	4630      	mov	r0, r6
   baf02:	f7ff ff47 	bl	bad94 <_Balloc>
   baf06:	b940      	cbnz	r0, baf1a <__s2b+0x36>
   baf08:	4602      	mov	r2, r0
   baf0a:	4b19      	ldr	r3, [pc, #100]	; (baf70 <__s2b+0x8c>)
   baf0c:	4819      	ldr	r0, [pc, #100]	; (baf74 <__s2b+0x90>)
   baf0e:	21ce      	movs	r1, #206	; 0xce
   baf10:	f7fc f8dc 	bl	b70cc <__assert_func>
   baf14:	0052      	lsls	r2, r2, #1
   baf16:	3101      	adds	r1, #1
   baf18:	e7f0      	b.n	baefc <__s2b+0x18>
   baf1a:	9b08      	ldr	r3, [sp, #32]
   baf1c:	6143      	str	r3, [r0, #20]
   baf1e:	2d09      	cmp	r5, #9
   baf20:	f04f 0301 	mov.w	r3, #1
   baf24:	6103      	str	r3, [r0, #16]
   baf26:	dd16      	ble.n	baf56 <__s2b+0x72>
   baf28:	f104 0909 	add.w	r9, r4, #9
   baf2c:	46c8      	mov	r8, r9
   baf2e:	442c      	add	r4, r5
   baf30:	f818 3b01 	ldrb.w	r3, [r8], #1
   baf34:	4601      	mov	r1, r0
   baf36:	3b30      	subs	r3, #48	; 0x30
   baf38:	220a      	movs	r2, #10
   baf3a:	4630      	mov	r0, r6
   baf3c:	f7ff ff8c 	bl	bae58 <__multadd>
   baf40:	45a0      	cmp	r8, r4
   baf42:	d1f5      	bne.n	baf30 <__s2b+0x4c>
   baf44:	f1a5 0408 	sub.w	r4, r5, #8
   baf48:	444c      	add	r4, r9
   baf4a:	1b2d      	subs	r5, r5, r4
   baf4c:	1963      	adds	r3, r4, r5
   baf4e:	42bb      	cmp	r3, r7
   baf50:	db04      	blt.n	baf5c <__s2b+0x78>
   baf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baf56:	340a      	adds	r4, #10
   baf58:	2509      	movs	r5, #9
   baf5a:	e7f6      	b.n	baf4a <__s2b+0x66>
   baf5c:	f814 3b01 	ldrb.w	r3, [r4], #1
   baf60:	4601      	mov	r1, r0
   baf62:	3b30      	subs	r3, #48	; 0x30
   baf64:	220a      	movs	r2, #10
   baf66:	4630      	mov	r0, r6
   baf68:	f7ff ff76 	bl	bae58 <__multadd>
   baf6c:	e7ee      	b.n	baf4c <__s2b+0x68>
   baf6e:	bf00      	nop
   baf70:	000bcee1 	.word	0x000bcee1
   baf74:	000bcf8e 	.word	0x000bcf8e

000baf78 <__hi0bits>:
   baf78:	0c03      	lsrs	r3, r0, #16
   baf7a:	041b      	lsls	r3, r3, #16
   baf7c:	b9d3      	cbnz	r3, bafb4 <__hi0bits+0x3c>
   baf7e:	0400      	lsls	r0, r0, #16
   baf80:	2310      	movs	r3, #16
   baf82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   baf86:	bf04      	itt	eq
   baf88:	0200      	lsleq	r0, r0, #8
   baf8a:	3308      	addeq	r3, #8
   baf8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   baf90:	bf04      	itt	eq
   baf92:	0100      	lsleq	r0, r0, #4
   baf94:	3304      	addeq	r3, #4
   baf96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   baf9a:	bf04      	itt	eq
   baf9c:	0080      	lsleq	r0, r0, #2
   baf9e:	3302      	addeq	r3, #2
   bafa0:	2800      	cmp	r0, #0
   bafa2:	db05      	blt.n	bafb0 <__hi0bits+0x38>
   bafa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bafa8:	f103 0301 	add.w	r3, r3, #1
   bafac:	bf08      	it	eq
   bafae:	2320      	moveq	r3, #32
   bafb0:	4618      	mov	r0, r3
   bafb2:	4770      	bx	lr
   bafb4:	2300      	movs	r3, #0
   bafb6:	e7e4      	b.n	baf82 <__hi0bits+0xa>

000bafb8 <__lo0bits>:
   bafb8:	6803      	ldr	r3, [r0, #0]
   bafba:	f013 0207 	ands.w	r2, r3, #7
   bafbe:	4601      	mov	r1, r0
   bafc0:	d00b      	beq.n	bafda <__lo0bits+0x22>
   bafc2:	07da      	lsls	r2, r3, #31
   bafc4:	d423      	bmi.n	bb00e <__lo0bits+0x56>
   bafc6:	0798      	lsls	r0, r3, #30
   bafc8:	bf49      	itett	mi
   bafca:	085b      	lsrmi	r3, r3, #1
   bafcc:	089b      	lsrpl	r3, r3, #2
   bafce:	2001      	movmi	r0, #1
   bafd0:	600b      	strmi	r3, [r1, #0]
   bafd2:	bf5c      	itt	pl
   bafd4:	600b      	strpl	r3, [r1, #0]
   bafd6:	2002      	movpl	r0, #2
   bafd8:	4770      	bx	lr
   bafda:	b298      	uxth	r0, r3
   bafdc:	b9a8      	cbnz	r0, bb00a <__lo0bits+0x52>
   bafde:	0c1b      	lsrs	r3, r3, #16
   bafe0:	2010      	movs	r0, #16
   bafe2:	b2da      	uxtb	r2, r3
   bafe4:	b90a      	cbnz	r2, bafea <__lo0bits+0x32>
   bafe6:	3008      	adds	r0, #8
   bafe8:	0a1b      	lsrs	r3, r3, #8
   bafea:	071a      	lsls	r2, r3, #28
   bafec:	bf04      	itt	eq
   bafee:	091b      	lsreq	r3, r3, #4
   baff0:	3004      	addeq	r0, #4
   baff2:	079a      	lsls	r2, r3, #30
   baff4:	bf04      	itt	eq
   baff6:	089b      	lsreq	r3, r3, #2
   baff8:	3002      	addeq	r0, #2
   baffa:	07da      	lsls	r2, r3, #31
   baffc:	d403      	bmi.n	bb006 <__lo0bits+0x4e>
   baffe:	085b      	lsrs	r3, r3, #1
   bb000:	f100 0001 	add.w	r0, r0, #1
   bb004:	d005      	beq.n	bb012 <__lo0bits+0x5a>
   bb006:	600b      	str	r3, [r1, #0]
   bb008:	4770      	bx	lr
   bb00a:	4610      	mov	r0, r2
   bb00c:	e7e9      	b.n	bafe2 <__lo0bits+0x2a>
   bb00e:	2000      	movs	r0, #0
   bb010:	4770      	bx	lr
   bb012:	2020      	movs	r0, #32
   bb014:	4770      	bx	lr
	...

000bb018 <__i2b>:
   bb018:	b510      	push	{r4, lr}
   bb01a:	460c      	mov	r4, r1
   bb01c:	2101      	movs	r1, #1
   bb01e:	f7ff feb9 	bl	bad94 <_Balloc>
   bb022:	4602      	mov	r2, r0
   bb024:	b928      	cbnz	r0, bb032 <__i2b+0x1a>
   bb026:	4b05      	ldr	r3, [pc, #20]	; (bb03c <__i2b+0x24>)
   bb028:	4805      	ldr	r0, [pc, #20]	; (bb040 <__i2b+0x28>)
   bb02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb02e:	f7fc f84d 	bl	b70cc <__assert_func>
   bb032:	2301      	movs	r3, #1
   bb034:	6144      	str	r4, [r0, #20]
   bb036:	6103      	str	r3, [r0, #16]
   bb038:	bd10      	pop	{r4, pc}
   bb03a:	bf00      	nop
   bb03c:	000bcee1 	.word	0x000bcee1
   bb040:	000bcf8e 	.word	0x000bcf8e

000bb044 <__multiply>:
   bb044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb048:	4691      	mov	r9, r2
   bb04a:	690a      	ldr	r2, [r1, #16]
   bb04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb050:	429a      	cmp	r2, r3
   bb052:	bfb8      	it	lt
   bb054:	460b      	movlt	r3, r1
   bb056:	460c      	mov	r4, r1
   bb058:	bfbc      	itt	lt
   bb05a:	464c      	movlt	r4, r9
   bb05c:	4699      	movlt	r9, r3
   bb05e:	6927      	ldr	r7, [r4, #16]
   bb060:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb064:	68a3      	ldr	r3, [r4, #8]
   bb066:	6861      	ldr	r1, [r4, #4]
   bb068:	eb07 060a 	add.w	r6, r7, sl
   bb06c:	42b3      	cmp	r3, r6
   bb06e:	b085      	sub	sp, #20
   bb070:	bfb8      	it	lt
   bb072:	3101      	addlt	r1, #1
   bb074:	f7ff fe8e 	bl	bad94 <_Balloc>
   bb078:	b930      	cbnz	r0, bb088 <__multiply+0x44>
   bb07a:	4602      	mov	r2, r0
   bb07c:	4b44      	ldr	r3, [pc, #272]	; (bb190 <__multiply+0x14c>)
   bb07e:	4845      	ldr	r0, [pc, #276]	; (bb194 <__multiply+0x150>)
   bb080:	f240 115d 	movw	r1, #349	; 0x15d
   bb084:	f7fc f822 	bl	b70cc <__assert_func>
   bb088:	f100 0514 	add.w	r5, r0, #20
   bb08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb090:	462b      	mov	r3, r5
   bb092:	2200      	movs	r2, #0
   bb094:	4543      	cmp	r3, r8
   bb096:	d321      	bcc.n	bb0dc <__multiply+0x98>
   bb098:	f104 0314 	add.w	r3, r4, #20
   bb09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb0a0:	f109 0314 	add.w	r3, r9, #20
   bb0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb0a8:	9202      	str	r2, [sp, #8]
   bb0aa:	1b3a      	subs	r2, r7, r4
   bb0ac:	3a15      	subs	r2, #21
   bb0ae:	f022 0203 	bic.w	r2, r2, #3
   bb0b2:	3204      	adds	r2, #4
   bb0b4:	f104 0115 	add.w	r1, r4, #21
   bb0b8:	428f      	cmp	r7, r1
   bb0ba:	bf38      	it	cc
   bb0bc:	2204      	movcc	r2, #4
   bb0be:	9201      	str	r2, [sp, #4]
   bb0c0:	9a02      	ldr	r2, [sp, #8]
   bb0c2:	9303      	str	r3, [sp, #12]
   bb0c4:	429a      	cmp	r2, r3
   bb0c6:	d80c      	bhi.n	bb0e2 <__multiply+0x9e>
   bb0c8:	2e00      	cmp	r6, #0
   bb0ca:	dd03      	ble.n	bb0d4 <__multiply+0x90>
   bb0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb0d0:	2b00      	cmp	r3, #0
   bb0d2:	d05a      	beq.n	bb18a <__multiply+0x146>
   bb0d4:	6106      	str	r6, [r0, #16]
   bb0d6:	b005      	add	sp, #20
   bb0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb0dc:	f843 2b04 	str.w	r2, [r3], #4
   bb0e0:	e7d8      	b.n	bb094 <__multiply+0x50>
   bb0e2:	f8b3 a000 	ldrh.w	sl, [r3]
   bb0e6:	f1ba 0f00 	cmp.w	sl, #0
   bb0ea:	d024      	beq.n	bb136 <__multiply+0xf2>
   bb0ec:	f104 0e14 	add.w	lr, r4, #20
   bb0f0:	46a9      	mov	r9, r5
   bb0f2:	f04f 0c00 	mov.w	ip, #0
   bb0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb0fa:	f8d9 1000 	ldr.w	r1, [r9]
   bb0fe:	fa1f fb82 	uxth.w	fp, r2
   bb102:	b289      	uxth	r1, r1
   bb104:	fb0a 110b 	mla	r1, sl, fp, r1
   bb108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb10c:	f8d9 2000 	ldr.w	r2, [r9]
   bb110:	4461      	add	r1, ip
   bb112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb116:	fb0a c20b 	mla	r2, sl, fp, ip
   bb11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb11e:	b289      	uxth	r1, r1
   bb120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb124:	4577      	cmp	r7, lr
   bb126:	f849 1b04 	str.w	r1, [r9], #4
   bb12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb12e:	d8e2      	bhi.n	bb0f6 <__multiply+0xb2>
   bb130:	9a01      	ldr	r2, [sp, #4]
   bb132:	f845 c002 	str.w	ip, [r5, r2]
   bb136:	9a03      	ldr	r2, [sp, #12]
   bb138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb13c:	3304      	adds	r3, #4
   bb13e:	f1b9 0f00 	cmp.w	r9, #0
   bb142:	d020      	beq.n	bb186 <__multiply+0x142>
   bb144:	6829      	ldr	r1, [r5, #0]
   bb146:	f104 0c14 	add.w	ip, r4, #20
   bb14a:	46ae      	mov	lr, r5
   bb14c:	f04f 0a00 	mov.w	sl, #0
   bb150:	f8bc b000 	ldrh.w	fp, [ip]
   bb154:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb158:	fb09 220b 	mla	r2, r9, fp, r2
   bb15c:	4492      	add	sl, r2
   bb15e:	b289      	uxth	r1, r1
   bb160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb164:	f84e 1b04 	str.w	r1, [lr], #4
   bb168:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb16c:	f8be 1000 	ldrh.w	r1, [lr]
   bb170:	0c12      	lsrs	r2, r2, #16
   bb172:	fb09 1102 	mla	r1, r9, r2, r1
   bb176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb17a:	4567      	cmp	r7, ip
   bb17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb180:	d8e6      	bhi.n	bb150 <__multiply+0x10c>
   bb182:	9a01      	ldr	r2, [sp, #4]
   bb184:	50a9      	str	r1, [r5, r2]
   bb186:	3504      	adds	r5, #4
   bb188:	e79a      	b.n	bb0c0 <__multiply+0x7c>
   bb18a:	3e01      	subs	r6, #1
   bb18c:	e79c      	b.n	bb0c8 <__multiply+0x84>
   bb18e:	bf00      	nop
   bb190:	000bcee1 	.word	0x000bcee1
   bb194:	000bcf8e 	.word	0x000bcf8e

000bb198 <__pow5mult>:
   bb198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb19c:	4615      	mov	r5, r2
   bb19e:	f012 0203 	ands.w	r2, r2, #3
   bb1a2:	4606      	mov	r6, r0
   bb1a4:	460f      	mov	r7, r1
   bb1a6:	d007      	beq.n	bb1b8 <__pow5mult+0x20>
   bb1a8:	4c25      	ldr	r4, [pc, #148]	; (bb240 <__pow5mult+0xa8>)
   bb1aa:	3a01      	subs	r2, #1
   bb1ac:	2300      	movs	r3, #0
   bb1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb1b2:	f7ff fe51 	bl	bae58 <__multadd>
   bb1b6:	4607      	mov	r7, r0
   bb1b8:	10ad      	asrs	r5, r5, #2
   bb1ba:	d03d      	beq.n	bb238 <__pow5mult+0xa0>
   bb1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb1be:	b97c      	cbnz	r4, bb1e0 <__pow5mult+0x48>
   bb1c0:	2010      	movs	r0, #16
   bb1c2:	f7fb ff43 	bl	b704c <malloc>
   bb1c6:	4602      	mov	r2, r0
   bb1c8:	6270      	str	r0, [r6, #36]	; 0x24
   bb1ca:	b928      	cbnz	r0, bb1d8 <__pow5mult+0x40>
   bb1cc:	4b1d      	ldr	r3, [pc, #116]	; (bb244 <__pow5mult+0xac>)
   bb1ce:	481e      	ldr	r0, [pc, #120]	; (bb248 <__pow5mult+0xb0>)
   bb1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb1d4:	f7fb ff7a 	bl	b70cc <__assert_func>
   bb1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb1dc:	6004      	str	r4, [r0, #0]
   bb1de:	60c4      	str	r4, [r0, #12]
   bb1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb1e8:	b94c      	cbnz	r4, bb1fe <__pow5mult+0x66>
   bb1ea:	f240 2171 	movw	r1, #625	; 0x271
   bb1ee:	4630      	mov	r0, r6
   bb1f0:	f7ff ff12 	bl	bb018 <__i2b>
   bb1f4:	2300      	movs	r3, #0
   bb1f6:	f8c8 0008 	str.w	r0, [r8, #8]
   bb1fa:	4604      	mov	r4, r0
   bb1fc:	6003      	str	r3, [r0, #0]
   bb1fe:	f04f 0900 	mov.w	r9, #0
   bb202:	07eb      	lsls	r3, r5, #31
   bb204:	d50a      	bpl.n	bb21c <__pow5mult+0x84>
   bb206:	4639      	mov	r1, r7
   bb208:	4622      	mov	r2, r4
   bb20a:	4630      	mov	r0, r6
   bb20c:	f7ff ff1a 	bl	bb044 <__multiply>
   bb210:	4639      	mov	r1, r7
   bb212:	4680      	mov	r8, r0
   bb214:	4630      	mov	r0, r6
   bb216:	f7ff fdfd 	bl	bae14 <_Bfree>
   bb21a:	4647      	mov	r7, r8
   bb21c:	106d      	asrs	r5, r5, #1
   bb21e:	d00b      	beq.n	bb238 <__pow5mult+0xa0>
   bb220:	6820      	ldr	r0, [r4, #0]
   bb222:	b938      	cbnz	r0, bb234 <__pow5mult+0x9c>
   bb224:	4622      	mov	r2, r4
   bb226:	4621      	mov	r1, r4
   bb228:	4630      	mov	r0, r6
   bb22a:	f7ff ff0b 	bl	bb044 <__multiply>
   bb22e:	6020      	str	r0, [r4, #0]
   bb230:	f8c0 9000 	str.w	r9, [r0]
   bb234:	4604      	mov	r4, r0
   bb236:	e7e4      	b.n	bb202 <__pow5mult+0x6a>
   bb238:	4638      	mov	r0, r7
   bb23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb23e:	bf00      	nop
   bb240:	000bd100 	.word	0x000bd100
   bb244:	000bcce9 	.word	0x000bcce9
   bb248:	000bcf8e 	.word	0x000bcf8e

000bb24c <__lshift>:
   bb24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb250:	460c      	mov	r4, r1
   bb252:	6849      	ldr	r1, [r1, #4]
   bb254:	6923      	ldr	r3, [r4, #16]
   bb256:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb25a:	68a3      	ldr	r3, [r4, #8]
   bb25c:	4607      	mov	r7, r0
   bb25e:	4691      	mov	r9, r2
   bb260:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb264:	f108 0601 	add.w	r6, r8, #1
   bb268:	42b3      	cmp	r3, r6
   bb26a:	db0b      	blt.n	bb284 <__lshift+0x38>
   bb26c:	4638      	mov	r0, r7
   bb26e:	f7ff fd91 	bl	bad94 <_Balloc>
   bb272:	4605      	mov	r5, r0
   bb274:	b948      	cbnz	r0, bb28a <__lshift+0x3e>
   bb276:	4602      	mov	r2, r0
   bb278:	4b2a      	ldr	r3, [pc, #168]	; (bb324 <__lshift+0xd8>)
   bb27a:	482b      	ldr	r0, [pc, #172]	; (bb328 <__lshift+0xdc>)
   bb27c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb280:	f7fb ff24 	bl	b70cc <__assert_func>
   bb284:	3101      	adds	r1, #1
   bb286:	005b      	lsls	r3, r3, #1
   bb288:	e7ee      	b.n	bb268 <__lshift+0x1c>
   bb28a:	2300      	movs	r3, #0
   bb28c:	f100 0114 	add.w	r1, r0, #20
   bb290:	f100 0210 	add.w	r2, r0, #16
   bb294:	4618      	mov	r0, r3
   bb296:	4553      	cmp	r3, sl
   bb298:	db37      	blt.n	bb30a <__lshift+0xbe>
   bb29a:	6920      	ldr	r0, [r4, #16]
   bb29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb2a0:	f104 0314 	add.w	r3, r4, #20
   bb2a4:	f019 091f 	ands.w	r9, r9, #31
   bb2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb2b0:	d02f      	beq.n	bb312 <__lshift+0xc6>
   bb2b2:	f1c9 0e20 	rsb	lr, r9, #32
   bb2b6:	468a      	mov	sl, r1
   bb2b8:	f04f 0c00 	mov.w	ip, #0
   bb2bc:	681a      	ldr	r2, [r3, #0]
   bb2be:	fa02 f209 	lsl.w	r2, r2, r9
   bb2c2:	ea42 020c 	orr.w	r2, r2, ip
   bb2c6:	f84a 2b04 	str.w	r2, [sl], #4
   bb2ca:	f853 2b04 	ldr.w	r2, [r3], #4
   bb2ce:	4298      	cmp	r0, r3
   bb2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb2d4:	d8f2      	bhi.n	bb2bc <__lshift+0x70>
   bb2d6:	1b03      	subs	r3, r0, r4
   bb2d8:	3b15      	subs	r3, #21
   bb2da:	f023 0303 	bic.w	r3, r3, #3
   bb2de:	3304      	adds	r3, #4
   bb2e0:	f104 0215 	add.w	r2, r4, #21
   bb2e4:	4290      	cmp	r0, r2
   bb2e6:	bf38      	it	cc
   bb2e8:	2304      	movcc	r3, #4
   bb2ea:	f841 c003 	str.w	ip, [r1, r3]
   bb2ee:	f1bc 0f00 	cmp.w	ip, #0
   bb2f2:	d001      	beq.n	bb2f8 <__lshift+0xac>
   bb2f4:	f108 0602 	add.w	r6, r8, #2
   bb2f8:	3e01      	subs	r6, #1
   bb2fa:	4638      	mov	r0, r7
   bb2fc:	612e      	str	r6, [r5, #16]
   bb2fe:	4621      	mov	r1, r4
   bb300:	f7ff fd88 	bl	bae14 <_Bfree>
   bb304:	4628      	mov	r0, r5
   bb306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb30a:	f842 0f04 	str.w	r0, [r2, #4]!
   bb30e:	3301      	adds	r3, #1
   bb310:	e7c1      	b.n	bb296 <__lshift+0x4a>
   bb312:	3904      	subs	r1, #4
   bb314:	f853 2b04 	ldr.w	r2, [r3], #4
   bb318:	f841 2f04 	str.w	r2, [r1, #4]!
   bb31c:	4298      	cmp	r0, r3
   bb31e:	d8f9      	bhi.n	bb314 <__lshift+0xc8>
   bb320:	e7ea      	b.n	bb2f8 <__lshift+0xac>
   bb322:	bf00      	nop
   bb324:	000bcee1 	.word	0x000bcee1
   bb328:	000bcf8e 	.word	0x000bcf8e

000bb32c <__mcmp>:
   bb32c:	b530      	push	{r4, r5, lr}
   bb32e:	6902      	ldr	r2, [r0, #16]
   bb330:	690c      	ldr	r4, [r1, #16]
   bb332:	1b12      	subs	r2, r2, r4
   bb334:	d10e      	bne.n	bb354 <__mcmp+0x28>
   bb336:	f100 0314 	add.w	r3, r0, #20
   bb33a:	3114      	adds	r1, #20
   bb33c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb34c:	42a5      	cmp	r5, r4
   bb34e:	d003      	beq.n	bb358 <__mcmp+0x2c>
   bb350:	d305      	bcc.n	bb35e <__mcmp+0x32>
   bb352:	2201      	movs	r2, #1
   bb354:	4610      	mov	r0, r2
   bb356:	bd30      	pop	{r4, r5, pc}
   bb358:	4283      	cmp	r3, r0
   bb35a:	d3f3      	bcc.n	bb344 <__mcmp+0x18>
   bb35c:	e7fa      	b.n	bb354 <__mcmp+0x28>
   bb35e:	f04f 32ff 	mov.w	r2, #4294967295
   bb362:	e7f7      	b.n	bb354 <__mcmp+0x28>

000bb364 <__mdiff>:
   bb364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb368:	460c      	mov	r4, r1
   bb36a:	4606      	mov	r6, r0
   bb36c:	4611      	mov	r1, r2
   bb36e:	4620      	mov	r0, r4
   bb370:	4690      	mov	r8, r2
   bb372:	f7ff ffdb 	bl	bb32c <__mcmp>
   bb376:	1e05      	subs	r5, r0, #0
   bb378:	d110      	bne.n	bb39c <__mdiff+0x38>
   bb37a:	4629      	mov	r1, r5
   bb37c:	4630      	mov	r0, r6
   bb37e:	f7ff fd09 	bl	bad94 <_Balloc>
   bb382:	b930      	cbnz	r0, bb392 <__mdiff+0x2e>
   bb384:	4b3a      	ldr	r3, [pc, #232]	; (bb470 <__mdiff+0x10c>)
   bb386:	4602      	mov	r2, r0
   bb388:	f240 2132 	movw	r1, #562	; 0x232
   bb38c:	4839      	ldr	r0, [pc, #228]	; (bb474 <__mdiff+0x110>)
   bb38e:	f7fb fe9d 	bl	b70cc <__assert_func>
   bb392:	2301      	movs	r3, #1
   bb394:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb39c:	bfa4      	itt	ge
   bb39e:	4643      	movge	r3, r8
   bb3a0:	46a0      	movge	r8, r4
   bb3a2:	4630      	mov	r0, r6
   bb3a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb3a8:	bfa6      	itte	ge
   bb3aa:	461c      	movge	r4, r3
   bb3ac:	2500      	movge	r5, #0
   bb3ae:	2501      	movlt	r5, #1
   bb3b0:	f7ff fcf0 	bl	bad94 <_Balloc>
   bb3b4:	b920      	cbnz	r0, bb3c0 <__mdiff+0x5c>
   bb3b6:	4b2e      	ldr	r3, [pc, #184]	; (bb470 <__mdiff+0x10c>)
   bb3b8:	4602      	mov	r2, r0
   bb3ba:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb3be:	e7e5      	b.n	bb38c <__mdiff+0x28>
   bb3c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb3c4:	6926      	ldr	r6, [r4, #16]
   bb3c6:	60c5      	str	r5, [r0, #12]
   bb3c8:	f104 0914 	add.w	r9, r4, #20
   bb3cc:	f108 0514 	add.w	r5, r8, #20
   bb3d0:	f100 0e14 	add.w	lr, r0, #20
   bb3d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb3dc:	f108 0210 	add.w	r2, r8, #16
   bb3e0:	46f2      	mov	sl, lr
   bb3e2:	2100      	movs	r1, #0
   bb3e4:	f859 3b04 	ldr.w	r3, [r9], #4
   bb3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb3ec:	fa1f f883 	uxth.w	r8, r3
   bb3f0:	fa11 f18b 	uxtah	r1, r1, fp
   bb3f4:	0c1b      	lsrs	r3, r3, #16
   bb3f6:	eba1 0808 	sub.w	r8, r1, r8
   bb3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb402:	fa1f f888 	uxth.w	r8, r8
   bb406:	1419      	asrs	r1, r3, #16
   bb408:	454e      	cmp	r6, r9
   bb40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb40e:	f84a 3b04 	str.w	r3, [sl], #4
   bb412:	d8e7      	bhi.n	bb3e4 <__mdiff+0x80>
   bb414:	1b33      	subs	r3, r6, r4
   bb416:	3b15      	subs	r3, #21
   bb418:	f023 0303 	bic.w	r3, r3, #3
   bb41c:	3304      	adds	r3, #4
   bb41e:	3415      	adds	r4, #21
   bb420:	42a6      	cmp	r6, r4
   bb422:	bf38      	it	cc
   bb424:	2304      	movcc	r3, #4
   bb426:	441d      	add	r5, r3
   bb428:	4473      	add	r3, lr
   bb42a:	469e      	mov	lr, r3
   bb42c:	462e      	mov	r6, r5
   bb42e:	4566      	cmp	r6, ip
   bb430:	d30e      	bcc.n	bb450 <__mdiff+0xec>
   bb432:	f10c 0203 	add.w	r2, ip, #3
   bb436:	1b52      	subs	r2, r2, r5
   bb438:	f022 0203 	bic.w	r2, r2, #3
   bb43c:	3d03      	subs	r5, #3
   bb43e:	45ac      	cmp	ip, r5
   bb440:	bf38      	it	cc
   bb442:	2200      	movcc	r2, #0
   bb444:	441a      	add	r2, r3
   bb446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb44a:	b17b      	cbz	r3, bb46c <__mdiff+0x108>
   bb44c:	6107      	str	r7, [r0, #16]
   bb44e:	e7a3      	b.n	bb398 <__mdiff+0x34>
   bb450:	f856 8b04 	ldr.w	r8, [r6], #4
   bb454:	fa11 f288 	uxtah	r2, r1, r8
   bb458:	1414      	asrs	r4, r2, #16
   bb45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb45e:	b292      	uxth	r2, r2
   bb460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb464:	f84e 2b04 	str.w	r2, [lr], #4
   bb468:	1421      	asrs	r1, r4, #16
   bb46a:	e7e0      	b.n	bb42e <__mdiff+0xca>
   bb46c:	3f01      	subs	r7, #1
   bb46e:	e7ea      	b.n	bb446 <__mdiff+0xe2>
   bb470:	000bcee1 	.word	0x000bcee1
   bb474:	000bcf8e 	.word	0x000bcf8e

000bb478 <__ulp>:
   bb478:	b082      	sub	sp, #8
   bb47a:	ed8d 0b00 	vstr	d0, [sp]
   bb47e:	9b01      	ldr	r3, [sp, #4]
   bb480:	4912      	ldr	r1, [pc, #72]	; (bb4cc <__ulp+0x54>)
   bb482:	4019      	ands	r1, r3
   bb484:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb488:	2900      	cmp	r1, #0
   bb48a:	dd05      	ble.n	bb498 <__ulp+0x20>
   bb48c:	2200      	movs	r2, #0
   bb48e:	460b      	mov	r3, r1
   bb490:	ec43 2b10 	vmov	d0, r2, r3
   bb494:	b002      	add	sp, #8
   bb496:	4770      	bx	lr
   bb498:	4249      	negs	r1, r1
   bb49a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb49e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb4a2:	f04f 0200 	mov.w	r2, #0
   bb4a6:	f04f 0300 	mov.w	r3, #0
   bb4aa:	da04      	bge.n	bb4b6 <__ulp+0x3e>
   bb4ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb4b0:	fa41 f300 	asr.w	r3, r1, r0
   bb4b4:	e7ec      	b.n	bb490 <__ulp+0x18>
   bb4b6:	f1a0 0114 	sub.w	r1, r0, #20
   bb4ba:	291e      	cmp	r1, #30
   bb4bc:	bfda      	itte	le
   bb4be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb4c2:	fa20 f101 	lsrle.w	r1, r0, r1
   bb4c6:	2101      	movgt	r1, #1
   bb4c8:	460a      	mov	r2, r1
   bb4ca:	e7e1      	b.n	bb490 <__ulp+0x18>
   bb4cc:	7ff00000 	.word	0x7ff00000

000bb4d0 <__b2d>:
   bb4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb4d2:	6905      	ldr	r5, [r0, #16]
   bb4d4:	f100 0714 	add.w	r7, r0, #20
   bb4d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb4dc:	1f2e      	subs	r6, r5, #4
   bb4de:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb4e2:	4620      	mov	r0, r4
   bb4e4:	f7ff fd48 	bl	baf78 <__hi0bits>
   bb4e8:	f1c0 0320 	rsb	r3, r0, #32
   bb4ec:	280a      	cmp	r0, #10
   bb4ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb56c <__b2d+0x9c>
   bb4f2:	600b      	str	r3, [r1, #0]
   bb4f4:	dc14      	bgt.n	bb520 <__b2d+0x50>
   bb4f6:	f1c0 0e0b 	rsb	lr, r0, #11
   bb4fa:	fa24 f10e 	lsr.w	r1, r4, lr
   bb4fe:	42b7      	cmp	r7, r6
   bb500:	ea41 030c 	orr.w	r3, r1, ip
   bb504:	bf34      	ite	cc
   bb506:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb50a:	2100      	movcs	r1, #0
   bb50c:	3015      	adds	r0, #21
   bb50e:	fa04 f000 	lsl.w	r0, r4, r0
   bb512:	fa21 f10e 	lsr.w	r1, r1, lr
   bb516:	ea40 0201 	orr.w	r2, r0, r1
   bb51a:	ec43 2b10 	vmov	d0, r2, r3
   bb51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb520:	42b7      	cmp	r7, r6
   bb522:	bf3a      	itte	cc
   bb524:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb528:	f1a5 0608 	subcc.w	r6, r5, #8
   bb52c:	2100      	movcs	r1, #0
   bb52e:	380b      	subs	r0, #11
   bb530:	d017      	beq.n	bb562 <__b2d+0x92>
   bb532:	f1c0 0c20 	rsb	ip, r0, #32
   bb536:	fa04 f500 	lsl.w	r5, r4, r0
   bb53a:	42be      	cmp	r6, r7
   bb53c:	fa21 f40c 	lsr.w	r4, r1, ip
   bb540:	ea45 0504 	orr.w	r5, r5, r4
   bb544:	bf8c      	ite	hi
   bb546:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb54a:	2400      	movls	r4, #0
   bb54c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb550:	fa01 f000 	lsl.w	r0, r1, r0
   bb554:	fa24 f40c 	lsr.w	r4, r4, ip
   bb558:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb55c:	ea40 0204 	orr.w	r2, r0, r4
   bb560:	e7db      	b.n	bb51a <__b2d+0x4a>
   bb562:	ea44 030c 	orr.w	r3, r4, ip
   bb566:	460a      	mov	r2, r1
   bb568:	e7d7      	b.n	bb51a <__b2d+0x4a>
   bb56a:	bf00      	nop
   bb56c:	3ff00000 	.word	0x3ff00000

000bb570 <__d2b>:
   bb570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb574:	4689      	mov	r9, r1
   bb576:	2101      	movs	r1, #1
   bb578:	ec57 6b10 	vmov	r6, r7, d0
   bb57c:	4690      	mov	r8, r2
   bb57e:	f7ff fc09 	bl	bad94 <_Balloc>
   bb582:	4604      	mov	r4, r0
   bb584:	b930      	cbnz	r0, bb594 <__d2b+0x24>
   bb586:	4602      	mov	r2, r0
   bb588:	4b25      	ldr	r3, [pc, #148]	; (bb620 <__d2b+0xb0>)
   bb58a:	4826      	ldr	r0, [pc, #152]	; (bb624 <__d2b+0xb4>)
   bb58c:	f240 310a 	movw	r1, #778	; 0x30a
   bb590:	f7fb fd9c 	bl	b70cc <__assert_func>
   bb594:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb598:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb59c:	bb35      	cbnz	r5, bb5ec <__d2b+0x7c>
   bb59e:	2e00      	cmp	r6, #0
   bb5a0:	9301      	str	r3, [sp, #4]
   bb5a2:	d028      	beq.n	bb5f6 <__d2b+0x86>
   bb5a4:	4668      	mov	r0, sp
   bb5a6:	9600      	str	r6, [sp, #0]
   bb5a8:	f7ff fd06 	bl	bafb8 <__lo0bits>
   bb5ac:	9900      	ldr	r1, [sp, #0]
   bb5ae:	b300      	cbz	r0, bb5f2 <__d2b+0x82>
   bb5b0:	9a01      	ldr	r2, [sp, #4]
   bb5b2:	f1c0 0320 	rsb	r3, r0, #32
   bb5b6:	fa02 f303 	lsl.w	r3, r2, r3
   bb5ba:	430b      	orrs	r3, r1
   bb5bc:	40c2      	lsrs	r2, r0
   bb5be:	6163      	str	r3, [r4, #20]
   bb5c0:	9201      	str	r2, [sp, #4]
   bb5c2:	9b01      	ldr	r3, [sp, #4]
   bb5c4:	61a3      	str	r3, [r4, #24]
   bb5c6:	2b00      	cmp	r3, #0
   bb5c8:	bf14      	ite	ne
   bb5ca:	2202      	movne	r2, #2
   bb5cc:	2201      	moveq	r2, #1
   bb5ce:	6122      	str	r2, [r4, #16]
   bb5d0:	b1d5      	cbz	r5, bb608 <__d2b+0x98>
   bb5d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb5d6:	4405      	add	r5, r0
   bb5d8:	f8c9 5000 	str.w	r5, [r9]
   bb5dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb5e0:	f8c8 0000 	str.w	r0, [r8]
   bb5e4:	4620      	mov	r0, r4
   bb5e6:	b003      	add	sp, #12
   bb5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb5f0:	e7d5      	b.n	bb59e <__d2b+0x2e>
   bb5f2:	6161      	str	r1, [r4, #20]
   bb5f4:	e7e5      	b.n	bb5c2 <__d2b+0x52>
   bb5f6:	a801      	add	r0, sp, #4
   bb5f8:	f7ff fcde 	bl	bafb8 <__lo0bits>
   bb5fc:	9b01      	ldr	r3, [sp, #4]
   bb5fe:	6163      	str	r3, [r4, #20]
   bb600:	2201      	movs	r2, #1
   bb602:	6122      	str	r2, [r4, #16]
   bb604:	3020      	adds	r0, #32
   bb606:	e7e3      	b.n	bb5d0 <__d2b+0x60>
   bb608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb60c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb610:	f8c9 0000 	str.w	r0, [r9]
   bb614:	6918      	ldr	r0, [r3, #16]
   bb616:	f7ff fcaf 	bl	baf78 <__hi0bits>
   bb61a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb61e:	e7df      	b.n	bb5e0 <__d2b+0x70>
   bb620:	000bcee1 	.word	0x000bcee1
   bb624:	000bcf8e 	.word	0x000bcf8e

000bb628 <__ratio>:
   bb628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb62c:	4688      	mov	r8, r1
   bb62e:	4669      	mov	r1, sp
   bb630:	4681      	mov	r9, r0
   bb632:	f7ff ff4d 	bl	bb4d0 <__b2d>
   bb636:	a901      	add	r1, sp, #4
   bb638:	4640      	mov	r0, r8
   bb63a:	ec55 4b10 	vmov	r4, r5, d0
   bb63e:	f7ff ff47 	bl	bb4d0 <__b2d>
   bb642:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb646:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb64a:	eba3 0c02 	sub.w	ip, r3, r2
   bb64e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb652:	1a9b      	subs	r3, r3, r2
   bb654:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb658:	ec51 0b10 	vmov	r0, r1, d0
   bb65c:	2b00      	cmp	r3, #0
   bb65e:	bfd6      	itet	le
   bb660:	460a      	movle	r2, r1
   bb662:	462a      	movgt	r2, r5
   bb664:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb668:	468b      	mov	fp, r1
   bb66a:	462f      	mov	r7, r5
   bb66c:	bfd4      	ite	le
   bb66e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb672:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb676:	4620      	mov	r0, r4
   bb678:	ee10 2a10 	vmov	r2, s0
   bb67c:	465b      	mov	r3, fp
   bb67e:	4639      	mov	r1, r7
   bb680:	f7fd fdd8 	bl	b9234 <__aeabi_ddiv>
   bb684:	ec41 0b10 	vmov	d0, r0, r1
   bb688:	b003      	add	sp, #12
   bb68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb68e <__copybits>:
   bb68e:	3901      	subs	r1, #1
   bb690:	b570      	push	{r4, r5, r6, lr}
   bb692:	1149      	asrs	r1, r1, #5
   bb694:	6914      	ldr	r4, [r2, #16]
   bb696:	3101      	adds	r1, #1
   bb698:	f102 0314 	add.w	r3, r2, #20
   bb69c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb6a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb6a4:	1f05      	subs	r5, r0, #4
   bb6a6:	42a3      	cmp	r3, r4
   bb6a8:	d30c      	bcc.n	bb6c4 <__copybits+0x36>
   bb6aa:	1aa3      	subs	r3, r4, r2
   bb6ac:	3b11      	subs	r3, #17
   bb6ae:	f023 0303 	bic.w	r3, r3, #3
   bb6b2:	3211      	adds	r2, #17
   bb6b4:	42a2      	cmp	r2, r4
   bb6b6:	bf88      	it	hi
   bb6b8:	2300      	movhi	r3, #0
   bb6ba:	4418      	add	r0, r3
   bb6bc:	2300      	movs	r3, #0
   bb6be:	4288      	cmp	r0, r1
   bb6c0:	d305      	bcc.n	bb6ce <__copybits+0x40>
   bb6c2:	bd70      	pop	{r4, r5, r6, pc}
   bb6c4:	f853 6b04 	ldr.w	r6, [r3], #4
   bb6c8:	f845 6f04 	str.w	r6, [r5, #4]!
   bb6cc:	e7eb      	b.n	bb6a6 <__copybits+0x18>
   bb6ce:	f840 3b04 	str.w	r3, [r0], #4
   bb6d2:	e7f4      	b.n	bb6be <__copybits+0x30>

000bb6d4 <__any_on>:
   bb6d4:	f100 0214 	add.w	r2, r0, #20
   bb6d8:	6900      	ldr	r0, [r0, #16]
   bb6da:	114b      	asrs	r3, r1, #5
   bb6dc:	4298      	cmp	r0, r3
   bb6de:	b510      	push	{r4, lr}
   bb6e0:	db11      	blt.n	bb706 <__any_on+0x32>
   bb6e2:	dd0a      	ble.n	bb6fa <__any_on+0x26>
   bb6e4:	f011 011f 	ands.w	r1, r1, #31
   bb6e8:	d007      	beq.n	bb6fa <__any_on+0x26>
   bb6ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb6ee:	fa24 f001 	lsr.w	r0, r4, r1
   bb6f2:	fa00 f101 	lsl.w	r1, r0, r1
   bb6f6:	428c      	cmp	r4, r1
   bb6f8:	d10b      	bne.n	bb712 <__any_on+0x3e>
   bb6fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb6fe:	4293      	cmp	r3, r2
   bb700:	d803      	bhi.n	bb70a <__any_on+0x36>
   bb702:	2000      	movs	r0, #0
   bb704:	bd10      	pop	{r4, pc}
   bb706:	4603      	mov	r3, r0
   bb708:	e7f7      	b.n	bb6fa <__any_on+0x26>
   bb70a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb70e:	2900      	cmp	r1, #0
   bb710:	d0f5      	beq.n	bb6fe <__any_on+0x2a>
   bb712:	2001      	movs	r0, #1
   bb714:	e7f6      	b.n	bb704 <__any_on+0x30>

000bb716 <_calloc_r>:
   bb716:	b513      	push	{r0, r1, r4, lr}
   bb718:	434a      	muls	r2, r1
   bb71a:	4611      	mov	r1, r2
   bb71c:	9201      	str	r2, [sp, #4]
   bb71e:	f7fb fcc5 	bl	b70ac <_malloc_r>
   bb722:	4604      	mov	r4, r0
   bb724:	b118      	cbz	r0, bb72e <_calloc_r+0x18>
   bb726:	9a01      	ldr	r2, [sp, #4]
   bb728:	2100      	movs	r1, #0
   bb72a:	f7fe f821 	bl	b9770 <memset>
   bb72e:	4620      	mov	r0, r4
   bb730:	b002      	add	sp, #8
   bb732:	bd10      	pop	{r4, pc}
   bb734:	0000      	movs	r0, r0
	...

000bb738 <nan>:
   bb738:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb740 <nan+0x8>
   bb73c:	4770      	bx	lr
   bb73e:	bf00      	nop
   bb740:	00000000 	.word	0x00000000
   bb744:	7ff80000 	.word	0x7ff80000

000bb748 <__ascii_wctomb>:
   bb748:	b149      	cbz	r1, bb75e <__ascii_wctomb+0x16>
   bb74a:	2aff      	cmp	r2, #255	; 0xff
   bb74c:	bf85      	ittet	hi
   bb74e:	238a      	movhi	r3, #138	; 0x8a
   bb750:	6003      	strhi	r3, [r0, #0]
   bb752:	700a      	strbls	r2, [r1, #0]
   bb754:	f04f 30ff 	movhi.w	r0, #4294967295
   bb758:	bf98      	it	ls
   bb75a:	2001      	movls	r0, #1
   bb75c:	4770      	bx	lr
   bb75e:	4608      	mov	r0, r1
   bb760:	4770      	bx	lr
	...

000bb764 <__aeabi_d2lz>:
   bb764:	b538      	push	{r3, r4, r5, lr}
   bb766:	2200      	movs	r2, #0
   bb768:	2300      	movs	r3, #0
   bb76a:	4604      	mov	r4, r0
   bb76c:	460d      	mov	r5, r1
   bb76e:	f7fd fea9 	bl	b94c4 <__aeabi_dcmplt>
   bb772:	b928      	cbnz	r0, bb780 <__aeabi_d2lz+0x1c>
   bb774:	4620      	mov	r0, r4
   bb776:	4629      	mov	r1, r5
   bb778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bb77c:	f7fd bf3a 	b.w	b95f4 <__aeabi_d2ulz>
   bb780:	4620      	mov	r0, r4
   bb782:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bb786:	f7fd ff35 	bl	b95f4 <__aeabi_d2ulz>
   bb78a:	4240      	negs	r0, r0
   bb78c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb790:	bd38      	pop	{r3, r4, r5, pc}
   bb792:	bf00      	nop

000bb794 <dynalib_user>:
   bb794:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bb7a4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb7b4:	7620 7269 7574 6c61 5300 5443 5300 434b      virtual.SCT.SKC
   bb7c4:	4600 5745 4200 4e4b 4f00 4356 7300 6f74     .FEW.BKN.OVC.sto
   bb7d4:	0069 534d 4c00 4649 0052 564d 5246 2500     i.MS.LIFR.MVFR.%
   bb7e4:	0069 6c25 0069 6e69 6f00 7475 7000 6d77     i.%li.in.out.pwm
   bb7f4:	6400 0077 7761 6100 7269 6f70 7472 722f     .dw.aw.airport/r
   bb804:	7165 6575 7473 2500 6c6c 0075 0062 6d74     equest.%llu.b.tm
   bb814:	6c70 5400 504d 324c 3733 6854 4539 454c     pl.TMPL237Th9ELE
   bb824:	6300 6e6f 656e 7463 6465 4e00 306a 7a5f     .connected.Nj0_z
   bb834:	6473 424c 4b6b 4f62 7573 695f 6279 4646     sdLBkKbOsu_iybFF
   bb844:	614e 6344 4472 7268 6633 0051 6c62 6e79     NaDcrDhr3fQ.blyn
   bb854:	2e6b 6c63 756f 0064 6961 7072 726f 2f74     k.cloud.airport/
   bb864:	0023 5441 004c 4f42 0053 5742 0049 4c43     #.ATL.BOS.BWI.CL
   bb874:	0045 4c43 0054 5643 0047 4344 0041 4544     E.CLT.CVG.DCA.DE
   bb884:	004e 4644 0057 5444 0057 5745 0052 4c46     N.DFW.DTW.EWR.FL
   bb894:	004c 4149 0044 4149 0048 464a 004b 414c     L.IAD.IAH.JFK.LA
   bb8a4:	0053 414c 0058 474c 0041 434d 004f 444d     S.LAX.LGA.MCO.MD
   bb8b4:	0057 454d 004d 494d 0041 534d 0050 524f     W.MEM.MIA.MSP.OR
   bb8c4:	0044 4450 0058 4850 004c 4850 0058 4950     D.PDX.PHL.PHX.PI
   bb8d4:	0054 4153 004e 4553 0041 4653 004f 4c53     T.SAN.SEA.SFO.SL
   bb8e4:	0043 5453 004c 5054 0041 616c 2e62 6874     C.STL.TPA.lab.th
   bb8f4:	7765 6c63 632e 6d6f                          ewcl.com.

000bb8fd <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   bb8fd:	6c62 6b6e 6e69 0066 636d 0075 2e30 2e30     blnkinf.mcu.0.0.
   bb90d:	0030 7766 742d 7079 0065 4d54 4c50 3332     0.fw-type.TMPL23
   bb91d:	5437 3968 4c45 0045 7562 6c69 0064 634f     7Th9ELE.build.Oc
   bb92d:	2074 3120 3220 3230 2033 3132 343a 3a30     t  1 2023 21:40:
   bb93d:	3135 6200 796c 6b6e 3100 332e 322e 6800     51.blynk.1.3.2.h
   bb94d:	622d 6165 0074 3534 6200 6675 2d66 6e69     -beat.45.buff-in
   bb95d:	3100 3230 0034 6564 0076 6150 7472 6369     .1024.dev.Partic
   bb96d:	656c 4120 6772 6e6f 0000 6400 6665 7561     le Argon...defau
   bb97d:	746c 0020 534d 0042 534c 0042 533c 4950     lt .MSB.LSB.<SPI
   bb98d:	6553 7474 6e69 7367 6420 6665 7561 746c     Settings default
   bb99d:	003e 533c 4950 6553 7474 6e69 7367 2520     >.<SPISettings %
   bb9ad:	2573 2075 7325 4d20 444f 2545 3e75           s%u %s MODE%u>.

000bb9bc <_ZL4font>:
   bb9bc:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bb9cc:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bb9dc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bb9ec:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bb9fc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bba0c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bba1c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bba2c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bba3c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bba4c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bba5c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bba6c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bba7c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bba8c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bba9c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bbaac:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bbabc:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bbacc:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bbadc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bbaec:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bbafc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bbb0c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bbb1c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bbb2c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bbb3c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bbb4c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bbb5c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bbb6c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bbb7c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bbb8c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bbb9c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bbbac:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bbbbc:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bbbcc:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bbbdc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bbbec:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bbbfc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bbc0c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bbc1c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bbc2c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bbc3c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bbc4c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bbc5c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bbc6c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bbc7c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bbc8c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bbc9c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bbcac:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bbcbc:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bbccc:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bbcdc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bbcec:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bbcfc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bbd0c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bbd1c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bbd2c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bbd3c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bbd4c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bbd5c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bbd6c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bbd7c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bbd8c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bbd9c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bbdac:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bbdbc:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bbdcc:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bbddc:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bbdec:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bbdfc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bbe0c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bbe1c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bbe2c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bbe3c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bbe4c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bbe5c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bbe6c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bbe7c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bbe8c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bbe9c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bbeac:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bbebc <_ZTV12Adafruit_GFX>:
	...
   bbecc:	594d 000b 7429 000b 40ad 000b 5353 000b     MY..)t...@..SS..
   bbedc:	5355 000b 5387 000b 5363 000b 5375 000b     US...S..cS..uS..
   bbeec:	5295 000b 5353 000b 557f 000b 557d 000b     .R..SS...U..}U..
   bbefc:	539f 000b 53dd 000b 5417 000b 545d 000b     .S...S...T..]T..
   bbf0c:	5479 000b 54fd 000b                         yT...T..

000bbf14 <_ZTV16OledWingAdafruit>:
	...
   bbf1c:	5a5d 000b 5a7d 000b 594d 000b 7429 000b     ]Z..}Z..MY..)t..
   bbf2c:	6205 000b 5353 000b 5355 000b 5387 000b     .b..SS..US...S..
   bbf3c:	5363 000b 5375 000b 5295 000b 5353 000b     cS..uS...R..SS..
   bbf4c:	557f 000b 63a3 000b 694b 000b 68fd 000b     .U...c..Ki...h..
   bbf5c:	5417 000b 545d 000b 5479 000b 54fd 000b     .T..]T..yT...T..
   bbf6c:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000bbf7c <_ZTVN8particle11SPISettingsE>:
	...
   bbf84:	5241 000b 5215 000b 5217 000b               AR...R...R..

000bbf90 <_ZL12splash1_data>:
   bbf90:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   bbfa0:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   bbfb0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   bbfc0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   bbfd0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   bbfe0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   bbff8:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   bc008:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   bc018:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   bc028:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   bc038:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   bc048:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   bc058:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   bc068:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   bc078:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   bc088:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   bc098:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   bc0a8:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   bc0b8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   bc0c8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   bc0d8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   bc0e8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   bc0f8:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   bc108:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   bc120:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   bc138:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   bc148:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   bc158:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   bc168:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   bc178:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   bc188:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   bc198:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   bc1a8:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   bc1b8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   bc1c8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   bc1d8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   bc1e8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   bc1f8:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   bc208:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   bc218:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   bc228:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   bc238:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   bc248:	fdff 5b6b 6adb c0fd                         ..k[.j..

000bc250 <_ZL12splash2_data>:
   bc250:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bc260:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bc270:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bc28c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bc29c:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bc2ac:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bc2bc:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bc2cc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bc2dc:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bc2ec:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bc2fc:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bc30c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bc31c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bc32c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bc33c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bc34c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bc35c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bc36c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bc37c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bc38c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bc39c:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bc3ac:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bc3bc:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bc3cc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bc3e4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bc3f4:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bc404:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bc414:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bc424:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bc430 <_ZTV16Adafruit_SSD1306>:
	...
   bc438:	61d9 000b 61f1 000b 594d 000b 7429 000b     .a...a..MY..)t..
   bc448:	6205 000b 5353 000b 5355 000b 5387 000b     .b..SS..US...S..
   bc458:	5363 000b 5375 000b 5295 000b 5353 000b     cS..uS...R..SS..
   bc468:	557f 000b 63a3 000b 694b 000b 68fd 000b     .U...c..Ki...h..
   bc478:	5417 000b 545d 000b 5479 000b 54fd 000b     .T..]T..yT...T..

000bc488 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bc488:	8000 e0c0 f8f0 fefc                         ........

000bc490 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bc490:	0100 0703 1f0f 7f3f                         ......?.

000bc498 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bc498:	d5ae a880                                   ....

000bc49c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bc49c:	00d3 8d40                                   ..@.

000bc4a0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bc4a0:	0020 c8a1                                    ...

000bc4a4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bc4a4:	40db a6a4 af2e                              .@....

000bc4aa <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bc4aa:	02da 8f81                                   ....

000bc4ae <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bc4ae:	12da                                         ...

000bc4b1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bc4b1:	02da                                         ...

000bc4b4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bc4b4:	0022 21ff 0000 0000                         "..!....

000bc4bc <_ZL22BlynkReadHandlerVector>:
   bc4bc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc4cc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc4dc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc4ec:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc4fc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc50c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc51c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc52c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc53c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc54c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc55c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc56c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc57c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc58c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc59c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5ac:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5bc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5cc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5dc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5ec:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc5fc:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc60c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc61c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc62c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc63c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc64c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc65c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc66c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc67c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc68c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc69c:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..
   bc6ac:	6ad5 000b 6ad5 000b 6ad5 000b 6ad5 000b     .j...j...j...j..

000bc6bc <_ZL23BlynkWriteHandlerVector>:
   bc6bc:	6ad7 000b 4511 000b 6ad7 000b 6ad7 000b     .j...E...j...j..
   bc6cc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc6dc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc6ec:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc6fc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc70c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc71c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc72c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc73c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc74c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc75c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc76c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc77c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc78c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc79c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7ac:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7bc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7cc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7dc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7ec:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc7fc:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc80c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc81c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc82c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc83c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc84c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc85c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc86c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc87c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc88c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc89c:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..
   bc8ac:	6ad7 000b 6ad7 000b 6ad7 000b 6ad7 000b     .j...j...j...j..

000bc8bc <_ZTVN5spark13EthernetClassE>:
	...
   bc8c4:	714b 000b 7141 000b 7137 000b 712d 000b     Kq..Aq..7q..-q..
   bc8d4:	7121 000b 7115 000b 8109 000b 8111 000b     !q...q..........
   bc8e4:	7109 000b 7101 000b 70f7 000b 70ed 000b     .q...q...p...p..
   bc8f4:	8141 000b                                   A...

000bc8f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc8f8:	0800 1810 2820 3830                         .... (08

000bc900 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc908:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   bc918:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bc928 <_ZTV9IPAddress>:
	...
   bc930:	7751 000b 7741 000b 7743 000b               Qw..Aw..Cw..

000bc93c <_ZTV9USBSerial>:
	...
   bc944:	7863 000b 78cb 000b 78a1 000b 7429 000b     cx...x...x..)t..
   bc954:	7893 000b 7865 000b 7875 000b 78c5 000b     .x..ex..ux...x..
   bc964:	7885 000b 785d 000b                         .x..]x..

000bc96c <_ZTV11USARTSerial>:
	...
   bc974:	7965 000b 79d1 000b 79a9 000b 7429 000b     ey...y...y..)t..
   bc984:	7979 000b 7995 000b 7987 000b 79a3 000b     yy...y...y...y..
   bc994:	7967 000b 796b 000b                         gy..ky..

000bc99c <_ZTV7TwoWire>:
	...
   bc9a4:	7a09 000b 7a53 000b 7a2b 000b 7a0b 000b     .z..Sz..+z...z..
   bc9b4:	7a33 000b 7a3b 000b 7a43 000b 7a4b 000b     3z..;z..Cz..Kz..
   bc9c4:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   bc9d4:	2072 203d 6425 0000                         r = %d..

000bc9dc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc9e4:	7b39 000b 7b5d 000b 8047 000b 7b6b 000b     9{..]{..G...k{..
   bc9f4:	7b3d 000b                                   ={..

000bc9f8 <_ZTV9TCPClient>:
	...
   bca00:	75d1 000b 75e9 000b 7ab5 000b 7acf 000b     .u...u...z...z..
   bca10:	7edd 000b 7af9 000b 7d53 000b 7b2d 000b     .~...z..S}..-{..
   bca20:	7de5 000b 7c25 000b 7d81 000b 7f91 000b     .}..%|...}......
   bca30:	7d21 000b 7b2f 000b 7ae1 000b 7b71 000b     !}../{...z..q{..
   bca40:	7c05 000b                                   .|..

000bca44 <_ZTVN5spark9WiFiClassE>:
	...
   bca4c:	80ab 000b 80a1 000b 8097 000b 804d 000b     ............M...
   bca5c:	808b 000b 807f 000b 8109 000b 8111 000b     ................
   bca6c:	8073 000b 806b 000b 8061 000b 8057 000b     s...k...a...W...
   bca7c:	8141 000b                                   A...

000bca80 <_ZTVN5spark12NetworkClassE>:
	...
   bca88:	80c9 000b 80d3 000b 80dd 000b 80e7 000b     ................
   bca98:	80f1 000b 80fd 000b 8109 000b 8111 000b     ................
   bcaa8:	8119 000b 8125 000b 812d 000b 8137 000b     ....%...-...7...
   bcab8:	8141 000b                                   A...

000bcabc <_ZSt7nothrow>:
	...

000bcabd <_ZTSSt19_Sp_make_shared_tag>:
   bcabd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bcacd:	6572 5f64 6174 0067 0000                     red_tag....

000bcad8 <_ZTISt19_Sp_make_shared_tag>:
   bcad8:	cc50 000b cabd 000b 6f6e 2074 6e65 756f     P.......not enou
   bcae8:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   bcaf8:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   bcb08:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   bcb18:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   bcb28:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   bcb38:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   bcb48:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   bcb58:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   bcb68:	7461 0065 7325 203a 5f5f 6f70 2073 7728     ate.%s: __pos (w
   bcb78:	6968 6863 6920 2073 7a25 2975 3e20 7420     hich is %zu) > t
   bcb88:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   bcb98:	6863 6920 2073 7a25 2975 6200 7361 6369     ch is %zu).basic
   bcba8:	735f 7274 6e69 3a67 5f3a 5f4d 6572 6c70     _string::_M_repl
   bcbb8:	6361 0065 6162 6973 5f63 7473 6972 676e     ace.basic_string
   bcbc8:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   bcbd8:	6c75 206c 6f6e 2074 6176 696c 0064 6162     ull not valid.ba
   bcbe8:	6973 5f63 7473 6972 676e 3a3a 6162 6973     sic_string::basi
   bcbf8:	5f63 7473 6972 676e 6200 7361 6369 735f     c_string.basic_s
   bcc08:	7274 6e69 3a67 733a 6275 7473 0072 0000     tring::substr...

000bcc18 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcc18:	ccb0 000b cc24 000b ccd4 000b               ....$.......

000bcc24 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcc24:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bcc34:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bcc44:	0045 0000                                   E...

000bcc48 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcc48:	0000 0000 cc18 000b 8a91 000b 8aa5 000b     ................
   bcc58:	8c39 000b 8c39 000b 8b0f 000b 8a51 000b     9...9.......Q...
   bcc68:	8af7 000b 8ab9 000b 8a83 000b               ............

000bcc74 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bcc74:	ccb0 000b cc80 000b cc18 000b               ............

000bcc80 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bcc80:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bcc90:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bcca0:	666e 456f 0000 0000                         nfoE....

000bcca8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bcca8:	0000 0000 cc74 000b 8b39 000b 8b4d 000b     ....t...9...M...
   bccb8:	8c39 000b 8c39 000b 8b0f 000b 8a51 000b     9...9.......Q...
   bccc8:	8c0d 000b 8b99 000b 8b61 000b               ........a...

000bccd4 <_ZTISt9type_info>:
   bccd4:	cc50 000b ccdc 000b                         P.......

000bccdc <_ZTSSt9type_info>:
   bccdc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bccec:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bccfc:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bcd0c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bcd1c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bcd2c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bcd3c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bcd4c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bcd5c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bcd6c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bcd7c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bcd8c <fpi.1>:
   bcd8c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bcd9c:	0000 0000                                   ....

000bcda0 <fpinan.0>:
   bcda0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bcdb8 <tinytens>:
   bcdb8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bcdc8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bcdd8:	6f43 64ac 0628 1168                         Co.d(.h.

000bcde0 <_ctype_>:
   bcde0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bcdf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bce00:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bce10:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bce20:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bce30:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bce40:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bce50:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bce60:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bcee0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bcef0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bcf00:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bcf10:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bcf20:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bcf30:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bcf40:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bcf50:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bcf60:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bcf70:	6874 7865 632e 2e00 0000 0000               thex.c......

000bcf7c <_C_numeric_locale>:
   bcf7c:	cf77 000b cb48 000b e134 2003 4f50 4953     w...H...4.. POSI
   bcf8c:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   bcf9c:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bcfac:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bcfbc:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bcfcc:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bcfdc:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bcfec:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bcffc:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.
   bd00c:	0000 0000                                   ....

000bd010 <__mprec_bigtens>:
   bd010:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bd020:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bd030:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bd038 <__mprec_tens>:
   bd038:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bd048:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bd058:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bd068:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bd078:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bd088:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bd098:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bd0a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bd0b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bd0c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bd0d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bd0e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bd0f8:	9db4 79d9 7843 44ea                         ...yCx.D

000bd100 <p05.0>:
   bd100:	0005 0000 0019 0000 007d 0000               ........}...

000bd10c <link_const_variable_data_end>:
   bd10c:	000b4f31 	.word	0x000b4f31
   bd110:	000b7155 	.word	0x000b7155
   bd114:	000b72cd 	.word	0x000b72cd
   bd118:	000b7419 	.word	0x000b7419
   bd11c:	000b75a5 	.word	0x000b75a5
   bd120:	000b75b5 	.word	0x000b75b5
   bd124:	000b75fd 	.word	0x000b75fd
   bd128:	000b80b5 	.word	0x000b80b5
   bd12c:	000b8219 	.word	0x000b8219
