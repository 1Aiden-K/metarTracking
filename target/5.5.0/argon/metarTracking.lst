
c:/Users/aiden/Desktop/IoT-Engineering/metarTracking/target/5.5.0/argon/metarTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009128  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd148  000bd148  0000d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001dc  2003e0d4  000bd16c  0000e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000540  2003e2b0  2003e2b0  0001e2b0  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bd348  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd34c  000bd34c  0001d34c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd352  000bd352  0001d352  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd376  000bd376  0001d376  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001a8ae1  00000000  00000000  0001d37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001b90a  00000000  00000000  001c5e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000507b7  00000000  00000000  001e1765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003868  00000000  00000000  00231f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000cd98  00000000  00000000  00235784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00048166  00000000  00000000  0024251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005e810  00000000  00000000  0028a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001527e4  00000000  00000000  002e8e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c468  00000000  00000000  0043b678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000
	...

000b49f0 <memchr>:
   b49f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b49f4:	2a10      	cmp	r2, #16
   b49f6:	db2b      	blt.n	b4a50 <memchr+0x60>
   b49f8:	f010 0f07 	tst.w	r0, #7
   b49fc:	d008      	beq.n	b4a10 <memchr+0x20>
   b49fe:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a02:	3a01      	subs	r2, #1
   b4a04:	428b      	cmp	r3, r1
   b4a06:	d02d      	beq.n	b4a64 <memchr+0x74>
   b4a08:	f010 0f07 	tst.w	r0, #7
   b4a0c:	b342      	cbz	r2, b4a60 <memchr+0x70>
   b4a0e:	d1f6      	bne.n	b49fe <memchr+0xe>
   b4a10:	b4f0      	push	{r4, r5, r6, r7}
   b4a12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4a16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b4a1a:	f022 0407 	bic.w	r4, r2, #7
   b4a1e:	f07f 0700 	mvns.w	r7, #0
   b4a22:	2300      	movs	r3, #0
   b4a24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4a28:	3c08      	subs	r4, #8
   b4a2a:	ea85 0501 	eor.w	r5, r5, r1
   b4a2e:	ea86 0601 	eor.w	r6, r6, r1
   b4a32:	fa85 f547 	uadd8	r5, r5, r7
   b4a36:	faa3 f587 	sel	r5, r3, r7
   b4a3a:	fa86 f647 	uadd8	r6, r6, r7
   b4a3e:	faa5 f687 	sel	r6, r5, r7
   b4a42:	b98e      	cbnz	r6, b4a68 <memchr+0x78>
   b4a44:	d1ee      	bne.n	b4a24 <memchr+0x34>
   b4a46:	bcf0      	pop	{r4, r5, r6, r7}
   b4a48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4a4c:	f002 0207 	and.w	r2, r2, #7
   b4a50:	b132      	cbz	r2, b4a60 <memchr+0x70>
   b4a52:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4a56:	3a01      	subs	r2, #1
   b4a58:	ea83 0301 	eor.w	r3, r3, r1
   b4a5c:	b113      	cbz	r3, b4a64 <memchr+0x74>
   b4a5e:	d1f8      	bne.n	b4a52 <memchr+0x62>
   b4a60:	2000      	movs	r0, #0
   b4a62:	4770      	bx	lr
   b4a64:	3801      	subs	r0, #1
   b4a66:	4770      	bx	lr
   b4a68:	2d00      	cmp	r5, #0
   b4a6a:	bf06      	itte	eq
   b4a6c:	4635      	moveq	r5, r6
   b4a6e:	3803      	subeq	r0, #3
   b4a70:	3807      	subne	r0, #7
   b4a72:	f015 0f01 	tst.w	r5, #1
   b4a76:	d107      	bne.n	b4a88 <memchr+0x98>
   b4a78:	3001      	adds	r0, #1
   b4a7a:	f415 7f80 	tst.w	r5, #256	; 0x100
   b4a7e:	bf02      	ittt	eq
   b4a80:	3001      	addeq	r0, #1
   b4a82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b4a86:	3001      	addeq	r0, #1
   b4a88:	bcf0      	pop	{r4, r5, r6, r7}
   b4a8a:	3801      	subs	r0, #1
   b4a8c:	4770      	bx	lr
   b4a8e:	bf00      	nop

000b4a90 <strcmp>:
   b4a90:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4a94:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4a98:	2a01      	cmp	r2, #1
   b4a9a:	bf28      	it	cs
   b4a9c:	429a      	cmpcs	r2, r3
   b4a9e:	d0f7      	beq.n	b4a90 <strcmp>
   b4aa0:	1ad0      	subs	r0, r2, r3
   b4aa2:	4770      	bx	lr

000b4aa4 <strlen>:
   b4aa4:	4603      	mov	r3, r0
   b4aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4aaa:	2a00      	cmp	r2, #0
   b4aac:	d1fb      	bne.n	b4aa6 <strlen+0x2>
   b4aae:	1a18      	subs	r0, r3, r0
   b4ab0:	3801      	subs	r0, #1
   b4ab2:	4770      	bx	lr

000b4ab4 <__aeabi_d2lz>:
   b4ab4:	b538      	push	{r3, r4, r5, lr}
   b4ab6:	2200      	movs	r2, #0
   b4ab8:	2300      	movs	r3, #0
   b4aba:	4604      	mov	r4, r0
   b4abc:	460d      	mov	r5, r1
   b4abe:	f7ff fedd 	bl	b487c <__aeabi_dcmplt>
   b4ac2:	b928      	cbnz	r0, b4ad0 <__aeabi_d2lz+0x1c>
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	4629      	mov	r1, r5
   b4ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4acc:	f7ff bf6e 	b.w	b49ac <__aeabi_d2ulz>
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4ad6:	f7ff ff69 	bl	b49ac <__aeabi_d2ulz>
   b4ada:	4240      	negs	r0, r0
   b4adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ae0:	bd38      	pop	{r3, r4, r5, pc}
   b4ae2:	bf00      	nop

000b4ae4 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4ae4:	4809      	ldr	r0, [pc, #36]	; (b4b0c <module_user_pre_init+0x28>)
   b4ae6:	490a      	ldr	r1, [pc, #40]	; (b4b10 <module_user_pre_init+0x2c>)
   b4ae8:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4aea:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4aec:	d005      	beq.n	b4afa <module_user_pre_init+0x16>
   b4aee:	4a09      	ldr	r2, [pc, #36]	; (b4b14 <module_user_pre_init+0x30>)
   b4af0:	4282      	cmp	r2, r0
   b4af2:	d002      	beq.n	b4afa <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4af4:	1a12      	subs	r2, r2, r0
   b4af6:	f004 fe48 	bl	b978a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4afa:	4807      	ldr	r0, [pc, #28]	; (b4b18 <module_user_pre_init+0x34>)
   b4afc:	4a07      	ldr	r2, [pc, #28]	; (b4b1c <module_user_pre_init+0x38>)
   b4afe:	2100      	movs	r1, #0
   b4b00:	1a12      	subs	r2, r2, r0
   b4b02:	f004 fe6a 	bl	b97da <memset>
    return &link_global_data_start;
}
   b4b06:	4801      	ldr	r0, [pc, #4]	; (b4b0c <module_user_pre_init+0x28>)
   b4b08:	bd08      	pop	{r3, pc}
   b4b0a:	bf00      	nop
   b4b0c:	2003e0d4 	.word	0x2003e0d4
   b4b10:	000bd16c 	.word	0x000bd16c
   b4b14:	2003e2b0 	.word	0x2003e2b0
   b4b18:	2003e2b0 	.word	0x2003e2b0
   b4b1c:	2003e7f0 	.word	0x2003e7f0

000b4b20 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4b20:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b22:	4e07      	ldr	r6, [pc, #28]	; (b4b40 <module_user_init+0x20>)
   b4b24:	4c07      	ldr	r4, [pc, #28]	; (b4b44 <module_user_init+0x24>)
    module_user_init_hook();
   b4b26:	f003 fb39 	bl	b819c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b2a:	1ba4      	subs	r4, r4, r6
   b4b2c:	08a4      	lsrs	r4, r4, #2
   b4b2e:	2500      	movs	r5, #0
   b4b30:	42ac      	cmp	r4, r5
   b4b32:	d100      	bne.n	b4b36 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4b34:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4b36:	f856 3b04 	ldr.w	r3, [r6], #4
   b4b3a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4b3c:	3501      	adds	r5, #1
   b4b3e:	e7f7      	b.n	b4b30 <module_user_init+0x10>
   b4b40:	000bd124 	.word	0x000bd124
   b4b44:	000bd148 	.word	0x000bd148

000b4b48 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4b48:	f000 bedc 	b.w	b5904 <setup>

000b4b4c <module_user_loop>:
}

void module_user_loop() {
   b4b4c:	b508      	push	{r3, lr}
    loop();
   b4b4e:	f000 fd8f 	bl	b5670 <loop>
    _post_loop();
}
   b4b52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4b56:	f003 bad9 	b.w	b810c <_post_loop>

000b4b5a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4b5a:	f002 bfd7 	b.w	b7b0c <malloc>

000b4b5e <_Znaj>:
   b4b5e:	f002 bfd5 	b.w	b7b0c <malloc>

000b4b62 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4b62:	f002 bfdb 	b.w	b7b1c <free>

000b4b66 <_ZdaPv>:
   b4b66:	f002 bfd9 	b.w	b7b1c <free>

000b4b6a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4b6a:	f002 bfd7 	b.w	b7b1c <free>
	...

000b4b70 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4b70:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4b72:	4a03      	ldr	r2, [pc, #12]	; (b4b80 <__cxa_pure_virtual+0x10>)
   b4b74:	4903      	ldr	r1, [pc, #12]	; (b4b84 <__cxa_pure_virtual+0x14>)
   b4b76:	200c      	movs	r0, #12
   b4b78:	f002 ff14 	bl	b79a4 <panic_>
  while (1);
   b4b7c:	e7fe      	b.n	b4b7c <__cxa_pure_virtual+0xc>
   b4b7e:	bf00      	nop
   b4b80:	000b7675 	.word	0x000b7675
   b4b84:	000bb7d0 	.word	0x000bb7d0

000b4b88 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4b88:	7800      	ldrb	r0, [r0, #0]
   b4b8a:	fab0 f080 	clz	r0, r0
   b4b8e:	0940      	lsrs	r0, r0, #5
   b4b90:	4770      	bx	lr

000b4b92 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4b92:	2301      	movs	r3, #1
   b4b94:	7003      	strb	r3, [r0, #0]
   b4b96:	4770      	bx	lr

000b4b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>:
       *  @a str is a valid, but unspecified string.
       **/
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2063. Contradictory requirements for string move assignment
      basic_string&
      operator=(basic_string&& __str)
   b4b98:	b570      	push	{r4, r5, r6, lr}
      { return _M_dataplus._M_p; }
   b4b9a:	460b      	mov	r3, r1
      operator=(basic_string&& __str)
   b4b9c:	460c      	mov	r4, r1
      { return _M_dataplus._M_p; }
   b4b9e:	f853 1b08 	ldr.w	r1, [r3], #8
	    _M_set_length(0);
	  }
	// Replace allocator if POCMA is true.
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

	if (__str._M_is_local())
   b4ba2:	4299      	cmp	r1, r3
      operator=(basic_string&& __str)
   b4ba4:	4605      	mov	r5, r0
      { return _M_dataplus._M_p; }
   b4ba6:	6800      	ldr	r0, [r0, #0]
	if (__str._M_is_local())
   b4ba8:	d10d      	bne.n	b4bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x2e>
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4baa:	6862      	ldr	r2, [r4, #4]
	    if (__str.size())
   b4bac:	b10a      	cbz	r2, b4bb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x1a>
	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
   b4bae:	f004 fb09 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      { return _M_string_length; }
   b4bb2:	6863      	ldr	r3, [r4, #4]
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   b4bb4:	682a      	ldr	r2, [r5, #0]
      { _M_string_length = __length; }
   b4bb6:	606b      	str	r3, [r5, #4]
   b4bb8:	2100      	movs	r1, #0
   b4bba:	54d1      	strb	r1, [r2, r3]
      { return _M_dataplus._M_p; }
   b4bbc:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4bbe:	2300      	movs	r3, #0
   b4bc0:	6063      	str	r3, [r4, #4]
   b4bc2:	7013      	strb	r3, [r2, #0]
      }
   b4bc4:	bd70      	pop	{r4, r5, r6, pc}
      { _M_dataplus._M_p = __p; }
   b4bc6:	6029      	str	r1, [r5, #0]

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      length() const _GLIBCXX_NOEXCEPT
      { return _M_string_length; }
   b4bc8:	6861      	ldr	r1, [r4, #4]
      { _M_string_length = __length; }
   b4bca:	6069      	str	r1, [r5, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   b4bcc:	f105 0608 	add.w	r6, r5, #8
	    if (!_M_is_local())
   b4bd0:	42b0      	cmp	r0, r6
	    _M_capacity(__str._M_allocated_capacity);
   b4bd2:	68a1      	ldr	r1, [r4, #8]
		    __capacity = _M_allocated_capacity;
   b4bd4:	bf18      	it	ne
   b4bd6:	68aa      	ldrne	r2, [r5, #8]
      { _M_allocated_capacity = __capacity; }
   b4bd8:	60a9      	str	r1, [r5, #8]
	    pointer __data = nullptr;
   b4bda:	bf08      	it	eq
   b4bdc:	2000      	moveq	r0, #0
	    if (__data)
   b4bde:	b110      	cbz	r0, b4be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x4e>
      { _M_dataplus._M_p = __p; }
   b4be0:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4be2:	60a2      	str	r2, [r4, #8]
   b4be4:	e7ea      	b.n	b4bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>
      { _M_dataplus._M_p = __p; }
   b4be6:	6023      	str	r3, [r4, #0]
   b4be8:	e7e8      	b.n	b4bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0+0x24>

000b4bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>:
      operator=(const _CharT* __s)
   b4bea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4bec:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4bee:	4608      	mov	r0, r1
   b4bf0:	9103      	str	r1, [sp, #12]
   b4bf2:	f7ff ff57 	bl	b4aa4 <strlen>
       */
      basic_string&
      assign(const _CharT* __s)
      {
	__glibcxx_requires_string(__s);
	return _M_replace(size_type(0), this->size(), __s,
   b4bf6:	9b03      	ldr	r3, [sp, #12]
   b4bf8:	9000      	str	r0, [sp, #0]
   b4bfa:	6862      	ldr	r2, [r4, #4]
   b4bfc:	2100      	movs	r1, #0
   b4bfe:	4620      	mov	r0, r4
   b4c00:	f004 fb60 	bl	b92c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
      { return this->assign(__s); }
   b4c04:	b004      	add	sp, #16
   b4c06:	bd10      	pop	{r4, pc}

000b4c08 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4c08:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c0a:	f002 fd3b 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c0e:	4b03      	ldr	r3, [pc, #12]	; (b4c1c <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4c10:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4c16:	f002 bf61 	b.w	b7adc <spark_process>
   b4c1a:	bf00      	nop
   b4c1c:	2003e740 	.word	0x2003e740

000b4c20 <_Z8callbackPcPhj>:
  //gets the airport code from the list
  airport = airports[param.asInt() - 1];
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c22:	ed2d 8b02 	vpush	{d8}
    char p[length + 1];
   b4c26:	f102 0308 	add.w	r3, r2, #8
{
   b4c2a:	b087      	sub	sp, #28
    char p[length + 1];
   b4c2c:	f023 0307 	bic.w	r3, r3, #7
{
   b4c30:	af00      	add	r7, sp, #0
    char p[length + 1];
   b4c32:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4c36:	4614      	mov	r4, r2
    memcpy(p, payload, length);
   b4c38:	4668      	mov	r0, sp
   b4c3a:	f004 fda6 	bl	b978a <memcpy>
    p[length] = NULL;
   b4c3e:	2300      	movs	r3, #0
   b4c40:	f80d 3004 	strb.w	r3, [sp, r4]
	this->_M_assign(__str);
   b4c44:	4c8d      	ldr	r4, [pc, #564]	; (b4e7c <_Z8callbackPcPhj+0x25c>)

    //takes the recieved code and reverses it
    metarCode = p;
   b4c46:	488e      	ldr	r0, [pc, #568]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4c48:	4669      	mov	r1, sp
   b4c4a:	f7ff ffce 	bl	b4bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
   b4c4e:	498c      	ldr	r1, [pc, #560]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4c50:	4620      	mov	r0, r4
   b4c52:	f004 fad4 	bl	b91fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
      { return iterator(_M_data() + this->size()); }
   b4c56:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4c5a:	4413      	add	r3, r2
    _GLIBCXX20_CONSTEXPR
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      random_access_iterator_tag)
    {
      if (__first == __last)
   b4c5c:	4293      	cmp	r3, r2
   b4c5e:	d009      	beq.n	b4c74 <_Z8callbackPcPhj+0x54>
      // Bidirectional iterator requirements
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator--() _GLIBCXX_NOEXCEPT
      {
	--_M_current;
   b4c60:	3b01      	subs	r3, #1
	return;
      --__last;
      while (__first < __last)
   b4c62:	429a      	cmp	r2, r3
   b4c64:	d206      	bcs.n	b4c74 <_Z8callbackPcPhj+0x54>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c66:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b4c68:	7818      	ldrb	r0, [r3, #0]
   b4c6a:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b4c6e:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b4c72:	e7f6      	b.n	b4c62 <_Z8callbackPcPhj+0x42>
    metarCodeReversed = metarCode;
    reverse(metarCodeReversed.begin(), metarCodeReversed.end());


  //uses the non reversed code to find the cloud type
  if (metarCode.find("SCT") != -1){
   b4c74:	4983      	ldr	r1, [pc, #524]	; (b4e84 <_Z8callbackPcPhj+0x264>)
   b4c76:	4882      	ldr	r0, [pc, #520]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4c78:	2200      	movs	r2, #0
   b4c7a:	f004 fbd8 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4c7e:	3001      	adds	r0, #1
   b4c80:	d02a      	beq.n	b4cd8 <_Z8callbackPcPhj+0xb8>
    cloudCatagory = "SCT";
   b4c82:	4980      	ldr	r1, [pc, #512]	; (b4e84 <_Z8callbackPcPhj+0x264>)
  }else if (metarCode.find("FEW") != -1){
    cloudCatagory = "FEW";
  }else if (metarCode.find("BKN") != -1){
    cloudCatagory = "BKN";
  }else if (metarCode.find("OVC") != -1){
    cloudCatagory = "OVC";
   b4c84:	4880      	ldr	r0, [pc, #512]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4c86:	f7ff ffb0 	bl	b4bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
  }
  
  //finds the cloud height and stores it as an int
  cloudHeight = metarCode.substr((metarCode.find(cloudCatagory))+3, 3);
   b4c8a:	497f      	ldr	r1, [pc, #508]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4c8c:	487c      	ldr	r0, [pc, #496]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4c8e:	4c7f      	ldr	r4, [pc, #508]	; (b4e8c <_Z8callbackPcPhj+0x26c>)
   b4c90:	2200      	movs	r2, #0
   b4c92:	f004 fbc6 	bl	b9422 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
   b4c96:	2303      	movs	r3, #3
   b4c98:	18c2      	adds	r2, r0, r3
   b4c9a:	4979      	ldr	r1, [pc, #484]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4c9c:	4638      	mov	r0, r7
   b4c9e:	f004 fc33 	bl	b9508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b4ca2:	4639      	mov	r1, r7
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	f7ff ff77 	bl	b4b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
      { _M_dispose(); }
   b4caa:	4638      	mov	r0, r7
   b4cac:	f004 fa5c 	bl	b9168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  height = stoi(cloudHeight);
   b4cb0:	6825      	ldr	r5, [r4, #0]
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b4cb2:	f002 ff63 	bl	b7b7c <__errno>
   b4cb6:	6806      	ldr	r6, [r0, #0]
   b4cb8:	f002 ff60 	bl	b7b7c <__errno>
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4cc0:	220a      	movs	r2, #10
   b4cc2:	4639      	mov	r1, r7
   b4cc4:	4628      	mov	r0, r5
   b4cc6:	f005 fc97 	bl	ba5f8 <strtol>

      if (__endptr == __str)
   b4cca:	683b      	ldr	r3, [r7, #0]
   b4ccc:	429d      	cmp	r5, r3
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4cce:	4604      	mov	r4, r0
      if (__endptr == __str)
   b4cd0:	d126      	bne.n	b4d20 <_Z8callbackPcPhj+0x100>
	std::__throw_invalid_argument(__name);
   b4cd2:	486f      	ldr	r0, [pc, #444]	; (b4e90 <_Z8callbackPcPhj+0x270>)
   b4cd4:	f004 f956 	bl	b8f84 <_ZSt24__throw_invalid_argumentPKc>
  }else if (metarCode.find("SKC") != -1){
   b4cd8:	496e      	ldr	r1, [pc, #440]	; (b4e94 <_Z8callbackPcPhj+0x274>)
   b4cda:	4869      	ldr	r0, [pc, #420]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4cdc:	2200      	movs	r2, #0
   b4cde:	f004 fba6 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4ce2:	3001      	adds	r0, #1
   b4ce4:	d001      	beq.n	b4cea <_Z8callbackPcPhj+0xca>
    cloudCatagory = "SKC";
   b4ce6:	496b      	ldr	r1, [pc, #428]	; (b4e94 <_Z8callbackPcPhj+0x274>)
   b4ce8:	e7cc      	b.n	b4c84 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("FEW") != -1){
   b4cea:	496b      	ldr	r1, [pc, #428]	; (b4e98 <_Z8callbackPcPhj+0x278>)
   b4cec:	4864      	ldr	r0, [pc, #400]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4cee:	2200      	movs	r2, #0
   b4cf0:	f004 fb9d 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4cf4:	3001      	adds	r0, #1
   b4cf6:	d001      	beq.n	b4cfc <_Z8callbackPcPhj+0xdc>
    cloudCatagory = "FEW";
   b4cf8:	4967      	ldr	r1, [pc, #412]	; (b4e98 <_Z8callbackPcPhj+0x278>)
   b4cfa:	e7c3      	b.n	b4c84 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("BKN") != -1){
   b4cfc:	4967      	ldr	r1, [pc, #412]	; (b4e9c <_Z8callbackPcPhj+0x27c>)
   b4cfe:	4860      	ldr	r0, [pc, #384]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4d00:	2200      	movs	r2, #0
   b4d02:	f004 fb94 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4d06:	3001      	adds	r0, #1
   b4d08:	d001      	beq.n	b4d0e <_Z8callbackPcPhj+0xee>
    cloudCatagory = "BKN";
   b4d0a:	4964      	ldr	r1, [pc, #400]	; (b4e9c <_Z8callbackPcPhj+0x27c>)
   b4d0c:	e7ba      	b.n	b4c84 <_Z8callbackPcPhj+0x64>
  }else if (metarCode.find("OVC") != -1){
   b4d0e:	4964      	ldr	r1, [pc, #400]	; (b4ea0 <_Z8callbackPcPhj+0x280>)
   b4d10:	485b      	ldr	r0, [pc, #364]	; (b4e80 <_Z8callbackPcPhj+0x260>)
   b4d12:	2200      	movs	r2, #0
   b4d14:	f004 fb8b 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4d18:	3001      	adds	r0, #1
   b4d1a:	d0b6      	beq.n	b4c8a <_Z8callbackPcPhj+0x6a>
    cloudCatagory = "OVC";
   b4d1c:	4960      	ldr	r1, [pc, #384]	; (b4ea0 <_Z8callbackPcPhj+0x280>)
   b4d1e:	e7b1      	b.n	b4c84 <_Z8callbackPcPhj+0x64>
      else if (errno == ERANGE
   b4d20:	f002 ff2c 	bl	b7b7c <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b4d24:	6803      	ldr	r3, [r0, #0]
   b4d26:	2b22      	cmp	r3, #34	; 0x22
   b4d28:	d102      	bne.n	b4d30 <_Z8callbackPcPhj+0x110>
	std::__throw_out_of_range(__name);
   b4d2a:	4859      	ldr	r0, [pc, #356]	; (b4e90 <_Z8callbackPcPhj+0x270>)
   b4d2c:	f004 f930 	bl	b8f90 <_ZSt20__throw_out_of_rangePKc>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b4d30:	f002 ff24 	bl	b7b7c <__errno>
   b4d34:	6803      	ldr	r3, [r0, #0]
   b4d36:	b913      	cbnz	r3, b4d3e <_Z8callbackPcPhj+0x11e>
   b4d38:	f002 ff20 	bl	b7b7c <__errno>
   b4d3c:	6006      	str	r6, [r0, #0]
  height = stoi(cloudHeight);
   b4d3e:	4d59      	ldr	r5, [pc, #356]	; (b4ea4 <_Z8callbackPcPhj+0x284>)

  //takes the reversed metar code to find the amount of stature miles (stores it reversed in a string)
  statureMiles = metarCodeReversed.substr(
  (metarCodeReversed.find("MS") + 2),
   b4d40:	4959      	ldr	r1, [pc, #356]	; (b4ea8 <_Z8callbackPcPhj+0x288>)
   b4d42:	484e      	ldr	r0, [pc, #312]	; (b4e7c <_Z8callbackPcPhj+0x25c>)
  height = stoi(cloudHeight);
   b4d44:	602c      	str	r4, [r5, #0]
  (metarCodeReversed.find("MS") + 2),
   b4d46:	2200      	movs	r2, #0
   b4d48:	f004 fb71 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
  (metarCodeReversed.find(" ",
   b4d4c:	4956      	ldr	r1, [pc, #344]	; (b4ea8 <_Z8callbackPcPhj+0x288>)
  (metarCodeReversed.find("MS") + 2),
   b4d4e:	4606      	mov	r6, r0
  (metarCodeReversed.find(" ",
   b4d50:	2200      	movs	r2, #0
   b4d52:	484a      	ldr	r0, [pc, #296]	; (b4e7c <_Z8callbackPcPhj+0x25c>)
   b4d54:	f004 fb6b 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4d58:	4954      	ldr	r1, [pc, #336]	; (b4eac <_Z8callbackPcPhj+0x28c>)
   b4d5a:	4602      	mov	r2, r0
   b4d5c:	4847      	ldr	r0, [pc, #284]	; (b4e7c <_Z8callbackPcPhj+0x25c>)
   b4d5e:	f004 fb66 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b4d62:	4951      	ldr	r1, [pc, #324]	; (b4ea8 <_Z8callbackPcPhj+0x288>)
  (metarCodeReversed.find(" ",
   b4d64:	4604      	mov	r4, r0
   metarCodeReversed.find("MS")) - (metarCodeReversed.find("MS") + 2)));
   b4d66:	2200      	movs	r2, #0
   b4d68:	4844      	ldr	r0, [pc, #272]	; (b4e7c <_Z8callbackPcPhj+0x25c>)
   b4d6a:	f004 fb60 	bl	b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   b4d6e:	3c02      	subs	r4, #2
   b4d70:	1a23      	subs	r3, r4, r0
   b4d72:	4c4f      	ldr	r4, [pc, #316]	; (b4eb0 <_Z8callbackPcPhj+0x290>)
   b4d74:	4941      	ldr	r1, [pc, #260]	; (b4e7c <_Z8callbackPcPhj+0x25c>)
   b4d76:	1cb2      	adds	r2, r6, #2
   b4d78:	4638      	mov	r0, r7
   b4d7a:	f004 fbc5 	bl	b9508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   b4d7e:	4639      	mov	r1, r7
   b4d80:	4620      	mov	r0, r4
   b4d82:	f7ff ff09 	bl	b4b98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_.isra.0>
   b4d86:	4638      	mov	r0, r7
   b4d88:	f004 f9ee 	bl	b9168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      { return iterator(_M_data() + this->size()); }
   b4d8c:	e9d4 2300 	ldrd	r2, r3, [r4]
   b4d90:	4413      	add	r3, r2
      if (__first == __last)
   b4d92:	4293      	cmp	r3, r2
   b4d94:	d009      	beq.n	b4daa <_Z8callbackPcPhj+0x18a>
	--_M_current;
   b4d96:	3b01      	subs	r3, #1
      while (__first < __last)
   b4d98:	429a      	cmp	r2, r3
   b4d9a:	d206      	bcs.n	b4daa <_Z8callbackPcPhj+0x18a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d9c:	7811      	ldrb	r1, [r2, #0]
      __a = _GLIBCXX_MOVE(__b);
   b4d9e:	7818      	ldrb	r0, [r3, #0]
   b4da0:	f802 0b01 	strb.w	r0, [r2], #1
      __b = _GLIBCXX_MOVE(__tmp);
   b4da4:	f803 1901 	strb.w	r1, [r3], #-1
	return *this;
   b4da8:	e7f6      	b.n	b4d98 <_Z8callbackPcPhj+0x178>

  //converts stature miles into the correct order and a float
  reverse(statureMiles.begin(),statureMiles.end());
  stature = atof(statureMiles.c_str());
   b4daa:	6820      	ldr	r0, [r4, #0]
   b4dac:	4c41      	ldr	r4, [pc, #260]	; (b4eb4 <_Z8callbackPcPhj+0x294>)
   b4dae:	f004 fcd1 	bl	b9754 <atof>
   b4db2:	ec51 0b10 	vmov	r0, r1, d0
   b4db6:	f7ff fda9 	bl	b490c <__aeabi_d2f>
   b4dba:	ee07 0a90 	vmov	s15, r0

  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   b4dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
   b4dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  stature = atof(statureMiles.c_str());
   b4dca:	6020      	str	r0, [r4, #0]
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4dcc:	d513      	bpl.n	b4df6 <_Z8callbackPcPhj+0x1d6>
    status = "LIFR";
   b4dce:	493a      	ldr	r1, [pc, #232]	; (b4eb8 <_Z8callbackPcPhj+0x298>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4dd0:	4c3a      	ldr	r4, [pc, #232]	; (b4ebc <_Z8callbackPcPhj+0x29c>)
    status = "MVFR";
  }else{
    /*Note: if this were to actually get used in an airport, I would not want to have 
    VFR be the else. It would be better to have LIFR be the default to not be at risk.
    This should be sufficient for a demonstration though.*/
    status = "VFR";
   b4dd2:	483b      	ldr	r0, [pc, #236]	; (b4ec0 <_Z8callbackPcPhj+0x2a0>)
   b4dd4:	f7ff ff09 	bl	b4bea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc.isra.0>
   b4dd8:	2300      	movs	r3, #0
   b4dda:	6123      	str	r3, [r4, #16]
      { return _M_dataplus._M_p; }
   b4ddc:	4b38      	ldr	r3, [pc, #224]	; (b4ec0 <_Z8callbackPcPhj+0x2a0>)
  }

  display.setCursor(0,0);
  display.println(status.c_str());
   b4dde:	4620      	mov	r0, r4
   b4de0:	6819      	ldr	r1, [r3, #0]
   b4de2:	f003 f8bc 	bl	b7f5e <_ZN5Print7printlnEPKc>
  display.display();
   b4de6:	4620      	mov	r0, r4
   b4de8:	f002 fb2e 	bl	b7448 <_ZN16Adafruit_SSD13067displayEv>
}
   b4dec:	371c      	adds	r7, #28
   b4dee:	46bd      	mov	sp, r7
   b4df0:	ecbd 8b02 	vpop	{d8}
   b4df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
   b4df6:	492a      	ldr	r1, [pc, #168]	; (b4ea0 <_Z8callbackPcPhj+0x280>)
   b4df8:	4823      	ldr	r0, [pc, #140]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4dfa:	f004 fb27 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4dfe:	b968      	cbnz	r0, b4e1c <_Z8callbackPcPhj+0x1fc>
   b4e00:	682b      	ldr	r3, [r5, #0]
   b4e02:	2b04      	cmp	r3, #4
   b4e04:	dde3      	ble.n	b4dce <_Z8callbackPcPhj+0x1ae>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b4e06:	edd4 7a00 	vldr	s15, [r4]
   b4e0a:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
   b4e0e:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e16:	d508      	bpl.n	b4e2a <_Z8callbackPcPhj+0x20a>
    status = "IFR";
   b4e18:	492a      	ldr	r1, [pc, #168]	; (b4ec4 <_Z8callbackPcPhj+0x2a4>)
   b4e1a:	e7d9      	b.n	b4dd0 <_Z8callbackPcPhj+0x1b0>
   b4e1c:	491f      	ldr	r1, [pc, #124]	; (b4e9c <_Z8callbackPcPhj+0x27c>)
   b4e1e:	481a      	ldr	r0, [pc, #104]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4e20:	f004 fb14 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  if (stature < 1.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 5)){
   b4e24:	2800      	cmp	r0, #0
   b4e26:	d0eb      	beq.n	b4e00 <_Z8callbackPcPhj+0x1e0>
   b4e28:	e7ed      	b.n	b4e06 <_Z8callbackPcPhj+0x1e6>
   b4e2a:	491d      	ldr	r1, [pc, #116]	; (b4ea0 <_Z8callbackPcPhj+0x280>)
   b4e2c:	4816      	ldr	r0, [pc, #88]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4e2e:	f004 fb0d 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b4e32:	b958      	cbnz	r0, b4e4c <_Z8callbackPcPhj+0x22c>
   b4e34:	682b      	ldr	r3, [r5, #0]
   b4e36:	2b09      	cmp	r3, #9
   b4e38:	ddee      	ble.n	b4e18 <_Z8callbackPcPhj+0x1f8>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4e3a:	edd4 7a00 	vldr	s15, [r4]
   b4e3e:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4e46:	db08      	blt.n	b4e5a <_Z8callbackPcPhj+0x23a>
    status = "MVFR";
   b4e48:	491f      	ldr	r1, [pc, #124]	; (b4ec8 <_Z8callbackPcPhj+0x2a8>)
   b4e4a:	e7c1      	b.n	b4dd0 <_Z8callbackPcPhj+0x1b0>
   b4e4c:	4913      	ldr	r1, [pc, #76]	; (b4e9c <_Z8callbackPcPhj+0x27c>)
   b4e4e:	480e      	ldr	r0, [pc, #56]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4e50:	f004 fafc 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature < 3.0 || ((cloudCatagory == "OVC" || cloudCatagory == "BKN") && height < 10)){
   b4e54:	2800      	cmp	r0, #0
   b4e56:	d0ed      	beq.n	b4e34 <_Z8callbackPcPhj+0x214>
   b4e58:	e7ef      	b.n	b4e3a <_Z8callbackPcPhj+0x21a>
   b4e5a:	4910      	ldr	r1, [pc, #64]	; (b4e9c <_Z8callbackPcPhj+0x27c>)
   b4e5c:	480a      	ldr	r0, [pc, #40]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4e5e:	f004 faf5 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4e62:	b920      	cbnz	r0, b4e6e <_Z8callbackPcPhj+0x24e>
   b4e64:	682b      	ldr	r3, [r5, #0]
   b4e66:	2b09      	cmp	r3, #9
   b4e68:	dcee      	bgt.n	b4e48 <_Z8callbackPcPhj+0x228>
    status = "VFR";
   b4e6a:	4918      	ldr	r1, [pc, #96]	; (b4ecc <_Z8callbackPcPhj+0x2ac>)
   b4e6c:	e7b0      	b.n	b4dd0 <_Z8callbackPcPhj+0x1b0>
   b4e6e:	490c      	ldr	r1, [pc, #48]	; (b4ea0 <_Z8callbackPcPhj+0x280>)
   b4e70:	4805      	ldr	r0, [pc, #20]	; (b4e88 <_Z8callbackPcPhj+0x268>)
   b4e72:	f004 faeb 	bl	b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
  }else if (stature >= 3.0 || ((cloudCatagory == "BKN" || cloudCatagory == "OVC") && height >= 10)){
   b4e76:	2800      	cmp	r0, #0
   b4e78:	d0f4      	beq.n	b4e64 <_Z8callbackPcPhj+0x244>
   b4e7a:	e7f6      	b.n	b4e6a <_Z8callbackPcPhj+0x24a>
   b4e7c:	2003e328 	.word	0x2003e328
   b4e80:	2003e358 	.word	0x2003e358
   b4e84:	000bb7e5 	.word	0x000bb7e5
   b4e88:	2003e310 	.word	0x2003e310
   b4e8c:	2003e2e0 	.word	0x2003e2e0
   b4e90:	000bb7f9 	.word	0x000bb7f9
   b4e94:	000bb7e9 	.word	0x000bb7e9
   b4e98:	000bb7ed 	.word	0x000bb7ed
   b4e9c:	000bb7f1 	.word	0x000bb7f1
   b4ea0:	000bb7f5 	.word	0x000bb7f5
   b4ea4:	2003e6ac 	.word	0x2003e6ac
   b4ea8:	000bb7fe 	.word	0x000bb7fe
   b4eac:	000bcb5f 	.word	0x000bcb5f
   b4eb0:	2003e2f8 	.word	0x2003e2f8
   b4eb4:	2003e6b4 	.word	0x2003e6b4
   b4eb8:	000bb801 	.word	0x000bb801
   b4ebc:	2003e63c 	.word	0x2003e63c
   b4ec0:	2003e340 	.word	0x2003e340
   b4ec4:	000bb802 	.word	0x000bb802
   b4ec8:	000bb806 	.word	0x000bb806
   b4ecc:	000bb807 	.word	0x000bb807

000b4ed0 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4ed0:	6803      	ldr	r3, [r0, #0]
   b4ed2:	b12b      	cbz	r3, b4ee0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4ed4:	6842      	ldr	r2, [r0, #4]
   b4ed6:	4293      	cmp	r3, r2
   b4ed8:	d202      	bcs.n	b4ee0 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4eda:	4618      	mov	r0, r3
   b4edc:	f004 bc3d 	b.w	b975a <atoi>
   b4ee0:	2000      	movs	r0, #0
   b4ee2:	4770      	bx	lr

000b4ee4 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4ee4:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4ee6:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4ee8:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4eea:	b145      	cbz	r5, b4efe <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4eec:	6843      	ldr	r3, [r0, #4]
   b4eee:	429d      	cmp	r5, r3
   b4ef0:	d205      	bcs.n	b4efe <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4ef2:	4628      	mov	r0, r5
   b4ef4:	f7ff fdd6 	bl	b4aa4 <strlen>
   b4ef8:	3001      	adds	r0, #1
   b4efa:	4405      	add	r5, r0
   b4efc:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4efe:	4620      	mov	r0, r4
   b4f00:	bd38      	pop	{r3, r4, r5, pc}

000b4f02 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f04:	4604      	mov	r4, r0
   b4f06:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4f08:	460d      	mov	r5, r1
   b4f0a:	b921      	cbnz	r1, b4f16 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4f0c:	6803      	ldr	r3, [r0, #0]
   b4f0e:	1c7a      	adds	r2, r7, #1
   b4f10:	6042      	str	r2, [r0, #4]
   b4f12:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add_raw(str, strlen(str)+1);
}
   b4f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add_raw(str, strlen(str)+1);
   b4f16:	4608      	mov	r0, r1
   b4f18:	f7ff fdc4 	bl	b4aa4 <strlen>
    if (len + l > buff_size)
   b4f1c:	68a3      	ldr	r3, [r4, #8]
    add_raw(str, strlen(str)+1);
   b4f1e:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4f20:	19f2      	adds	r2, r6, r7
   b4f22:	429a      	cmp	r2, r3
   b4f24:	d8f6      	bhi.n	b4f14 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4f26:	6820      	ldr	r0, [r4, #0]
   b4f28:	4632      	mov	r2, r6
   b4f2a:	4629      	mov	r1, r5
   b4f2c:	4438      	add	r0, r7
   b4f2e:	f004 fc2c 	bl	b978a <memcpy>
    len += l;
   b4f32:	6860      	ldr	r0, [r4, #4]
   b4f34:	4430      	add	r0, r6
   b4f36:	6060      	str	r0, [r4, #4]
   b4f38:	e7ec      	b.n	b4f14 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4f3c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4f3c:	b538      	push	{r3, r4, r5, lr}
   b4f3e:	4604      	mov	r4, r0
   b4f40:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4f42:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4f46:	6825      	ldr	r5, [r4, #0]
   b4f48:	4a04      	ldr	r2, [pc, #16]	; (b4f5c <_ZN10BlynkParam3addEi+0x20>)
   b4f4a:	1a09      	subs	r1, r1, r0
   b4f4c:	4428      	add	r0, r5
   b4f4e:	f002 fdf5 	bl	b7b3c <snprintf>
   b4f52:	6863      	ldr	r3, [r4, #4]
   b4f54:	3001      	adds	r0, #1
   b4f56:	4403      	add	r3, r0
   b4f58:	6063      	str	r3, [r4, #4]
    }
   b4f5a:	bd38      	pop	{r3, r4, r5, pc}
   b4f5c:	000bb80b 	.word	0x000bb80b

000b4f60 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4f60:	b538      	push	{r3, r4, r5, lr}
   b4f62:	4604      	mov	r4, r0
   b4f64:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4f66:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4f6a:	6825      	ldr	r5, [r4, #0]
   b4f6c:	4a04      	ldr	r2, [pc, #16]	; (b4f80 <_ZN10BlynkParam3addEl+0x20>)
   b4f6e:	1a09      	subs	r1, r1, r0
   b4f70:	4428      	add	r0, r5
   b4f72:	f002 fde3 	bl	b7b3c <snprintf>
   b4f76:	6863      	ldr	r3, [r4, #4]
   b4f78:	3001      	adds	r0, #1
   b4f7a:	4403      	add	r3, r0
   b4f7c:	6063      	str	r3, [r4, #4]
    }
   b4f7e:	bd38      	pop	{r3, r4, r5, pc}
   b4f80:	000bb80e 	.word	0x000bb80e

000b4f84 <_ZN22BlynkTransportParticle14_connectToPortEt>:
    void begin(const char* d, uint16_t p) {
        domain = d;
        port = p;
    }

    bool _connectToPort(uint16_t p) {
   b4f84:	b5f0      	push	{r4, r5, r6, r7, lr}
        bool isConn = false;
        if (domain) {
   b4f86:	f8d0 c034 	ldr.w	ip, [r0, #52]	; 0x34
    bool _connectToPort(uint16_t p) {
   b4f8a:	b087      	sub	sp, #28
   b4f8c:	4606      	mov	r6, r0
   b4f8e:	460f      	mov	r7, r1
        if (domain) {
   b4f90:	f1bc 0f00 	cmp.w	ip, #0
   b4f94:	d00c      	beq.n	b4fb0 <_ZN22BlynkTransportParticle14_connectToPortEt+0x2c>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', p);
            isConn = (1 == client.connect(domain, p));
   b4f96:	460a      	mov	r2, r1
   b4f98:	2300      	movs	r3, #0
   b4f9a:	4661      	mov	r1, ip
   b4f9c:	f003 fbae 	bl	b86fc <_ZN9TCPClient7connectEPKctm>
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            isConn = (1 == client.connect(addr, p));
        }
        actual_port = isConn ? p : 0;
   b4fa0:	2801      	cmp	r0, #1
            isConn = (1 == client.connect(domain, p));
   b4fa2:	bf16      	itet	ne
   b4fa4:	2000      	movne	r0, #0
   b4fa6:	2001      	moveq	r0, #1
        actual_port = isConn ? p : 0;
   b4fa8:	4607      	movne	r7, r0
   b4faa:	8777      	strh	r7, [r6, #58]	; 0x3a
        return isConn;
    }
   b4fac:	b007      	add	sp, #28
   b4fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4fb0:	4b07      	ldr	r3, [pc, #28]	; (b4fd0 <_ZN22BlynkTransportParticle14_connectToPortEt+0x4c>)
   b4fb2:	9300      	str	r3, [sp, #0]
   b4fb4:	f100 0520 	add.w	r5, r0, #32
   b4fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4fba:	ac01      	add	r4, sp, #4
   b4fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4fbe:	682b      	ldr	r3, [r5, #0]
   b4fc0:	7023      	strb	r3, [r4, #0]
            isConn = (1 == client.connect(addr, p));
   b4fc2:	463a      	mov	r2, r7
   b4fc4:	4663      	mov	r3, ip
   b4fc6:	4669      	mov	r1, sp
   b4fc8:	4630      	mov	r0, r6
   b4fca:	f003 fc77 	bl	b88bc <_ZN9TCPClient7connectE9IPAddresstm>
   b4fce:	e7e7      	b.n	b4fa0 <_ZN22BlynkTransportParticle14_connectToPortEt+0x1c>
   b4fd0:	000bc948 	.word	0x000bc948

000b4fd4 <BlynkWidgetWrite1>:
BLYNK_WRITE(V1) {
   b4fd4:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   b4fd6:	6808      	ldr	r0, [r1, #0]
   b4fd8:	f004 fbbf 	bl	b975a <atoi>
  airport = airports[param.asInt() - 1];
   b4fdc:	4904      	ldr	r1, [pc, #16]	; (b4ff0 <BlynkWidgetWrite1+0x1c>)
   b4fde:	3801      	subs	r0, #1
   b4fe0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
}
   b4fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  airport = airports[param.asInt() - 1];
   b4fe8:	4802      	ldr	r0, [pc, #8]	; (b4ff4 <BlynkWidgetWrite1+0x20>)
   b4fea:	f002 bf40 	b.w	b7e6e <_ZN6StringaSERKS_>
   b4fee:	bf00      	nop
   b4ff0:	2003e3bc 	.word	0x2003e3bc
   b4ff4:	2003e3ac 	.word	0x2003e3ac

000b4ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:

    uint16_t getNextMsgId();

private:

    void internalReconnect() {
   b4ff8:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4ffa:	2300      	movs	r3, #0
   b4ffc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

    uint16_t getActualPort() const {
        return actual_port;
    }

    void disconnect() { client.stop(); }
   b5000:	6900      	ldr	r0, [r0, #16]
   b5002:	f003 fd31 	bl	b8a68 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b5006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b500a:	f002 babd 	b.w	b7588 <BlynkNoOpCbk>
	...

000b5010 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b5010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b5014:	188f      	adds	r7, r1, r2
   b5016:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b5018:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b501a:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b501e:	4606      	mov	r6, r0
   b5020:	4689      	mov	r9, r1
   b5022:	4690      	mov	r8, r2
    if (it >= param.end())
   b5024:	f080 80c2 	bcs.w	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b5028:	a805      	add	r0, sp, #20
   b502a:	880d      	ldrh	r5, [r1, #0]
   b502c:	f7ff ff5a 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
   b5030:	6803      	ldr	r3, [r0, #0]
   b5032:	42bb      	cmp	r3, r7
   b5034:	f080 80ba 	bcs.w	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b5038:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b503a:	7803      	ldrb	r3, [r0, #0]
   b503c:	2b41      	cmp	r3, #65	; 0x41
   b503e:	d149      	bne.n	b50d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b5040:	3001      	adds	r0, #1
   b5042:	f004 fb8a 	bl	b975a <atoi>
   b5046:	2805      	cmp	r0, #5
   b5048:	dd37      	ble.n	b50ba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b504a:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b504c:	f247 2376 	movw	r3, #29302	; 0x7276
   b5050:	429d      	cmp	r5, r3
   b5052:	f000 80d3 	beq.w	b51fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b5056:	d841      	bhi.n	b50dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b5058:	f247 2361 	movw	r3, #29281	; 0x7261
   b505c:	429d      	cmp	r5, r3
   b505e:	f000 80a8 	beq.w	b51b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b5062:	f247 2364 	movw	r3, #29284	; 0x7264
   b5066:	429d      	cmp	r5, r3
   b5068:	d06b      	beq.n	b5142 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b506a:	f646 5370 	movw	r3, #28016	; 0x6d70
   b506e:	429d      	cmp	r5, r3
   b5070:	d141      	bne.n	b50f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b5072:	4d78      	ldr	r5, [pc, #480]	; (b5254 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b5074:	4e78      	ldr	r6, [pc, #480]	; (b5258 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b5076:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b526c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b507a:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b507c:	42b8      	cmp	r0, r7
   b507e:	f080 8095 	bcs.w	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5082:	7803      	ldrb	r3, [r0, #0]
   b5084:	2b41      	cmp	r3, #65	; 0x41
   b5086:	d14b      	bne.n	b5120 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b5088:	3001      	adds	r0, #1
   b508a:	f004 fb66 	bl	b975a <atoi>
   b508e:	2805      	cmp	r0, #5
   b5090:	dd39      	ble.n	b5106 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b5092:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b5094:	a805      	add	r0, sp, #20
   b5096:	f7ff ff25 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b509a:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b509e:	4629      	mov	r1, r5
   b50a0:	4648      	mov	r0, r9
   b50a2:	f7ff fcf5 	bl	b4a90 <strcmp>
   b50a6:	4601      	mov	r1, r0
   b50a8:	2800      	cmp	r0, #0
   b50aa:	d13d      	bne.n	b5128 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b50ac:	4620      	mov	r0, r4
   b50ae:	f003 fe67 	bl	b8d80 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b50b2:	a805      	add	r0, sp, #20
   b50b4:	f7ff ff16 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b50b8:	e7df      	b.n	b507a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b50ba:	9805      	ldr	r0, [sp, #20]
   b50bc:	3001      	adds	r0, #1
   b50be:	f004 fb4c 	bl	b975a <atoi>
   b50c2:	2800      	cmp	r0, #0
   b50c4:	dbc1      	blt.n	b504a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b50c6:	9805      	ldr	r0, [sp, #20]
   b50c8:	3001      	adds	r0, #1
   b50ca:	f004 fb46 	bl	b975a <atoi>
   b50ce:	300e      	adds	r0, #14
   b50d0:	b2c4      	uxtb	r4, r0
   b50d2:	e7bb      	b.n	b504c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b50d4:	a805      	add	r0, sp, #20
   b50d6:	f7ff fefb 	bl	b4ed0 <_ZNK10BlynkParam8iterator5asIntEv>
   b50da:	e7f9      	b.n	b50d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b50dc:	f247 7364 	movw	r3, #30564	; 0x7764
   b50e0:	429d      	cmp	r5, r3
   b50e2:	d04f      	beq.n	b5184 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b50e4:	f247 7376 	movw	r3, #30582	; 0x7776
   b50e8:	429d      	cmp	r5, r3
   b50ea:	f000 8097 	beq.w	b521c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b50ee:	f247 7361 	movw	r3, #30561	; 0x7761
   b50f2:	429d      	cmp	r5, r3
   b50f4:	d06f      	beq.n	b51d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkReq req = { pin };
        callWriteHandler(req, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b50f6:	2300      	movs	r3, #0
   b50f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b50fc:	2202      	movs	r2, #2
   b50fe:	9200      	str	r2, [sp, #0]
   b5100:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   b5102:	4619      	mov	r1, r3
   b5104:	e03a      	b.n	b517c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5106:	9805      	ldr	r0, [sp, #20]
   b5108:	3001      	adds	r0, #1
   b510a:	f004 fb26 	bl	b975a <atoi>
   b510e:	2800      	cmp	r0, #0
   b5110:	dbbf      	blt.n	b5092 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b5112:	9805      	ldr	r0, [sp, #20]
   b5114:	3001      	adds	r0, #1
   b5116:	f004 fb20 	bl	b975a <atoi>
   b511a:	300e      	adds	r0, #14
   b511c:	b2c4      	uxtb	r4, r0
   b511e:	e7b9      	b.n	b5094 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b5120:	a805      	add	r0, sp, #20
   b5122:	f7ff fed5 	bl	b4ed0 <_ZNK10BlynkParam8iterator5asIntEv>
   b5126:	e7f9      	b.n	b511c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b5128:	4631      	mov	r1, r6
   b512a:	4648      	mov	r0, r9
   b512c:	f7ff fcb0 	bl	b4a90 <strcmp>
   b5130:	b128      	cbz	r0, b513e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b5132:	4641      	mov	r1, r8
   b5134:	4648      	mov	r0, r9
   b5136:	f7ff fcab 	bl	b4a90 <strcmp>
   b513a:	2800      	cmp	r0, #0
   b513c:	d1b9      	bne.n	b50b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b513e:	2101      	movs	r1, #1
   b5140:	e7b4      	b.n	b50ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5142:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5144:	4945      	ldr	r1, [pc, #276]	; (b525c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b5146:	9307      	str	r3, [sp, #28]
   b5148:	a807      	add	r0, sp, #28
   b514a:	2310      	movs	r3, #16
   b514c:	2500      	movs	r5, #0
   b514e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5152:	f7ff fed6 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5156:	a807      	add	r0, sp, #28
   b5158:	4621      	mov	r1, r4
   b515a:	f7ff feef 	bl	b4f3c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b515e:	4620      	mov	r0, r4
   b5160:	f003 fe38 	bl	b8dd4 <digitalRead>
        rsp.add(analogRead(pin));
   b5164:	4601      	mov	r1, r0
   b5166:	a807      	add	r0, sp, #28
   b5168:	f7ff fefa 	bl	b4f60 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b516c:	9b08      	ldr	r3, [sp, #32]
   b516e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5172:	3b01      	subs	r3, #1
   b5174:	9300      	str	r3, [sp, #0]
   b5176:	9b07      	ldr	r3, [sp, #28]
   b5178:	462a      	mov	r2, r5
   b517a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b517c:	4630      	mov	r0, r6
   b517e:	f000 fa9d 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b5182:	e013      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b5184:	a805      	add	r0, sp, #20
   b5186:	f7ff fead 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
   b518a:	6803      	ldr	r3, [r0, #0]
   b518c:	429f      	cmp	r7, r3
   b518e:	d90d      	bls.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b5190:	b2a4      	uxth	r4, r4
   b5192:	2101      	movs	r1, #1
   b5194:	4620      	mov	r0, r4
   b5196:	f003 fdf3 	bl	b8d80 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b519a:	a805      	add	r0, sp, #20
   b519c:	f7ff fe98 	bl	b4ed0 <_ZNK10BlynkParam8iterator5asIntEv>
   b51a0:	1e01      	subs	r1, r0, #0
   b51a2:	bf18      	it	ne
   b51a4:	2101      	movne	r1, #1
   b51a6:	4620      	mov	r0, r4
   b51a8:	f003 fdfb 	bl	b8da2 <digitalWrite>
    }
}
   b51ac:	b00f      	add	sp, #60	; 0x3c
   b51ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b51b2:	ab0a      	add	r3, sp, #40	; 0x28
   b51b4:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b51b6:	a807      	add	r0, sp, #28
   b51b8:	2310      	movs	r3, #16
   b51ba:	4929      	ldr	r1, [pc, #164]	; (b5260 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b51bc:	2500      	movs	r5, #0
   b51be:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b51c2:	f7ff fe9e 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b51c6:	a807      	add	r0, sp, #28
   b51c8:	4621      	mov	r1, r4
   b51ca:	f7ff feb7 	bl	b4f3c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b51ce:	4620      	mov	r0, r4
   b51d0:	f003 fe13 	bl	b8dfa <analogRead>
   b51d4:	e7c6      	b.n	b5164 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b51d6:	a805      	add	r0, sp, #20
   b51d8:	f7ff fe84 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
   b51dc:	6803      	ldr	r3, [r0, #0]
   b51de:	429f      	cmp	r7, r3
   b51e0:	d9e4      	bls.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b51e2:	b2a4      	uxth	r4, r4
   b51e4:	2101      	movs	r1, #1
   b51e6:	4620      	mov	r0, r4
   b51e8:	f003 fdca 	bl	b8d80 <pinMode>
        analogWrite(pin, it.asInt());
   b51ec:	a805      	add	r0, sp, #20
   b51ee:	f7ff fe6f 	bl	b4ed0 <_ZNK10BlynkParam8iterator5asIntEv>
   b51f2:	4601      	mov	r1, r0
   b51f4:	4620      	mov	r0, r4
   b51f6:	f003 fe17 	bl	b8e28 <_Z11analogWritetm>
    } break;
   b51fa:	e7d7      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
        }
    }

    void callReadHandler(BlynkReq& req) {
        WidgetReadHandler handler = GetReadHandler(req.pin);
   b51fc:	4620      	mov	r0, r4
        BlynkReq req = { pin };
   b51fe:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
   b5202:	f002 f9c3 	bl	b758c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b5206:	4603      	mov	r3, r0
            handler(req);
   b5208:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b520a:	b123      	cbz	r3, b5216 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b520c:	4a15      	ldr	r2, [pc, #84]	; (b5264 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b520e:	4293      	cmp	r3, r2
   b5210:	d001      	beq.n	b5216 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b5212:	4798      	blx	r3
   b5214:	e7ca      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b5216:	f002 f9b5 	bl	b7584 <BlynkWidgetRead>
    } break;
   b521a:	e7c7      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b521c:	a805      	add	r0, sp, #20
   b521e:	f7ff fe61 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5222:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { pin };
   b5224:	f8ad 401c 	strh.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b5228:	eba3 0109 	sub.w	r1, r3, r9
   b522c:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(req.pin);
   b5230:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b5232:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b5236:	910c      	str	r1, [sp, #48]	; 0x30
   b5238:	f002 f9b2 	bl	b75a0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b523c:	4603      	mov	r3, r0
            handler(req, param);
   b523e:	a90a      	add	r1, sp, #40	; 0x28
   b5240:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5242:	b123      	cbz	r3, b524e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b5244:	4a08      	ldr	r2, [pc, #32]	; (b5268 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b5246:	4293      	cmp	r3, r2
   b5248:	d001      	beq.n	b524e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b524a:	4798      	blx	r3
   b524c:	e7ae      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b524e:	f002 f99a 	bl	b7586 <BlynkWidgetWrite>
    } break;
   b5252:	e7ab      	b.n	b51ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b5254:	000bb812 	.word	0x000bb812
   b5258:	000bb815 	.word	0x000bb815
   b525c:	000bb81d 	.word	0x000bb81d
   b5260:	000bb820 	.word	0x000bb820
   b5264:	000b7585 	.word	0x000b7585
   b5268:	000b7587 	.word	0x000b7587
   b526c:	000bb819 	.word	0x000bb819

000b5270 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5274:	b08c      	sub	sp, #48	; 0x30
   b5276:	af04      	add	r7, sp, #16
   b5278:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b527a:	2205      	movs	r2, #5
   b527c:	6900      	ldr	r0, [r0, #16]
   b527e:	1d39      	adds	r1, r7, #4
   b5280:	f002 fedb 	bl	b803a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5284:	b3b8      	cbz	r0, b52f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5286:	2805      	cmp	r0, #5
   b5288:	d004      	beq.n	b5294 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b528a:	2000      	movs	r0, #0
}
   b528c:	3720      	adds	r7, #32
   b528e:	46bd      	mov	sp, r7
   b5290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5294:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5298:	f002 fa34 	bl	b7704 <inet_ntohs>
   b529c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b52a0:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b52a4:	f002 fa2e 	bl	b7704 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b52a8:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b52ac:	f8a7 0007 	strh.w	r0, [r7, #7]
   b52b0:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b52b2:	2b00      	cmp	r3, #0
   b52b4:	d0e9      	beq.n	b528a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b52b6:	793b      	ldrb	r3, [r7, #4]
   b52b8:	bb3b      	cbnz	r3, b530a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9a>
        lastActivityIn = BlynkMillis();
   b52ba:	f002 f961 	bl	b7580 <_Z11BlynkMillisv>
   b52be:	4602      	mov	r2, r0
   b52c0:	61e0      	str	r0, [r4, #28]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b52c2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   b52c6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b52ca:	b9d0      	cbnz	r0, b5302 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x92>
   b52cc:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b52d0:	2901      	cmp	r1, #1
   b52d2:	d116      	bne.n	b5302 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x92>
            switch (hdr.length) {
   b52d4:	2b09      	cmp	r3, #9
   b52d6:	d010      	beq.n	b52fa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   b52d8:	2bc8      	cmp	r3, #200	; 0xc8
   b52da:	d001      	beq.n	b52e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x70>
   b52dc:	2b04      	cmp	r3, #4
   b52de:	d1d5      	bne.n	b528c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b52e0:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b52e2:	6262      	str	r2, [r4, #36]	; 0x24
                this->sendInfo();
   b52e4:	4620      	mov	r0, r4
                state = CONNECTED;
   b52e6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
                this->sendInfo();
   b52ea:	f000 fae5 	bl	b58b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b52ee:	f7ff fc8b 	bl	b4c08 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b52f2:	f002 f949 	bl	b7588 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b52f6:	2001      	movs	r0, #1
   b52f8:	e7c8      	b.n	b528c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b52fa:	2303      	movs	r3, #3
   b52fc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                break;
   b5300:	e7c4      	b.n	b528c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b5302:	1f58      	subs	r0, r3, #5
   b5304:	bf18      	it	ne
   b5306:	2001      	movne	r0, #1
   b5308:	e7c0      	b.n	b528c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b530a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b530e:	d903      	bls.n	b5318 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa8>
        internalReconnect();
   b5310:	4620      	mov	r0, r4
   b5312:	f7ff fe71 	bl	b4ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5316:	e7ee      	b.n	b52f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b5318:	f100 0308 	add.w	r3, r0, #8
   b531c:	f023 0307 	bic.w	r3, r3, #7
   b5320:	466e      	mov	r6, sp
   b5322:	ebad 0d03 	sub.w	sp, sp, r3
   b5326:	ad04      	add	r5, sp, #16
   b5328:	4602      	mov	r2, r0
   b532a:	4629      	mov	r1, r5
   b532c:	6920      	ldr	r0, [r4, #16]
   b532e:	f002 fe84 	bl	b803a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b5332:	4580      	cmp	r8, r0
   b5334:	f04f 0000 	mov.w	r0, #0
   b5338:	d141      	bne.n	b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14e>
    inputBuffer[hdr.length] = '\0';
   b533a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b533e:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b5340:	f002 f91e 	bl	b7580 <_Z11BlynkMillisv>
    switch (hdr.type)
   b5344:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5346:	61e0      	str	r0, [r4, #28]
    switch (hdr.type)
   b5348:	2b14      	cmp	r3, #20
   b534a:	d069      	beq.n	b5420 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
   b534c:	d809      	bhi.n	b5362 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b534e:	2b0f      	cmp	r3, #15
   b5350:	d066      	beq.n	b5420 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
   b5352:	2b11      	cmp	r3, #17
   b5354:	d071      	beq.n	b543a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ca>
   b5356:	2b06      	cmp	r3, #6
   b5358:	d016      	beq.n	b5388 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x118>
        internalReconnect();
   b535a:	4620      	mov	r0, r4
   b535c:	f7ff fe4c 	bl	b4ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5360:	e01d      	b.n	b539e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
    switch (hdr.type)
   b5362:	2b29      	cmp	r3, #41	; 0x29
   b5364:	d01d      	beq.n	b53a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x132>
   b5366:	2b37      	cmp	r3, #55	; 0x37
   b5368:	d019      	beq.n	b539e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   b536a:	2b1d      	cmp	r3, #29
   b536c:	d1f5      	bne.n	b535a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b536e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b5372:	b94b      	cbnz	r3, b5388 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x118>
            state = CONNECTED;
   b5374:	2301      	movs	r3, #1
   b5376:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
            this->sendInfo();
   b537a:	4620      	mov	r0, r4
   b537c:	f000 fa9c 	bl	b58b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b5380:	f7ff fc42 	bl	b4c08 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b5384:	f002 f900 	bl	b7588 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b5388:	2300      	movs	r3, #0
   b538a:	21c8      	movs	r1, #200	; 0xc8
   b538c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b5390:	9100      	str	r1, [sp, #0]
   b5392:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5396:	4619      	mov	r1, r3
   b5398:	4620      	mov	r0, r4
   b539a:	f000 f98f 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b539e:	2001      	movs	r0, #1
   b53a0:	e00d      	b.n	b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14e>
        if (!redir_serv) {
   b53a2:	69a3      	ldr	r3, [r4, #24]
   b53a4:	b91b      	cbnz	r3, b53ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13e>
             redir_serv = (char*)malloc(64);
   b53a6:	2040      	movs	r0, #64	; 0x40
   b53a8:	f002 fbb0 	bl	b7b0c <malloc>
   b53ac:	61a0      	str	r0, [r4, #24]
        BlynkParam param(inputBuffer, hdr.length);
   b53ae:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b53b2:	44a8      	add	r8, r5
        if (it >= param.end())
   b53b4:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b53b6:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b53ba:	d302      	bcc.n	b53c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x152>
            return false;
   b53bc:	2000      	movs	r0, #0
   b53be:	46b5      	mov	sp, r6
   b53c0:	e764      	b.n	b528c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b53c2:	4629      	mov	r1, r5
   b53c4:	2240      	movs	r2, #64	; 0x40
   b53c6:	69a0      	ldr	r0, [r4, #24]
   b53c8:	f004 fa52 	bl	b9870 <strncpy>
        redir_serv[63] = '\0';
   b53cc:	69a3      	ldr	r3, [r4, #24]
   b53ce:	2500      	movs	r5, #0
   b53d0:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b53d4:	f107 0014 	add.w	r0, r7, #20
   b53d8:	f7ff fd84 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
   b53dc:	6803      	ldr	r3, [r0, #0]
   b53de:	4598      	cmp	r8, r3
   b53e0:	d91c      	bls.n	b541c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b53e2:	6978      	ldr	r0, [r7, #20]
   b53e4:	b120      	cbz	r0, b53f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x180>
   b53e6:	69bb      	ldr	r3, [r7, #24]
   b53e8:	4298      	cmp	r0, r3
   b53ea:	d215      	bcs.n	b5418 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b53ec:	f004 f9b9 	bl	b9762 <atol>
            redir_port = it.asLong();
   b53f0:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b53f2:	6920      	ldr	r0, [r4, #16]
   b53f4:	f003 fb38 	bl	b8a68 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b53f8:	6923      	ldr	r3, [r4, #16]
   b53fa:	69a2      	ldr	r2, [r4, #24]
        domain = d;
   b53fc:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b53fe:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b5400:	2300      	movs	r3, #0
   b5402:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5406:	f002 f8bb 	bl	b7580 <_Z11BlynkMillisv>
   b540a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b540e:	3808      	subs	r0, #8
   b5410:	e9c4 0007 	strd	r0, r0, [r4, #28]
   b5414:	6260      	str	r0, [r4, #36]	; 0x24
   b5416:	e7c2      	b.n	b539e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   b5418:	4628      	mov	r0, r5
   b541a:	e7e9      	b.n	b53f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x180>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b541c:	2550      	movs	r5, #80	; 0x50
   b541e:	e7e8      	b.n	b53f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x182>
        msgIdOutOverride = hdr.msg_id;
   b5420:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5422:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b5426:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b542a:	8563      	strh	r3, [r4, #42]	; 0x2a
        this->processCmd(inputBuffer, hdr.length);
   b542c:	4629      	mov	r1, r5
   b542e:	4620      	mov	r0, r4
   b5430:	f7ff fdee 	bl	b5010 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5434:	2300      	movs	r3, #0
   b5436:	8563      	strh	r3, [r4, #42]	; 0x2a
   b5438:	e7b1      	b.n	b539e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
        BlynkReq req = { 0 };
   b543a:	2300      	movs	r3, #0
   b543c:	803b      	strh	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b543e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b5442:	442b      	add	r3, r5
        if (it >= param.end())
   b5444:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5446:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b544a:	d2a8      	bcs.n	b539e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
        ++it;
   b544c:	f107 000c 	add.w	r0, r7, #12
   b5450:	f8d5 8000 	ldr.w	r8, [r5]
   b5454:	f7ff fd46 	bl	b4ee4 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5458:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b545a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b545e:	1b5d      	subs	r5, r3, r5
   b5460:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b5462:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b5466:	687b      	ldr	r3, [r7, #4]
   b5468:	61fd      	str	r5, [r7, #28]
   b546a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b546e:	8563      	strh	r3, [r4, #42]	; 0x2a
   b5470:	4b2d      	ldr	r3, [pc, #180]	; (b5528 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b8>)
   b5472:	4598      	cmp	r8, r3
   b5474:	d052      	beq.n	b551c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ac>
   b5476:	d820      	bhi.n	b54ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
   b5478:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b547c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5480:	4413      	add	r3, r2
   b5482:	4598      	cmp	r8, r3
   b5484:	d032      	beq.n	b54ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27c>
   b5486:	d80f      	bhi.n	b54a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5488:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b548c:	3b06      	subs	r3, #6
   b548e:	4598      	cmp	r8, r3
   b5490:	d032      	beq.n	b54f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x288>
   b5492:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b5496:	3303      	adds	r3, #3
   b5498:	4598      	cmp	r8, r3
   b549a:	d1cb      	bne.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b549c:	f107 0114 	add.w	r1, r7, #20
   b54a0:	4638      	mov	r0, r7
   b54a2:	f002 f870 	bl	b7586 <BlynkWidgetWrite>
   b54a6:	e7c5      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
   b54a8:	4b20      	ldr	r3, [pc, #128]	; (b552c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b54aa:	4598      	cmp	r8, r3
   b54ac:	d1c2      	bne.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b54ae:	f107 0114 	add.w	r1, r7, #20
   b54b2:	4638      	mov	r0, r7
   b54b4:	f002 f867 	bl	b7586 <BlynkWidgetWrite>
   b54b8:	e7bc      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
   b54ba:	4b1d      	ldr	r3, [pc, #116]	; (b5530 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b54bc:	4598      	cmp	r8, r3
   b54be:	d021      	beq.n	b5504 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x294>
   b54c0:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b54c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b54c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b54cc:	4598      	cmp	r8, r3
   b54ce:	d01f      	beq.n	b5510 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a0>
   b54d0:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b54d4:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b54d8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b54dc:	4598      	cmp	r8, r3
   b54de:	d1a9      	bne.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b54e0:	f107 0114 	add.w	r1, r7, #20
   b54e4:	4638      	mov	r0, r7
   b54e6:	f002 f84e 	bl	b7586 <BlynkWidgetWrite>
   b54ea:	e7a3      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b54ec:	f107 0114 	add.w	r1, r7, #20
   b54f0:	4638      	mov	r0, r7
   b54f2:	f002 f848 	bl	b7586 <BlynkWidgetWrite>
   b54f6:	e79d      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b54f8:	f107 0114 	add.w	r1, r7, #20
   b54fc:	4638      	mov	r0, r7
   b54fe:	f002 f842 	bl	b7586 <BlynkWidgetWrite>
   b5502:	e797      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b5504:	f107 0114 	add.w	r1, r7, #20
   b5508:	4638      	mov	r0, r7
   b550a:	f002 f83c 	bl	b7586 <BlynkWidgetWrite>
   b550e:	e791      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b5510:	f107 0114 	add.w	r1, r7, #20
   b5514:	4638      	mov	r0, r7
   b5516:	f002 f836 	bl	b7586 <BlynkWidgetWrite>
   b551a:	e78b      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b551c:	f107 0114 	add.w	r1, r7, #20
   b5520:	4638      	mov	r0, r7
   b5522:	f002 f830 	bl	b7586 <BlynkWidgetWrite>
   b5526:	e785      	b.n	b5434 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
   b5528:	00736676 	.word	0x00736676
   b552c:	00676264 	.word	0x00676264
   b5530:	6e6f6361 	.word	0x6e6f6361

000b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b5534:	b570      	push	{r4, r5, r6, lr}
   b5536:	4604      	mov	r4, r0
   b5538:	b086      	sub	sp, #24
   b553a:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b553c:	f7ff fb64 	bl	b4c08 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b5540:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b5544:	2b02      	cmp	r3, #2
   b5546:	d022      	beq.n	b558e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5a>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b5548:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (msgIdOutOverride || nesting > 2) {
   b554c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   b554e:	3301      	adds	r3, #1
   b5550:	b2db      	uxtb	r3, r3
   b5552:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   b5556:	b9aa      	cbnz	r2, b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b5558:	2b02      	cmp	r3, #2
   b555a:	d813      	bhi.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b555c:	6920      	ldr	r0, [r4, #16]
   b555e:	f003 f94b 	bl	b87f8 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b5562:	b1b0      	cbz	r0, b5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
        while (avail || conn.available() > 0) {
   b5564:	b925      	cbnz	r5, b5570 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x3c>
    int available() { return client.available(); }
   b5566:	6920      	ldr	r0, [r4, #16]
   b5568:	f003 fa24 	bl	b89b4 <_ZN9TCPClient9availableEv>
   b556c:	2800      	cmp	r0, #0
   b556e:	dd10      	ble.n	b5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x5e>
            if (!processInput()) {
   b5570:	4620      	mov	r0, r4
   b5572:	f7ff fe7d 	bl	b5270 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b5576:	2800      	cmp	r0, #0
   b5578:	d1f5      	bne.n	b5566 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x32>
    void disconnect() { client.stop(); }
   b557a:	6920      	ldr	r0, [r4, #16]
   b557c:	f003 fa74 	bl	b8a68 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5580:	f002 f802 	bl	b7588 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5584:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5588:	3b01      	subs	r3, #1
   b558a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   b558e:	b006      	add	sp, #24
   b5590:	bd70      	pop	{r4, r5, r6, pc}
    const millis_time_t t = BlynkMillis();
   b5592:	f001 fff5 	bl	b7580 <_Z11BlynkMillisv>
   b5596:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b5598:	6920      	ldr	r0, [r4, #16]
   b559a:	f003 f92d 	bl	b87f8 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b559e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   b55a2:	2e01      	cmp	r6, #1
   b55a4:	d124      	bne.n	b55f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xbc>
        if (!tconn) {
   b55a6:	b920      	cbnz	r0, b55b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x7e>
            lastHeartbeat = t;
   b55a8:	6265      	str	r5, [r4, #36]	; 0x24
            internalReconnect();
   b55aa:	4620      	mov	r0, r4
   b55ac:	f7ff fd24 	bl	b4ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b55b0:	e7e8      	b.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b55b2:	69e3      	ldr	r3, [r4, #28]
   b55b4:	f24f 6218 	movw	r2, #63000	; 0xf618
   b55b8:	1aeb      	subs	r3, r5, r3
   b55ba:	4293      	cmp	r3, r2
   b55bc:	d8f5      	bhi.n	b55aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x76>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b55be:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b55c2:	4293      	cmp	r3, r2
   b55c4:	d803      	bhi.n	b55ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x9a>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b55c6:	6a23      	ldr	r3, [r4, #32]
   b55c8:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b55ca:	4293      	cmp	r3, r2
   b55cc:	d9da      	bls.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b55d0:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55d4:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b55d6:	4293      	cmp	r3, r2
   b55d8:	d9d4      	bls.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            sendCmd(BLYNK_CMD_PING);
   b55da:	2300      	movs	r3, #0
   b55dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b55e0:	9300      	str	r3, [sp, #0]
   b55e2:	461a      	mov	r2, r3
   b55e4:	2106      	movs	r1, #6
   b55e6:	4620      	mov	r0, r4
   b55e8:	f000 f868 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b55ec:	6265      	str	r5, [r4, #36]	; 0x24
                return false;
   b55ee:	e7c9      	b.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    } else if (state == CONNECTING) {
   b55f0:	2e00      	cmp	r6, #0
   b55f2:	d1c7      	bne.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b55f6:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b55f8:	b148      	cbz	r0, b560e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xda>
   b55fa:	f241 7270 	movw	r2, #6000	; 0x1770
   b55fe:	4293      	cmp	r3, r2
   b5600:	d9c0      	bls.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
    void disconnect() { client.stop(); }
   b5602:	6920      	ldr	r0, [r4, #16]
   b5604:	f003 fa30 	bl	b8a68 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5608:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            return false;
   b560c:	e7ba      	b.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b560e:	f241 3288 	movw	r2, #5000	; 0x1388
   b5612:	4293      	cmp	r3, r2
   b5614:	d9b6      	bls.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
   b5616:	6920      	ldr	r0, [r4, #16]
   b5618:	f003 fa26 	bl	b8a68 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b561c:	6926      	ldr	r6, [r4, #16]
        bool isConn = _connectToPort(port);
   b561e:	8f31      	ldrh	r1, [r6, #56]	; 0x38
   b5620:	4630      	mov	r0, r6
   b5622:	f7ff fcaf 	bl	b4f84 <_ZN22BlynkTransportParticle14_connectToPortEt>
        if (!isConn) {
   b5626:	b948      	cbnz	r0, b563c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x108>
            if (port == 80) {
   b5628:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   b562a:	2b50      	cmp	r3, #80	; 0x50
   b562c:	d11a      	bne.n	b5664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x130>
                isConn = _connectToPort(8080);
   b562e:	f641 7190 	movw	r1, #8080	; 0x1f90
                isConn = _connectToPort(80);
   b5632:	4630      	mov	r0, r6
   b5634:	f7ff fca6 	bl	b4f84 <_ZN22BlynkTransportParticle14_connectToPortEt>
   b5638:	2800      	cmp	r0, #0
   b563a:	d0d7      	beq.n	b55ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b563c:	6963      	ldr	r3, [r4, #20]
   b563e:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5640:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5642:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5644:	8525      	strh	r5, [r4, #40]	; 0x28
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5646:	f7ff fa2d 	bl	b4aa4 <strlen>
   b564a:	2200      	movs	r2, #0
   b564c:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5650:	9b05      	ldr	r3, [sp, #20]
   b5652:	9000      	str	r0, [sp, #0]
   b5654:	462a      	mov	r2, r5
   b5656:	211d      	movs	r1, #29
   b5658:	4620      	mov	r0, r4
   b565a:	f000 f82f 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b565e:	6a23      	ldr	r3, [r4, #32]
   b5660:	6263      	str	r3, [r4, #36]	; 0x24
            return true;
   b5662:	e78f      	b.n	b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x50>
            } else if (port == 8080) {
   b5664:	f641 7290 	movw	r2, #8080	; 0x1f90
   b5668:	4293      	cmp	r3, r2
   b566a:	d1bf      	bne.n	b55ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb8>
                isConn = _connectToPort(80);
   b566c:	2150      	movs	r1, #80	; 0x50
   b566e:	e7e0      	b.n	b5632 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>

000b5670 <loop>:
    }

  
}

void loop() {
   b5670:	b508      	push	{r3, lr}
  display.loop();
   b5672:	480c      	ldr	r0, [pc, #48]	; (b56a4 <loop+0x34>)
   b5674:	f000 ffbb 	bl	b65ee <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b5678:	480b      	ldr	r0, [pc, #44]	; (b56a8 <loop+0x38>)
   b567a:	2100      	movs	r1, #0
   b567c:	f7ff ff5a 	bl	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5680:	f002 f800 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>

  //gets new metar code every 10 seconds
  if (moment >= millis() + 10000){
   b5684:	4b09      	ldr	r3, [pc, #36]	; (b56ac <loop+0x3c>)
   b5686:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
   b568a:	681b      	ldr	r3, [r3, #0]
   b568c:	3010      	adds	r0, #16
   b568e:	4298      	cmp	r0, r3
   b5690:	d807      	bhi.n	b56a2 <loop+0x32>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5692:	4b07      	ldr	r3, [pc, #28]	; (b56b0 <loop+0x40>)
    client.publish("airport/request", airport);
   b5694:	4907      	ldr	r1, [pc, #28]	; (b56b4 <loop+0x44>)
   b5696:	681a      	ldr	r2, [r3, #0]
   b5698:	4807      	ldr	r0, [pc, #28]	; (b56b8 <loop+0x48>)
  }
   b569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    client.publish("airport/request", airport);
   b569e:	f001 baac 	b.w	b6bfa <_ZN4MQTT7publishEPKcS1_>
   b56a2:	bd08      	pop	{r3, pc}
   b56a4:	2003e63c 	.word	0x2003e63c
   b56a8:	2003e2b0 	.word	0x2003e2b0
   b56ac:	2003e6b0 	.word	0x2003e6b0
   b56b0:	2003e3ac 	.word	0x2003e3ac
   b56b4:	000bb823 	.word	0x000bb823
   b56b8:	2003e5dc 	.word	0x2003e5dc

000b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b56bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b56c0:	b091      	sub	sp, #68	; 0x44
   b56c2:	af04      	add	r7, sp, #16
   b56c4:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b56c6:	6900      	ldr	r0, [r0, #16]
   b56c8:	6dbd      	ldr	r5, [r7, #88]	; 0x58
   b56ca:	4689      	mov	r9, r1
   b56cc:	4690      	mov	r8, r2
   b56ce:	469a      	mov	sl, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b56d0:	46eb      	mov	fp, sp
   b56d2:	f003 f891 	bl	b87f8 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b56d6:	2800      	cmp	r0, #0
   b56d8:	f000 80b7 	beq.w	b584a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18e>
   b56dc:	f1b9 0f1d 	cmp.w	r9, #29
   b56e0:	d804      	bhi.n	b56ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b56e2:	4b71      	ldr	r3, [pc, #452]	; (b58a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ec>)
   b56e4:	fa23 f309 	lsr.w	r3, r3, r9
   b56e8:	07db      	lsls	r3, r3, #31
   b56ea:	d41d      	bmi.n	b5728 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
   b56ec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b56f0:	2b01      	cmp	r3, #1
   b56f2:	f040 80aa 	bne.w	b584a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18e>
    if (cmd >= BLYNK_CMD_BRIDGE && cmd <= BLYNK_CMD_HARDWARE) {
   b56f6:	f1a9 030f 	sub.w	r3, r9, #15
   b56fa:	2b05      	cmp	r3, #5
   b56fc:	d814      	bhi.n	b5728 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b56fe:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
   b5702:	429e      	cmp	r6, r3
   b5704:	bf38      	it	cc
   b5706:	461e      	movcc	r6, r3
        int32_t wait_time = allowed_time - BlynkMillis();
   b5708:	f001 ff3a 	bl	b7580 <_Z11BlynkMillisv>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b570c:	3642      	adds	r6, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b570e:	1a30      	subs	r0, r6, r0
        if (wait_time >= 0) {
   b5710:	2800      	cmp	r0, #0
   b5712:	f2c0 809f 	blt.w	b5854 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x198>
                run();
   b5716:	2100      	movs	r1, #0
   b5718:	4620      	mov	r0, r4
   b571a:	f7ff ff0b 	bl	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b571e:	f001 ff2f 	bl	b7580 <_Z11BlynkMillisv>
   b5722:	1a30      	subs	r0, r6, r0
            while (wait_time >= 0) {
   b5724:	2800      	cmp	r0, #0
   b5726:	daf6      	bge.n	b5716 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x5a>
protected:
    void processCmd(const void* buff, size_t len);
    void sendInfo();

    void sendPendingGroup() {
        if (GROUP_PENDING == groupState) {
   b5728:	7823      	ldrb	r3, [r4, #0]
   b572a:	2b01      	cmp	r3, #1
   b572c:	d12d      	bne.n	b578a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xce>
            // Set groupState here as sendCmd is recursive
            groupState = GROUP_STARTED;
   b572e:	2302      	movs	r3, #2
   b5730:	7023      	strb	r3, [r4, #0]
            if (groupTs) {
   b5732:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5736:	4313      	orrs	r3, r2
   b5738:	f107 0018 	add.w	r0, r7, #24
   b573c:	f04f 0600 	mov.w	r6, #0
   b5740:	f000 8091 	beq.w	b5866 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1aa>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5744:	2318      	movs	r3, #24
   b5746:	e9c7 0603 	strd	r0, r6, [r7, #12]
                char mem[24];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("t");
   b574a:	4958      	ldr	r1, [pc, #352]	; (b58ac <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f0>)
   b574c:	617b      	str	r3, [r7, #20]
   b574e:	f107 000c 	add.w	r0, r7, #12
   b5752:	f7ff fbd6 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
    }

    inline
    void BlynkParam::add(unsigned long long value)
    {
        len += snprintf(buff+len, buff_size-len, "%llu", value)+1;
   b5756:	e9d7 3104 	ldrd	r3, r1, [r7, #16]
   b575a:	ed94 7b02 	vldr	d7, [r4, #8]
   b575e:	68f8      	ldr	r0, [r7, #12]
   b5760:	4a53      	ldr	r2, [pc, #332]	; (b58b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f4>)
   b5762:	1ac9      	subs	r1, r1, r3
   b5764:	4418      	add	r0, r3
   b5766:	ed8d 7b00 	vstr	d7, [sp]
   b576a:	f002 f9e7 	bl	b7b3c <snprintf>
   b576e:	693b      	ldr	r3, [r7, #16]
   b5770:	3001      	adds	r0, #1
   b5772:	4418      	add	r0, r3
   b5774:	6138      	str	r0, [r7, #16]
                cmd.add(groupTs);
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5776:	e9cd 6601 	strd	r6, r6, [sp, #4]
   b577a:	3801      	subs	r0, #1
   b577c:	9000      	str	r0, [sp, #0]
   b577e:	68fb      	ldr	r3, [r7, #12]
            } else {
                char mem[4];
                BlynkParam cmd(mem, 0, sizeof(mem));
                cmd.add("b");
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5780:	4632      	mov	r2, r6
   b5782:	2115      	movs	r1, #21
   b5784:	4620      	mov	r0, r4
   b5786:	f7ff ff99 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    if (0 == id) {
   b578a:	f1b8 0f00 	cmp.w	r8, #0
   b578e:	d10c      	bne.n	b57aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5790:	f8b4 802a 	ldrh.w	r8, [r4, #42]	; 0x2a
   b5794:	f1b8 0f00 	cmp.w	r8, #0
   b5798:	d107      	bne.n	b57aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b579a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   b579c:	3301      	adds	r3, #1
   b579e:	b29b      	uxth	r3, r3
   b57a0:	2b00      	cmp	r3, #0
   b57a2:	d070      	beq.n	b5886 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ca>
        msgIdOut = 1;
   b57a4:	8523      	strh	r3, [r4, #40]	; 0x28
    return msgIdOut;
   b57a6:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
    const size_t full_length = (sizeof(BlynkHeader)) +
   b57aa:	f1ba 0f00 	cmp.w	sl, #0
   b57ae:	d06c      	beq.n	b588a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1ce>
   b57b0:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b57b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   b57b4:	2a00      	cmp	r2, #0
   b57b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   b57b8:	bf08      	it	eq
   b57ba:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b57bc:	4413      	add	r3, r2
   b57be:	607b      	str	r3, [r7, #4]
    uint8_t buff[full_length];
   b57c0:	3307      	adds	r3, #7
   b57c2:	f023 0307 	bic.w	r3, r3, #7
   b57c6:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b57ca:	4640      	mov	r0, r8
    hdr->type = cmd;
   b57cc:	f88d 9010 	strb.w	r9, [sp, #16]
    hdr->msg_id = htons(id);
   b57d0:	f001 ffa0 	bl	b7714 <inet_htons>
    hdr->length = htons(length+length2);
   b57d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    hdr->msg_id = htons(id);
   b57d6:	f8ad 0011 	strh.w	r0, [sp, #17]
    hdr->length = htons(length+length2);
   b57da:	18e8      	adds	r0, r5, r3
   b57dc:	b280      	uxth	r0, r0
   b57de:	f001 ff99 	bl	b7714 <inet_htons>
    uint8_t buff[full_length];
   b57e2:	ae04      	add	r6, sp, #16
    hdr->length = htons(length+length2);
   b57e4:	f8a6 0003 	strh.w	r0, [r6, #3]
    if (data && length) {
   b57e8:	f1ba 0f00 	cmp.w	sl, #0
   b57ec:	d04f      	beq.n	b588e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d2>
   b57ee:	2d00      	cmp	r5, #0
   b57f0:	d04d      	beq.n	b588e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d2>
        memcpy(buff + pos, data, length);
   b57f2:	462a      	mov	r2, r5
   b57f4:	4651      	mov	r1, sl
   b57f6:	f10d 0015 	add.w	r0, sp, #21
   b57fa:	f003 ffc6 	bl	b978a <memcpy>
        pos += length;
   b57fe:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   b5802:	b133      	cbz	r3, b5812 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
   b5804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   b5806:	b123      	cbz	r3, b5812 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x156>
        memcpy(buff + pos, data2, length2);
   b5808:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   b580a:	461a      	mov	r2, r3
   b580c:	4430      	add	r0, r6
   b580e:	f003 ffbc 	bl	b978a <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b5812:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b5814:	687b      	ldr	r3, [r7, #4]
   b5816:	429d      	cmp	r5, r3
   b5818:	d23d      	bcs.n	b5896 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1da>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b581a:	1b5a      	subs	r2, r3, r5
        return client.write((const uint8_t*)buf, len);
   b581c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b5820:	bf28      	it	cs
   b5822:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5826:	6920      	ldr	r0, [r4, #16]
   b5828:	1971      	adds	r1, r6, r5
   b582a:	f002 febc 	bl	b85a6 <_ZN9TCPClient5writeEPKhj>
   b582e:	4680      	mov	r8, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b5830:	2000      	movs	r0, #0
   b5832:	f001 fea3 	bl	b757c <_Z10BlynkDelaym>
        if (w == 0) {
   b5836:	f1b8 0f00 	cmp.w	r8, #0
   b583a:	d12a      	bne.n	b5892 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1d6>
    void disconnect() { client.stop(); }
   b583c:	6920      	ldr	r0, [r4, #16]
   b583e:	f003 f913 	bl	b8a68 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5842:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d
            BlynkOnDisconnected();
   b5846:	f001 fe9f 	bl	b7588 <BlynkNoOpCbk>
}
   b584a:	3734      	adds	r7, #52	; 0x34
   b584c:	46dd      	mov	sp, fp
   b584e:	46bd      	mov	sp, r7
   b5850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (nesting == 0) {
   b5854:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   b5858:	2900      	cmp	r1, #0
   b585a:	f47f af65 	bne.w	b5728 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
            run();
   b585e:	4620      	mov	r0, r4
   b5860:	f7ff fe68 	bl	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5864:	e760      	b.n	b5728 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5866:	f107 030c 	add.w	r3, r7, #12
   b586a:	e9c7 3606 	strd	r3, r6, [r7, #24]
                cmd.add("b");
   b586e:	4911      	ldr	r1, [pc, #68]	; (b58b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1f8>)
   b5870:	2304      	movs	r3, #4
   b5872:	623b      	str	r3, [r7, #32]
   b5874:	f7ff fb45 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
                static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_GROUP, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5878:	e9cd 6601 	strd	r6, r6, [sp, #4]
   b587c:	69fb      	ldr	r3, [r7, #28]
   b587e:	3b01      	subs	r3, #1
   b5880:	9300      	str	r3, [sp, #0]
   b5882:	69bb      	ldr	r3, [r7, #24]
   b5884:	e77c      	b.n	b5780 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xc4>
        msgIdOut = 1;
   b5886:	2301      	movs	r3, #1
   b5888:	e78c      	b.n	b57a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe8>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b588a:	2305      	movs	r3, #5
   b588c:	e791      	b.n	b57b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf6>
    size_t pos = sizeof(BlynkHeader);
   b588e:	2005      	movs	r0, #5
   b5890:	e7b6      	b.n	b5800 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x144>
        wlen += w;
   b5892:	4445      	add	r5, r8
    while (wlen < full_length) {
   b5894:	e7be      	b.n	b5814 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>
    if (wlen != full_length) {
   b5896:	d003      	beq.n	b58a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x1e4>
        internalReconnect();
   b5898:	4620      	mov	r0, r4
   b589a:	f7ff fbad 	bl	b4ff8 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b589e:	e7d4      	b.n	b584a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18e>
    lastActivityOut = BlynkMillis();
   b58a0:	f001 fe6e 	bl	b7580 <_Z11BlynkMillisv>
   b58a4:	6220      	str	r0, [r4, #32]
   b58a6:	e7d0      	b.n	b584a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x18e>
   b58a8:	20000041 	.word	0x20000041
   b58ac:	000bb831 	.word	0x000bb831
   b58b0:	000bb833 	.word	0x000bb833
   b58b4:	000bb838 	.word	0x000bb838

000b58b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b58b8:	b530      	push	{r4, r5, lr}
   b58ba:	b099      	sub	sp, #100	; 0x64
   b58bc:	ab08      	add	r3, sp, #32
   b58be:	4604      	mov	r4, r0
   b58c0:	9305      	str	r3, [sp, #20]
   b58c2:	2500      	movs	r5, #0
   b58c4:	2340      	movs	r3, #64	; 0x40
        add(key);
   b58c6:	a805      	add	r0, sp, #20
   b58c8:	490b      	ldr	r1, [pc, #44]	; (b58f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b58ca:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b58ce:	f7ff fb18 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
        add(val);
   b58d2:	a805      	add	r0, sp, #20
   b58d4:	4909      	ldr	r1, [pc, #36]	; (b58fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b58d6:	f7ff fb14 	bl	b4f02 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength()-1);
   b58da:	9b06      	ldr	r3, [sp, #24]
   b58dc:	3b01      	subs	r3, #1
   b58de:	9302      	str	r3, [sp, #8]
   b58e0:	9b05      	ldr	r3, [sp, #20]
   b58e2:	9301      	str	r3, [sp, #4]
   b58e4:	2371      	movs	r3, #113	; 0x71
   b58e6:	9300      	str	r3, [sp, #0]
   b58e8:	462a      	mov	r2, r5
   b58ea:	4b05      	ldr	r3, [pc, #20]	; (b5900 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b58ec:	2111      	movs	r1, #17
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff fee4 	bl	b56bc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b58f4:	b019      	add	sp, #100	; 0x64
   b58f6:	bd30      	pop	{r4, r5, pc}
   b58f8:	000bb83a 	.word	0x000bb83a
   b58fc:	000bb83f 	.word	0x000bb83f
   b5900:	000bb92d 	.word	0x000bb92d

000b5904 <setup>:
void setup() {
   b5904:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5906:	b085      	sub	sp, #20
  Serial.begin(9600);
   b5908:	f002 fd66 	bl	b83d8 <_Z16_fetch_usbserialv>
   b590c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5910:	f002 fd56 	bl	b83c0 <_ZN9USBSerial5beginEl>
  Serial.println("connected");
   b5914:	f002 fd60 	bl	b83d8 <_Z16_fetch_usbserialv>
   b5918:	4930      	ldr	r1, [pc, #192]	; (b59dc <setup+0xd8>)
        this->authkey = auth;
   b591a:	4c31      	ldr	r4, [pc, #196]	; (b59e0 <setup+0xdc>)
   b591c:	f002 fb1f 	bl	b7f5e <_ZN5Print7printlnEPKc>
  delay(5000); // Allow board to settle
   b5920:	f241 3088 	movw	r0, #5000	; 0x1388
   b5924:	f002 fbb0 	bl	b8088 <delay>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5928:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b592c:	f001 fe26 	bl	b757c <_Z10BlynkDelaym>
   b5930:	4b2c      	ldr	r3, [pc, #176]	; (b59e4 <setup+0xe0>)
   b5932:	6163      	str	r3, [r4, #20]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5934:	f001 fe24 	bl	b7580 <_Z11BlynkMillisv>
   b5938:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b593c:	6923      	ldr	r3, [r4, #16]
        domain = d;
   b593e:	4a2a      	ldr	r2, [pc, #168]	; (b59e8 <setup+0xe4>)
   b5940:	635a      	str	r2, [r3, #52]	; 0x34
   b5942:	3808      	subs	r0, #8
   b5944:	e9c4 0007 	strd	r0, r0, [r4, #28]
        port = p;
   b5948:	2250      	movs	r2, #80	; 0x50
   b594a:	6260      	str	r0, [r4, #36]	; 0x24
   b594c:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b594e:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5950:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5954:	6920      	ldr	r0, [r4, #16]
   b5956:	f003 f887 	bl	b8a68 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b595a:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
        millis_time_t started = BlynkMillis();
   b595e:	f001 fe0f 	bl	b7580 <_Z11BlynkMillisv>
   b5962:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5964:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b5968:	2b01      	cmp	r3, #1
   b596a:	d00d      	beq.n	b5988 <setup+0x84>
               (BlynkMillis() - started < timeout))
   b596c:	f001 fe08 	bl	b7580 <_Z11BlynkMillisv>
   b5970:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5972:	42b8      	cmp	r0, r7
   b5974:	d804      	bhi.n	b5980 <setup+0x7c>
            run();
   b5976:	2100      	movs	r1, #0
   b5978:	4620      	mov	r0, r4
   b597a:	f7ff fddb 	bl	b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b597e:	e7f1      	b.n	b5964 <setup+0x60>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5980:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   b5984:	2b01      	cmp	r3, #1
   b5986:	d1e5      	bne.n	b5954 <setup+0x50>
  display.setup();
   b5988:	4818      	ldr	r0, [pc, #96]	; (b59ec <setup+0xe8>)
   b598a:	f000 fe07 	bl	b659c <_ZN16OledWingAdafruit5setupEv>
  display.setTextSize(2);
   b598e:	2102      	movs	r1, #2
   b5990:	4816      	ldr	r0, [pc, #88]	; (b59ec <setup+0xe8>)
   b5992:	f000 fdb4 	bl	b64fe <_ZN12Adafruit_GFX11setTextSizeEh>
   b5996:	4815      	ldr	r0, [pc, #84]	; (b59ec <setup+0xe8>)
   b5998:	2300      	movs	r3, #0
   b599a:	6103      	str	r3, [r0, #16]
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b599c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b59a0:	6143      	str	r3, [r0, #20]
  display.clearDisplay();
   b59a2:	f001 fae3 	bl	b6f6c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b59a6:	4811      	ldr	r0, [pc, #68]	; (b59ec <setup+0xe8>)
   b59a8:	f001 fd4e 	bl	b7448 <_ZN16Adafruit_SSD13067displayEv>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b59ac:	4668      	mov	r0, sp
   b59ae:	f002 f89d 	bl	b7aec <spark_deviceID>
  client.connect(System.deviceID());
   b59b2:	9900      	ldr	r1, [sp, #0]
   b59b4:	480e      	ldr	r0, [pc, #56]	; (b59f0 <setup+0xec>)
   b59b6:	f001 f895 	bl	b6ae4 <_ZN4MQTT7connectEPKc>
   b59ba:	4668      	mov	r0, sp
   b59bc:	f002 f9f8 	bl	b7db0 <_ZN6StringD1Ev>
    if (client.isConnected())
   b59c0:	480b      	ldr	r0, [pc, #44]	; (b59f0 <setup+0xec>)
   b59c2:	f000 ff9f 	bl	b6904 <_ZN4MQTT11isConnectedEv>
   b59c6:	b130      	cbz	r0, b59d6 <setup+0xd2>
        client.subscribe("airport/#");
   b59c8:	490a      	ldr	r1, [pc, #40]	; (b59f4 <setup+0xf0>)
   b59ca:	4809      	ldr	r0, [pc, #36]	; (b59f0 <setup+0xec>)
}
   b59cc:	b005      	add	sp, #20
   b59ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        client.subscribe("airport/#");
   b59d2:	f001 b956 	b.w	b6c82 <_ZN4MQTT9subscribeEPKc>
}
   b59d6:	b005      	add	sp, #20
   b59d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b59da:	bf00      	nop
   b59dc:	000bb84d 	.word	0x000bb84d
   b59e0:	2003e2b0 	.word	0x2003e2b0
   b59e4:	000bb857 	.word	0x000bb857
   b59e8:	000bb878 	.word	0x000bb878
   b59ec:	2003e63c 	.word	0x2003e63c
   b59f0:	2003e5dc 	.word	0x2003e5dc
   b59f4:	000bb884 	.word	0x000bb884

000b59f8 <_GLOBAL__sub_I_Blynk>:
   b59f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0), actual_port(0)
   b59fa:	4c80      	ldr	r4, [pc, #512]	; (b5bfc <_GLOBAL__sub_I_Blynk+0x204>)
SYSTEM_THREAD(ENABLED);
   b59fc:	2100      	movs	r1, #0
   b59fe:	2001      	movs	r0, #1
   b5a00:	f001 fff0 	bl	b79e4 <system_thread_set_state>
   b5a04:	4620      	mov	r0, r4
   b5a06:	f003 f879 	bl	b8afc <_ZN9TCPClientC1Ev>
   b5a0a:	f104 001c 	add.w	r0, r4, #28
   b5a0e:	f002 fc31 	bl	b8274 <_ZN9IPAddressC1Ev>
        , groupTs(0)
   b5a12:	4b7b      	ldr	r3, [pc, #492]	; (b5c00 <_GLOBAL__sub_I_Blynk+0x208>)
   b5a14:	2500      	movs	r5, #0
   b5a16:	2000      	movs	r0, #0
   b5a18:	2100      	movs	r1, #0
   b5a1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
        , state(CONNECTING)
   b5a1e:	e9c3 4504 	strd	r4, r5, [r3, #16]
   b5a22:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   b5a26:	e9c3 5506 	strd	r5, r5, [r3, #24]
   b5a2a:	e9c3 5508 	strd	r5, r5, [r3, #32]
   b5a2e:	701d      	strb	r5, [r3, #0]
   b5a30:	629d      	str	r5, [r3, #40]	; 0x28
   b5a32:	859d      	strh	r5, [r3, #44]	; 0x2c
OledWingAdafruit display;
   b5a34:	2107      	movs	r1, #7
   b5a36:	4873      	ldr	r0, [pc, #460]	; (b5c04 <_GLOBAL__sub_I_Blynk+0x20c>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b5a38:	4c73      	ldr	r4, [pc, #460]	; (b5c08 <_GLOBAL__sub_I_Blynk+0x210>)
OledWingAdafruit display;
   b5a3a:	f000 fd81 	bl	b6540 <_ZN16OledWingAdafruitC1Ei>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5a3e:	4b73      	ldr	r3, [pc, #460]	; (b5c0c <_GLOBAL__sub_I_Blynk+0x214>)
   b5a40:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5a44:	e9c3 2500 	strd	r2, r5, [r3]
      { __c1 = __c2; }
   b5a48:	721d      	strb	r5, [r3, #8]
   b5a4a:	f001 fe1b 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
unsigned long moment = millis();
   b5a4e:	4b70      	ldr	r3, [pc, #448]	; (b5c10 <_GLOBAL__sub_I_Blynk+0x218>)
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b5a50:	4970      	ldr	r1, [pc, #448]	; (b5c14 <_GLOBAL__sub_I_Blynk+0x21c>)
unsigned long moment = millis();
   b5a52:	6018      	str	r0, [r3, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5a54:	4b70      	ldr	r3, [pc, #448]	; (b5c18 <_GLOBAL__sub_I_Blynk+0x220>)
   b5a56:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5a5a:	e9c3 2500 	strd	r2, r5, [r3]
   b5a5e:	721d      	strb	r5, [r3, #8]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5a60:	4b6e      	ldr	r3, [pc, #440]	; (b5c1c <_GLOBAL__sub_I_Blynk+0x224>)
   b5a62:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5a66:	e9c3 2500 	strd	r2, r5, [r3]
   b5a6a:	721d      	strb	r5, [r3, #8]
"MSP","ORD","PDX","PHL","PHX","PIT","SAN","SEA","SFO","SLC","STL","TPA"};
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f002 f9ea 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a72:	496b      	ldr	r1, [pc, #428]	; (b5c20 <_GLOBAL__sub_I_Blynk+0x228>)
   b5a74:	f104 0010 	add.w	r0, r4, #16
   b5a78:	f002 f9e5 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a7c:	4969      	ldr	r1, [pc, #420]	; (b5c24 <_GLOBAL__sub_I_Blynk+0x22c>)
   b5a7e:	f104 0020 	add.w	r0, r4, #32
   b5a82:	f002 f9e0 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a86:	4968      	ldr	r1, [pc, #416]	; (b5c28 <_GLOBAL__sub_I_Blynk+0x230>)
   b5a88:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5a8c:	f002 f9db 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a90:	4966      	ldr	r1, [pc, #408]	; (b5c2c <_GLOBAL__sub_I_Blynk+0x234>)
   b5a92:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b5a96:	f002 f9d6 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5a9a:	4965      	ldr	r1, [pc, #404]	; (b5c30 <_GLOBAL__sub_I_Blynk+0x238>)
   b5a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5aa0:	f002 f9d1 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5aa4:	4963      	ldr	r1, [pc, #396]	; (b5c34 <_GLOBAL__sub_I_Blynk+0x23c>)
   b5aa6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5aaa:	f002 f9cc 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5aae:	4962      	ldr	r1, [pc, #392]	; (b5c38 <_GLOBAL__sub_I_Blynk+0x240>)
   b5ab0:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b5ab4:	f002 f9c7 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ab8:	4960      	ldr	r1, [pc, #384]	; (b5c3c <_GLOBAL__sub_I_Blynk+0x244>)
   b5aba:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b5abe:	f002 f9c2 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ac2:	495f      	ldr	r1, [pc, #380]	; (b5c40 <_GLOBAL__sub_I_Blynk+0x248>)
   b5ac4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b5ac8:	f002 f9bd 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5acc:	495d      	ldr	r1, [pc, #372]	; (b5c44 <_GLOBAL__sub_I_Blynk+0x24c>)
   b5ace:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b5ad2:	f002 f9b8 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ad6:	495c      	ldr	r1, [pc, #368]	; (b5c48 <_GLOBAL__sub_I_Blynk+0x250>)
   b5ad8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b5adc:	f002 f9b3 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ae0:	495a      	ldr	r1, [pc, #360]	; (b5c4c <_GLOBAL__sub_I_Blynk+0x254>)
   b5ae2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   b5ae6:	f002 f9ae 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5aea:	4959      	ldr	r1, [pc, #356]	; (b5c50 <_GLOBAL__sub_I_Blynk+0x258>)
   b5aec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   b5af0:	f002 f9a9 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5af4:	4957      	ldr	r1, [pc, #348]	; (b5c54 <_GLOBAL__sub_I_Blynk+0x25c>)
   b5af6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   b5afa:	f002 f9a4 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5afe:	4956      	ldr	r1, [pc, #344]	; (b5c58 <_GLOBAL__sub_I_Blynk+0x260>)
   b5b00:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   b5b04:	f002 f99f 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b08:	4954      	ldr	r1, [pc, #336]	; (b5c5c <_GLOBAL__sub_I_Blynk+0x264>)
   b5b0a:	f504 7080 	add.w	r0, r4, #256	; 0x100
   b5b0e:	f002 f99a 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b12:	4953      	ldr	r1, [pc, #332]	; (b5c60 <_GLOBAL__sub_I_Blynk+0x268>)
   b5b14:	f504 7088 	add.w	r0, r4, #272	; 0x110
   b5b18:	f002 f995 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b1c:	4951      	ldr	r1, [pc, #324]	; (b5c64 <_GLOBAL__sub_I_Blynk+0x26c>)
   b5b1e:	f504 7090 	add.w	r0, r4, #288	; 0x120
   b5b22:	f002 f990 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b26:	4950      	ldr	r1, [pc, #320]	; (b5c68 <_GLOBAL__sub_I_Blynk+0x270>)
   b5b28:	f504 7098 	add.w	r0, r4, #304	; 0x130
   b5b2c:	f002 f98b 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b30:	494e      	ldr	r1, [pc, #312]	; (b5c6c <_GLOBAL__sub_I_Blynk+0x274>)
   b5b32:	f504 70a0 	add.w	r0, r4, #320	; 0x140
   b5b36:	f002 f986 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b3a:	494d      	ldr	r1, [pc, #308]	; (b5c70 <_GLOBAL__sub_I_Blynk+0x278>)
   b5b3c:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   b5b40:	f002 f981 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b44:	494b      	ldr	r1, [pc, #300]	; (b5c74 <_GLOBAL__sub_I_Blynk+0x27c>)
   b5b46:	f504 70b0 	add.w	r0, r4, #352	; 0x160
   b5b4a:	f002 f97c 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b4e:	494a      	ldr	r1, [pc, #296]	; (b5c78 <_GLOBAL__sub_I_Blynk+0x280>)
   b5b50:	f504 70b8 	add.w	r0, r4, #368	; 0x170
   b5b54:	f002 f977 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b58:	4948      	ldr	r1, [pc, #288]	; (b5c7c <_GLOBAL__sub_I_Blynk+0x284>)
   b5b5a:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   b5b5e:	f002 f972 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b62:	4947      	ldr	r1, [pc, #284]	; (b5c80 <_GLOBAL__sub_I_Blynk+0x288>)
   b5b64:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   b5b68:	f002 f96d 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b6c:	4945      	ldr	r1, [pc, #276]	; (b5c84 <_GLOBAL__sub_I_Blynk+0x28c>)
   b5b6e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   b5b72:	f002 f968 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b76:	4944      	ldr	r1, [pc, #272]	; (b5c88 <_GLOBAL__sub_I_Blynk+0x290>)
   b5b78:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   b5b7c:	f002 f963 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b80:	4942      	ldr	r1, [pc, #264]	; (b5c8c <_GLOBAL__sub_I_Blynk+0x294>)
   b5b82:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
   b5b86:	f002 f95e 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b8a:	4941      	ldr	r1, [pc, #260]	; (b5c90 <_GLOBAL__sub_I_Blynk+0x298>)
   b5b8c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   b5b90:	f002 f959 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b94:	493f      	ldr	r1, [pc, #252]	; (b5c94 <_GLOBAL__sub_I_Blynk+0x29c>)
   b5b96:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   b5b9a:	f002 f954 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5b9e:	493e      	ldr	r1, [pc, #248]	; (b5c98 <_GLOBAL__sub_I_Blynk+0x2a0>)
   b5ba0:	f504 70f8 	add.w	r0, r4, #496	; 0x1f0
   b5ba4:	f002 f94f 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5ba8:	493c      	ldr	r1, [pc, #240]	; (b5c9c <_GLOBAL__sub_I_Blynk+0x2a4>)
   b5baa:	f504 7000 	add.w	r0, r4, #512	; 0x200
   b5bae:	f002 f94a 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
   b5bb2:	493b      	ldr	r1, [pc, #236]	; (b5ca0 <_GLOBAL__sub_I_Blynk+0x2a8>)
   b5bb4:	f504 7004 	add.w	r0, r4, #528	; 0x210
   b5bb8:	f002 f945 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
String airport;
   b5bbc:	4939      	ldr	r1, [pc, #228]	; (b5ca4 <_GLOBAL__sub_I_Blynk+0x2ac>)
   b5bbe:	483a      	ldr	r0, [pc, #232]	; (b5ca8 <_GLOBAL__sub_I_Blynk+0x2b0>)
   b5bc0:	f002 f941 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5bc4:	4b39      	ldr	r3, [pc, #228]	; (b5cac <_GLOBAL__sub_I_Blynk+0x2b4>)
MQTT client("lab.thewcl.com", 1883, callback);
   b5bc6:	493a      	ldr	r1, [pc, #232]	; (b5cb0 <_GLOBAL__sub_I_Blynk+0x2b8>)
   b5bc8:	721d      	strb	r5, [r3, #8]
   b5bca:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5bce:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5bd2:	4b38      	ldr	r3, [pc, #224]	; (b5cb4 <_GLOBAL__sub_I_Blynk+0x2bc>)
   b5bd4:	4838      	ldr	r0, [pc, #224]	; (b5cb8 <_GLOBAL__sub_I_Blynk+0x2c0>)
   b5bd6:	721d      	strb	r5, [r3, #8]
   b5bd8:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5bdc:	e9c3 2500 	strd	r2, r5, [r3]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5be0:	4b36      	ldr	r3, [pc, #216]	; (b5cbc <_GLOBAL__sub_I_Blynk+0x2c4>)
   b5be2:	f103 0208 	add.w	r2, r3, #8
      { _M_string_length = __length; }
   b5be6:	e9c3 2500 	strd	r2, r5, [r3]
   b5bea:	721d      	strb	r5, [r3, #8]
   b5bec:	f240 725b 	movw	r2, #1883	; 0x75b
   b5bf0:	4b33      	ldr	r3, [pc, #204]	; (b5cc0 <_GLOBAL__sub_I_Blynk+0x2c8>)
   b5bf2:	9500      	str	r5, [sp, #0]
   b5bf4:	f000 fdaa 	bl	b674c <_ZN4MQTTC1EPKctPFvPcPhjEb>
   b5bf8:	b003      	add	sp, #12
   b5bfa:	bd30      	pop	{r4, r5, pc}
   b5bfc:	2003e370 	.word	0x2003e370
   b5c00:	2003e2b0 	.word	0x2003e2b0
   b5c04:	2003e63c 	.word	0x2003e63c
   b5c08:	2003e3bc 	.word	0x2003e3bc
   b5c0c:	2003e340 	.word	0x2003e340
   b5c10:	2003e6b0 	.word	0x2003e6b0
   b5c14:	000bb88e 	.word	0x000bb88e
   b5c18:	2003e310 	.word	0x2003e310
   b5c1c:	2003e2e0 	.word	0x2003e2e0
   b5c20:	000bb892 	.word	0x000bb892
   b5c24:	000bb896 	.word	0x000bb896
   b5c28:	000bb89a 	.word	0x000bb89a
   b5c2c:	000bb89e 	.word	0x000bb89e
   b5c30:	000bb8a2 	.word	0x000bb8a2
   b5c34:	000bb8a6 	.word	0x000bb8a6
   b5c38:	000bb8aa 	.word	0x000bb8aa
   b5c3c:	000bb8ae 	.word	0x000bb8ae
   b5c40:	000bb8b2 	.word	0x000bb8b2
   b5c44:	000bb8b6 	.word	0x000bb8b6
   b5c48:	000bb8ba 	.word	0x000bb8ba
   b5c4c:	000bb8be 	.word	0x000bb8be
   b5c50:	000bb8c2 	.word	0x000bb8c2
   b5c54:	000bb8c6 	.word	0x000bb8c6
   b5c58:	000bb8ca 	.word	0x000bb8ca
   b5c5c:	000bb8ce 	.word	0x000bb8ce
   b5c60:	000bb8d2 	.word	0x000bb8d2
   b5c64:	000bb8d6 	.word	0x000bb8d6
   b5c68:	000bb8da 	.word	0x000bb8da
   b5c6c:	000bb8de 	.word	0x000bb8de
   b5c70:	000bb8e2 	.word	0x000bb8e2
   b5c74:	000bb8e6 	.word	0x000bb8e6
   b5c78:	000bb8ea 	.word	0x000bb8ea
   b5c7c:	000bb8ee 	.word	0x000bb8ee
   b5c80:	000bb8f2 	.word	0x000bb8f2
   b5c84:	000bb8f6 	.word	0x000bb8f6
   b5c88:	000bb8fa 	.word	0x000bb8fa
   b5c8c:	000bb8fe 	.word	0x000bb8fe
   b5c90:	000bb902 	.word	0x000bb902
   b5c94:	000bb906 	.word	0x000bb906
   b5c98:	000bb90a 	.word	0x000bb90a
   b5c9c:	000bb90e 	.word	0x000bb90e
   b5ca0:	000bb912 	.word	0x000bb912
   b5ca4:	000bcb60 	.word	0x000bcb60
   b5ca8:	2003e3ac 	.word	0x2003e3ac
   b5cac:	2003e2f8 	.word	0x2003e2f8
   b5cb0:	000bb916 	.word	0x000bb916
   b5cb4:	2003e358 	.word	0x2003e358
   b5cb8:	2003e5dc 	.word	0x2003e5dc
   b5cbc:	2003e328 	.word	0x2003e328
   b5cc0:	000b4c21 	.word	0x000b4c21

000b5cc4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5cc4:	4770      	bx	lr

000b5cc6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5cc6:	b510      	push	{r4, lr}
  }
   b5cc8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5cca:	4604      	mov	r4, r0
  }
   b5ccc:	f7fe ff4d 	bl	b4b6a <_ZdlPvj>
   b5cd0:	4620      	mov	r0, r4
   b5cd2:	bd10      	pop	{r4, pc}

000b5cd4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5cd4:	b40e      	push	{r1, r2, r3}
   b5cd6:	b503      	push	{r0, r1, lr}
   b5cd8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5cda:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5cdc:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5ce0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5ce2:	f002 f964 	bl	b7fae <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5ce6:	b002      	add	sp, #8
   b5ce8:	f85d eb04 	ldr.w	lr, [sp], #4
   b5cec:	b003      	add	sp, #12
   b5cee:	4770      	bx	lr

000b5cf0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5cf2:	4604      	mov	r4, r0
   b5cf4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5cf6:	7922      	ldrb	r2, [r4, #4]
   b5cf8:	68a3      	ldr	r3, [r4, #8]
   b5cfa:	b132      	cbz	r2, b5d0a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5cfc:	b9a3      	cbnz	r3, b5d28 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5cfe:	490b      	ldr	r1, [pc, #44]	; (b5d2c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5d00:	b002      	add	sp, #8
   b5d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5d06:	f002 b917 	b.w	b7f38 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5d0a:	4a09      	ldr	r2, [pc, #36]	; (b5d30 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5d0c:	7b26      	ldrb	r6, [r4, #12]
   b5d0e:	4d09      	ldr	r5, [pc, #36]	; (b5d34 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5d10:	4909      	ldr	r1, [pc, #36]	; (b5d38 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5d12:	7b64      	ldrb	r4, [r4, #13]
   b5d14:	2e01      	cmp	r6, #1
   b5d16:	bf18      	it	ne
   b5d18:	4629      	movne	r1, r5
   b5d1a:	e9cd 1400 	strd	r1, r4, [sp]
   b5d1e:	4907      	ldr	r1, [pc, #28]	; (b5d3c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5d20:	f7ff ffd8 	bl	b5cd4 <_ZN5Print6printfEPKcz>
  }
   b5d24:	b002      	add	sp, #8
   b5d26:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5d28:	4a05      	ldr	r2, [pc, #20]	; (b5d40 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5d2a:	e7ef      	b.n	b5d0c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5d2c:	000bb9b1 	.word	0x000bb9b1
   b5d30:	000bcb60 	.word	0x000bcb60
   b5d34:	000bb9ad 	.word	0x000bb9ad
   b5d38:	000bb9a9 	.word	0x000bb9a9
   b5d3c:	000bb9c7 	.word	0x000bb9c7
   b5d40:	000bb9a0 	.word	0x000bb9a0

000b5d44 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d48:	b085      	sub	sp, #20
   b5d4a:	461f      	mov	r7, r3
   b5d4c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5d50:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5d54:	eba8 0902 	sub.w	r9, r8, r2
   b5d58:	eba7 0a01 	sub.w	sl, r7, r1
   b5d5c:	f1b9 0f00 	cmp.w	r9, #0
   b5d60:	bfb8      	it	lt
   b5d62:	f1c9 0900 	rsblt	r9, r9, #0
   b5d66:	f1ba 0f00 	cmp.w	sl, #0
   b5d6a:	bfb8      	it	lt
   b5d6c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5d70:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5d72:	4683      	mov	fp, r0
   b5d74:	460c      	mov	r4, r1
   b5d76:	4615      	mov	r5, r2
    if (steep) {
   b5d78:	dd04      	ble.n	b5d84 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5d7a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5d7c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5d7e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5d80:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5d82:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5d84:	42bc      	cmp	r4, r7
   b5d86:	dd05      	ble.n	b5d94 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5d88:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5d8a:	4645      	mov	r5, r8
   b5d8c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5d8e:	4622      	mov	r2, r4
   b5d90:	463c      	mov	r4, r7
   b5d92:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5d94:	1b3e      	subs	r6, r7, r4
   b5d96:	b2b2      	uxth	r2, r6
   b5d98:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5d9a:	eba8 0205 	sub.w	r2, r8, r5
   b5d9e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5da2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5da6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5daa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5dae:	4545      	cmp	r5, r8
   b5db0:	bfb4      	ite	lt
   b5db2:	2201      	movlt	r2, #1
   b5db4:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5db8:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5dba:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5dbc:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5dbe:	42bc      	cmp	r4, r7
   b5dc0:	dc1c      	bgt.n	b5dfc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5dc2:	f8db 2000 	ldr.w	r2, [fp]
   b5dc6:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5dc8:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5dca:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5dce:	bfc7      	ittee	gt
   b5dd0:	4629      	movgt	r1, r5
   b5dd2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5dd4:	462a      	movle	r2, r5
   b5dd6:	4621      	movle	r1, r4
   b5dd8:	4658      	mov	r0, fp
   b5dda:	47c0      	blx	r8
        }
        err -= dy;
   b5ddc:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5dde:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5de0:	1ab6      	subs	r6, r6, r2
   b5de2:	b2b1      	uxth	r1, r6
   b5de4:	b236      	sxth	r6, r6
        if (err < 0) {
   b5de6:	2e00      	cmp	r6, #0
   b5de8:	da05      	bge.n	b5df6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5dea:	9a02      	ldr	r2, [sp, #8]
   b5dec:	4415      	add	r5, r2
            err += dx;
   b5dee:	9a00      	ldr	r2, [sp, #0]
   b5df0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5df2:	b22d      	sxth	r5, r5
            err += dx;
   b5df4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5df6:	3401      	adds	r4, #1
   b5df8:	b224      	sxth	r4, r4
   b5dfa:	e7e0      	b.n	b5dbe <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5dfc:	b005      	add	sp, #20
   b5dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5e02 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5e02:	4770      	bx	lr

000b5e04 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5e04:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5e06:	6804      	ldr	r4, [r0, #0]
   b5e08:	6924      	ldr	r4, [r4, #16]
   b5e0a:	46a4      	mov	ip, r4
}
   b5e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5e10:	4760      	bx	ip

000b5e12 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5e12:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5e14:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5e16:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5e1a:	9502      	str	r5, [sp, #8]
   b5e1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5e1e:	46a4      	mov	ip, r4
}
   b5e20:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5e22:	4760      	bx	ip

000b5e24 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5e24:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5e26:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5e28:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5e2c:	9502      	str	r5, [sp, #8]
   b5e2e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5e30:	46a4      	mov	ip, r4
}
   b5e32:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5e34:	4760      	bx	ip

000b5e36 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5e36:	b470      	push	{r4, r5, r6}
   b5e38:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5e3c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5e40:	6804      	ldr	r4, [r0, #0]
   b5e42:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5e46:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5e48:	46a4      	mov	ip, r4
}
   b5e4a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5e4c:	4760      	bx	ip

000b5e4e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5e4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5e52:	461c      	mov	r4, r3
    startWrite();
   b5e54:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5e56:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5e5a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5e5c:	4605      	mov	r5, r0
   b5e5e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5e60:	3c01      	subs	r4, #1
   b5e62:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5e64:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5e66:	b224      	sxth	r4, r4
    startWrite();
   b5e68:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5e6a:	682b      	ldr	r3, [r5, #0]
   b5e6c:	f8cd 8004 	str.w	r8, [sp, #4]
   b5e70:	9400      	str	r4, [sp, #0]
   b5e72:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5e74:	4628      	mov	r0, r5
   b5e76:	463b      	mov	r3, r7
   b5e78:	4632      	mov	r2, r6
   b5e7a:	4639      	mov	r1, r7
   b5e7c:	47a0      	blx	r4
    endWrite();
   b5e7e:	682b      	ldr	r3, [r5, #0]
   b5e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e82:	4628      	mov	r0, r5
}
   b5e84:	b002      	add	sp, #8
   b5e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5e8a:	4718      	bx	r3

000b5e8c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5e90:	461d      	mov	r5, r3
    startWrite();
   b5e92:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5e94:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5e98:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5e9a:	4604      	mov	r4, r0
   b5e9c:	4617      	mov	r7, r2
   b5e9e:	460e      	mov	r6, r1
    startWrite();
   b5ea0:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5ea2:	e9cd 7800 	strd	r7, r8, [sp]
   b5ea6:	6822      	ldr	r2, [r4, #0]
   b5ea8:	1e6b      	subs	r3, r5, #1
   b5eaa:	4433      	add	r3, r6
   b5eac:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5eae:	4620      	mov	r0, r4
   b5eb0:	b21b      	sxth	r3, r3
   b5eb2:	463a      	mov	r2, r7
   b5eb4:	4631      	mov	r1, r6
   b5eb6:	47a8      	blx	r5
    endWrite();
   b5eb8:	6823      	ldr	r3, [r4, #0]
   b5eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ebc:	4620      	mov	r0, r4
}
   b5ebe:	b002      	add	sp, #8
   b5ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5ec4:	4718      	bx	r3

000b5ec6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5ec6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5eca:	461e      	mov	r6, r3
    startWrite();
   b5ecc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5ece:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5ed2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5ed4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5ed8:	460c      	mov	r4, r1
   b5eda:	4605      	mov	r5, r0
   b5edc:	4617      	mov	r7, r2
    startWrite();
   b5ede:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5ee0:	4426      	add	r6, r4
   b5ee2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5ee4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5ee6:	da0b      	bge.n	b5f00 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5ee8:	f8cd 8000 	str.w	r8, [sp]
   b5eec:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ef0:	4621      	mov	r1, r4
   b5ef2:	464b      	mov	r3, r9
   b5ef4:	463a      	mov	r2, r7
   b5ef6:	4628      	mov	r0, r5
   b5ef8:	3401      	adds	r4, #1
   b5efa:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5efc:	b224      	sxth	r4, r4
   b5efe:	e7f0      	b.n	b5ee2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f02:	4628      	mov	r0, r5
}
   b5f04:	b002      	add	sp, #8
   b5f06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5f0a:	4718      	bx	r3

000b5f0c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5f0c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5f0e:	6802      	ldr	r2, [r0, #0]
   b5f10:	9101      	str	r1, [sp, #4]
   b5f12:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5f16:	9100      	str	r1, [sp, #0]
   b5f18:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5f1a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5f1e:	2200      	movs	r2, #0
   b5f20:	4611      	mov	r1, r2
   b5f22:	47a0      	blx	r4
}
   b5f24:	b002      	add	sp, #8
   b5f26:	bd10      	pop	{r4, pc}

000b5f28 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5f2c:	4299      	cmp	r1, r3
        uint16_t color) {
   b5f2e:	4616      	mov	r6, r2
   b5f30:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5f34:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5f38:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5f3a:	4680      	mov	r8, r0
   b5f3c:	460d      	mov	r5, r1
   b5f3e:	461c      	mov	r4, r3
    if(x0 == x1){
   b5f40:	d113      	bne.n	b5f6a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5f42:	42be      	cmp	r6, r7
   b5f44:	bfc8      	it	gt
   b5f46:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5f48:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5f4c:	bfc4      	itt	gt
   b5f4e:	463e      	movgt	r6, r7
   b5f50:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5f52:	1c7b      	adds	r3, r7, #1
   b5f54:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5f56:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5f58:	b21b      	sxth	r3, r3
   b5f5a:	4632      	mov	r2, r6
   b5f5c:	4629      	mov	r1, r5
   b5f5e:	4640      	mov	r0, r8
   b5f60:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5f62:	b003      	add	sp, #12
   b5f64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5f68:	4760      	bx	ip
    } else if(y0 == y1){
   b5f6a:	42be      	cmp	r6, r7
   b5f6c:	d10a      	bne.n	b5f84 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5f6e:	4299      	cmp	r1, r3
   b5f70:	bfc2      	ittt	gt
   b5f72:	460b      	movgt	r3, r1
   b5f74:	4625      	movgt	r5, r4
   b5f76:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5f78:	1c63      	adds	r3, r4, #1
   b5f7a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5f7e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5f80:	1b5b      	subs	r3, r3, r5
   b5f82:	e7e9      	b.n	b5f58 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5f84:	6953      	ldr	r3, [r2, #20]
   b5f86:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5f88:	e9cd 7900 	strd	r7, r9, [sp]
   b5f8c:	f8d8 3000 	ldr.w	r3, [r8]
   b5f90:	4640      	mov	r0, r8
   b5f92:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5f94:	4632      	mov	r2, r6
   b5f96:	4623      	mov	r3, r4
   b5f98:	4629      	mov	r1, r5
   b5f9a:	47b8      	blx	r7
        endWrite();
   b5f9c:	f8d8 3000 	ldr.w	r3, [r8]
   b5fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fa2:	4640      	mov	r0, r8
}
   b5fa4:	b003      	add	sp, #12
   b5fa6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5faa:	4718      	bx	r3

000b5fac <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5fac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5fb0:	461d      	mov	r5, r3
    startWrite();
   b5fb2:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5fb4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5fb8:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5fba:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5fbe:	4604      	mov	r4, r0
   b5fc0:	460f      	mov	r7, r1
   b5fc2:	4616      	mov	r6, r2
    startWrite();
   b5fc4:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5fc6:	6823      	ldr	r3, [r4, #0]
   b5fc8:	f8cd 8000 	str.w	r8, [sp]
   b5fcc:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5fd0:	4632      	mov	r2, r6
   b5fd2:	462b      	mov	r3, r5
   b5fd4:	4639      	mov	r1, r7
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5fda:	6823      	ldr	r3, [r4, #0]
   b5fdc:	f8cd 8000 	str.w	r8, [sp]
   b5fe0:	f109 32ff 	add.w	r2, r9, #4294967295
   b5fe4:	4432      	add	r2, r6
   b5fe6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5fea:	4639      	mov	r1, r7
   b5fec:	462b      	mov	r3, r5
   b5fee:	4620      	mov	r0, r4
   b5ff0:	b212      	sxth	r2, r2
   b5ff2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5ff4:	6823      	ldr	r3, [r4, #0]
   b5ff6:	f8cd 8000 	str.w	r8, [sp]
   b5ffa:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ffe:	4632      	mov	r2, r6
   b6000:	464b      	mov	r3, r9
   b6002:	4639      	mov	r1, r7
   b6004:	4620      	mov	r0, r4
   b6006:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b6008:	1e6b      	subs	r3, r5, #1
   b600a:	19d9      	adds	r1, r3, r7
   b600c:	6823      	ldr	r3, [r4, #0]
   b600e:	f8cd 8000 	str.w	r8, [sp]
   b6012:	6a1d      	ldr	r5, [r3, #32]
   b6014:	4620      	mov	r0, r4
   b6016:	464b      	mov	r3, r9
   b6018:	4632      	mov	r2, r6
   b601a:	b209      	sxth	r1, r1
   b601c:	47a8      	blx	r5
    endWrite();
   b601e:	6823      	ldr	r3, [r4, #0]
   b6020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6022:	4620      	mov	r0, r4
}
   b6024:	b002      	add	sp, #8
   b6026:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b602a:	4718      	bx	r3

000b602c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b602c:	4770      	bx	lr

000b602e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b602e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b6032:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b6036:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b6038:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b603a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b603e:	bf59      	ittee	pl
   b6040:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b6042:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b6044:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b6046:	81c3      	strhmi	r3, [r0, #14]
}
   b6048:	4770      	bx	lr
	...

000b604c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b604c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b604e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b6050:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b6052:	4a07      	ldr	r2, [pc, #28]	; (b6070 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b6054:	4d07      	ldr	r5, [pc, #28]	; (b6074 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b6056:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b6058:	2400      	movs	r4, #0
    _width    = WIDTH;
   b605a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b605c:	f04f 31ff 	mov.w	r1, #4294967295
   b6060:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b6064:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b6066:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b6068:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b606a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b606c:	6204      	str	r4, [r0, #32]
}
   b606e:	bd30      	pop	{r4, r5, pc}
   b6070:	01000101 	.word	0x01000101
   b6074:	000bbeec 	.word	0x000bbeec

000b6078 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b607c:	b089      	sub	sp, #36	; 0x24
   b607e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b6082:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6084:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b6088:	9304      	str	r3, [sp, #16]
   b608a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b608e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6090:	9305      	str	r3, [sp, #20]
   b6092:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b6096:	4604      	mov	r4, r0
    startWrite();
   b6098:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b609a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b609e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b60a2:	bf48      	it	mi
   b60a4:	f108 020e 	addmi.w	r2, r8, #14
   b60a8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b60ac:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b60ae:	4635      	mov	r5, r6
   b60b0:	9b03      	ldr	r3, [sp, #12]
   b60b2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b60b4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b60b8:	189a      	adds	r2, r3, r2
   b60ba:	9b05      	ldr	r3, [sp, #20]
   b60bc:	428b      	cmp	r3, r1
   b60be:	b212      	sxth	r2, r2
   b60c0:	dd27      	ble.n	b6112 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b60c2:	9b04      	ldr	r3, [sp, #16]
   b60c4:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b60c6:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b60ca:	9306      	str	r3, [sp, #24]
   b60cc:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b60d0:	4580      	cmp	r8, r0
   b60d2:	fa1f f189 	uxth.w	r1, r9
   b60d6:	dd17      	ble.n	b6108 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b60d8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b60da:	bf05      	ittet	eq
   b60dc:	9b06      	ldreq	r3, [sp, #24]
   b60de:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b60e0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b60e2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b60e4:	bf18      	it	ne
   b60e6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b60e8:	062b      	lsls	r3, r5, #24
   b60ea:	d50a      	bpl.n	b6102 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b60ec:	9b02      	ldr	r3, [sp, #8]
   b60ee:	6820      	ldr	r0, [r4, #0]
   b60f0:	9207      	str	r2, [sp, #28]
   b60f2:	4419      	add	r1, r3
   b60f4:	6983      	ldr	r3, [r0, #24]
   b60f6:	b209      	sxth	r1, r1
   b60f8:	461f      	mov	r7, r3
   b60fa:	4620      	mov	r0, r4
   b60fc:	4653      	mov	r3, sl
   b60fe:	47b8      	blx	r7
   b6100:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b6102:	f109 0901 	add.w	r9, r9, #1
   b6106:	e7e1      	b.n	b60cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b6108:	9b01      	ldr	r3, [sp, #4]
   b610a:	3301      	adds	r3, #1
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	445e      	add	r6, fp
   b6110:	e7ce      	b.n	b60b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b6112:	6823      	ldr	r3, [r4, #0]
   b6114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6116:	4620      	mov	r0, r4
}
   b6118:	b009      	add	sp, #36	; 0x24
   b611a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b611e:	4718      	bx	r3

000b6120 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b6120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6124:	ed2d 8b02 	vpush	{d8}
   b6128:	b091      	sub	sp, #68	; 0x44
   b612a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b612c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b612e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b6132:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6136:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b613a:	9103      	str	r1, [sp, #12]
   b613c:	461f      	mov	r7, r3
   b613e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b6142:	9304      	str	r3, [sp, #16]
   b6144:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6146:	2a00      	cmp	r2, #0
   b6148:	f040 80c5 	bne.w	b62d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b614c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b6150:	428b      	cmp	r3, r1
   b6152:	f340 814c 	ble.w	b63ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6156:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b615a:	42b3      	cmp	r3, r6
   b615c:	f340 8147 	ble.w	b63ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6160:	2306      	movs	r3, #6
   b6162:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6166:	2b00      	cmp	r3, #0
   b6168:	f340 8141 	ble.w	b63ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b616c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b6170:	2b00      	cmp	r3, #0
   b6172:	f340 813c 	ble.w	b63ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6176:	7f03      	ldrb	r3, [r0, #28]
   b6178:	b91b      	cbnz	r3, b6182 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b617a:	2faf      	cmp	r7, #175	; 0xaf
   b617c:	bf84      	itt	hi
   b617e:	3701      	addhi	r7, #1
   b6180:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b6182:	f8db 3000 	ldr.w	r3, [fp]
   b6186:	4658      	mov	r0, fp
   b6188:	695b      	ldr	r3, [r3, #20]
   b618a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b618c:	2205      	movs	r2, #5
   b618e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b6190:	2200      	movs	r2, #0
   b6192:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6194:	4a98      	ldr	r2, [pc, #608]	; (b63f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6196:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b619a:	18d3      	adds	r3, r2, r3
   b619c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b619e:	b2b3      	uxth	r3, r6
   b61a0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b61a2:	9a05      	ldr	r2, [sp, #20]
   b61a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b61a6:	5c9b      	ldrb	r3, [r3, r2]
   b61a8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b61aa:	b2ab      	uxth	r3, r5
   b61ac:	930b      	str	r3, [sp, #44]	; 0x2c
   b61ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b61b2:	9308      	str	r3, [sp, #32]
   b61b4:	9b03      	ldr	r3, [sp, #12]
   b61b6:	fb02 f905 	mul.w	r9, r2, r5
   b61ba:	fa19 f983 	uxtah	r9, r9, r3
   b61be:	fa0f f389 	sxth.w	r3, r9
   b61c2:	ee08 3a10 	vmov	s16, r3
   b61c6:	2308      	movs	r3, #8
   b61c8:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b61ca:	9b03      	ldr	r3, [sp, #12]
   b61cc:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b61d0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b61d4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b61d8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b61da:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b61de:	07d2      	lsls	r2, r2, #31
   b61e0:	d552      	bpl.n	b6288 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b61e2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b61e4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b61e8:	d13e      	bne.n	b6268 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b61ea:	2c01      	cmp	r4, #1
   b61ec:	d13c      	bne.n	b6268 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b61ee:	699b      	ldr	r3, [r3, #24]
   b61f0:	9906      	ldr	r1, [sp, #24]
   b61f2:	461f      	mov	r7, r3
   b61f4:	9b04      	ldr	r3, [sp, #16]
   b61f6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b61f8:	b212      	sxth	r2, r2
   b61fa:	4651      	mov	r1, sl
   b61fc:	4658      	mov	r0, fp
   b61fe:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b6200:	f109 0301 	add.w	r3, r9, #1
   b6204:	fa4f f983 	sxtb.w	r9, r3
   b6208:	9b07      	ldr	r3, [sp, #28]
   b620a:	085b      	lsrs	r3, r3, #1
   b620c:	9307      	str	r3, [sp, #28]
   b620e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6210:	3b01      	subs	r3, #1
   b6212:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6216:	930a      	str	r3, [sp, #40]	; 0x28
   b6218:	d1de      	bne.n	b61d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b621a:	9f05      	ldr	r7, [sp, #20]
   b621c:	3701      	adds	r7, #1
   b621e:	b27b      	sxtb	r3, r7
   b6220:	9305      	str	r3, [sp, #20]
   b6222:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6224:	3b01      	subs	r3, #1
   b6226:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b622a:	9309      	str	r3, [sp, #36]	; 0x24
   b622c:	d1b9      	bne.n	b61a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b622e:	9b04      	ldr	r3, [sp, #16]
   b6230:	4543      	cmp	r3, r8
   b6232:	d00f      	beq.n	b6254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6234:	2d01      	cmp	r5, #1
   b6236:	f8db 3000 	ldr.w	r3, [fp]
   b623a:	d13b      	bne.n	b62b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b623c:	2c01      	cmp	r4, #1
   b623e:	d139      	bne.n	b62b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6240:	9908      	ldr	r1, [sp, #32]
   b6242:	f8cd 8000 	str.w	r8, [sp]
   b6246:	3105      	adds	r1, #5
   b6248:	6a1c      	ldr	r4, [r3, #32]
   b624a:	4632      	mov	r2, r6
   b624c:	2308      	movs	r3, #8
   b624e:	b209      	sxth	r1, r1
   b6250:	4658      	mov	r0, fp
   b6252:	47a0      	blx	r4
        endWrite();
   b6254:	f8db 3000 	ldr.w	r3, [fp]
   b6258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b625a:	4658      	mov	r0, fp
}
   b625c:	b011      	add	sp, #68	; 0x44
   b625e:	ecbd 8b02 	vpop	{d8}
   b6262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6266:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6268:	9906      	ldr	r1, [sp, #24]
   b626a:	fb14 f202 	smulbb	r2, r4, r2
   b626e:	440a      	add	r2, r1
   b6270:	9904      	ldr	r1, [sp, #16]
   b6272:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6274:	9400      	str	r4, [sp, #0]
   b6276:	69db      	ldr	r3, [r3, #28]
   b6278:	ee18 1a10 	vmov	r1, s16
   b627c:	461f      	mov	r7, r3
   b627e:	b212      	sxth	r2, r2
   b6280:	462b      	mov	r3, r5
   b6282:	4658      	mov	r0, fp
   b6284:	47b8      	blx	r7
   b6286:	e7bb      	b.n	b6200 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6288:	9a04      	ldr	r2, [sp, #16]
   b628a:	4542      	cmp	r2, r8
   b628c:	d0b8      	beq.n	b6200 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b628e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b6290:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6294:	d107      	bne.n	b62a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6296:	2c01      	cmp	r4, #1
   b6298:	d105      	bne.n	b62a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b629a:	699b      	ldr	r3, [r3, #24]
   b629c:	9906      	ldr	r1, [sp, #24]
   b629e:	461f      	mov	r7, r3
   b62a0:	440a      	add	r2, r1
   b62a2:	4643      	mov	r3, r8
   b62a4:	e7a8      	b.n	b61f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b62a6:	9906      	ldr	r1, [sp, #24]
   b62a8:	f8cd 8004 	str.w	r8, [sp, #4]
   b62ac:	fb14 f202 	smulbb	r2, r4, r2
   b62b0:	440a      	add	r2, r1
   b62b2:	e7df      	b.n	b6274 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b62b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b62b6:	f8cd 8004 	str.w	r8, [sp, #4]
   b62ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b62be:	9a08      	ldr	r2, [sp, #32]
   b62c0:	00e4      	lsls	r4, r4, #3
   b62c2:	440a      	add	r2, r1
   b62c4:	4611      	mov	r1, r2
   b62c6:	9400      	str	r4, [sp, #0]
   b62c8:	69dc      	ldr	r4, [r3, #28]
   b62ca:	4632      	mov	r2, r6
   b62cc:	462b      	mov	r3, r5
   b62ce:	b209      	sxth	r1, r1
   b62d0:	4658      	mov	r0, fp
   b62d2:	47a0      	blx	r4
        endWrite();
   b62d4:	e7be      	b.n	b6254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b62d6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b62d8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b62da:	6812      	ldr	r2, [r2, #0]
   b62dc:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b62de:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b62e0:	b2ff      	uxtb	r7, r7
   b62e2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b62e6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b62ea:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b62ec:	789a      	ldrb	r2, [r3, #2]
   b62ee:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b62f0:	78da      	ldrb	r2, [r3, #3]
   b62f2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b62f4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b62f6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b62fa:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b62fe:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6300:	d801      	bhi.n	b6306 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b6302:	2c01      	cmp	r4, #1
   b6304:	d957      	bls.n	b63b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b6306:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b630a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b630c:	fa0f f38a 	sxth.w	r3, sl
   b6310:	9307      	str	r3, [sp, #28]
        startWrite();
   b6312:	f8db 3000 	ldr.w	r3, [fp]
   b6316:	4658      	mov	r0, fp
   b6318:	695b      	ldr	r3, [r3, #20]
   b631a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b631c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b631e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6322:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6324:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6328:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b632a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b632c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b632e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6330:	429f      	cmp	r7, r3
   b6332:	d28f      	bcs.n	b6254 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6334:	9b07      	ldr	r3, [sp, #28]
   b6336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6338:	443b      	add	r3, r7
   b633a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b633e:	2200      	movs	r2, #0
   b6340:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6344:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6346:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b634a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b634e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6352:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6354:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6356:	9905      	ldr	r1, [sp, #20]
   b6358:	4291      	cmp	r1, r2
   b635a:	d241      	bcs.n	b63e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b635c:	1c5a      	adds	r2, r3, #1
   b635e:	b2d2      	uxtb	r2, r2
   b6360:	075b      	lsls	r3, r3, #29
   b6362:	920d      	str	r2, [sp, #52]	; 0x34
   b6364:	d107      	bne.n	b6376 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6366:	9b06      	ldr	r3, [sp, #24]
   b6368:	9906      	ldr	r1, [sp, #24]
   b636a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b636c:	3301      	adds	r3, #1
   b636e:	b29b      	uxth	r3, r3
   b6370:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6374:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6376:	f019 0f80 	tst.w	r9, #128	; 0x80
   b637a:	d012      	beq.n	b63a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b637c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b637e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6382:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6386:	d11a      	bne.n	b63be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6388:	2c01      	cmp	r4, #1
   b638a:	d118      	bne.n	b63be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b638c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b638e:	699b      	ldr	r3, [r3, #24]
   b6390:	4411      	add	r1, r2
   b6392:	9a05      	ldr	r2, [sp, #20]
   b6394:	4411      	add	r1, r2
   b6396:	461e      	mov	r6, r3
   b6398:	4652      	mov	r2, sl
   b639a:	9b04      	ldr	r3, [sp, #16]
   b639c:	b209      	sxth	r1, r1
   b639e:	4658      	mov	r0, fp
   b63a0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b63a2:	9e05      	ldr	r6, [sp, #20]
   b63a4:	3601      	adds	r6, #1
   b63a6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b63a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b63ac:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b63ae:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b63b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b63b4:	e7ce      	b.n	b6354 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b63b6:	2300      	movs	r3, #0
   b63b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b63bc:	e7a9      	b.n	b6312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b63be:	9805      	ldr	r0, [sp, #20]
   b63c0:	9a08      	ldr	r2, [sp, #32]
   b63c2:	4402      	add	r2, r0
   b63c4:	fb02 1105 	mla	r1, r2, r5, r1
   b63c8:	9a04      	ldr	r2, [sp, #16]
   b63ca:	e9cd 4200 	strd	r4, r2, [sp]
   b63ce:	69db      	ldr	r3, [r3, #28]
   b63d0:	ee18 2a10 	vmov	r2, s16
   b63d4:	461e      	mov	r6, r3
   b63d6:	b209      	sxth	r1, r1
   b63d8:	462b      	mov	r3, r5
   b63da:	4658      	mov	r0, fp
   b63dc:	47b0      	blx	r6
   b63de:	e7e0      	b.n	b63a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b63e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b63e2:	3701      	adds	r7, #1
   b63e4:	4498      	add	r8, r3
   b63e6:	fa5f f888 	uxtb.w	r8, r8
   b63ea:	b2ff      	uxtb	r7, r7
   b63ec:	e79f      	b.n	b632e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b63ee:	b011      	add	sp, #68	; 0x44
   b63f0:	ecbd 8b02 	vpop	{d8}
   b63f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b63f8:	000bb9e4 	.word	0x000bb9e4

000b63fc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b63fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b63fe:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6400:	b085      	sub	sp, #20
   b6402:	4604      	mov	r4, r0
   b6404:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b6406:	2a00      	cmp	r2, #0
   b6408:	d134      	bne.n	b6474 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b640a:	290a      	cmp	r1, #10
   b640c:	d108      	bne.n	b6420 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b640e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6410:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6412:	7e42      	ldrb	r2, [r0, #25]
   b6414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6418:	8263      	strh	r3, [r4, #18]
}
   b641a:	2001      	movs	r0, #1
   b641c:	b005      	add	sp, #20
   b641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6420:	290d      	cmp	r1, #13
   b6422:	d0fa      	beq.n	b641a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6424:	7ee1      	ldrb	r1, [r4, #27]
   b6426:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6428:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b642a:	b171      	cbz	r1, b644a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b642c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6430:	2106      	movs	r1, #6
   b6432:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6436:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b643a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b643c:	bfc1      	itttt	gt
   b643e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b6442:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6444:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6448:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b644a:	8ae2      	ldrh	r2, [r4, #22]
   b644c:	9201      	str	r2, [sp, #4]
   b644e:	8aa2      	ldrh	r2, [r4, #20]
   b6450:	9200      	str	r2, [sp, #0]
   b6452:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6456:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b645a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b645e:	4620      	mov	r0, r4
   b6460:	f7ff fe5e 	bl	b6120 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6464:	7e23      	ldrb	r3, [r4, #24]
   b6466:	8a22      	ldrh	r2, [r4, #16]
   b6468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b646c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b6470:	8223      	strh	r3, [r4, #16]
   b6472:	e7d2      	b.n	b641a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6474:	290a      	cmp	r1, #10
   b6476:	d107      	bne.n	b6488 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6478:	2300      	movs	r3, #0
   b647a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b647c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b647e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b6480:	8a43      	ldrh	r3, [r0, #18]
   b6482:	fb01 3302 	mla	r3, r1, r2, r3
   b6486:	e7c7      	b.n	b6418 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6488:	290d      	cmp	r1, #13
   b648a:	d0c6      	beq.n	b641a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b648c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b648e:	42a9      	cmp	r1, r5
   b6490:	d3c3      	bcc.n	b641a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b6492:	7a51      	ldrb	r1, [r2, #9]
   b6494:	4299      	cmp	r1, r3
   b6496:	d3c0      	bcc.n	b641a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6498:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b649a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b649c:	b2ed      	uxtb	r5, r5
   b649e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b64a2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b64a4:	b328      	cbz	r0, b64f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b64a6:	78e9      	ldrb	r1, [r5, #3]
   b64a8:	b319      	cbz	r1, b64f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b64aa:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b64ac:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b64ae:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b64b0:	b191      	cbz	r1, b64d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b64b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b64b6:	4408      	add	r0, r1
   b64b8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b64bc:	fb06 1100 	mla	r1, r6, r0, r1
   b64c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b64c4:	4281      	cmp	r1, r0
   b64c6:	dd07      	ble.n	b64d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b64c8:	2000      	movs	r0, #0
   b64ca:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b64cc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b64d0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b64d2:	fb02 1207 	mla	r2, r2, r7, r1
   b64d6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b64d8:	8ae2      	ldrh	r2, [r4, #22]
   b64da:	9201      	str	r2, [sp, #4]
   b64dc:	8aa2      	ldrh	r2, [r4, #20]
   b64de:	9200      	str	r2, [sp, #0]
   b64e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b64e4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b64e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b64ec:	4620      	mov	r0, r4
   b64ee:	f7ff fe17 	bl	b6120 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b64f2:	7929      	ldrb	r1, [r5, #4]
   b64f4:	7e22      	ldrb	r2, [r4, #24]
   b64f6:	8a23      	ldrh	r3, [r4, #16]
   b64f8:	fb01 3302 	mla	r3, r1, r2, r3
   b64fc:	e7b8      	b.n	b6470 <_ZN12Adafruit_GFX5writeEh+0x74>

000b64fe <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b64fe:	2901      	cmp	r1, #1
   b6500:	bf38      	it	cc
   b6502:	2101      	movcc	r1, #1
   b6504:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b6506:	7641      	strb	r1, [r0, #25]
}
   b6508:	4770      	bx	lr
	...

000b650c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b650c:	b510      	push	{r4, lr}
   b650e:	4b06      	ldr	r3, [pc, #24]	; (b6528 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6510:	6003      	str	r3, [r0, #0]
   b6512:	4604      	mov	r4, r0
	if (mutex) {
   b6514:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6516:	b108      	cbz	r0, b651c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6518:	f001 f8c4 	bl	b76a4 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b651c:	4620      	mov	r0, r4
   b651e:	f000 fbb3 	bl	b6c88 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6522:	4620      	mov	r0, r4
   b6524:	bd10      	pop	{r4, pc}
   b6526:	bf00      	nop
   b6528:	000bbf44 	.word	0x000bbf44

000b652c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b652c:	b510      	push	{r4, lr}
   b652e:	4604      	mov	r4, r0
}
   b6530:	f7ff ffec 	bl	b650c <_ZN16OledWingAdafruitD1Ev>
   b6534:	4620      	mov	r0, r4
   b6536:	2170      	movs	r1, #112	; 0x70
   b6538:	f7fe fb17 	bl	b4b6a <_ZdlPvj>
   b653c:	4620      	mov	r0, r4
   b653e:	bd10      	pop	{r4, pc}

000b6540 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6540:	b530      	push	{r4, r5, lr}
   b6542:	b085      	sub	sp, #20
   b6544:	4604      	mov	r4, r0
   b6546:	460d      	mov	r5, r1
   b6548:	f002 fcf0 	bl	b8f2c <_Z19__fetch_global_Wirev>
   b654c:	4a10      	ldr	r2, [pc, #64]	; (b6590 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b654e:	4911      	ldr	r1, [pc, #68]	; (b6594 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6550:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6554:	f04f 32ff 	mov.w	r2, #4294967295
   b6558:	2180      	movs	r1, #128	; 0x80
   b655a:	4603      	mov	r3, r0
   b655c:	9200      	str	r2, [sp, #0]
   b655e:	4620      	mov	r0, r4
   b6560:	2220      	movs	r2, #32
   b6562:	f000 fc09 	bl	b6d78 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6566:	4b0c      	ldr	r3, [pc, #48]	; (b6598 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6568:	6023      	str	r3, [r4, #0]
   b656a:	2300      	movs	r3, #0
   b656c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6570:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6574:	f000 f854 	bl	b6620 <_ZN8DebounceC1Ev>
   b6578:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b657c:	f000 f850 	bl	b6620 <_ZN8DebounceC1Ev>
   b6580:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6584:	f000 f84c 	bl	b6620 <_ZN8DebounceC1Ev>
}
   b6588:	4620      	mov	r0, r4
   b658a:	b005      	add	sp, #20
   b658c:	bd30      	pop	{r4, r5, pc}
   b658e:	bf00      	nop
   b6590:	00061a80 	.word	0x00061a80
   b6594:	000186a0 	.word	0x000186a0
   b6598:	000bbf44 	.word	0x000bbf44

000b659c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b659c:	b513      	push	{r0, r1, r4, lr}
   b659e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b65a0:	3050      	adds	r0, #80	; 0x50
   b65a2:	f001 f877 	bl	b7694 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b65a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b65a8:	07d9      	lsls	r1, r3, #31
   b65aa:	d505      	bpl.n	b65b8 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b65ac:	2202      	movs	r2, #2
   b65ae:	2104      	movs	r1, #4
   b65b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b65b4:	f000 f848 	bl	b6648 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b65b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b65ba:	079a      	lsls	r2, r3, #30
   b65bc:	d505      	bpl.n	b65ca <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b65be:	2200      	movs	r2, #0
   b65c0:	2103      	movs	r1, #3
   b65c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b65c6:	f000 f83f 	bl	b6648 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b65ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b65cc:	075b      	lsls	r3, r3, #29
   b65ce:	d505      	bpl.n	b65dc <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b65d0:	2202      	movs	r2, #2
   b65d2:	4611      	mov	r1, r2
   b65d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b65d8:	f000 f836 	bl	b6648 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b65dc:	2301      	movs	r3, #1
   b65de:	9300      	str	r3, [sp, #0]
   b65e0:	223c      	movs	r2, #60	; 0x3c
   b65e2:	2102      	movs	r1, #2
   b65e4:	4620      	mov	r0, r4
   b65e6:	f000 fccf 	bl	b6f88 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b65ea:	b002      	add	sp, #8
   b65ec:	bd10      	pop	{r4, pc}

000b65ee <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b65ee:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b65f0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b65f2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b65f4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b65f6:	d502      	bpl.n	b65fe <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b65f8:	3058      	adds	r0, #88	; 0x58
   b65fa:	f000 f832 	bl	b6662 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b65fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6600:	079a      	lsls	r2, r3, #30
   b6602:	d503      	bpl.n	b660c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6604:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6608:	f000 f82b 	bl	b6662 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b660c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b660e:	075b      	lsls	r3, r3, #29
   b6610:	d505      	bpl.n	b661e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6612:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b661a:	f000 b822 	b.w	b6662 <_ZN8Debounce6updateEv>
}
   b661e:	bd10      	pop	{r4, pc}

000b6620 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6620:	2100      	movs	r1, #0
   b6622:	220a      	movs	r2, #10
   b6624:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6628:	4770      	bx	lr

000b662a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b662a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b662c:	b510      	push	{r4, lr}
   b662e:	4604      	mov	r4, r0
    this->pin = pin;
   b6630:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6632:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6634:	b288      	uxth	r0, r1
   b6636:	f002 fbcd 	bl	b8dd4 <digitalRead>
   b663a:	b108      	cbz	r0, b6640 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b663c:	2303      	movs	r3, #3
   b663e:	71a3      	strb	r3, [r4, #6]
   b6640:	f001 f820 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6644:	6020      	str	r0, [r4, #0]
#endif
}
   b6646:	bd10      	pop	{r4, pc}

000b6648 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6648:	b538      	push	{r3, r4, r5, lr}
   b664a:	460c      	mov	r4, r1
   b664c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b664e:	4611      	mov	r1, r2
   b6650:	b2a0      	uxth	r0, r4
   b6652:	f002 fb95 	bl	b8d80 <pinMode>
  
  this->attach(pin);
   b6656:	4621      	mov	r1, r4
   b6658:	4628      	mov	r0, r5
}
   b665a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b665e:	f7ff bfe4 	b.w	b662a <_ZN8Debounce6attachEi>

000b6662 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6662:	b538      	push	{r3, r4, r5, lr}
   b6664:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6666:	79c0      	ldrb	r0, [r0, #7]
   b6668:	f002 fbb4 	bl	b8dd4 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b666c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b666e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6670:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6674:	bf18      	it	ne
   b6676:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6678:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b667c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b667e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6680:	d00a      	beq.n	b6698 <_ZN8Debounce6updateEv+0x36>
   b6682:	f000 ffff 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6686:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6688:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b668a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b668e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6690:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6692:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6696:	bd38      	pop	{r3, r4, r5, pc}
   b6698:	f000 fff4 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b669c:	6823      	ldr	r3, [r4, #0]
   b669e:	1ac0      	subs	r0, r0, r3
   b66a0:	88a3      	ldrh	r3, [r4, #4]
   b66a2:	4298      	cmp	r0, r3
   b66a4:	d3f4      	bcc.n	b6690 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b66a6:	79a3      	ldrb	r3, [r4, #6]
   b66a8:	f003 0301 	and.w	r3, r3, #1
   b66ac:	42ab      	cmp	r3, r5
   b66ae:	d0ef      	beq.n	b6690 <_ZN8Debounce6updateEv+0x2e>
   b66b0:	f000 ffe8 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b66b4:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b66b6:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b66b8:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b66bc:	f043 0308 	orr.w	r3, r3, #8
   b66c0:	e7e5      	b.n	b668e <_ZN8Debounce6updateEv+0x2c>

000b66c2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b66c2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b66c6:	b510      	push	{r4, lr}
   b66c8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b66ca:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b66cc:	b113      	cbz	r3, b66d4 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b66ce:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b66d0:	f000 fff0 	bl	b76b4 <os_mutex_lock>
#endif
#endif
#endif
        }
   b66d4:	4620      	mov	r0, r4
   b66d6:	bd10      	pop	{r4, pc}

000b66d8 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b66d8:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b66da:	6803      	ldr	r3, [r0, #0]
   b66dc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b66e0:	4604      	mov	r4, r0
            if (mqtt->thread)
   b66e2:	b112      	cbz	r2, b66ea <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b66e4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b66e6:	f000 ffed 	bl	b76c4 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b66ea:	4620      	mov	r0, r4
   b66ec:	bd10      	pop	{r4, pc}

000b66ee <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b66ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66f0:	461f      	mov	r7, r3
   b66f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b66f6:	4604      	mov	r4, r0
   b66f8:	460d      	mov	r5, r1
   b66fa:	4616      	mov	r6, r2
    if (thread) {
   b66fc:	b12b      	cbz	r3, b670a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b66fe:	2301      	movs	r3, #1
   b6700:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6704:	3058      	adds	r0, #88	; 0x58
   b6706:	f000 ffc5 	bl	b7694 <os_mutex_create>
    }
    this->callback = callback;
   b670a:	9b08      	ldr	r3, [sp, #32]
   b670c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b670e:	2300      	movs	r3, #0
   b6710:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6712:	b106      	cbz	r6, b6716 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6714:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6716:	b125      	cbz	r5, b6722 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6718:	4629      	mov	r1, r5
   b671a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b671e:	f001 fbb5 	bl	b7e8c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6722:	9b06      	ldr	r3, [sp, #24]
   b6724:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6726:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6728:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b672a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b672e:	2bff      	cmp	r3, #255	; 0xff
   b6730:	bfb8      	it	lt
   b6732:	23ff      	movlt	r3, #255	; 0xff
   b6734:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6738:	b108      	cbz	r0, b673e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b673a:	f7fe fa14 	bl	b4b66 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b673e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6742:	f7fe fa0c 	bl	b4b5e <_Znaj>
   b6746:	61e0      	str	r0, [r4, #28]
}
   b6748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b674c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b674c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6750:	4604      	mov	r4, r0
            bool thread) {
   b6752:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6754:	4617      	mov	r7, r2
   b6756:	4698      	mov	r8, r3
   b6758:	460e      	mov	r6, r1
            bool thread) {
   b675a:	f002 f9cf 	bl	b8afc <_ZN9TCPClientC1Ev>
   b675e:	490d      	ldr	r1, [pc, #52]	; (b6794 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6760:	61e5      	str	r5, [r4, #28]
   b6762:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6766:	f001 fb6e 	bl	b7e46 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b676a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b676e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6770:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b6774:	22ff      	movs	r2, #255	; 0xff
   b6776:	230f      	movs	r3, #15
   b6778:	e9cd 3200 	strd	r3, r2, [sp]
   b677c:	4620      	mov	r0, r4
            bool thread) {
   b677e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6782:	463b      	mov	r3, r7
   b6784:	462a      	mov	r2, r5
   b6786:	4631      	mov	r1, r6
   b6788:	f7ff ffb1 	bl	b66ee <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b678c:	4620      	mov	r0, r4
   b678e:	b004      	add	sp, #16
   b6790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6794:	000bcb60 	.word	0x000bcb60

000b6798 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b6798:	b510      	push	{r4, lr}
   b679a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b679c:	4620      	mov	r0, r4
   b679e:	f002 f909 	bl	b89b4 <_ZN9TCPClient9availableEv>
   b67a2:	2800      	cmp	r0, #0
   b67a4:	d0fa      	beq.n	b679c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b67a6:	4620      	mov	r0, r4
   b67a8:	f001 ff12 	bl	b85d0 <_ZN9TCPClient4readEv>
}
   b67ac:	b2c0      	uxtb	r0, r0
   b67ae:	bd10      	pop	{r4, pc}

000b67b0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b67b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b67b4:	4605      	mov	r5, r0
   b67b6:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b67b8:	f7ff ffee 	bl	b6798 <_ZN4MQTT8readByteEv>
   b67bc:	69eb      	ldr	r3, [r5, #28]
   b67be:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b67c0:	69eb      	ldr	r3, [r5, #28]
   b67c2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b67c6:	f04f 0901 	mov.w	r9, #1
   b67ca:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b67ce:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b67d0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b67d2:	4628      	mov	r0, r5
   b67d4:	f7ff ffe0 	bl	b6798 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b67d8:	4626      	mov	r6, r4
   b67da:	69eb      	ldr	r3, [r5, #28]
   b67dc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b67de:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b67e2:	fb13 f309 	smulbb	r3, r3, r9
   b67e6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b67e8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b67ea:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b67ec:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b67ee:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b67f0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b67f4:	d4ed      	bmi.n	b67d2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b67f6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b67f8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b67fc:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6800:	d11e      	bne.n	b6840 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6802:	4628      	mov	r0, r5
   b6804:	f7ff ffc8 	bl	b6798 <_ZN4MQTT8readByteEv>
   b6808:	69eb      	ldr	r3, [r5, #28]
   b680a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b680c:	4628      	mov	r0, r5
   b680e:	f7ff ffc3 	bl	b6798 <_ZN4MQTT8readByteEv>
   b6812:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6814:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6816:	b2b6      	uxth	r6, r6
   b6818:	69eb      	ldr	r3, [r5, #28]
   b681a:	b2a4      	uxth	r4, r4
   b681c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b681e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6820:	b2b6      	uxth	r6, r6
   b6822:	42be      	cmp	r6, r7
   b6824:	d20e      	bcs.n	b6844 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6826:	4628      	mov	r0, r5
   b6828:	f7ff ffb6 	bl	b6798 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b682c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6830:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6832:	bf84      	itt	hi
   b6834:	69eb      	ldrhi	r3, [r5, #28]
   b6836:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6838:	3401      	adds	r4, #1
   b683a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b683c:	3601      	adds	r6, #1
   b683e:	e7ef      	b.n	b6820 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6840:	2600      	movs	r6, #0
   b6842:	e7ed      	b.n	b6820 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6844:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6848:	42a3      	cmp	r3, r4
   b684a:	bf2c      	ite	cs
   b684c:	4620      	movcs	r0, r4
   b684e:	2000      	movcc	r0, #0
   b6850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6854 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6854:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6858:	4615      	mov	r5, r2
   b685a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b685c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b685e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6860:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6862:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6864:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6866:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b686a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b686e:	f103 0401 	add.w	r4, r3, #1
   b6872:	4403      	add	r3, r0
            digit |= 0x80;
   b6874:	bf88      	it	hi
   b6876:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b687a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b687e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6882:	b2e4      	uxtb	r4, r4
   b6884:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6888:	d81e      	bhi.n	b68c8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b688a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b688e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6892:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6894:	4622      	mov	r2, r4
   b6896:	a901      	add	r1, sp, #4
   b6898:	4428      	add	r0, r5
    buf[4-llen] = header;
   b689a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b689e:	f002 ff74 	bl	b978a <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b68a2:	1c72      	adds	r2, r6, #1
   b68a4:	4422      	add	r2, r4
   b68a6:	4641      	mov	r1, r8
   b68a8:	4638      	mov	r0, r7
   b68aa:	f001 fe7c 	bl	b85a6 <_ZN9TCPClient5writeEPKhj>
   b68ae:	4605      	mov	r5, r0
   b68b0:	f000 fee8 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b68b4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b68b6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b68b8:	4432      	add	r2, r6
   b68ba:	b2a8      	uxth	r0, r5
}
   b68bc:	1a13      	subs	r3, r2, r0
   b68be:	4258      	negs	r0, r3
   b68c0:	4158      	adcs	r0, r3
   b68c2:	b002      	add	sp, #8
   b68c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b68c8:	4623      	mov	r3, r4
   b68ca:	e7ca      	b.n	b6862 <_ZN4MQTT5writeEhPht+0xe>

000b68cc <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b68cc:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b68ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   b68d0:	4605      	mov	r5, r0
    pos += 2;
   b68d2:	b298      	uxth	r0, r3
   b68d4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b68d6:	5cce      	ldrb	r6, [r1, r3]
   b68d8:	b29c      	uxth	r4, r3
   b68da:	b156      	cbz	r6, b68f2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b68dc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b68e0:	4584      	cmp	ip, r0
   b68e2:	f103 0701 	add.w	r7, r3, #1
   b68e6:	d904      	bls.n	b68f2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b68e8:	1c44      	adds	r4, r0, #1
   b68ea:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b68ec:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b68ee:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b68f0:	e7f1      	b.n	b68d6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b68f2:	b299      	uxth	r1, r3
   b68f4:	1a41      	subs	r1, r0, r1
   b68f6:	440a      	add	r2, r1
   b68f8:	0a21      	lsrs	r1, r4, #8
   b68fa:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b68fe:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6902:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6904 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6904:	b538      	push	{r3, r4, r5, lr}
   b6906:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6908:	f001 ff76 	bl	b87f8 <_ZN9TCPClient9connectedEv>
   b690c:	2800      	cmp	r0, #0
   b690e:	bf14      	ite	ne
   b6910:	2501      	movne	r5, #1
   b6912:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6914:	d102      	bne.n	b691c <_ZN4MQTT11isConnectedEv+0x18>
   b6916:	4620      	mov	r0, r4
   b6918:	f002 f8a6 	bl	b8a68 <_ZN9TCPClient4stopEv>
    return rc;
}
   b691c:	4628      	mov	r0, r5
   b691e:	bd38      	pop	{r3, r4, r5, pc}

000b6920 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6924:	b088      	sub	sp, #32
   b6926:	4604      	mov	r4, r0
   b6928:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b692c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6930:	4689      	mov	r9, r1
   b6932:	4617      	mov	r7, r2
   b6934:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6936:	f7ff ffe5 	bl	b6904 <_ZN4MQTT11isConnectedEv>
   b693a:	4605      	mov	r5, r0
   b693c:	2800      	cmp	r0, #0
   b693e:	f040 80cd 	bne.w	b6adc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6942:	4621      	mov	r1, r4
   b6944:	a801      	add	r0, sp, #4
   b6946:	f7ff febc 	bl	b66c2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b694a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b694c:	2900      	cmp	r1, #0
   b694e:	f040 8088 	bne.w	b6a62 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6952:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6958:	462b      	mov	r3, r5
   b695a:	4620      	mov	r0, r4
   b695c:	f001 fece 	bl	b86fc <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6960:	2800      	cmp	r0, #0
   b6962:	d07a      	beq.n	b6a5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6964:	2301      	movs	r3, #1
   b6966:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6968:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b696c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b696e:	2b04      	cmp	r3, #4
   b6970:	4b5b      	ldr	r3, [pc, #364]	; (b6ae0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6972:	f040 8081 	bne.w	b6a78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6976:	6818      	ldr	r0, [r3, #0]
   b6978:	8899      	ldrh	r1, [r3, #4]
   b697a:	799b      	ldrb	r3, [r3, #6]
   b697c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6980:	f88d 300e 	strb.w	r3, [sp, #14]
   b6984:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6986:	f8c2 0005 	str.w	r0, [r2, #5]
   b698a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b698e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6992:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6996:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6998:	230c      	movs	r3, #12
            if (willTopic) {
   b699a:	f1b8 0f00 	cmp.w	r8, #0
   b699e:	f000 8081 	beq.w	b6aa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b69a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b69a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b69aa:	0140      	lsls	r0, r0, #5
   b69ac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b69b0:	f040 0006 	orr.w	r0, r0, #6
   b69b4:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b69b6:	f1ba 0f00 	cmp.w	sl, #0
   b69ba:	d101      	bne.n	b69c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b69bc:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b69c0:	b11f      	cbz	r7, b69ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b69c2:	2e00      	cmp	r6, #0
   b69c4:	d170      	bne.n	b6aa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b69c6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b69ca:	69e2      	ldr	r2, [r4, #28]
   b69cc:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b69ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b69d0:	69e1      	ldr	r1, [r4, #28]
   b69d2:	1c58      	adds	r0, r3, #1
   b69d4:	1212      	asrs	r2, r2, #8
   b69d6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b69d8:	1c9a      	adds	r2, r3, #2
   b69da:	69e1      	ldr	r1, [r4, #28]
   b69dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b69de:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b69e0:	3303      	adds	r3, #3
   b69e2:	69e2      	ldr	r2, [r4, #28]
   b69e4:	4649      	mov	r1, r9
   b69e6:	4620      	mov	r0, r4
   b69e8:	f7ff ff70 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
   b69ec:	4603      	mov	r3, r0
            if (willTopic) {
   b69ee:	f1b8 0f00 	cmp.w	r8, #0
   b69f2:	d00b      	beq.n	b6a0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b69f4:	69e2      	ldr	r2, [r4, #28]
   b69f6:	4641      	mov	r1, r8
   b69f8:	4620      	mov	r0, r4
   b69fa:	f7ff ff67 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b69fe:	69e2      	ldr	r2, [r4, #28]
   b6a00:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6a02:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6a04:	4620      	mov	r0, r4
   b6a06:	f7ff ff61 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
   b6a0a:	4603      	mov	r3, r0
            if(user != NULL) {
   b6a0c:	b167      	cbz	r7, b6a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b6a0e:	69e2      	ldr	r2, [r4, #28]
   b6a10:	4639      	mov	r1, r7
   b6a12:	4620      	mov	r0, r4
   b6a14:	f7ff ff5a 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
   b6a18:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6a1a:	b12e      	cbz	r6, b6a28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b6a1c:	69e2      	ldr	r2, [r4, #28]
   b6a1e:	4631      	mov	r1, r6
   b6a20:	4620      	mov	r0, r4
   b6a22:	f7ff ff53 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
   b6a26:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6a28:	3b05      	subs	r3, #5
   b6a2a:	69e2      	ldr	r2, [r4, #28]
   b6a2c:	b29b      	uxth	r3, r3
   b6a2e:	2110      	movs	r1, #16
   b6a30:	4620      	mov	r0, r4
   b6a32:	f7ff ff0f 	bl	b6854 <_ZN4MQTT5writeEhPht>
   b6a36:	f000 fe25 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6a3a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6a3e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6a42:	4620      	mov	r0, r4
   b6a44:	f001 ffb6 	bl	b89b4 <_ZN9TCPClient9availableEv>
   b6a48:	bb88      	cbnz	r0, b6aae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6a4a:	f000 fe1b 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6a50:	1ac0      	subs	r0, r0, r3
   b6a52:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6a54:	4373      	muls	r3, r6
   b6a56:	4298      	cmp	r0, r3
   b6a58:	d9f3      	bls.n	b6a42 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	f002 f804 	bl	b8a68 <_ZN9TCPClient4stopEv>
   b6a60:	e035      	b.n	b6ace <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6a62:	a802      	add	r0, sp, #8
   b6a64:	f001 fc4a 	bl	b82fc <_ZN9IPAddressC1EPKh>
   b6a68:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6a6c:	462b      	mov	r3, r5
   b6a6e:	a902      	add	r1, sp, #8
   b6a70:	4620      	mov	r0, r4
   b6a72:	f001 ff23 	bl	b88bc <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6a76:	e773      	b.n	b6960 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6a78:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b6a7c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6a80:	7bdb      	ldrb	r3, [r3, #15]
   b6a82:	f10d 0c08 	add.w	ip, sp, #8
   b6a86:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6a8a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b6a8e:	ab02      	add	r3, sp, #8
   b6a90:	cb03      	ldmia	r3!, {r0, r1}
   b6a92:	f8c2 0005 	str.w	r0, [r2, #5]
   b6a96:	f8c2 1009 	str.w	r1, [r2, #9]
   b6a9a:	f89c 3000 	ldrb.w	r3, [ip]
   b6a9e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6aa0:	230e      	movs	r3, #14
   b6aa2:	e77a      	b.n	b699a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6aa4:	2002      	movs	r0, #2
   b6aa6:	e786      	b.n	b69b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6aa8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b6aac:	e78d      	b.n	b69ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b6aae:	a902      	add	r1, sp, #8
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	f7ff fe7d 	bl	b67b0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6ab6:	2804      	cmp	r0, #4
   b6ab8:	d1cf      	bne.n	b6a5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b6aba:	69e3      	ldr	r3, [r4, #28]
   b6abc:	78de      	ldrb	r6, [r3, #3]
   b6abe:	2e00      	cmp	r6, #0
   b6ac0:	d1cb      	bne.n	b6a5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6ac2:	f000 fddf 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6ac6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6ac8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b6aca:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b6ace:	a801      	add	r0, sp, #4
   b6ad0:	f7ff fe02 	bl	b66d8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6ad4:	4628      	mov	r0, r5
   b6ad6:	b008      	add	sp, #32
   b6ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b6adc:	2500      	movs	r5, #0
   b6ade:	e7f9      	b.n	b6ad4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6ae0:	000bb7ac 	.word	0x000bb7ac

000b6ae4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6ae6:	2301      	movs	r3, #1
   b6ae8:	2204      	movs	r2, #4
   b6aea:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b6aee:	2300      	movs	r3, #0
   b6af0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6af4:	e9cd 3300 	strd	r3, r3, [sp]
   b6af8:	461a      	mov	r2, r3
   b6afa:	f7ff ff11 	bl	b6920 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b6afe:	b007      	add	sp, #28
   b6b00:	f85d fb04 	ldr.w	pc, [sp], #4

000b6b04 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b08:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b6b0c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6b10:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b6b14:	4604      	mov	r4, r0
   b6b16:	468b      	mov	fp, r1
   b6b18:	4616      	mov	r6, r2
   b6b1a:	461f      	mov	r7, r3
    if (isConnected()) {
   b6b1c:	f7ff fef2 	bl	b6904 <_ZN4MQTT11isConnectedEv>
   b6b20:	4682      	mov	sl, r0
   b6b22:	2800      	cmp	r0, #0
   b6b24:	d051      	beq.n	b6bca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6b26:	4621      	mov	r1, r4
   b6b28:	a801      	add	r0, sp, #4
   b6b2a:	f7ff fdca 	bl	b66c2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b6b2e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6b32:	69e0      	ldr	r0, [r4, #28]
   b6b34:	2100      	movs	r1, #0
   b6b36:	f002 fe50 	bl	b97da <memset>
        length = writeString(topic, buffer, length);
   b6b3a:	2305      	movs	r3, #5
   b6b3c:	69e2      	ldr	r2, [r4, #28]
   b6b3e:	4659      	mov	r1, fp
   b6b40:	4620      	mov	r0, r4
   b6b42:	f7ff fec3 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6b46:	1e6b      	subs	r3, r5, #1
   b6b48:	2b01      	cmp	r3, #1
   b6b4a:	d815      	bhi.n	b6b78 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6b4c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6b4e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6b50:	3101      	adds	r1, #1
   b6b52:	b289      	uxth	r1, r1
   b6b54:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6b56:	0a09      	lsrs	r1, r1, #8
   b6b58:	5419      	strb	r1, [r3, r0]
   b6b5a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6b5c:	69e3      	ldr	r3, [r4, #28]
   b6b5e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6b60:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6b62:	3002      	adds	r0, #2
   b6b64:	5499      	strb	r1, [r3, r2]
   b6b66:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6b68:	f1b8 0f00 	cmp.w	r8, #0
   b6b6c:	d004      	beq.n	b6b78 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b6b6e:	8c23      	ldrh	r3, [r4, #32]
   b6b70:	1c5a      	adds	r2, r3, #1
   b6b72:	8422      	strh	r2, [r4, #32]
   b6b74:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6b78:	2100      	movs	r1, #0
   b6b7a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6b7c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b6b7e:	69e2      	ldr	r2, [r4, #28]
   b6b80:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6b82:	d90a      	bls.n	b6b9a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6b84:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6b88:	459c      	cmp	ip, r3
   b6b8a:	d906      	bls.n	b6b9a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b6b8c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6b90:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6b94:	3101      	adds	r1, #1
   b6b96:	b289      	uxth	r1, r1
   b6b98:	e7ef      	b.n	b6b7a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b6b9a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b6b9e:	2900      	cmp	r1, #0
   b6ba0:	bf0c      	ite	eq
   b6ba2:	2130      	moveq	r1, #48	; 0x30
   b6ba4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6ba6:	f1b9 0f00 	cmp.w	r9, #0
   b6baa:	d001      	beq.n	b6bb0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b6bac:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6bb0:	2d02      	cmp	r5, #2
   b6bb2:	d10e      	bne.n	b6bd2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6bb4:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6bb8:	3b05      	subs	r3, #5
   b6bba:	b29b      	uxth	r3, r3
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	f7ff fe49 	bl	b6854 <_ZN4MQTT5writeEhPht>
   b6bc2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b6bc4:	a801      	add	r0, sp, #4
   b6bc6:	f7ff fd87 	bl	b66d8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6bca:	4650      	mov	r0, sl
   b6bcc:	b003      	add	sp, #12
   b6bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b6bd2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b6bd4:	bf08      	it	eq
   b6bd6:	f041 0102 	orreq.w	r1, r1, #2
   b6bda:	e7ed      	b.n	b6bb8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b6bdc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b6bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b6bde:	9c08      	ldr	r4, [sp, #32]
   b6be0:	9403      	str	r4, [sp, #12]
   b6be2:	2400      	movs	r4, #0
   b6be4:	9402      	str	r4, [sp, #8]
   b6be6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b6bea:	9401      	str	r4, [sp, #4]
   b6bec:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6bf0:	9400      	str	r4, [sp, #0]
   b6bf2:	f7ff ff87 	bl	b6b04 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b6bf6:	b004      	add	sp, #16
   b6bf8:	bd10      	pop	{r4, pc}

000b6bfa <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b6bfa:	b530      	push	{r4, r5, lr}
   b6bfc:	b087      	sub	sp, #28
   b6bfe:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6c00:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b6c02:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6c04:	9204      	str	r2, [sp, #16]
   b6c06:	f7fd ff4d 	bl	b4aa4 <strlen>
   b6c0a:	2500      	movs	r5, #0
   b6c0c:	4603      	mov	r3, r0
   b6c0e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b6c12:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6c16:	9500      	str	r5, [sp, #0]
   b6c18:	4620      	mov	r0, r4
   b6c1a:	f7ff ffdf 	bl	b6bdc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b6c1e:	b007      	add	sp, #28
   b6c20:	bd30      	pop	{r4, r5, pc}

000b6c22 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6c24:	4604      	mov	r4, r0
   b6c26:	460f      	mov	r7, r1
   b6c28:	4616      	mov	r6, r2
    if (isConnected()) {
   b6c2a:	f7ff fe6b 	bl	b6904 <_ZN4MQTT11isConnectedEv>
   b6c2e:	4605      	mov	r5, r0
   b6c30:	b310      	cbz	r0, b6c78 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6c32:	4621      	mov	r1, r4
   b6c34:	a801      	add	r0, sp, #4
   b6c36:	f7ff fd44 	bl	b66c2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6c3a:	8c23      	ldrh	r3, [r4, #32]
   b6c3c:	3301      	adds	r3, #1
   b6c3e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6c40:	b1eb      	cbz	r3, b6c7e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6c42:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6c44:	8c23      	ldrh	r3, [r4, #32]
   b6c46:	69e2      	ldr	r2, [r4, #28]
   b6c48:	0a1b      	lsrs	r3, r3, #8
   b6c4a:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6c4c:	69e3      	ldr	r3, [r4, #28]
   b6c4e:	8c22      	ldrh	r2, [r4, #32]
   b6c50:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6c52:	69e2      	ldr	r2, [r4, #28]
   b6c54:	2307      	movs	r3, #7
   b6c56:	4639      	mov	r1, r7
   b6c58:	4620      	mov	r0, r4
   b6c5a:	f7ff fe37 	bl	b68cc <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6c5e:	69e3      	ldr	r3, [r4, #28]
   b6c60:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6c62:	3804      	subs	r0, #4
   b6c64:	b283      	uxth	r3, r0
   b6c66:	69e2      	ldr	r2, [r4, #28]
   b6c68:	2182      	movs	r1, #130	; 0x82
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	f7ff fdf2 	bl	b6854 <_ZN4MQTT5writeEhPht>
   b6c70:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6c72:	a801      	add	r0, sp, #4
   b6c74:	f7ff fd30 	bl	b66d8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6c78:	4628      	mov	r0, r5
   b6c7a:	b003      	add	sp, #12
   b6c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6c7e:	2301      	movs	r3, #1
   b6c80:	e7df      	b.n	b6c42 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6c82 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6c82:	2200      	movs	r2, #0
   b6c84:	f7ff bfcd 	b.w	b6c22 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6c88 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6c88:	b510      	push	{r4, lr}
   b6c8a:	4b04      	ldr	r3, [pc, #16]	; (b6c9c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b6c8c:	6003      	str	r3, [r0, #0]
   b6c8e:	4604      	mov	r4, r0
  if(buffer) {
   b6c90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6c92:	b108      	cbz	r0, b6c98 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6c94:	f000 ff42 	bl	b7b1c <free>
    buffer = NULL;
  }
}
   b6c98:	4620      	mov	r0, r4
   b6c9a:	bd10      	pop	{r4, pc}
   b6c9c:	000bc450 	.word	0x000bc450

000b6ca0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6ca0:	b510      	push	{r4, lr}
   b6ca2:	4604      	mov	r4, r0
}
   b6ca4:	f7ff fff0 	bl	b6c88 <_ZN16Adafruit_SSD1306D1Ev>
   b6ca8:	4620      	mov	r0, r4
   b6caa:	2150      	movs	r1, #80	; 0x50
   b6cac:	f7fd ff5d 	bl	b4b6a <_ZdlPvj>
   b6cb0:	4620      	mov	r0, r4
   b6cb2:	bd10      	pop	{r4, pc}

000b6cb4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6cb4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6cb6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6cb8:	db4b      	blt.n	b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6cba:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b6cbe:	428c      	cmp	r4, r1
   b6cc0:	dd47      	ble.n	b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6cc2:	2a00      	cmp	r2, #0
   b6cc4:	db45      	blt.n	b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6cc6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6cca:	4294      	cmp	r4, r2
   b6ccc:	dd41      	ble.n	b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b6cce:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6cd0:	2c02      	cmp	r4, #2
   b6cd2:	d01f      	beq.n	b6d14 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6cd4:	2c03      	cmp	r4, #3
   b6cd6:	d026      	beq.n	b6d26 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6cd8:	2c01      	cmp	r4, #1
   b6cda:	d104      	bne.n	b6ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6cdc:	8904      	ldrh	r4, [r0, #8]
   b6cde:	43d2      	mvns	r2, r2
   b6ce0:	4414      	add	r4, r2
      break;
   b6ce2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6ce4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6ce6:	2b01      	cmp	r3, #1
   b6ce8:	d023      	beq.n	b6d32 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6cea:	2b02      	cmp	r3, #2
   b6cec:	d032      	beq.n	b6d54 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b6cee:	bb83      	cbnz	r3, b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b6cf0:	2a00      	cmp	r2, #0
   b6cf2:	4613      	mov	r3, r2
   b6cf4:	8904      	ldrh	r4, [r0, #8]
   b6cf6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6cf8:	bfb8      	it	lt
   b6cfa:	1dd3      	addlt	r3, r2, #7
   b6cfc:	10db      	asrs	r3, r3, #3
   b6cfe:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6d02:	f002 0207 	and.w	r2, r2, #7
   b6d06:	2301      	movs	r3, #1
   b6d08:	4093      	lsls	r3, r2
   b6d0a:	5c42      	ldrb	r2, [r0, r1]
   b6d0c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6d10:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b6d12:	e01e      	b.n	b6d52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6d14:	8904      	ldrh	r4, [r0, #8]
   b6d16:	3c01      	subs	r4, #1
   b6d18:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6d1a:	8944      	ldrh	r4, [r0, #10]
   b6d1c:	43d2      	mvns	r2, r2
   b6d1e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b6d20:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b6d22:	b212      	sxth	r2, r2
      break;
   b6d24:	e7df      	b.n	b6ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6d26:	8944      	ldrh	r4, [r0, #10]
   b6d28:	3c01      	subs	r4, #1
   b6d2a:	1a64      	subs	r4, r4, r1
      break;
   b6d2c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b6d2e:	b222      	sxth	r2, r4
      break;
   b6d30:	e7d9      	b.n	b6ce6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b6d32:	2a00      	cmp	r2, #0
   b6d34:	8904      	ldrh	r4, [r0, #8]
   b6d36:	4613      	mov	r3, r2
   b6d38:	bfb8      	it	lt
   b6d3a:	1dd3      	addlt	r3, r2, #7
   b6d3c:	10db      	asrs	r3, r3, #3
   b6d3e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6d42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6d44:	f002 0007 	and.w	r0, r2, #7
   b6d48:	2201      	movs	r2, #1
   b6d4a:	4082      	lsls	r2, r0
   b6d4c:	5c58      	ldrb	r0, [r3, r1]
   b6d4e:	4302      	orrs	r2, r0
   b6d50:	545a      	strb	r2, [r3, r1]
}
   b6d52:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6d54:	2a00      	cmp	r2, #0
   b6d56:	4613      	mov	r3, r2
   b6d58:	8904      	ldrh	r4, [r0, #8]
   b6d5a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6d5c:	bfb8      	it	lt
   b6d5e:	1dd3      	addlt	r3, r2, #7
   b6d60:	10db      	asrs	r3, r3, #3
   b6d62:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6d66:	f002 0207 	and.w	r2, r2, #7
   b6d6a:	2301      	movs	r3, #1
   b6d6c:	fa03 f202 	lsl.w	r2, r3, r2
   b6d70:	5c43      	ldrb	r3, [r0, r1]
   b6d72:	405a      	eors	r2, r3
   b6d74:	e7cc      	b.n	b6d10 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6d78 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b6d78:	b570      	push	{r4, r5, r6, lr}
   b6d7a:	4604      	mov	r4, r0
   b6d7c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6d7e:	2600      	movs	r6, #0
   b6d80:	f7ff f964 	bl	b604c <_ZN12Adafruit_GFXC1Ess>
   b6d84:	4b11      	ldr	r3, [pc, #68]	; (b6dcc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b6d86:	6023      	str	r3, [r4, #0]
   b6d88:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b6d8a:	b915      	cbnz	r5, b6d92 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b6d8c:	f002 f8ce 	bl	b8f2c <_Z19__fetch_global_Wirev>
   b6d90:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6d92:	23ff      	movs	r3, #255	; 0xff
   b6d94:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6d98:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b6d9c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6da0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b6da4:	4b0a      	ldr	r3, [pc, #40]	; (b6dd0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b6da6:	63a3      	str	r3, [r4, #56]	; 0x38
   b6da8:	2301      	movs	r3, #1
   b6daa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b6dae:	9b05      	ldr	r3, [sp, #20]
   b6db0:	64a3      	str	r3, [r4, #72]	; 0x48
   b6db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6db6:	9b06      	ldr	r3, [sp, #24]
   b6db8:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6dba:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b6dbe:	6426      	str	r6, [r4, #64]	; 0x40
   b6dc0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6dc4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6dc6:	4620      	mov	r0, r4
   b6dc8:	bd70      	pop	{r4, r5, r6, pc}
   b6dca:	bf00      	nop
   b6dcc:	000bc450 	.word	0x000bc450
   b6dd0:	000bbf9c 	.word	0x000bbf9c

000b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dd6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6dd8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6dda:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6ddc:	b190      	cbz	r0, b6e04 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b6dde:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6de2:	f001 fbc9 	bl	b8578 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6de6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6de8:	6803      	ldr	r3, [r0, #0]
   b6dea:	2100      	movs	r1, #0
   b6dec:	689b      	ldr	r3, [r3, #8]
   b6dee:	4798      	blx	r3
    WIRE_WRITE(c);
   b6df0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6df2:	6803      	ldr	r3, [r0, #0]
   b6df4:	4629      	mov	r1, r5
   b6df6:	689b      	ldr	r3, [r3, #8]
   b6df8:	4798      	blx	r3
    wire->endTransmission();
   b6dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6dfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b6e00:	f001 bbc1 	b.w	b8586 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6e04:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6e08:	4601      	mov	r1, r0
   b6e0a:	b298      	uxth	r0, r3
   b6e0c:	f001 ffc9 	bl	b8da2 <digitalWrite>
  if(spi) {
   b6e10:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6e12:	b120      	cbz	r0, b6e1e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6e14:	4629      	mov	r1, r5
}
   b6e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6e1a:	f000 bfb1 	b.w	b7d80 <_ZN8SPIClass8transferEh>
   b6e1e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6e20:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6e22:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6e26:	ea05 0107 	and.w	r1, r5, r7
   b6e2a:	b280      	uxth	r0, r0
   b6e2c:	f001 ffb9 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6e30:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6e34:	2101      	movs	r1, #1
   b6e36:	b280      	uxth	r0, r0
   b6e38:	f001 ffb3 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6e3c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6e40:	2100      	movs	r1, #0
   b6e42:	b280      	uxth	r0, r0
   b6e44:	f001 ffad 	bl	b8da2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6e48:	3e01      	subs	r6, #1
   b6e4a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b6e4e:	d1e8      	bne.n	b6e22 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e52 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6e52:	b538      	push	{r3, r4, r5, lr}
   b6e54:	4604      	mov	r4, r0
  TRANSACTION_START
   b6e56:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6e58:	460d      	mov	r5, r1
  TRANSACTION_START
   b6e5a:	b180      	cbz	r0, b6e7e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b6e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6e5e:	f001 fb7d 	bl	b855c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6e62:	2d00      	cmp	r5, #0
   b6e64:	4620      	mov	r0, r4
   b6e66:	bf14      	ite	ne
   b6e68:	21a7      	movne	r1, #167	; 0xa7
   b6e6a:	21a6      	moveq	r1, #166	; 0xa6
   b6e6c:	f7ff ffb2 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6e70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6e72:	b188      	cbz	r0, b6e98 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6e74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6e7a:	f001 bb6f 	b.w	b855c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b6e7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6e80:	b118      	cbz	r0, b6e8a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6e82:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6e86:	f000 ff0d 	bl	b7ca4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6e8a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6e8e:	2100      	movs	r1, #0
   b6e90:	b280      	uxth	r0, r0
   b6e92:	f001 ff86 	bl	b8da2 <digitalWrite>
   b6e96:	e7e4      	b.n	b6e62 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6e98:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6e9c:	2101      	movs	r1, #1
   b6e9e:	b280      	uxth	r0, r0
   b6ea0:	f001 ff7f 	bl	b8da2 <digitalWrite>
   b6ea4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6ea6:	b118      	cbz	r0, b6eb0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b6eac:	f000 bee0 	b.w	b7c70 <_ZN8SPIClass14endTransactionEv>
}
   b6eb0:	bd38      	pop	{r3, r4, r5, pc}

000b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6eb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6eb6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6eb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6eba:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6ebc:	188f      	adds	r7, r1, r2
   b6ebe:	b340      	cbz	r0, b6f12 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6ec0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6ec4:	f001 fb58 	bl	b8578 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6ec8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6eca:	6803      	ldr	r3, [r0, #0]
   b6ecc:	2100      	movs	r1, #0
   b6ece:	689b      	ldr	r3, [r3, #8]
   b6ed0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6ed2:	2601      	movs	r6, #1
    while(n--) {
   b6ed4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6ed8:	d017      	beq.n	b6f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6eda:	2e1f      	cmp	r6, #31
   b6edc:	d90c      	bls.n	b6ef8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b6ede:	f001 fb52 	bl	b8586 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6ee2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ee8:	f001 fb46 	bl	b8578 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6eec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6eee:	6803      	ldr	r3, [r0, #0]
   b6ef0:	2100      	movs	r1, #0
   b6ef2:	689b      	ldr	r3, [r3, #8]
   b6ef4:	4798      	blx	r3
        bytesOut = 1;
   b6ef6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6ef8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6efa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6efe:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6f00:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6f02:	689b      	ldr	r3, [r3, #8]
   b6f04:	4798      	blx	r3
      bytesOut++;
   b6f06:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6f08:	e7e4      	b.n	b6ed4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6f0a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b6f0e:	f001 bb3a 	b.w	b8586 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6f12:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6f16:	4601      	mov	r1, r0
   b6f18:	b298      	uxth	r0, r3
   b6f1a:	f001 ff42 	bl	b8da2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6f1e:	42bd      	cmp	r5, r7
   b6f20:	d022      	beq.n	b6f68 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b6f22:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6f24:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6f28:	b118      	cbz	r0, b6f32 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6f2a:	4649      	mov	r1, r9
   b6f2c:	f000 ff28 	bl	b7d80 <_ZN8SPIClass8transferEh>
   b6f30:	e7f5      	b.n	b6f1e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b6f32:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f34:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6f38:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6f3c:	ea09 0108 	and.w	r1, r9, r8
   b6f40:	b280      	uxth	r0, r0
   b6f42:	f001 ff2e 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6f46:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f4a:	2101      	movs	r1, #1
   b6f4c:	b280      	uxth	r0, r0
   b6f4e:	f001 ff28 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6f52:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6f56:	2100      	movs	r1, #0
   b6f58:	b280      	uxth	r0, r0
   b6f5a:	f001 ff22 	bl	b8da2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6f5e:	3e01      	subs	r6, #1
   b6f60:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6f64:	d1e8      	bne.n	b6f38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6f66:	e7da      	b.n	b6f1e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6f6c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b6f6c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6f70:	1dda      	adds	r2, r3, #7
   b6f72:	bf48      	it	mi
   b6f74:	f103 020e 	addmi.w	r2, r3, #14
   b6f78:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b6f7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6f7e:	10d2      	asrs	r2, r2, #3
   b6f80:	435a      	muls	r2, r3
   b6f82:	2100      	movs	r1, #0
   b6f84:	f002 bc29 	b.w	b97da <memset>

000b6f88 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6f88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6f8c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6f8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6f90:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6f94:	4604      	mov	r4, r0
   b6f96:	460f      	mov	r7, r1
   b6f98:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6f9a:	b1c3      	cbz	r3, b6fce <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	f7ff ffe5 	bl	b6f6c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6fa2:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b6fa6:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b6faa:	2820      	cmp	r0, #32
   b6fac:	dc21      	bgt.n	b6ff2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b6fae:	2320      	movs	r3, #32
   b6fb0:	2201      	movs	r2, #1
   b6fb2:	3820      	subs	r0, #32
   b6fb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6fb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b6fbc:	2373      	movs	r3, #115	; 0x73
   b6fbe:	3973      	subs	r1, #115	; 0x73
   b6fc0:	9300      	str	r3, [sp, #0]
   b6fc2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6fc6:	4b89      	ldr	r3, [pc, #548]	; (b71ec <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6fc8:	f340 024f 	sbfx	r2, r0, #1, #16
   b6fcc:	e021      	b.n	b7012 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b6fce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6fd2:	1dd8      	adds	r0, r3, #7
   b6fd4:	bf48      	it	mi
   b6fd6:	f103 000e 	addmi.w	r0, r3, #14
   b6fda:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b6fde:	10c0      	asrs	r0, r0, #3
   b6fe0:	4358      	muls	r0, r3
   b6fe2:	f000 fd93 	bl	b7b0c <malloc>
   b6fe6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6fe8:	2800      	cmp	r0, #0
   b6fea:	d1d7      	bne.n	b6f9c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6fec:	b004      	add	sp, #16
   b6fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b6ff2:	3840      	subs	r0, #64	; 0x40
   b6ff4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6ff8:	fa02 f280 	sxtah	r2, r2, r0
   b6ffc:	2340      	movs	r3, #64	; 0x40
   b6ffe:	2001      	movs	r0, #1
   b7000:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b7004:	2352      	movs	r3, #82	; 0x52
   b7006:	3952      	subs	r1, #82	; 0x52
   b7008:	9300      	str	r3, [sp, #0]
   b700a:	4b79      	ldr	r3, [pc, #484]	; (b71f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b700c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b7010:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b7012:	4620      	mov	r0, r4
   b7014:	f341 014f 	sbfx	r1, r1, #1, #16
   b7018:	f7ff f82e 	bl	b6078 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b701c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b701e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b7022:	2800      	cmp	r0, #0
   b7024:	d078      	beq.n	b7118 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7026:	2d00      	cmp	r5, #0
   b7028:	d174      	bne.n	b7114 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b702a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b702e:	2b20      	cmp	r3, #32
   b7030:	bf0c      	ite	eq
   b7032:	253c      	moveq	r5, #60	; 0x3c
   b7034:	253d      	movne	r5, #61	; 0x3d
   b7036:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b703a:	f1b8 0f00 	cmp.w	r8, #0
   b703e:	d001      	beq.n	b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b7040:	f001 fa90 	bl	b8564 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b7044:	b1fe      	cbz	r6, b7086 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b7046:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b704a:	2800      	cmp	r0, #0
   b704c:	db1b      	blt.n	b7086 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b704e:	2101      	movs	r1, #1
   b7050:	b280      	uxth	r0, r0
   b7052:	f001 fe95 	bl	b8d80 <pinMode>
    digitalWrite(rstPin, HIGH);
   b7056:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b705a:	2101      	movs	r1, #1
   b705c:	b280      	uxth	r0, r0
   b705e:	f001 fea0 	bl	b8da2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b7062:	2001      	movs	r0, #1
   b7064:	f001 f810 	bl	b8088 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b7068:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b706c:	2100      	movs	r1, #0
   b706e:	b280      	uxth	r0, r0
   b7070:	f001 fe97 	bl	b8da2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b7074:	200a      	movs	r0, #10
   b7076:	f001 f807 	bl	b8088 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b707a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b707e:	2101      	movs	r1, #1
   b7080:	b280      	uxth	r0, r0
   b7082:	f001 fe8e 	bl	b8da2 <digitalWrite>
  TRANSACTION_START
   b7086:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7088:	2800      	cmp	r0, #0
   b708a:	d074      	beq.n	b7176 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b708c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b708e:	f001 fa65 	bl	b855c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b7092:	2204      	movs	r2, #4
   b7094:	4957      	ldr	r1, [pc, #348]	; (b71f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b7096:	4620      	mov	r0, r4
   b7098:	f7ff ff0b 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b709c:	8961      	ldrh	r1, [r4, #10]
   b709e:	3901      	subs	r1, #1
   b70a0:	b2c9      	uxtb	r1, r1
   b70a2:	4620      	mov	r0, r4
   b70a4:	f7ff fe96 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b70a8:	4953      	ldr	r1, [pc, #332]	; (b71f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b70aa:	2204      	movs	r2, #4
   b70ac:	4620      	mov	r0, r4
   b70ae:	f7ff ff00 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b70b2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b70b6:	2b01      	cmp	r3, #1
   b70b8:	bf0c      	ite	eq
   b70ba:	2110      	moveq	r1, #16
   b70bc:	2114      	movne	r1, #20
   b70be:	4620      	mov	r0, r4
   b70c0:	f7ff fe88 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b70c4:	2204      	movs	r2, #4
   b70c6:	494d      	ldr	r1, [pc, #308]	; (b71fc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b70c8:	4620      	mov	r0, r4
   b70ca:	f7ff fef2 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b70ce:	68a3      	ldr	r3, [r4, #8]
   b70d0:	4a4b      	ldr	r2, [pc, #300]	; (b7200 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b70d2:	4293      	cmp	r3, r2
   b70d4:	d15c      	bne.n	b7190 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b70d6:	494b      	ldr	r1, [pc, #300]	; (b7204 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b70d8:	2204      	movs	r2, #4
   b70da:	4620      	mov	r0, r4
   b70dc:	f7ff fee9 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b70e0:	21d9      	movs	r1, #217	; 0xd9
   b70e2:	4620      	mov	r0, r4
   b70e4:	f7ff fe76 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b70e8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b70ec:	2b01      	cmp	r3, #1
   b70ee:	bf0c      	ite	eq
   b70f0:	2122      	moveq	r1, #34	; 0x22
   b70f2:	21f1      	movne	r1, #241	; 0xf1
   b70f4:	4620      	mov	r0, r4
   b70f6:	f7ff fe6d 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b70fa:	4620      	mov	r0, r4
   b70fc:	4942      	ldr	r1, [pc, #264]	; (b7208 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b70fe:	2206      	movs	r2, #6
   b7100:	f7ff fed7 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b7104:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b7106:	2800      	cmp	r0, #0
   b7108:	d063      	beq.n	b71d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b710a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b710c:	f001 fa26 	bl	b855c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b7110:	2001      	movs	r0, #1
   b7112:	e76b      	b.n	b6fec <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b7114:	b26d      	sxtb	r5, r5
   b7116:	e78e      	b.n	b7036 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b7118:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b711c:	2101      	movs	r1, #1
   b711e:	b280      	uxth	r0, r0
   b7120:	f001 fe2e 	bl	b8d80 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b7124:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7128:	2101      	movs	r1, #1
   b712a:	b280      	uxth	r0, r0
   b712c:	f001 fe28 	bl	b8d80 <pinMode>
    SSD1306_DESELECT
   b7130:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7134:	2101      	movs	r1, #1
   b7136:	b280      	uxth	r0, r0
   b7138:	f001 fe33 	bl	b8da2 <digitalWrite>
    if(spi) { // Hardware SPI
   b713c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b713e:	b13d      	cbz	r5, b7150 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b7140:	f1b8 0f00 	cmp.w	r8, #0
   b7144:	f43f af7e 	beq.w	b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b7148:	4628      	mov	r0, r5
   b714a:	f000 fd7d 	bl	b7c48 <_ZN8SPIClass5beginEv>
   b714e:	e779      	b.n	b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b7150:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7154:	2101      	movs	r1, #1
   b7156:	b280      	uxth	r0, r0
   b7158:	f001 fe12 	bl	b8d80 <pinMode>
      pinMode(clkPin , OUTPUT);
   b715c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b7160:	2101      	movs	r1, #1
   b7162:	b280      	uxth	r0, r0
   b7164:	f001 fe0c 	bl	b8d80 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b7168:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b716c:	4629      	mov	r1, r5
   b716e:	b280      	uxth	r0, r0
   b7170:	f001 fe17 	bl	b8da2 <digitalWrite>
   b7174:	e766      	b.n	b7044 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b7176:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b7178:	b118      	cbz	r0, b7182 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b717a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b717e:	f000 fd91 	bl	b7ca4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b7182:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7186:	2100      	movs	r1, #0
   b7188:	b280      	uxth	r0, r0
   b718a:	f001 fe0a 	bl	b8da2 <digitalWrite>
   b718e:	e780      	b.n	b7092 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b7190:	4a1e      	ldr	r2, [pc, #120]	; (b720c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b7192:	4293      	cmp	r3, r2
   b7194:	d10e      	bne.n	b71b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b7196:	491e      	ldr	r1, [pc, #120]	; (b7210 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b7198:	2203      	movs	r2, #3
   b719a:	4620      	mov	r0, r4
   b719c:	f7ff fe89 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b71a0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b71a4:	2b01      	cmp	r3, #1
   b71a6:	bf0c      	ite	eq
   b71a8:	219f      	moveq	r1, #159	; 0x9f
   b71aa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b71ac:	4620      	mov	r0, r4
   b71ae:	f7ff fe11 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b71b2:	e795      	b.n	b70e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b71b4:	4a17      	ldr	r2, [pc, #92]	; (b7214 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b71b6:	4293      	cmp	r3, r2
   b71b8:	d192      	bne.n	b70e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b71ba:	4917      	ldr	r1, [pc, #92]	; (b7218 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b71bc:	2203      	movs	r2, #3
   b71be:	4620      	mov	r0, r4
   b71c0:	f7ff fe77 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b71c4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b71c8:	2b01      	cmp	r3, #1
   b71ca:	bf0c      	ite	eq
   b71cc:	2110      	moveq	r1, #16
   b71ce:	21af      	movne	r1, #175	; 0xaf
   b71d0:	e7ec      	b.n	b71ac <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b71d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b71d6:	2101      	movs	r1, #1
   b71d8:	b280      	uxth	r0, r0
   b71da:	f001 fde2 	bl	b8da2 <digitalWrite>
   b71de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b71e0:	2800      	cmp	r0, #0
   b71e2:	d095      	beq.n	b7110 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b71e4:	f000 fd44 	bl	b7c70 <_ZN8SPIClass14endTransactionEv>
   b71e8:	e792      	b.n	b7110 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b71ea:	bf00      	nop
   b71ec:	000bc268 	.word	0x000bc268
   b71f0:	000bbfa8 	.word	0x000bbfa8
   b71f4:	000bc4b0 	.word	0x000bc4b0
   b71f8:	000bc4b4 	.word	0x000bc4b4
   b71fc:	000bc4b8 	.word	0x000bc4b8
   b7200:	00200080 	.word	0x00200080
   b7204:	000bc4c2 	.word	0x000bc4c2
   b7208:	000bc4bc 	.word	0x000bc4bc
   b720c:	00400080 	.word	0x00400080
   b7210:	000bc4c6 	.word	0x000bc4c6
   b7214:	00100060 	.word	0x00100060
   b7218:	000bc4c9 	.word	0x000bc4c9

000b721c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b721c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b721e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b7220:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b7224:	db3d      	blt.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7226:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b722a:	4294      	cmp	r4, r2
   b722c:	dd39      	ble.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b722e:	2900      	cmp	r1, #0
      w += x;
   b7230:	bfbe      	ittt	lt
   b7232:	185b      	addlt	r3, r3, r1
   b7234:	b21b      	sxthlt	r3, r3
      x  = 0;
   b7236:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b7238:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b723c:	18ce      	adds	r6, r1, r3
   b723e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b7240:	bfc4      	itt	gt
   b7242:	1a63      	subgt	r3, r4, r1
   b7244:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b7246:	2b00      	cmp	r3, #0
   b7248:	dd2b      	ble.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b724a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b724c:	10d6      	asrs	r6, r2, #3
   b724e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b7252:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b7254:	f002 0007 	and.w	r0, r2, #7
   b7258:	2201      	movs	r2, #1
   b725a:	4082      	lsls	r2, r0
      switch(color) {
   b725c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b725e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b7260:	d016      	beq.n	b7290 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b7262:	2d02      	cmp	r5, #2
   b7264:	d00b      	beq.n	b727e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b7266:	b9e5      	cbnz	r5, b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b7268:	43d2      	mvns	r2, r2
   b726a:	b2d2      	uxtb	r2, r2
   b726c:	440b      	add	r3, r1
   b726e:	4299      	cmp	r1, r3
   b7270:	d017      	beq.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7272:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7276:	4010      	ands	r0, r2
   b7278:	f801 0c01 	strb.w	r0, [r1, #-1]
   b727c:	e7f7      	b.n	b726e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b727e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b7280:	4299      	cmp	r1, r3
   b7282:	d00e      	beq.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7284:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7288:	4050      	eors	r0, r2
   b728a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b728e:	e7f7      	b.n	b7280 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b7290:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b7292:	4299      	cmp	r1, r3
   b7294:	d005      	beq.n	b72a2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b7296:	f811 0b01 	ldrb.w	r0, [r1], #1
   b729a:	4310      	orrs	r0, r2
   b729c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b72a0:	e7f7      	b.n	b7292 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b72a2:	bd70      	pop	{r4, r5, r6, pc}

000b72a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b72a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b72a6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b72a8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b72ac:	db76      	blt.n	b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b72ae:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b72b2:	42b1      	cmp	r1, r6
   b72b4:	da72      	bge.n	b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b72b6:	2a00      	cmp	r2, #0
      __h += __y;
   b72b8:	bfbe      	ittt	lt
   b72ba:	189b      	addlt	r3, r3, r2
   b72bc:	b21b      	sxthlt	r3, r3
      __y = 0;
   b72be:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b72c0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b72c4:	18d7      	adds	r7, r2, r3
   b72c6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b72c8:	bfc4      	itt	gt
   b72ca:	1aa3      	subgt	r3, r4, r2
   b72cc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b72ce:	2b00      	cmp	r3, #0
   b72d0:	dd64      	ble.n	b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b72d2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b72d6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b72d8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b72dc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b72e0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b72e2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b72e6:	d023      	beq.n	b7330 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b72e8:	f1c2 0208 	rsb	r2, r2, #8
   b72ec:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b72ee:	492d      	ldr	r1, [pc, #180]	; (b73a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b72f0:	4293      	cmp	r3, r2
   b72f2:	bf3c      	itt	cc
   b72f4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b72f8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b72fc:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b72fe:	bf3c      	itt	cc
   b7300:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b7304:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b7308:	2d01      	cmp	r5, #1
   b730a:	d007      	beq.n	b731c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b730c:	2d02      	cmp	r5, #2
   b730e:	d02e      	beq.n	b736e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b7310:	b94d      	cbnz	r5, b7326 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b7312:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7316:	ea2c 0101 	bic.w	r1, ip, r1
   b731a:	e003      	b.n	b7324 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b731c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7320:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b7324:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b7326:	4293      	cmp	r3, r2
   b7328:	d338      	bcc.n	b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b732a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b732e:	440c      	add	r4, r1
        h -= mod;
   b7330:	1a9a      	subs	r2, r3, r2
   b7332:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b7334:	2a07      	cmp	r2, #7
   b7336:	d90e      	bls.n	b7356 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b7338:	2d02      	cmp	r5, #2
   b733a:	d11d      	bne.n	b7378 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b733c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b733e:	7821      	ldrb	r1, [r4, #0]
   b7340:	43c9      	mvns	r1, r1
   b7342:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b7344:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b7346:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b734a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b734c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b734e:	440c      	add	r4, r1
            } while(h >= 8);
   b7350:	d8f5      	bhi.n	b733e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b7352:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b7356:	b30a      	cbz	r2, b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b7358:	4b13      	ldr	r3, [pc, #76]	; (b73a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b735a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b735c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b735e:	d01a      	beq.n	b7396 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b7360:	2d02      	cmp	r5, #2
   b7362:	d01c      	beq.n	b739e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b7364:	b9d5      	cbnz	r5, b739c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b7366:	7822      	ldrb	r2, [r4, #0]
   b7368:	ea22 0303 	bic.w	r3, r2, r3
   b736c:	e015      	b.n	b739a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b736e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b7372:	ea81 010c 	eor.w	r1, r1, ip
   b7376:	e7d5      	b.n	b7324 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b7378:	1e29      	subs	r1, r5, #0
   b737a:	bf18      	it	ne
   b737c:	2101      	movne	r1, #1
   b737e:	4249      	negs	r1, r1
   b7380:	b2c9      	uxtb	r1, r1
   b7382:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b7384:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b7386:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7388:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b738c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b738e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b7390:	4434      	add	r4, r6
            } while(h >= 8);
   b7392:	d8f7      	bhi.n	b7384 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b7394:	e7dd      	b.n	b7352 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b7396:	7822      	ldrb	r2, [r4, #0]
   b7398:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b739a:	7023      	strb	r3, [r4, #0]
}
   b739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b739e:	7822      	ldrb	r2, [r4, #0]
   b73a0:	4053      	eors	r3, r2
   b73a2:	e7fa      	b.n	b739a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b73a4:	000bc4a0 	.word	0x000bc4a0
   b73a8:	000bc4a8 	.word	0x000bc4a8

000b73ac <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b73ac:	b470      	push	{r4, r5, r6}
   b73ae:	4614      	mov	r4, r2
  switch(rotation) {
   b73b0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b73b2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b73b6:	2a02      	cmp	r2, #2
   b73b8:	d00d      	beq.n	b73d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b73ba:	2a03      	cmp	r2, #3
   b73bc:	d018      	beq.n	b73f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b73be:	2a01      	cmp	r2, #1
   b73c0:	d111      	bne.n	b73e6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b73c2:	8902      	ldrh	r2, [r0, #8]
   b73c4:	43e4      	mvns	r4, r4
   b73c6:	4414      	add	r4, r2
   b73c8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b73ca:	9603      	str	r6, [sp, #12]
   b73cc:	460a      	mov	r2, r1
   b73ce:	4621      	mov	r1, r4
}
   b73d0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b73d2:	f7ff bf67 	b.w	b72a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b73d6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b73d8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b73da:	43e4      	mvns	r4, r4
    x -= (w-1);
   b73dc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b73de:	4414      	add	r4, r2
    x -= (w-1);
   b73e0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b73e2:	b224      	sxth	r4, r4
    x -= (w-1);
   b73e4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b73e6:	9603      	str	r6, [sp, #12]
   b73e8:	4622      	mov	r2, r4
}
   b73ea:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b73ec:	f7ff bf16 	b.w	b721c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b73f0:	8945      	ldrh	r5, [r0, #10]
   b73f2:	4419      	add	r1, r3
   b73f4:	1a69      	subs	r1, r5, r1
   b73f6:	b209      	sxth	r1, r1
    break;
   b73f8:	e7e7      	b.n	b73ca <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b73fa <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b73fa:	b430      	push	{r4, r5}
   b73fc:	4614      	mov	r4, r2
  switch(rotation) {
   b73fe:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b7400:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b7404:	2a02      	cmp	r2, #2
   b7406:	d00d      	beq.n	b7424 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b7408:	2a03      	cmp	r2, #3
   b740a:	d018      	beq.n	b743e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b740c:	2a01      	cmp	r2, #1
   b740e:	d111      	bne.n	b7434 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b7410:	18e2      	adds	r2, r4, r3
   b7412:	8904      	ldrh	r4, [r0, #8]
   b7414:	1aa4      	subs	r4, r4, r2
   b7416:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b7418:	9502      	str	r5, [sp, #8]
   b741a:	460a      	mov	r2, r1
   b741c:	4621      	mov	r1, r4
}
   b741e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b7420:	f7ff befc 	b.w	b721c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b7424:	8902      	ldrh	r2, [r0, #8]
   b7426:	43c9      	mvns	r1, r1
   b7428:	4411      	add	r1, r2
    y -= (h-1);
   b742a:	18e2      	adds	r2, r4, r3
   b742c:	8944      	ldrh	r4, [r0, #10]
   b742e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b7430:	b209      	sxth	r1, r1
    y -= (h-1);
   b7432:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b7434:	9502      	str	r5, [sp, #8]
   b7436:	4622      	mov	r2, r4
}
   b7438:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b743a:	f7ff bf33 	b.w	b72a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b743e:	8942      	ldrh	r2, [r0, #10]
   b7440:	43c9      	mvns	r1, r1
   b7442:	4411      	add	r1, r2
   b7444:	b209      	sxth	r1, r1
    break;
   b7446:	e7e7      	b.n	b7418 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b7448 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b7448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b744c:	4604      	mov	r4, r0
  TRANSACTION_START
   b744e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7450:	2800      	cmp	r0, #0
   b7452:	d042      	beq.n	b74da <_ZN16Adafruit_SSD13067displayEv+0x92>
   b7454:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b7456:	f001 f881 	bl	b855c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b745a:	4947      	ldr	r1, [pc, #284]	; (b7578 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b745c:	2205      	movs	r2, #5
   b745e:	4620      	mov	r0, r4
   b7460:	f7ff fd27 	bl	b6eb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b7464:	8921      	ldrh	r1, [r4, #8]
   b7466:	3901      	subs	r1, #1
   b7468:	4620      	mov	r0, r4
   b746a:	b2c9      	uxtb	r1, r1
   b746c:	f7ff fcb2 	bl	b6dd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7470:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b7474:	1dde      	adds	r6, r3, #7
   b7476:	bf48      	it	mi
   b7478:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b747c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b7480:	8923      	ldrh	r3, [r4, #8]
   b7482:	10f6      	asrs	r6, r6, #3
   b7484:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b7488:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b748c:	2800      	cmp	r0, #0
   b748e:	d03a      	beq.n	b7506 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b7490:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b7494:	f001 f870 	bl	b8578 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b7498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b749a:	6803      	ldr	r3, [r0, #0]
   b749c:	2140      	movs	r1, #64	; 0x40
   b749e:	689b      	ldr	r3, [r3, #8]
   b74a0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b74a2:	2701      	movs	r7, #1
    while(count--) {
   b74a4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b74a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b74a8:	d024      	beq.n	b74f4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b74aa:	2f1f      	cmp	r7, #31
   b74ac:	d90c      	bls.n	b74c8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b74ae:	f001 f86a 	bl	b8586 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b74b2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b74b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b74b8:	f001 f85e 	bl	b8578 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b74bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b74be:	6803      	ldr	r3, [r0, #0]
   b74c0:	2140      	movs	r1, #64	; 0x40
   b74c2:	689b      	ldr	r3, [r3, #8]
   b74c4:	4798      	blx	r3
        bytesOut = 1;
   b74c6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b74c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b74ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b74ce:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b74d0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b74d2:	689b      	ldr	r3, [r3, #8]
   b74d4:	4798      	blx	r3
      bytesOut++;
   b74d6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b74d8:	e7e4      	b.n	b74a4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b74da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b74dc:	b118      	cbz	r0, b74e6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b74de:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b74e2:	f000 fbdf 	bl	b7ca4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b74e6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b74ea:	2100      	movs	r1, #0
   b74ec:	b280      	uxth	r0, r0
   b74ee:	f001 fc58 	bl	b8da2 <digitalWrite>
   b74f2:	e7b2      	b.n	b745a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b74f4:	f001 f847 	bl	b8586 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b74f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b74fa:	b378      	cbz	r0, b755c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b74fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b74fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7502:	f001 b82b 	b.w	b855c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b7506:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b750a:	2101      	movs	r1, #1
   b750c:	b280      	uxth	r0, r0
   b750e:	f001 fc48 	bl	b8da2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b7512:	42ae      	cmp	r6, r5
   b7514:	d0f0      	beq.n	b74f8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b7516:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b7518:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b751c:	b118      	cbz	r0, b7526 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b751e:	4649      	mov	r1, r9
   b7520:	f000 fc2e 	bl	b7d80 <_ZN8SPIClass8transferEh>
   b7524:	e7f5      	b.n	b7512 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b7526:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7528:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b752c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b7530:	ea09 0108 	and.w	r1, r9, r8
   b7534:	b280      	uxth	r0, r0
   b7536:	f001 fc34 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b753a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b753e:	2101      	movs	r1, #1
   b7540:	b280      	uxth	r0, r0
   b7542:	f001 fc2e 	bl	b8da2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b7546:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b754a:	2100      	movs	r1, #0
   b754c:	b280      	uxth	r0, r0
   b754e:	f001 fc28 	bl	b8da2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b7552:	3f01      	subs	r7, #1
   b7554:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b7558:	d1e8      	bne.n	b752c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b755a:	e7da      	b.n	b7512 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b755c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b7560:	2101      	movs	r1, #1
   b7562:	b280      	uxth	r0, r0
   b7564:	f001 fc1d 	bl	b8da2 <digitalWrite>
   b7568:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b756a:	b118      	cbz	r0, b7574 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b756c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b7570:	f000 bb7e 	b.w	b7c70 <_ZN8SPIClass14endTransactionEv>
}
   b7574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7578:	000bc4cc 	.word	0x000bc4cc

000b757c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b757c:	f000 bd84 	b.w	b8088 <delay>

000b7580 <_Z11BlynkMillisv>:
   b7580:	f000 b880 	b.w	b7684 <HAL_Timer_Get_Milli_Seconds>

000b7584 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b7584:	4770      	bx	lr

000b7586 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b7586:	4770      	bx	lr

000b7588 <BlynkNoOpCbk>:
{}
   b7588:	4770      	bx	lr
	...

000b758c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b758c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b758e:	bf5a      	itte	pl
   b7590:	4b02      	ldrpl	r3, [pc, #8]	; (b759c <GetReadHandler+0x10>)
   b7592:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b7596:	2000      	movmi	r0, #0
#endif
}
   b7598:	4770      	bx	lr
   b759a:	bf00      	nop
   b759c:	000bc4d4 	.word	0x000bc4d4

000b75a0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b75a0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b75a2:	bf5a      	itte	pl
   b75a4:	4b02      	ldrpl	r3, [pc, #8]	; (b75b0 <GetWriteHandler+0x10>)
   b75a6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b75aa:	2000      	movmi	r0, #0
#endif
}
   b75ac:	4770      	bx	lr
   b75ae:	bf00      	nop
   b75b0:	000bc6d4 	.word	0x000bc6d4

000b75b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b75b4:	b508      	push	{r3, lr}
   b75b6:	4b02      	ldr	r3, [pc, #8]	; (b75c0 <netdb_freeaddrinfo+0xc>)
   b75b8:	681b      	ldr	r3, [r3, #0]
   b75ba:	689b      	ldr	r3, [r3, #8]
   b75bc:	9301      	str	r3, [sp, #4]
   b75be:	bd08      	pop	{r3, pc}
   b75c0:	00030268 	.word	0x00030268

000b75c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b75c4:	b508      	push	{r3, lr}
   b75c6:	4b02      	ldr	r3, [pc, #8]	; (b75d0 <netdb_getaddrinfo+0xc>)
   b75c8:	681b      	ldr	r3, [r3, #0]
   b75ca:	68db      	ldr	r3, [r3, #12]
   b75cc:	9301      	str	r3, [sp, #4]
   b75ce:	bd08      	pop	{r3, pc}
   b75d0:	00030268 	.word	0x00030268

000b75d4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b75d4:	b508      	push	{r3, lr}
   b75d6:	4b02      	ldr	r3, [pc, #8]	; (b75e0 <hal_pin_validate_function+0xc>)
   b75d8:	681b      	ldr	r3, [r3, #0]
   b75da:	685b      	ldr	r3, [r3, #4]
   b75dc:	9301      	str	r3, [sp, #4]
   b75de:	bd08      	pop	{r3, pc}
   b75e0:	0003022c 	.word	0x0003022c

000b75e4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b75e4:	b508      	push	{r3, lr}
   b75e6:	4b02      	ldr	r3, [pc, #8]	; (b75f0 <hal_gpio_mode+0xc>)
   b75e8:	681b      	ldr	r3, [r3, #0]
   b75ea:	689b      	ldr	r3, [r3, #8]
   b75ec:	9301      	str	r3, [sp, #4]
   b75ee:	bd08      	pop	{r3, pc}
   b75f0:	0003022c 	.word	0x0003022c

000b75f4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b75f4:	b508      	push	{r3, lr}
   b75f6:	4b02      	ldr	r3, [pc, #8]	; (b7600 <hal_gpio_get_mode+0xc>)
   b75f8:	681b      	ldr	r3, [r3, #0]
   b75fa:	68db      	ldr	r3, [r3, #12]
   b75fc:	9301      	str	r3, [sp, #4]
   b75fe:	bd08      	pop	{r3, pc}
   b7600:	0003022c 	.word	0x0003022c

000b7604 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b7604:	b508      	push	{r3, lr}
   b7606:	4b02      	ldr	r3, [pc, #8]	; (b7610 <hal_gpio_write+0xc>)
   b7608:	681b      	ldr	r3, [r3, #0]
   b760a:	691b      	ldr	r3, [r3, #16]
   b760c:	9301      	str	r3, [sp, #4]
   b760e:	bd08      	pop	{r3, pc}
   b7610:	0003022c 	.word	0x0003022c

000b7614 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b7614:	b508      	push	{r3, lr}
   b7616:	4b02      	ldr	r3, [pc, #8]	; (b7620 <hal_gpio_read+0xc>)
   b7618:	681b      	ldr	r3, [r3, #0]
   b761a:	695b      	ldr	r3, [r3, #20]
   b761c:	9301      	str	r3, [sp, #4]
   b761e:	bd08      	pop	{r3, pc}
   b7620:	0003022c 	.word	0x0003022c

000b7624 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b7624:	b508      	push	{r3, lr}
   b7626:	4b02      	ldr	r3, [pc, #8]	; (b7630 <HAL_DAC_Write+0xc>)
   b7628:	681b      	ldr	r3, [r3, #0]
   b762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b762c:	9301      	str	r3, [sp, #4]
   b762e:	bd08      	pop	{r3, pc}
   b7630:	0003022c 	.word	0x0003022c

000b7634 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7634:	b508      	push	{r3, lr}
   b7636:	4b02      	ldr	r3, [pc, #8]	; (b7640 <hal_adc_read+0xc>)
   b7638:	681b      	ldr	r3, [r3, #0]
   b763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b763c:	9301      	str	r3, [sp, #4]
   b763e:	bd08      	pop	{r3, pc}
   b7640:	0003022c 	.word	0x0003022c

000b7644 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b7644:	b508      	push	{r3, lr}
   b7646:	4b02      	ldr	r3, [pc, #8]	; (b7650 <hal_pwm_write_ext+0xc>)
   b7648:	681b      	ldr	r3, [r3, #0]
   b764a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b764c:	9301      	str	r3, [sp, #4]
   b764e:	bd08      	pop	{r3, pc}
   b7650:	0003022c 	.word	0x0003022c

000b7654 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b7654:	b508      	push	{r3, lr}
   b7656:	4b02      	ldr	r3, [pc, #8]	; (b7660 <if_index_to_name+0xc>)
   b7658:	681b      	ldr	r3, [r3, #0]
   b765a:	695b      	ldr	r3, [r3, #20]
   b765c:	9301      	str	r3, [sp, #4]
   b765e:	bd08      	pop	{r3, pc}
   b7660:	0003026c 	.word	0x0003026c

000b7664 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7664:	b508      	push	{r3, lr}
   b7666:	4b02      	ldr	r3, [pc, #8]	; (b7670 <HAL_RNG_GetRandomNumber+0xc>)
   b7668:	681b      	ldr	r3, [r3, #0]
   b766a:	685b      	ldr	r3, [r3, #4]
   b766c:	9301      	str	r3, [sp, #4]
   b766e:	bd08      	pop	{r3, pc}
   b7670:	00030218 	.word	0x00030218

000b7674 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7674:	b508      	push	{r3, lr}
   b7676:	4b02      	ldr	r3, [pc, #8]	; (b7680 <HAL_Delay_Microseconds+0xc>)
   b7678:	681b      	ldr	r3, [r3, #0]
   b767a:	68db      	ldr	r3, [r3, #12]
   b767c:	9301      	str	r3, [sp, #4]
   b767e:	bd08      	pop	{r3, pc}
   b7680:	00030218 	.word	0x00030218

000b7684 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7684:	b508      	push	{r3, lr}
   b7686:	4b02      	ldr	r3, [pc, #8]	; (b7690 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7688:	681b      	ldr	r3, [r3, #0]
   b768a:	695b      	ldr	r3, [r3, #20]
   b768c:	9301      	str	r3, [sp, #4]
   b768e:	bd08      	pop	{r3, pc}
   b7690:	00030218 	.word	0x00030218

000b7694 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b7694:	b508      	push	{r3, lr}
   b7696:	4b02      	ldr	r3, [pc, #8]	; (b76a0 <os_mutex_create+0xc>)
   b7698:	681b      	ldr	r3, [r3, #0]
   b769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b769c:	9301      	str	r3, [sp, #4]
   b769e:	bd08      	pop	{r3, pc}
   b76a0:	00030248 	.word	0x00030248

000b76a4 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b76a4:	b508      	push	{r3, lr}
   b76a6:	4b02      	ldr	r3, [pc, #8]	; (b76b0 <os_mutex_destroy+0xc>)
   b76a8:	681b      	ldr	r3, [r3, #0]
   b76aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b76ac:	9301      	str	r3, [sp, #4]
   b76ae:	bd08      	pop	{r3, pc}
   b76b0:	00030248 	.word	0x00030248

000b76b4 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b76b4:	b508      	push	{r3, lr}
   b76b6:	4b02      	ldr	r3, [pc, #8]	; (b76c0 <os_mutex_lock+0xc>)
   b76b8:	681b      	ldr	r3, [r3, #0]
   b76ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b76bc:	9301      	str	r3, [sp, #4]
   b76be:	bd08      	pop	{r3, pc}
   b76c0:	00030248 	.word	0x00030248

000b76c4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b76c4:	b508      	push	{r3, lr}
   b76c6:	4b02      	ldr	r3, [pc, #8]	; (b76d0 <os_mutex_unlock+0xc>)
   b76c8:	681b      	ldr	r3, [r3, #0]
   b76ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b76cc:	9301      	str	r3, [sp, #4]
   b76ce:	bd08      	pop	{r3, pc}
   b76d0:	00030248 	.word	0x00030248

000b76d4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b76d4:	b508      	push	{r3, lr}
   b76d6:	4b02      	ldr	r3, [pc, #8]	; (b76e0 <os_mutex_recursive_create+0xc>)
   b76d8:	681b      	ldr	r3, [r3, #0]
   b76da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b76dc:	9301      	str	r3, [sp, #4]
   b76de:	bd08      	pop	{r3, pc}
   b76e0:	00030248 	.word	0x00030248

000b76e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b76e4:	b508      	push	{r3, lr}
   b76e6:	4b02      	ldr	r3, [pc, #8]	; (b76f0 <inet_inet_ntop+0xc>)
   b76e8:	681b      	ldr	r3, [r3, #0]
   b76ea:	695b      	ldr	r3, [r3, #20]
   b76ec:	9301      	str	r3, [sp, #4]
   b76ee:	bd08      	pop	{r3, pc}
   b76f0:	00030264 	.word	0x00030264

000b76f4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b76f4:	b508      	push	{r3, lr}
   b76f6:	4b02      	ldr	r3, [pc, #8]	; (b7700 <inet_htonl+0xc>)
   b76f8:	681b      	ldr	r3, [r3, #0]
   b76fa:	6a1b      	ldr	r3, [r3, #32]
   b76fc:	9301      	str	r3, [sp, #4]
   b76fe:	bd08      	pop	{r3, pc}
   b7700:	00030264 	.word	0x00030264

000b7704 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b7704:	b508      	push	{r3, lr}
   b7706:	4b02      	ldr	r3, [pc, #8]	; (b7710 <inet_ntohs+0xc>)
   b7708:	681b      	ldr	r3, [r3, #0]
   b770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b770c:	9301      	str	r3, [sp, #4]
   b770e:	bd08      	pop	{r3, pc}
   b7710:	00030264 	.word	0x00030264

000b7714 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b7714:	b508      	push	{r3, lr}
   b7716:	4b02      	ldr	r3, [pc, #8]	; (b7720 <inet_htons+0xc>)
   b7718:	681b      	ldr	r3, [r3, #0]
   b771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b771c:	9301      	str	r3, [sp, #4]
   b771e:	bd08      	pop	{r3, pc}
   b7720:	00030264 	.word	0x00030264

000b7724 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7724:	b508      	push	{r3, lr}
   b7726:	4b02      	ldr	r3, [pc, #8]	; (b7730 <hal_usart_write+0xc>)
   b7728:	681b      	ldr	r3, [r3, #0]
   b772a:	68db      	ldr	r3, [r3, #12]
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	bd08      	pop	{r3, pc}
   b7730:	0003023c 	.word	0x0003023c

000b7734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7734:	b508      	push	{r3, lr}
   b7736:	4b02      	ldr	r3, [pc, #8]	; (b7740 <hal_usart_available+0xc>)
   b7738:	681b      	ldr	r3, [r3, #0]
   b773a:	691b      	ldr	r3, [r3, #16]
   b773c:	9301      	str	r3, [sp, #4]
   b773e:	bd08      	pop	{r3, pc}
   b7740:	0003023c 	.word	0x0003023c

000b7744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7744:	b508      	push	{r3, lr}
   b7746:	4b02      	ldr	r3, [pc, #8]	; (b7750 <hal_usart_read+0xc>)
   b7748:	681b      	ldr	r3, [r3, #0]
   b774a:	695b      	ldr	r3, [r3, #20]
   b774c:	9301      	str	r3, [sp, #4]
   b774e:	bd08      	pop	{r3, pc}
   b7750:	0003023c 	.word	0x0003023c

000b7754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7754:	b508      	push	{r3, lr}
   b7756:	4b02      	ldr	r3, [pc, #8]	; (b7760 <hal_usart_peek+0xc>)
   b7758:	681b      	ldr	r3, [r3, #0]
   b775a:	699b      	ldr	r3, [r3, #24]
   b775c:	9301      	str	r3, [sp, #4]
   b775e:	bd08      	pop	{r3, pc}
   b7760:	0003023c 	.word	0x0003023c

000b7764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7764:	b508      	push	{r3, lr}
   b7766:	4b02      	ldr	r3, [pc, #8]	; (b7770 <hal_usart_flush+0xc>)
   b7768:	681b      	ldr	r3, [r3, #0]
   b776a:	69db      	ldr	r3, [r3, #28]
   b776c:	9301      	str	r3, [sp, #4]
   b776e:	bd08      	pop	{r3, pc}
   b7770:	0003023c 	.word	0x0003023c

000b7774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7774:	b508      	push	{r3, lr}
   b7776:	4b02      	ldr	r3, [pc, #8]	; (b7780 <hal_usart_is_enabled+0xc>)
   b7778:	681b      	ldr	r3, [r3, #0]
   b777a:	6a1b      	ldr	r3, [r3, #32]
   b777c:	9301      	str	r3, [sp, #4]
   b777e:	bd08      	pop	{r3, pc}
   b7780:	0003023c 	.word	0x0003023c

000b7784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7784:	b508      	push	{r3, lr}
   b7786:	4b02      	ldr	r3, [pc, #8]	; (b7790 <hal_usart_available_data_for_write+0xc>)
   b7788:	681b      	ldr	r3, [r3, #0]
   b778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b778c:	9301      	str	r3, [sp, #4]
   b778e:	bd08      	pop	{r3, pc}
   b7790:	0003023c 	.word	0x0003023c

000b7794 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7794:	b508      	push	{r3, lr}
   b7796:	4b02      	ldr	r3, [pc, #8]	; (b77a0 <hal_usart_init_ex+0xc>)
   b7798:	681b      	ldr	r3, [r3, #0]
   b779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b779c:	9301      	str	r3, [sp, #4]
   b779e:	bd08      	pop	{r3, pc}
   b77a0:	0003023c 	.word	0x0003023c

000b77a4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b77a4:	b508      	push	{r3, lr}
   b77a6:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <hal_i2c_set_speed+0xc>)
   b77a8:	681b      	ldr	r3, [r3, #0]
   b77aa:	681b      	ldr	r3, [r3, #0]
   b77ac:	9301      	str	r3, [sp, #4]
   b77ae:	bd08      	pop	{r3, pc}
   b77b0:	00030228 	.word	0x00030228

000b77b4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b77b4:	b508      	push	{r3, lr}
   b77b6:	4b02      	ldr	r3, [pc, #8]	; (b77c0 <hal_i2c_begin+0xc>)
   b77b8:	681b      	ldr	r3, [r3, #0]
   b77ba:	68db      	ldr	r3, [r3, #12]
   b77bc:	9301      	str	r3, [sp, #4]
   b77be:	bd08      	pop	{r3, pc}
   b77c0:	00030228 	.word	0x00030228

000b77c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b77c4:	b508      	push	{r3, lr}
   b77c6:	4b02      	ldr	r3, [pc, #8]	; (b77d0 <hal_i2c_begin_transmission+0xc>)
   b77c8:	681b      	ldr	r3, [r3, #0]
   b77ca:	699b      	ldr	r3, [r3, #24]
   b77cc:	9301      	str	r3, [sp, #4]
   b77ce:	bd08      	pop	{r3, pc}
   b77d0:	00030228 	.word	0x00030228

000b77d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b77d4:	b508      	push	{r3, lr}
   b77d6:	4b02      	ldr	r3, [pc, #8]	; (b77e0 <hal_i2c_end_transmission+0xc>)
   b77d8:	681b      	ldr	r3, [r3, #0]
   b77da:	69db      	ldr	r3, [r3, #28]
   b77dc:	9301      	str	r3, [sp, #4]
   b77de:	bd08      	pop	{r3, pc}
   b77e0:	00030228 	.word	0x00030228

000b77e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b77e4:	b508      	push	{r3, lr}
   b77e6:	4b02      	ldr	r3, [pc, #8]	; (b77f0 <hal_i2c_write+0xc>)
   b77e8:	681b      	ldr	r3, [r3, #0]
   b77ea:	6a1b      	ldr	r3, [r3, #32]
   b77ec:	9301      	str	r3, [sp, #4]
   b77ee:	bd08      	pop	{r3, pc}
   b77f0:	00030228 	.word	0x00030228

000b77f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b77f4:	b508      	push	{r3, lr}
   b77f6:	4b02      	ldr	r3, [pc, #8]	; (b7800 <hal_i2c_available+0xc>)
   b77f8:	681b      	ldr	r3, [r3, #0]
   b77fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b77fc:	9301      	str	r3, [sp, #4]
   b77fe:	bd08      	pop	{r3, pc}
   b7800:	00030228 	.word	0x00030228

000b7804 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7804:	b508      	push	{r3, lr}
   b7806:	4b02      	ldr	r3, [pc, #8]	; (b7810 <hal_i2c_read+0xc>)
   b7808:	681b      	ldr	r3, [r3, #0]
   b780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b780c:	9301      	str	r3, [sp, #4]
   b780e:	bd08      	pop	{r3, pc}
   b7810:	00030228 	.word	0x00030228

000b7814 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7814:	b508      	push	{r3, lr}
   b7816:	4b02      	ldr	r3, [pc, #8]	; (b7820 <hal_i2c_peek+0xc>)
   b7818:	681b      	ldr	r3, [r3, #0]
   b781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b781c:	9301      	str	r3, [sp, #4]
   b781e:	bd08      	pop	{r3, pc}
   b7820:	00030228 	.word	0x00030228

000b7824 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7824:	b508      	push	{r3, lr}
   b7826:	4b02      	ldr	r3, [pc, #8]	; (b7830 <hal_i2c_flush+0xc>)
   b7828:	681b      	ldr	r3, [r3, #0]
   b782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b782c:	9301      	str	r3, [sp, #4]
   b782e:	bd08      	pop	{r3, pc}
   b7830:	00030228 	.word	0x00030228

000b7834 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7834:	b508      	push	{r3, lr}
   b7836:	4b02      	ldr	r3, [pc, #8]	; (b7840 <hal_i2c_is_enabled+0xc>)
   b7838:	681b      	ldr	r3, [r3, #0]
   b783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b783c:	9301      	str	r3, [sp, #4]
   b783e:	bd08      	pop	{r3, pc}
   b7840:	00030228 	.word	0x00030228

000b7844 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7844:	b508      	push	{r3, lr}
   b7846:	4b02      	ldr	r3, [pc, #8]	; (b7850 <hal_i2c_init+0xc>)
   b7848:	681b      	ldr	r3, [r3, #0]
   b784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b784c:	9301      	str	r3, [sp, #4]
   b784e:	bd08      	pop	{r3, pc}
   b7850:	00030228 	.word	0x00030228

000b7854 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b7854:	b508      	push	{r3, lr}
   b7856:	4b02      	ldr	r3, [pc, #8]	; (b7860 <sock_setsockopt+0xc>)
   b7858:	681b      	ldr	r3, [r3, #0]
   b785a:	699b      	ldr	r3, [r3, #24]
   b785c:	9301      	str	r3, [sp, #4]
   b785e:	bd08      	pop	{r3, pc}
   b7860:	00030238 	.word	0x00030238

000b7864 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b7864:	b508      	push	{r3, lr}
   b7866:	4b02      	ldr	r3, [pc, #8]	; (b7870 <sock_close+0xc>)
   b7868:	681b      	ldr	r3, [r3, #0]
   b786a:	69db      	ldr	r3, [r3, #28]
   b786c:	9301      	str	r3, [sp, #4]
   b786e:	bd08      	pop	{r3, pc}
   b7870:	00030238 	.word	0x00030238

000b7874 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b7874:	b508      	push	{r3, lr}
   b7876:	4b02      	ldr	r3, [pc, #8]	; (b7880 <sock_connect+0xc>)
   b7878:	681b      	ldr	r3, [r3, #0]
   b787a:	6a1b      	ldr	r3, [r3, #32]
   b787c:	9301      	str	r3, [sp, #4]
   b787e:	bd08      	pop	{r3, pc}
   b7880:	00030238 	.word	0x00030238

000b7884 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b7884:	b508      	push	{r3, lr}
   b7886:	4b02      	ldr	r3, [pc, #8]	; (b7890 <sock_recv+0xc>)
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b788c:	9301      	str	r3, [sp, #4]
   b788e:	bd08      	pop	{r3, pc}
   b7890:	00030238 	.word	0x00030238

000b7894 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b7894:	b508      	push	{r3, lr}
   b7896:	4b02      	ldr	r3, [pc, #8]	; (b78a0 <sock_send+0xc>)
   b7898:	681b      	ldr	r3, [r3, #0]
   b789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b789c:	9301      	str	r3, [sp, #4]
   b789e:	bd08      	pop	{r3, pc}
   b78a0:	00030238 	.word	0x00030238

000b78a4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b78a4:	b508      	push	{r3, lr}
   b78a6:	4b02      	ldr	r3, [pc, #8]	; (b78b0 <sock_socket+0xc>)
   b78a8:	681b      	ldr	r3, [r3, #0]
   b78aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b78ac:	9301      	str	r3, [sp, #4]
   b78ae:	bd08      	pop	{r3, pc}
   b78b0:	00030238 	.word	0x00030238

000b78b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b78b4:	b508      	push	{r3, lr}
   b78b6:	4b02      	ldr	r3, [pc, #8]	; (b78c0 <hal_spi_begin+0xc>)
   b78b8:	681b      	ldr	r3, [r3, #0]
   b78ba:	681b      	ldr	r3, [r3, #0]
   b78bc:	9301      	str	r3, [sp, #4]
   b78be:	bd08      	pop	{r3, pc}
   b78c0:	00030230 	.word	0x00030230

000b78c4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b78c4:	b508      	push	{r3, lr}
   b78c6:	4b02      	ldr	r3, [pc, #8]	; (b78d0 <hal_spi_transfer+0xc>)
   b78c8:	681b      	ldr	r3, [r3, #0]
   b78ca:	695b      	ldr	r3, [r3, #20]
   b78cc:	9301      	str	r3, [sp, #4]
   b78ce:	bd08      	pop	{r3, pc}
   b78d0:	00030230 	.word	0x00030230

000b78d4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b78d4:	b508      	push	{r3, lr}
   b78d6:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <hal_spi_init+0xc>)
   b78d8:	681b      	ldr	r3, [r3, #0]
   b78da:	69db      	ldr	r3, [r3, #28]
   b78dc:	9301      	str	r3, [sp, #4]
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	00030230 	.word	0x00030230

000b78e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b78e4:	b508      	push	{r3, lr}
   b78e6:	4b02      	ldr	r3, [pc, #8]	; (b78f0 <hal_spi_is_enabled+0xc>)
   b78e8:	681b      	ldr	r3, [r3, #0]
   b78ea:	6a1b      	ldr	r3, [r3, #32]
   b78ec:	9301      	str	r3, [sp, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	00030230 	.word	0x00030230

000b78f4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b78f4:	b508      	push	{r3, lr}
   b78f6:	4b02      	ldr	r3, [pc, #8]	; (b7900 <hal_spi_info+0xc>)
   b78f8:	681b      	ldr	r3, [r3, #0]
   b78fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78fc:	9301      	str	r3, [sp, #4]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	00030230 	.word	0x00030230

000b7904 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7904:	b508      	push	{r3, lr}
   b7906:	4b02      	ldr	r3, [pc, #8]	; (b7910 <hal_spi_set_settings+0xc>)
   b7908:	681b      	ldr	r3, [r3, #0]
   b790a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b790c:	9301      	str	r3, [sp, #4]
   b790e:	bd08      	pop	{r3, pc}
   b7910:	00030230 	.word	0x00030230

000b7914 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7914:	b508      	push	{r3, lr}
   b7916:	4b02      	ldr	r3, [pc, #8]	; (b7920 <hal_spi_acquire+0xc>)
   b7918:	681b      	ldr	r3, [r3, #0]
   b791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b791c:	9301      	str	r3, [sp, #4]
   b791e:	bd08      	pop	{r3, pc}
   b7920:	00030230 	.word	0x00030230

000b7924 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7924:	b508      	push	{r3, lr}
   b7926:	4b02      	ldr	r3, [pc, #8]	; (b7930 <hal_spi_release+0xc>)
   b7928:	681b      	ldr	r3, [r3, #0]
   b792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b792c:	9301      	str	r3, [sp, #4]
   b792e:	bd08      	pop	{r3, pc}
   b7930:	00030230 	.word	0x00030230

000b7934 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7934:	b508      	push	{r3, lr}
   b7936:	4b02      	ldr	r3, [pc, #8]	; (b7940 <HAL_USB_USART_Init+0xc>)
   b7938:	681b      	ldr	r3, [r3, #0]
   b793a:	681b      	ldr	r3, [r3, #0]
   b793c:	9301      	str	r3, [sp, #4]
   b793e:	bd08      	pop	{r3, pc}
   b7940:	0003024c 	.word	0x0003024c

000b7944 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7944:	b508      	push	{r3, lr}
   b7946:	4b02      	ldr	r3, [pc, #8]	; (b7950 <HAL_USB_USART_Begin+0xc>)
   b7948:	681b      	ldr	r3, [r3, #0]
   b794a:	685b      	ldr	r3, [r3, #4]
   b794c:	9301      	str	r3, [sp, #4]
   b794e:	bd08      	pop	{r3, pc}
   b7950:	0003024c 	.word	0x0003024c

000b7954 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7954:	b508      	push	{r3, lr}
   b7956:	4b02      	ldr	r3, [pc, #8]	; (b7960 <HAL_USB_USART_Available_Data+0xc>)
   b7958:	681b      	ldr	r3, [r3, #0]
   b795a:	691b      	ldr	r3, [r3, #16]
   b795c:	9301      	str	r3, [sp, #4]
   b795e:	bd08      	pop	{r3, pc}
   b7960:	0003024c 	.word	0x0003024c

000b7964 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7964:	b508      	push	{r3, lr}
   b7966:	4b02      	ldr	r3, [pc, #8]	; (b7970 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7968:	681b      	ldr	r3, [r3, #0]
   b796a:	695b      	ldr	r3, [r3, #20]
   b796c:	9301      	str	r3, [sp, #4]
   b796e:	bd08      	pop	{r3, pc}
   b7970:	0003024c 	.word	0x0003024c

000b7974 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7974:	b508      	push	{r3, lr}
   b7976:	4b02      	ldr	r3, [pc, #8]	; (b7980 <HAL_USB_USART_Receive_Data+0xc>)
   b7978:	681b      	ldr	r3, [r3, #0]
   b797a:	699b      	ldr	r3, [r3, #24]
   b797c:	9301      	str	r3, [sp, #4]
   b797e:	bd08      	pop	{r3, pc}
   b7980:	0003024c 	.word	0x0003024c

000b7984 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7984:	b508      	push	{r3, lr}
   b7986:	4b02      	ldr	r3, [pc, #8]	; (b7990 <HAL_USB_USART_Send_Data+0xc>)
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	69db      	ldr	r3, [r3, #28]
   b798c:	9301      	str	r3, [sp, #4]
   b798e:	bd08      	pop	{r3, pc}
   b7990:	0003024c 	.word	0x0003024c

000b7994 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7994:	b508      	push	{r3, lr}
   b7996:	4b02      	ldr	r3, [pc, #8]	; (b79a0 <HAL_USB_USART_Flush_Data+0xc>)
   b7998:	681b      	ldr	r3, [r3, #0]
   b799a:	6a1b      	ldr	r3, [r3, #32]
   b799c:	9301      	str	r3, [sp, #4]
   b799e:	bd08      	pop	{r3, pc}
   b79a0:	0003024c 	.word	0x0003024c

000b79a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b79a4:	b508      	push	{r3, lr}
   b79a6:	4b02      	ldr	r3, [pc, #8]	; (b79b0 <panic_+0xc>)
   b79a8:	681b      	ldr	r3, [r3, #0]
   b79aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b79ac:	9301      	str	r3, [sp, #4]
   b79ae:	bd08      	pop	{r3, pc}
   b79b0:	00030260 	.word	0x00030260

000b79b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <log_message+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	00030260 	.word	0x00030260

000b79c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <set_system_mode+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	685b      	ldr	r3, [r3, #4]
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	00030220 	.word	0x00030220

000b79d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <system_delay_ms+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	695b      	ldr	r3, [r3, #20]
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	00030220 	.word	0x00030220

000b79e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <system_thread_set_state+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	00030220 	.word	0x00030220

000b79f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b03      	ldr	r3, [pc, #12]	; (b7a04 <system_ctrl_set_app_request_handler+0x10>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b79fe:	9301      	str	r3, [sp, #4]
   b7a00:	bd08      	pop	{r3, pc}
   b7a02:	0000      	.short	0x0000
   b7a04:	00030220 	.word	0x00030220

000b7a08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7a08:	b508      	push	{r3, lr}
   b7a0a:	4b03      	ldr	r3, [pc, #12]	; (b7a18 <system_ctrl_set_result+0x10>)
   b7a0c:	681b      	ldr	r3, [r3, #0]
   b7a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7a12:	9301      	str	r3, [sp, #4]
   b7a14:	bd08      	pop	{r3, pc}
   b7a16:	0000      	.short	0x0000
   b7a18:	00030220 	.word	0x00030220

000b7a1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a1c:	b508      	push	{r3, lr}
   b7a1e:	4b02      	ldr	r3, [pc, #8]	; (b7a28 <network_connect+0xc>)
   b7a20:	681b      	ldr	r3, [r3, #0]
   b7a22:	685b      	ldr	r3, [r3, #4]
   b7a24:	9301      	str	r3, [sp, #4]
   b7a26:	bd08      	pop	{r3, pc}
   b7a28:	00030240 	.word	0x00030240

000b7a2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7a2c:	b508      	push	{r3, lr}
   b7a2e:	4b02      	ldr	r3, [pc, #8]	; (b7a38 <network_connecting+0xc>)
   b7a30:	681b      	ldr	r3, [r3, #0]
   b7a32:	689b      	ldr	r3, [r3, #8]
   b7a34:	9301      	str	r3, [sp, #4]
   b7a36:	bd08      	pop	{r3, pc}
   b7a38:	00030240 	.word	0x00030240

000b7a3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7a3c:	b508      	push	{r3, lr}
   b7a3e:	4b02      	ldr	r3, [pc, #8]	; (b7a48 <network_disconnect+0xc>)
   b7a40:	681b      	ldr	r3, [r3, #0]
   b7a42:	68db      	ldr	r3, [r3, #12]
   b7a44:	9301      	str	r3, [sp, #4]
   b7a46:	bd08      	pop	{r3, pc}
   b7a48:	00030240 	.word	0x00030240

000b7a4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <network_ready+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	691b      	ldr	r3, [r3, #16]
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	00030240 	.word	0x00030240

000b7a5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <network_on+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	695b      	ldr	r3, [r3, #20]
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	00030240 	.word	0x00030240

000b7a6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <network_off+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	699b      	ldr	r3, [r3, #24]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	00030240 	.word	0x00030240

000b7a7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <network_listen+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	69db      	ldr	r3, [r3, #28]
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	00030240 	.word	0x00030240

000b7a8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <network_listening+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	6a1b      	ldr	r3, [r3, #32]
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	00030240 	.word	0x00030240

000b7a9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <network_set_listen_timeout+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	00030240 	.word	0x00030240

000b7aac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <network_get_listen_timeout+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	00030240 	.word	0x00030240

000b7abc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <network_is_on+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	00030240 	.word	0x00030240

000b7acc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <network_is_off+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	00030240 	.word	0x00030240

000b7adc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <spark_process+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	689b      	ldr	r3, [r3, #8]
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	00030244 	.word	0x00030244

000b7aec <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <spark_deviceID+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	69db      	ldr	r3, [r3, #28]
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	00030244 	.word	0x00030244

000b7afc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030244 	.word	0x00030244

000b7b0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <malloc+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	681b      	ldr	r3, [r3, #0]
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	0003021c 	.word	0x0003021c

000b7b1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <free+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	685b      	ldr	r3, [r3, #4]
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	0003021c 	.word	0x0003021c

000b7b2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <realloc+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	689b      	ldr	r3, [r3, #8]
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	0003021c 	.word	0x0003021c

000b7b3c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <snprintf+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	69db      	ldr	r3, [r3, #28]
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	0003021c 	.word	0x0003021c

000b7b4c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <vsnprintf+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	0003021c 	.word	0x0003021c

000b7b5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <abort+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	0003021c 	.word	0x0003021c

000b7b6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <_malloc_r+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	0003021c 	.word	0x0003021c

000b7b7c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <__errno+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	0003021c 	.word	0x0003021c

000b7b8c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <__assert_func+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	0003021c 	.word	0x0003021c

000b7b9c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <newlib_impure_ptr_callback+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	0003021c 	.word	0x0003021c

000b7bac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7bac:	2200      	movs	r2, #0
   b7bae:	6840      	ldr	r0, [r0, #4]
   b7bb0:	4611      	mov	r1, r2
   b7bb2:	f7ff bf6b 	b.w	b7a8c <network_listening>

000b7bb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7bb6:	2200      	movs	r2, #0
   b7bb8:	6840      	ldr	r0, [r0, #4]
   b7bba:	4611      	mov	r1, r2
   b7bbc:	f7ff bf76 	b.w	b7aac <network_get_listen_timeout>

000b7bc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7bc0:	6840      	ldr	r0, [r0, #4]
   b7bc2:	2200      	movs	r2, #0
   b7bc4:	f7ff bf6a 	b.w	b7a9c <network_set_listen_timeout>

000b7bc8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7bc8:	6840      	ldr	r0, [r0, #4]
   b7bca:	2200      	movs	r2, #0
   b7bcc:	f081 0101 	eor.w	r1, r1, #1
   b7bd0:	f7ff bf54 	b.w	b7a7c <network_listen>

000b7bd4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7bd4:	2300      	movs	r3, #0
   b7bd6:	6840      	ldr	r0, [r0, #4]
   b7bd8:	461a      	mov	r2, r3
   b7bda:	4619      	mov	r1, r3
   b7bdc:	f7ff bf46 	b.w	b7a6c <network_off>

000b7be0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7be0:	2300      	movs	r3, #0
   b7be2:	6840      	ldr	r0, [r0, #4]
   b7be4:	461a      	mov	r2, r3
   b7be6:	4619      	mov	r1, r3
   b7be8:	f7ff bf38 	b.w	b7a5c <network_on>

000b7bec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7bec:	2200      	movs	r2, #0
   b7bee:	6840      	ldr	r0, [r0, #4]
   b7bf0:	4611      	mov	r1, r2
   b7bf2:	f7ff bf2b 	b.w	b7a4c <network_ready>

000b7bf6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7bf6:	2200      	movs	r2, #0
   b7bf8:	6840      	ldr	r0, [r0, #4]
   b7bfa:	4611      	mov	r1, r2
   b7bfc:	f7ff bf16 	b.w	b7a2c <network_connecting>

000b7c00 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c00:	6840      	ldr	r0, [r0, #4]
   b7c02:	2200      	movs	r2, #0
   b7c04:	2102      	movs	r1, #2
   b7c06:	f7ff bf19 	b.w	b7a3c <network_disconnect>

000b7c0a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c0a:	2300      	movs	r3, #0
   b7c0c:	6840      	ldr	r0, [r0, #4]
   b7c0e:	461a      	mov	r2, r3
   b7c10:	f7ff bf04 	b.w	b7a1c <network_connect>

000b7c14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7c14:	4b02      	ldr	r3, [pc, #8]	; (b7c20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7c16:	2203      	movs	r2, #3
   b7c18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7c1a:	4a02      	ldr	r2, [pc, #8]	; (b7c24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7c1c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7c1e:	4770      	bx	lr
   b7c20:	2003e6c4 	.word	0x2003e6c4
   b7c24:	000bc8dc 	.word	0x000bc8dc

000b7c28 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7c28:	2100      	movs	r1, #0
   b7c2a:	f7ff be7b 	b.w	b7924 <hal_spi_release>

000b7c2e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7c2e:	2100      	movs	r1, #0
   b7c30:	f7ff be70 	b.w	b7914 <hal_spi_acquire>

000b7c34 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7c34:	b510      	push	{r4, lr}
   b7c36:	4604      	mov	r4, r0
   b7c38:	4608      	mov	r0, r1
{
    _spi = spi;
   b7c3a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7c3c:	f7ff fe4a 	bl	b78d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7c40:	2300      	movs	r3, #0
   b7c42:	6063      	str	r3, [r4, #4]
}
   b7c44:	4620      	mov	r0, r4
   b7c46:	bd10      	pop	{r4, pc}

000b7c48 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7c48:	b513      	push	{r0, r1, r4, lr}
   b7c4a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7c4c:	7800      	ldrb	r0, [r0, #0]
   b7c4e:	f7ff ffee 	bl	b7c2e <_ZN8SPIClass4lockEv.isra.0>
   b7c52:	b958      	cbnz	r0, b7c6c <_ZN8SPIClass5beginEv+0x24>
   b7c54:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7c56:	9001      	str	r0, [sp, #4]
   b7c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7c5c:	f7ff fe2a 	bl	b78b4 <hal_spi_begin>
        unlock();
   b7c60:	9801      	ldr	r0, [sp, #4]
    }
}
   b7c62:	b002      	add	sp, #8
   b7c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7c68:	f7ff bfde 	b.w	b7c28 <_ZN8SPIClass6unlockEv.isra.0>
   b7c6c:	b002      	add	sp, #8
   b7c6e:	bd10      	pop	{r4, pc}

000b7c70 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7c70:	7800      	ldrb	r0, [r0, #0]
   b7c72:	f7ff bfd9 	b.w	b7c28 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7c78 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7c78:	0840      	lsrs	r0, r0, #1
{
   b7c7a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7c7c:	6018      	str	r0, [r3, #0]
   b7c7e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7c80:	6818      	ldr	r0, [r3, #0]
   b7c82:	4288      	cmp	r0, r1
   b7c84:	b2e5      	uxtb	r5, r4
   b7c86:	d906      	bls.n	b7c96 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7c88:	3401      	adds	r4, #1
   b7c8a:	2c08      	cmp	r4, #8
   b7c8c:	d002      	beq.n	b7c94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7c8e:	0840      	lsrs	r0, r0, #1
   b7c90:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7c92:	e7f5      	b.n	b7c80 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7c94:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7c96:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7c98:	5d5b      	ldrb	r3, [r3, r5]
   b7c9a:	7013      	strb	r3, [r2, #0]
}
   b7c9c:	bd30      	pop	{r4, r5, pc}
   b7c9e:	bf00      	nop
   b7ca0:	000bc910 	.word	0x000bc910

000b7ca4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ca8:	4606      	mov	r6, r0
   b7caa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7cac:	7800      	ldrb	r0, [r0, #0]
{
   b7cae:	460c      	mov	r4, r1
    CHECK(lock());
   b7cb0:	f7ff ffbd 	bl	b7c2e <_ZN8SPIClass4lockEv.isra.0>
   b7cb4:	2800      	cmp	r0, #0
   b7cb6:	db1b      	blt.n	b7cf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7cb8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7cba:	2214      	movs	r2, #20
   b7cbc:	2100      	movs	r1, #0
   b7cbe:	a809      	add	r0, sp, #36	; 0x24
   b7cc0:	f001 fd8b 	bl	b97da <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7cc4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7cc6:	2200      	movs	r2, #0
   b7cc8:	a909      	add	r1, sp, #36	; 0x24
   b7cca:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ccc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7cd0:	f7ff fe10 	bl	b78f4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7cd4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7cd8:	b113      	cbz	r3, b7ce0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7cda:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7cde:	b155      	cbz	r5, b7cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7ce0:	2700      	movs	r7, #0
   b7ce2:	46b9      	mov	r9, r7
   b7ce4:	46b8      	mov	r8, r7
   b7ce6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7ce8:	7923      	ldrb	r3, [r4, #4]
   b7cea:	b15d      	cbz	r5, b7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7cec:	b1c3      	cbz	r3, b7d20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7cee:	2000      	movs	r0, #0
}
   b7cf0:	b00f      	add	sp, #60	; 0x3c
   b7cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7cf6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7cfa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7cfe:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7d02:	e7f1      	b.n	b7ce8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7d04:	2b00      	cmp	r3, #0
   b7d06:	d135      	bne.n	b7d74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7d08:	68a3      	ldr	r3, [r4, #8]
   b7d0a:	4543      	cmp	r3, r8
   b7d0c:	d108      	bne.n	b7d20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7d0e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7d12:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7d16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7d1a:	89a3      	ldrh	r3, [r4, #12]
   b7d1c:	429a      	cmp	r2, r3
   b7d1e:	d0e6      	beq.n	b7cee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7d20:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7d22:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7d24:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7d28:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7d2a:	ab04      	add	r3, sp, #16
   b7d2c:	f10d 020f 	add.w	r2, sp, #15
   b7d30:	f7ff ffa2 	bl	b7c78 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7d34:	7921      	ldrb	r1, [r4, #4]
   b7d36:	b985      	cbnz	r5, b7d5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7d38:	b989      	cbnz	r1, b7d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7d3a:	68a3      	ldr	r3, [r4, #8]
   b7d3c:	4543      	cmp	r3, r8
   b7d3e:	d30e      	bcc.n	b7d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7d40:	f88d 9020 	strb.w	r9, [sp, #32]
   b7d44:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7d48:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7d4c:	89a3      	ldrh	r3, [r4, #12]
   b7d4e:	429a      	cmp	r2, r3
   b7d50:	d105      	bne.n	b7d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7d52:	9b04      	ldr	r3, [sp, #16]
   b7d54:	4543      	cmp	r3, r8
   b7d56:	d102      	bne.n	b7d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7d58:	e7c9      	b.n	b7cee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7d5a:	2900      	cmp	r1, #0
   b7d5c:	d1f9      	bne.n	b7d52 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7d5e:	2300      	movs	r3, #0
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	7b63      	ldrb	r3, [r4, #13]
   b7d64:	9300      	str	r3, [sp, #0]
   b7d66:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7d6a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7d6c:	7830      	ldrb	r0, [r6, #0]
   b7d6e:	f7ff fdc9 	bl	b7904 <hal_spi_set_settings>
   b7d72:	e7bc      	b.n	b7cee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7d74:	e9cd 5500 	strd	r5, r5, [sp]
   b7d78:	462b      	mov	r3, r5
   b7d7a:	462a      	mov	r2, r5
   b7d7c:	2101      	movs	r1, #1
   b7d7e:	e7f5      	b.n	b7d6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7d80 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7d80:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7d82:	7800      	ldrb	r0, [r0, #0]
   b7d84:	f7ff fd9e 	bl	b78c4 <hal_spi_transfer>
}
   b7d88:	b2c0      	uxtb	r0, r0
   b7d8a:	bd08      	pop	{r3, pc}

000b7d8c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7d8c:	4b05      	ldr	r3, [pc, #20]	; (b7da4 <_GLOBAL__sub_I_System+0x18>)
   b7d8e:	2202      	movs	r2, #2
   b7d90:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7d92:	4b05      	ldr	r3, [pc, #20]	; (b7da8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7d94:	4a05      	ldr	r2, [pc, #20]	; (b7dac <_GLOBAL__sub_I_System+0x20>)
   b7d96:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7d98:	2000      	movs	r0, #0
   b7d9a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7d9e:	f7ff be11 	b.w	b79c4 <set_system_mode>
   b7da2:	bf00      	nop
   b7da4:	2003e6d8 	.word	0x2003e6d8
   b7da8:	2003e6cc 	.word	0x2003e6cc
   b7dac:	ffff0000 	.word	0xffff0000

000b7db0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7db0:	b510      	push	{r4, lr}
   b7db2:	4604      	mov	r4, r0
{
	free(buffer);
   b7db4:	6800      	ldr	r0, [r0, #0]
   b7db6:	f7ff feb1 	bl	b7b1c <free>
}
   b7dba:	4620      	mov	r0, r4
   b7dbc:	bd10      	pop	{r4, pc}

000b7dbe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7dbe:	b510      	push	{r4, lr}
   b7dc0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7dc2:	6800      	ldr	r0, [r0, #0]
   b7dc4:	b108      	cbz	r0, b7dca <_ZN6String10invalidateEv+0xc>
   b7dc6:	f7ff fea9 	bl	b7b1c <free>
	buffer = NULL;
   b7dca:	2300      	movs	r3, #0
	capacity = len = 0;
   b7dcc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7dd0:	6023      	str	r3, [r4, #0]
}
   b7dd2:	bd10      	pop	{r4, pc}

000b7dd4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7dd4:	b538      	push	{r3, r4, r5, lr}
   b7dd6:	4604      	mov	r4, r0
   b7dd8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7dda:	6800      	ldr	r0, [r0, #0]
   b7ddc:	3101      	adds	r1, #1
   b7dde:	f7ff fea5 	bl	b7b2c <realloc>
	if (newbuffer) {
   b7de2:	b110      	cbz	r0, b7dea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7de4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7de8:	2001      	movs	r0, #1
	}
	return 0;
}
   b7dea:	bd38      	pop	{r3, r4, r5, pc}

000b7dec <_ZN6String7reserveEj>:
{
   b7dec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7dee:	6803      	ldr	r3, [r0, #0]
{
   b7df0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7df2:	b123      	cbz	r3, b7dfe <_ZN6String7reserveEj+0x12>
   b7df4:	6843      	ldr	r3, [r0, #4]
   b7df6:	428b      	cmp	r3, r1
   b7df8:	d301      	bcc.n	b7dfe <_ZN6String7reserveEj+0x12>
   b7dfa:	2001      	movs	r0, #1
}
   b7dfc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7dfe:	4620      	mov	r0, r4
   b7e00:	f7ff ffe8 	bl	b7dd4 <_ZN6String12changeBufferEj>
   b7e04:	2800      	cmp	r0, #0
   b7e06:	d0f9      	beq.n	b7dfc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7e08:	68a3      	ldr	r3, [r4, #8]
   b7e0a:	2b00      	cmp	r3, #0
   b7e0c:	d1f5      	bne.n	b7dfa <_ZN6String7reserveEj+0xe>
   b7e0e:	6822      	ldr	r2, [r4, #0]
   b7e10:	7013      	strb	r3, [r2, #0]
   b7e12:	e7f2      	b.n	b7dfa <_ZN6String7reserveEj+0xe>

000b7e14 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e16:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7e18:	4611      	mov	r1, r2
   b7e1a:	9201      	str	r2, [sp, #4]
{
   b7e1c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7e1e:	f7ff ffe5 	bl	b7dec <_ZN6String7reserveEj>
   b7e22:	9a01      	ldr	r2, [sp, #4]
   b7e24:	b928      	cbnz	r0, b7e32 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7e26:	4620      	mov	r0, r4
   b7e28:	f7ff ffc9 	bl	b7dbe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	b003      	add	sp, #12
   b7e30:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7e32:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7e34:	4629      	mov	r1, r5
   b7e36:	6820      	ldr	r0, [r4, #0]
   b7e38:	f001 fca7 	bl	b978a <memcpy>
	buffer[len] = 0;
   b7e3c:	6822      	ldr	r2, [r4, #0]
   b7e3e:	68a3      	ldr	r3, [r4, #8]
   b7e40:	2100      	movs	r1, #0
   b7e42:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7e44:	e7f2      	b.n	b7e2c <_ZN6String4copyEPKcj+0x18>

000b7e46 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7e46:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7e48:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7e4a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7e4e:	4604      	mov	r4, r0
	len = 0;
   b7e50:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7e52:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7e54:	b141      	cbz	r1, b7e68 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7e56:	4608      	mov	r0, r1
   b7e58:	9101      	str	r1, [sp, #4]
   b7e5a:	f7fc fe23 	bl	b4aa4 <strlen>
   b7e5e:	9901      	ldr	r1, [sp, #4]
   b7e60:	4602      	mov	r2, r0
   b7e62:	4620      	mov	r0, r4
   b7e64:	f7ff ffd6 	bl	b7e14 <_ZN6String4copyEPKcj>
}
   b7e68:	4620      	mov	r0, r4
   b7e6a:	b002      	add	sp, #8
   b7e6c:	bd10      	pop	{r4, pc}

000b7e6e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7e6e:	4288      	cmp	r0, r1
{
   b7e70:	b510      	push	{r4, lr}
   b7e72:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7e74:	d005      	beq.n	b7e82 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7e76:	680b      	ldr	r3, [r1, #0]
   b7e78:	b12b      	cbz	r3, b7e86 <_ZN6StringaSERKS_+0x18>
   b7e7a:	688a      	ldr	r2, [r1, #8]
   b7e7c:	4619      	mov	r1, r3
   b7e7e:	f7ff ffc9 	bl	b7e14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7e82:	4620      	mov	r0, r4
   b7e84:	bd10      	pop	{r4, pc}
	else invalidate();
   b7e86:	f7ff ff9a 	bl	b7dbe <_ZN6String10invalidateEv>
   b7e8a:	e7fa      	b.n	b7e82 <_ZN6StringaSERKS_+0x14>

000b7e8c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7e8c:	b513      	push	{r0, r1, r4, lr}
   b7e8e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7e90:	b159      	cbz	r1, b7eaa <_ZN6StringaSEPKc+0x1e>
   b7e92:	4608      	mov	r0, r1
   b7e94:	9101      	str	r1, [sp, #4]
   b7e96:	f7fc fe05 	bl	b4aa4 <strlen>
   b7e9a:	9901      	ldr	r1, [sp, #4]
   b7e9c:	4602      	mov	r2, r0
   b7e9e:	4620      	mov	r0, r4
   b7ea0:	f7ff ffb8 	bl	b7e14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	b002      	add	sp, #8
   b7ea8:	bd10      	pop	{r4, pc}
	else invalidate();
   b7eaa:	f7ff ff88 	bl	b7dbe <_ZN6String10invalidateEv>
   b7eae:	e7f9      	b.n	b7ea4 <_ZN6StringaSEPKc+0x18>

000b7eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b7eb0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b7eb2:	6843      	ldr	r3, [r0, #4]
   b7eb4:	3b01      	subs	r3, #1
    {
   b7eb6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b7eb8:	6043      	str	r3, [r0, #4]
   b7eba:	b963      	cbnz	r3, b7ed6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b7ebc:	6803      	ldr	r3, [r0, #0]
   b7ebe:	689b      	ldr	r3, [r3, #8]
   b7ec0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7ec2:	68a3      	ldr	r3, [r4, #8]
   b7ec4:	3b01      	subs	r3, #1
   b7ec6:	60a3      	str	r3, [r4, #8]
   b7ec8:	b92b      	cbnz	r3, b7ed6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b7eca:	6823      	ldr	r3, [r4, #0]
   b7ecc:	4620      	mov	r0, r4
   b7ece:	68db      	ldr	r3, [r3, #12]
        }
    }
   b7ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b7ed4:	4718      	bx	r3
    }
   b7ed6:	bd10      	pop	{r4, pc}

000b7ed8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b7ed8:	4802      	ldr	r0, [pc, #8]	; (b7ee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7eda:	2300      	movs	r3, #0
   b7edc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7ede:	f7ff bbf9 	b.w	b76d4 <os_mutex_recursive_create>
   b7ee2:	bf00      	nop
   b7ee4:	2003e6dc 	.word	0x2003e6dc

000b7ee8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7eea:	4606      	mov	r6, r0
   b7eec:	460d      	mov	r5, r1
  size_t n = 0;
   b7eee:	188f      	adds	r7, r1, r2
   b7ef0:	2400      	movs	r4, #0
  while (size--) {
   b7ef2:	42bd      	cmp	r5, r7
   b7ef4:	d00c      	beq.n	b7f10 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7ef6:	6833      	ldr	r3, [r6, #0]
   b7ef8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7efc:	689b      	ldr	r3, [r3, #8]
   b7efe:	4630      	mov	r0, r6
   b7f00:	4798      	blx	r3
     if (chunk>=0)
   b7f02:	1e03      	subs	r3, r0, #0
   b7f04:	db01      	blt.n	b7f0a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b7f06:	441c      	add	r4, r3
  while (size--) {
   b7f08:	e7f3      	b.n	b7ef2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7f0a:	2c00      	cmp	r4, #0
   b7f0c:	bf08      	it	eq
   b7f0e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7f10:	4620      	mov	r0, r4
   b7f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f14 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b7f14:	b513      	push	{r0, r1, r4, lr}
   b7f16:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b7f18:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7f1a:	b159      	cbz	r1, b7f34 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7f1c:	9101      	str	r1, [sp, #4]
   b7f1e:	f7fc fdc1 	bl	b4aa4 <strlen>
   b7f22:	6823      	ldr	r3, [r4, #0]
   b7f24:	9901      	ldr	r1, [sp, #4]
   b7f26:	68db      	ldr	r3, [r3, #12]
   b7f28:	4602      	mov	r2, r0
   b7f2a:	4620      	mov	r0, r4
    }
   b7f2c:	b002      	add	sp, #8
   b7f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7f32:	4718      	bx	r3
    }
   b7f34:	b002      	add	sp, #8
   b7f36:	bd10      	pop	{r4, pc}

000b7f38 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b7f38:	b508      	push	{r3, lr}
  return write(str);
   b7f3a:	f7ff ffeb 	bl	b7f14 <_ZN5Print5writeEPKc>
}
   b7f3e:	bd08      	pop	{r3, pc}

000b7f40 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7f40:	6803      	ldr	r3, [r0, #0]
   b7f42:	689b      	ldr	r3, [r3, #8]
   b7f44:	4718      	bx	r3

000b7f46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b7f46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7f48:	210d      	movs	r1, #13
{
   b7f4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7f4c:	f7ff fff8 	bl	b7f40 <_ZN5Print5printEc>
  n += print('\n');
   b7f50:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7f52:	4604      	mov	r4, r0
  n += print('\n');
   b7f54:	4628      	mov	r0, r5
   b7f56:	f7ff fff3 	bl	b7f40 <_ZN5Print5printEc>
  return n;
}
   b7f5a:	4420      	add	r0, r4
   b7f5c:	bd38      	pop	{r3, r4, r5, pc}

000b7f5e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7f5e:	b538      	push	{r3, r4, r5, lr}
   b7f60:	4605      	mov	r5, r0
  return write(str);
   b7f62:	f7ff ffd7 	bl	b7f14 <_ZN5Print5writeEPKc>
   b7f66:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7f68:	4628      	mov	r0, r5
   b7f6a:	f7ff ffec 	bl	b7f46 <_ZN5Print7printlnEv>
  return n;
}
   b7f6e:	4420      	add	r0, r4
   b7f70:	bd38      	pop	{r3, r4, r5, pc}

000b7f72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7f72:	b530      	push	{r4, r5, lr}
   b7f74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7f76:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7f78:	2a01      	cmp	r2, #1
  *str = '\0';
   b7f7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7f7e:	bf98      	it	ls
   b7f80:	220a      	movls	r2, #10
   b7f82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7f84:	460d      	mov	r5, r1
   b7f86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7f8a:	fb01 5312 	mls	r3, r1, r2, r5
   b7f8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f92:	2b09      	cmp	r3, #9
   b7f94:	bf94      	ite	ls
   b7f96:	3330      	addls	r3, #48	; 0x30
   b7f98:	3337      	addhi	r3, #55	; 0x37
   b7f9a:	b2db      	uxtb	r3, r3
  } while(n);
   b7f9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7f9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7fa2:	d9ef      	bls.n	b7f84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7fa4:	4621      	mov	r1, r4
   b7fa6:	f7ff ffb5 	bl	b7f14 <_ZN5Print5writeEPKc>
}
   b7faa:	b00b      	add	sp, #44	; 0x2c
   b7fac:	bd30      	pop	{r4, r5, pc}

000b7fae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fb2:	b086      	sub	sp, #24
   b7fb4:	af00      	add	r7, sp, #0
   b7fb6:	4605      	mov	r5, r0
   b7fb8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7fba:	1d38      	adds	r0, r7, #4
   b7fbc:	2114      	movs	r1, #20
{
   b7fbe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7fc0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7fc2:	f7ff fdc3 	bl	b7b4c <vsnprintf>

    if (n<bufsize)
   b7fc6:	2813      	cmp	r0, #19
   b7fc8:	d80e      	bhi.n	b7fe8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7fca:	1d39      	adds	r1, r7, #4
   b7fcc:	4628      	mov	r0, r5
   b7fce:	f7ff ffa1 	bl	b7f14 <_ZN5Print5writeEPKc>
   b7fd2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7fd4:	b11e      	cbz	r6, b7fde <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7fd6:	4628      	mov	r0, r5
   b7fd8:	f7ff ffb5 	bl	b7f46 <_ZN5Print7printlnEv>
   b7fdc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7fde:	4620      	mov	r0, r4
   b7fe0:	3718      	adds	r7, #24
   b7fe2:	46bd      	mov	sp, r7
   b7fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7fe8:	f100 0308 	add.w	r3, r0, #8
   b7fec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7ff0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7ff2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7ff6:	4622      	mov	r2, r4
   b7ff8:	1c41      	adds	r1, r0, #1
   b7ffa:	683b      	ldr	r3, [r7, #0]
   b7ffc:	4668      	mov	r0, sp
   b7ffe:	f7ff fda5 	bl	b7b4c <vsnprintf>
  return write(str);
   b8002:	4669      	mov	r1, sp
   b8004:	4628      	mov	r0, r5
   b8006:	f7ff ff85 	bl	b7f14 <_ZN5Print5writeEPKc>
   b800a:	4604      	mov	r4, r0
   b800c:	46c5      	mov	sp, r8
   b800e:	e7e1      	b.n	b7fd4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8010 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8010:	b510      	push	{r4, lr}
   b8012:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8014:	f7ff fb36 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8018:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b801a:	6823      	ldr	r3, [r4, #0]
   b801c:	4620      	mov	r0, r4
   b801e:	695b      	ldr	r3, [r3, #20]
   b8020:	4798      	blx	r3
    if (c >= 0) return c;
   b8022:	2800      	cmp	r0, #0
   b8024:	da08      	bge.n	b8038 <_ZN6Stream9timedReadEv+0x28>
   b8026:	f7ff fb2d 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b802a:	68e3      	ldr	r3, [r4, #12]
   b802c:	1ac0      	subs	r0, r0, r3
   b802e:	68a3      	ldr	r3, [r4, #8]
   b8030:	4298      	cmp	r0, r3
   b8032:	d3f2      	bcc.n	b801a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8034:	f04f 30ff 	mov.w	r0, #4294967295
}
   b8038:	bd10      	pop	{r4, pc}

000b803a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b803e:	4607      	mov	r7, r0
   b8040:	460c      	mov	r4, r1
   b8042:	188e      	adds	r6, r1, r2
   b8044:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b8046:	42b5      	cmp	r5, r6
   b8048:	eba5 0804 	sub.w	r8, r5, r4
   b804c:	d007      	beq.n	b805e <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b804e:	4638      	mov	r0, r7
   b8050:	f7ff ffde 	bl	b8010 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b8054:	1e03      	subs	r3, r0, #0
   b8056:	db02      	blt.n	b805e <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b8058:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b805c:	e7f3      	b.n	b8046 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b805e:	4640      	mov	r0, r8
   b8060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8064 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b8064:	4b01      	ldr	r3, [pc, #4]	; (b806c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b8066:	4a02      	ldr	r2, [pc, #8]	; (b8070 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b8068:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b806a:	4770      	bx	lr
   b806c:	2003e6e0 	.word	0x2003e6e0
   b8070:	000bc920 	.word	0x000bc920

000b8074 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8074:	4b02      	ldr	r3, [pc, #8]	; (b8080 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b8076:	681a      	ldr	r2, [r3, #0]
   b8078:	4b02      	ldr	r3, [pc, #8]	; (b8084 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b807a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b807c:	4770      	bx	lr
   b807e:	bf00      	nop
   b8080:	2003e0d4 	.word	0x2003e0d4
   b8084:	2003e6e4 	.word	0x2003e6e4

000b8088 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8088:	2100      	movs	r1, #0
   b808a:	f7ff bca3 	b.w	b79d4 <system_delay_ms>
	...

000b8090 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8090:	b510      	push	{r4, lr}
   b8092:	4b04      	ldr	r3, [pc, #16]	; (b80a4 <_ZN9TCPClientD1Ev+0x14>)
   b8094:	6003      	str	r3, [r0, #0]
   b8096:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b8098:	6980      	ldr	r0, [r0, #24]
   b809a:	b108      	cbz	r0, b80a0 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b809c:	f7ff ff08 	bl	b7eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b80a0:	4620      	mov	r0, r4
   b80a2:	bd10      	pop	{r4, pc}
   b80a4:	000bca18 	.word	0x000bca18

000b80a8 <_ZN9TCPClientD0Ev>:
   b80a8:	b510      	push	{r4, lr}
   b80aa:	4604      	mov	r4, r0
   b80ac:	f7ff fff0 	bl	b8090 <_ZN9TCPClientD1Ev>
   b80b0:	4620      	mov	r0, r4
   b80b2:	211c      	movs	r1, #28
   b80b4:	f7fc fd59 	bl	b4b6a <_ZdlPvj>
   b80b8:	4620      	mov	r0, r4
   b80ba:	bd10      	pop	{r4, pc}

000b80bc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b80bc:	4b01      	ldr	r3, [pc, #4]	; (b80c4 <_GLOBAL__sub_I_RGB+0x8>)
   b80be:	2200      	movs	r2, #0
   b80c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b80c2:	4770      	bx	lr
   b80c4:	2003e6e8 	.word	0x2003e6e8

000b80c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b80c8:	4b01      	ldr	r3, [pc, #4]	; (b80d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b80ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b80cc:	4770      	bx	lr
   b80ce:	bf00      	nop
   b80d0:	2003e0d8 	.word	0x2003e0d8

000b80d4 <serialEventRun>:
{
   b80d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b80d6:	4b0b      	ldr	r3, [pc, #44]	; (b8104 <serialEventRun+0x30>)
   b80d8:	b143      	cbz	r3, b80ec <serialEventRun+0x18>
   b80da:	f000 f97d 	bl	b83d8 <_Z16_fetch_usbserialv>
   b80de:	6803      	ldr	r3, [r0, #0]
   b80e0:	691b      	ldr	r3, [r3, #16]
   b80e2:	4798      	blx	r3
   b80e4:	2800      	cmp	r0, #0
   b80e6:	dd01      	ble.n	b80ec <serialEventRun+0x18>
        serialEvent();
   b80e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b80ec:	4b06      	ldr	r3, [pc, #24]	; (b8108 <serialEventRun+0x34>)
   b80ee:	b143      	cbz	r3, b8102 <serialEventRun+0x2e>
   b80f0:	f000 fedc 	bl	b8eac <_Z22__fetch_global_Serial1v>
   b80f4:	6803      	ldr	r3, [r0, #0]
   b80f6:	691b      	ldr	r3, [r3, #16]
   b80f8:	4798      	blx	r3
   b80fa:	2800      	cmp	r0, #0
   b80fc:	dd01      	ble.n	b8102 <serialEventRun+0x2e>
        serialEvent1();
   b80fe:	f3af 8000 	nop.w
}
   b8102:	bd08      	pop	{r3, pc}
	...

000b810c <_post_loop>:
{
   b810c:	b508      	push	{r3, lr}
	serialEventRun();
   b810e:	f7ff ffe1 	bl	b80d4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8112:	f7ff fab7 	bl	b7684 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8116:	4b01      	ldr	r3, [pc, #4]	; (b811c <_post_loop+0x10>)
   b8118:	6018      	str	r0, [r3, #0]
}
   b811a:	bd08      	pop	{r3, pc}
   b811c:	2003e740 	.word	0x2003e740

000b8120 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8120:	4805      	ldr	r0, [pc, #20]	; (b8138 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8122:	4a06      	ldr	r2, [pc, #24]	; (b813c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8124:	4906      	ldr	r1, [pc, #24]	; (b8140 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8126:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8128:	1a12      	subs	r2, r2, r0
   b812a:	f001 fb2e 	bl	b978a <memcpy>
    __backup_sram_signature = signature;
   b812e:	4b05      	ldr	r3, [pc, #20]	; (b8144 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8130:	4a05      	ldr	r2, [pc, #20]	; (b8148 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8132:	601a      	str	r2, [r3, #0]
}
   b8134:	bd08      	pop	{r3, pc}
   b8136:	bf00      	nop
   b8138:	2003f400 	.word	0x2003f400
   b813c:	2003f404 	.word	0x2003f404
   b8140:	000bd348 	.word	0x000bd348
   b8144:	2003f400 	.word	0x2003f400
   b8148:	9a271c1e 	.word	0x9a271c1e

000b814c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b814c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b814e:	2300      	movs	r3, #0
   b8150:	9300      	str	r3, [sp, #0]
   b8152:	461a      	mov	r2, r3
   b8154:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8158:	f7ff fc56 	bl	b7a08 <system_ctrl_set_result>
}
   b815c:	b003      	add	sp, #12
   b815e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8164 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8164:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8166:	8843      	ldrh	r3, [r0, #2]
   b8168:	2b0a      	cmp	r3, #10
   b816a:	d008      	beq.n	b817e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b816c:	2b50      	cmp	r3, #80	; 0x50
   b816e:	d10b      	bne.n	b8188 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8170:	4b09      	ldr	r3, [pc, #36]	; (b8198 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8172:	681b      	ldr	r3, [r3, #0]
   b8174:	b14b      	cbz	r3, b818a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8176:	b003      	add	sp, #12
   b8178:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b817c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b817e:	f7ff ffe5 	bl	b814c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8182:	b003      	add	sp, #12
   b8184:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8188:	2300      	movs	r3, #0
   b818a:	9300      	str	r3, [sp, #0]
   b818c:	461a      	mov	r2, r3
   b818e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8192:	f7ff fc39 	bl	b7a08 <system_ctrl_set_result>
}
   b8196:	e7f4      	b.n	b8182 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8198:	2003e6fc 	.word	0x2003e6fc

000b819c <module_user_init_hook>:
{
   b819c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b819e:	4812      	ldr	r0, [pc, #72]	; (b81e8 <module_user_init_hook+0x4c>)
   b81a0:	2100      	movs	r1, #0
   b81a2:	f7ff fcfb 	bl	b7b9c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b81a6:	4b11      	ldr	r3, [pc, #68]	; (b81ec <module_user_init_hook+0x50>)
   b81a8:	681a      	ldr	r2, [r3, #0]
   b81aa:	4b11      	ldr	r3, [pc, #68]	; (b81f0 <module_user_init_hook+0x54>)
   b81ac:	429a      	cmp	r2, r3
   b81ae:	4b11      	ldr	r3, [pc, #68]	; (b81f4 <module_user_init_hook+0x58>)
   b81b0:	bf0c      	ite	eq
   b81b2:	2201      	moveq	r2, #1
   b81b4:	2200      	movne	r2, #0
   b81b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b81b8:	d001      	beq.n	b81be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b81ba:	f7ff ffb1 	bl	b8120 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b81be:	f7ff fa51 	bl	b7664 <HAL_RNG_GetRandomNumber>
   b81c2:	4604      	mov	r4, r0
    srand(seed);
   b81c4:	f001 fb12 	bl	b97ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b81c8:	4b0b      	ldr	r3, [pc, #44]	; (b81f8 <module_user_init_hook+0x5c>)
   b81ca:	b113      	cbz	r3, b81d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b81cc:	4620      	mov	r0, r4
   b81ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b81d2:	2100      	movs	r1, #0
   b81d4:	4808      	ldr	r0, [pc, #32]	; (b81f8 <module_user_init_hook+0x5c>)
   b81d6:	f7ff fc91 	bl	b7afc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b81da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b81de:	4807      	ldr	r0, [pc, #28]	; (b81fc <module_user_init_hook+0x60>)
   b81e0:	2100      	movs	r1, #0
   b81e2:	f7ff bc07 	b.w	b79f4 <system_ctrl_set_app_request_handler>
   b81e6:	bf00      	nop
   b81e8:	000b80c9 	.word	0x000b80c9
   b81ec:	2003f400 	.word	0x2003f400
   b81f0:	9a271c1e 	.word	0x9a271c1e
   b81f4:	2003e6f8 	.word	0x2003e6f8
   b81f8:	00000000 	.word	0x00000000
   b81fc:	000b8165 	.word	0x000b8165

000b8200 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8200:	4770      	bx	lr

000b8202 <_ZN9IPAddressD0Ev>:
   b8202:	b510      	push	{r4, lr}
   b8204:	2118      	movs	r1, #24
   b8206:	4604      	mov	r4, r0
   b8208:	f7fc fcaf 	bl	b4b6a <_ZdlPvj>
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}

000b8210 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8210:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8212:	7d03      	ldrb	r3, [r0, #20]
   b8214:	2b06      	cmp	r3, #6
{
   b8216:	b08d      	sub	sp, #52	; 0x34
   b8218:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b821a:	f100 0704 	add.w	r7, r0, #4
   b821e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8222:	d012      	beq.n	b824a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8224:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8228:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b822c:	220a      	movs	r2, #10
   b822e:	4630      	mov	r0, r6
   b8230:	f7ff fe9f 	bl	b7f72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8234:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8236:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8238:	d019      	beq.n	b826e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b823a:	2c00      	cmp	r4, #0
   b823c:	d0f4      	beq.n	b8228 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b823e:	212e      	movs	r1, #46	; 0x2e
   b8240:	4630      	mov	r0, r6
   b8242:	f7ff fe7d 	bl	b7f40 <_ZN5Print5printEc>
   b8246:	4404      	add	r4, r0
   b8248:	e7ee      	b.n	b8228 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b824a:	232f      	movs	r3, #47	; 0x2f
   b824c:	466a      	mov	r2, sp
   b824e:	4639      	mov	r1, r7
   b8250:	200a      	movs	r0, #10
		buf[0] = 0;
   b8252:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8256:	f7ff fa45 	bl	b76e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b825a:	4668      	mov	r0, sp
   b825c:	f7fc fc22 	bl	b4aa4 <strlen>
   b8260:	6833      	ldr	r3, [r6, #0]
   b8262:	4602      	mov	r2, r0
   b8264:	68db      	ldr	r3, [r3, #12]
   b8266:	4669      	mov	r1, sp
   b8268:	4630      	mov	r0, r6
   b826a:	4798      	blx	r3
   b826c:	4604      	mov	r4, r0
    }
    return n;
}
   b826e:	4620      	mov	r0, r4
   b8270:	b00d      	add	sp, #52	; 0x34
   b8272:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8274 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8274:	b510      	push	{r4, lr}
   b8276:	4b05      	ldr	r3, [pc, #20]	; (b828c <_ZN9IPAddressC1Ev+0x18>)
   b8278:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b827a:	2211      	movs	r2, #17
   b827c:	f840 3b04 	str.w	r3, [r0], #4
   b8280:	2100      	movs	r1, #0
   b8282:	f001 faaa 	bl	b97da <memset>
}
   b8286:	4620      	mov	r0, r4
   b8288:	bd10      	pop	{r4, pc}
   b828a:	bf00      	nop
   b828c:	000bc948 	.word	0x000bc948

000b8290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8290:	4603      	mov	r3, r0
   b8292:	4a07      	ldr	r2, [pc, #28]	; (b82b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8294:	b510      	push	{r4, lr}
   b8296:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b829a:	f101 0210 	add.w	r2, r1, #16
   b829e:	f851 4b04 	ldr.w	r4, [r1], #4
   b82a2:	f843 4b04 	str.w	r4, [r3], #4
   b82a6:	4291      	cmp	r1, r2
   b82a8:	d1f9      	bne.n	b829e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b82aa:	780a      	ldrb	r2, [r1, #0]
   b82ac:	701a      	strb	r2, [r3, #0]
}
   b82ae:	bd10      	pop	{r4, pc}
   b82b0:	000bc948 	.word	0x000bc948

000b82b4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b82b4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b82b6:	2b04      	cmp	r3, #4
   b82b8:	d104      	bne.n	b82c4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b82ba:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b82bc:	3800      	subs	r0, #0
   b82be:	bf18      	it	ne
   b82c0:	2001      	movne	r0, #1
   b82c2:	4770      	bx	lr
    } else if (version() == 6) {
   b82c4:	2b06      	cmp	r3, #6
   b82c6:	d107      	bne.n	b82d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b82c8:	6843      	ldr	r3, [r0, #4]
   b82ca:	b93b      	cbnz	r3, b82dc <_ZNK9IPAddresscvbEv+0x28>
   b82cc:	6883      	ldr	r3, [r0, #8]
   b82ce:	b92b      	cbnz	r3, b82dc <_ZNK9IPAddresscvbEv+0x28>
   b82d0:	68c3      	ldr	r3, [r0, #12]
   b82d2:	b91b      	cbnz	r3, b82dc <_ZNK9IPAddresscvbEv+0x28>
   b82d4:	6900      	ldr	r0, [r0, #16]
   b82d6:	e7f1      	b.n	b82bc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b82d8:	2000      	movs	r0, #0
   b82da:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b82dc:	2001      	movs	r0, #1
}
   b82de:	4770      	bx	lr

000b82e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b82e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b82e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b82e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b82ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b82ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b82f2:	2304      	movs	r3, #4
   b82f4:	6041      	str	r1, [r0, #4]
   b82f6:	7503      	strb	r3, [r0, #20]
}
   b82f8:	bd10      	pop	{r4, pc}
	...

000b82fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b82fc:	b507      	push	{r0, r1, r2, lr}
   b82fe:	4b06      	ldr	r3, [pc, #24]	; (b8318 <_ZN9IPAddressC1EPKh+0x1c>)
   b8300:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8302:	78cb      	ldrb	r3, [r1, #3]
   b8304:	9300      	str	r3, [sp, #0]
   b8306:	788b      	ldrb	r3, [r1, #2]
   b8308:	784a      	ldrb	r2, [r1, #1]
   b830a:	7809      	ldrb	r1, [r1, #0]
   b830c:	f7ff ffe8 	bl	b82e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8310:	b003      	add	sp, #12
   b8312:	f85d fb04 	ldr.w	pc, [sp], #4
   b8316:	bf00      	nop
   b8318:	000bc948 	.word	0x000bc948

000b831c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b831c:	7441      	strb	r1, [r0, #17]
}
   b831e:	4770      	bx	lr

000b8320 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8320:	4770      	bx	lr

000b8322 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8322:	4770      	bx	lr

000b8324 <_ZN9USBSerial4readEv>:
{
   b8324:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8326:	2100      	movs	r1, #0
   b8328:	7c00      	ldrb	r0, [r0, #16]
   b832a:	f7ff fb23 	bl	b7974 <HAL_USB_USART_Receive_Data>
}
   b832e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8332:	bd08      	pop	{r3, pc}

000b8334 <_ZN9USBSerial4peekEv>:
{
   b8334:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b8336:	2101      	movs	r1, #1
   b8338:	7c00      	ldrb	r0, [r0, #16]
   b833a:	f7ff fb1b 	bl	b7974 <HAL_USB_USART_Receive_Data>
}
   b833e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8342:	bd08      	pop	{r3, pc}

000b8344 <_ZN9USBSerial17availableForWriteEv>:
{
   b8344:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b8346:	7c00      	ldrb	r0, [r0, #16]
   b8348:	f7ff fb0c 	bl	b7964 <HAL_USB_USART_Available_Data_For_Write>
}
   b834c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8350:	bd08      	pop	{r3, pc}

000b8352 <_ZN9USBSerial9availableEv>:
{
   b8352:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8354:	7c00      	ldrb	r0, [r0, #16]
   b8356:	f7ff fafd 	bl	b7954 <HAL_USB_USART_Available_Data>
}
   b835a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b835e:	bd08      	pop	{r3, pc}

000b8360 <_ZN9USBSerial5writeEh>:
{
   b8360:	b513      	push	{r0, r1, r4, lr}
   b8362:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8364:	7c00      	ldrb	r0, [r0, #16]
{
   b8366:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8368:	f7ff fafc 	bl	b7964 <HAL_USB_USART_Available_Data_For_Write>
   b836c:	2800      	cmp	r0, #0
   b836e:	9901      	ldr	r1, [sp, #4]
   b8370:	dc01      	bgt.n	b8376 <_ZN9USBSerial5writeEh+0x16>
   b8372:	7c60      	ldrb	r0, [r4, #17]
   b8374:	b120      	cbz	r0, b8380 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b8376:	7c20      	ldrb	r0, [r4, #16]
   b8378:	f7ff fb04 	bl	b7984 <HAL_USB_USART_Send_Data>
   b837c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8380:	b002      	add	sp, #8
   b8382:	bd10      	pop	{r4, pc}

000b8384 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8384:	7c00      	ldrb	r0, [r0, #16]
   b8386:	f7ff bb05 	b.w	b7994 <HAL_USB_USART_Flush_Data>

000b838a <_ZN9USBSerialD0Ev>:
   b838a:	b510      	push	{r4, lr}
   b838c:	2114      	movs	r1, #20
   b838e:	4604      	mov	r4, r0
   b8390:	f7fc fbeb 	bl	b4b6a <_ZdlPvj>
   b8394:	4620      	mov	r0, r4
   b8396:	bd10      	pop	{r4, pc}

000b8398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8398:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b839a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b839e:	4604      	mov	r4, r0
   b83a0:	4608      	mov	r0, r1
   b83a2:	2100      	movs	r1, #0
   b83a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b83a8:	4b04      	ldr	r3, [pc, #16]	; (b83bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b83aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b83ac:	2301      	movs	r3, #1
  _serial = serial;
   b83ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b83b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b83b2:	4611      	mov	r1, r2
   b83b4:	f7ff fabe 	bl	b7934 <HAL_USB_USART_Init>
}
   b83b8:	4620      	mov	r0, r4
   b83ba:	bd10      	pop	{r4, pc}
   b83bc:	000bc95c 	.word	0x000bc95c

000b83c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b83c0:	7c00      	ldrb	r0, [r0, #16]
   b83c2:	2200      	movs	r2, #0
   b83c4:	f7ff babe 	b.w	b7944 <HAL_USB_USART_Begin>

000b83c8 <_Z19acquireSerialBufferv>:
{
   b83c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b83ca:	2214      	movs	r2, #20
{
   b83cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b83ce:	2100      	movs	r1, #0
   b83d0:	f001 fa03 	bl	b97da <memset>
}
   b83d4:	4620      	mov	r0, r4
   b83d6:	bd10      	pop	{r4, pc}

000b83d8 <_Z16_fetch_usbserialv>:
{
   b83d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83da:	4c0f      	ldr	r4, [pc, #60]	; (b8418 <_Z16_fetch_usbserialv+0x40>)
{
   b83dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b83de:	a803      	add	r0, sp, #12
   b83e0:	f7ff fff2 	bl	b83c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83e4:	7821      	ldrb	r1, [r4, #0]
   b83e6:	f3bf 8f5b 	dmb	ish
   b83ea:	f011 0101 	ands.w	r1, r1, #1
   b83ee:	d10f      	bne.n	b8410 <_Z16_fetch_usbserialv+0x38>
   b83f0:	4620      	mov	r0, r4
   b83f2:	9101      	str	r1, [sp, #4]
   b83f4:	f7fc fbc8 	bl	b4b88 <__cxa_guard_acquire>
   b83f8:	9901      	ldr	r1, [sp, #4]
   b83fa:	b148      	cbz	r0, b8410 <_Z16_fetch_usbserialv+0x38>
   b83fc:	aa03      	add	r2, sp, #12
   b83fe:	4807      	ldr	r0, [pc, #28]	; (b841c <_Z16_fetch_usbserialv+0x44>)
   b8400:	f7ff ffca 	bl	b8398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8404:	4620      	mov	r0, r4
   b8406:	f7fc fbc4 	bl	b4b92 <__cxa_guard_release>
   b840a:	4805      	ldr	r0, [pc, #20]	; (b8420 <_Z16_fetch_usbserialv+0x48>)
   b840c:	f001 f99c 	bl	b9748 <atexit>
	return _usbserial;
}
   b8410:	4802      	ldr	r0, [pc, #8]	; (b841c <_Z16_fetch_usbserialv+0x44>)
   b8412:	b008      	add	sp, #32
   b8414:	bd10      	pop	{r4, pc}
   b8416:	bf00      	nop
   b8418:	2003e700 	.word	0x2003e700
   b841c:	2003e704 	.word	0x2003e704
   b8420:	000b8321 	.word	0x000b8321

000b8424 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8424:	4770      	bx	lr

000b8426 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8426:	7441      	strb	r1, [r0, #17]
}
   b8428:	4770      	bx	lr

000b842a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b842a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b842c:	7c00      	ldrb	r0, [r0, #16]
   b842e:	f7ff f9a9 	bl	b7784 <hal_usart_available_data_for_write>
}
   b8432:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8436:	bd08      	pop	{r3, pc}

000b8438 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8438:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b843a:	7c00      	ldrb	r0, [r0, #16]
   b843c:	f7ff f97a 	bl	b7734 <hal_usart_available>
}
   b8440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8444:	bd08      	pop	{r3, pc}

000b8446 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8446:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8448:	7c00      	ldrb	r0, [r0, #16]
   b844a:	f7ff f983 	bl	b7754 <hal_usart_peek>
}
   b844e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8452:	bd08      	pop	{r3, pc}

000b8454 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8454:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8456:	7c00      	ldrb	r0, [r0, #16]
   b8458:	f7ff f974 	bl	b7744 <hal_usart_read>
}
   b845c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8460:	bd08      	pop	{r3, pc}

000b8462 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8462:	7c00      	ldrb	r0, [r0, #16]
   b8464:	f7ff b97e 	b.w	b7764 <hal_usart_flush>

000b8468 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8468:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b846a:	7c45      	ldrb	r5, [r0, #17]
{
   b846c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b846e:	b12d      	cbz	r5, b847c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8470:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8472:	b003      	add	sp, #12
   b8474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8478:	f7ff b954 	b.w	b7724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b847c:	7c00      	ldrb	r0, [r0, #16]
   b847e:	9101      	str	r1, [sp, #4]
   b8480:	f7ff f980 	bl	b7784 <hal_usart_available_data_for_write>
   b8484:	2800      	cmp	r0, #0
   b8486:	9901      	ldr	r1, [sp, #4]
   b8488:	dcf2      	bgt.n	b8470 <_ZN11USARTSerial5writeEh+0x8>
}
   b848a:	4628      	mov	r0, r5
   b848c:	b003      	add	sp, #12
   b848e:	bd30      	pop	{r4, r5, pc}

000b8490 <_ZN11USARTSerialD0Ev>:
   b8490:	b510      	push	{r4, lr}
   b8492:	2114      	movs	r1, #20
   b8494:	4604      	mov	r4, r0
   b8496:	f7fc fb68 	bl	b4b6a <_ZdlPvj>
   b849a:	4620      	mov	r0, r4
   b849c:	bd10      	pop	{r4, pc}
	...

000b84a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b84a0:	b510      	push	{r4, lr}
   b84a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84a6:	4604      	mov	r4, r0
   b84a8:	4608      	mov	r0, r1
   b84aa:	4611      	mov	r1, r2
   b84ac:	2200      	movs	r2, #0
   b84ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b84b2:	4b04      	ldr	r3, [pc, #16]	; (b84c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b84b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b84b6:	2301      	movs	r3, #1
  _serial = serial;
   b84b8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b84ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b84bc:	f7ff f96a 	bl	b7794 <hal_usart_init_ex>
}
   b84c0:	4620      	mov	r0, r4
   b84c2:	bd10      	pop	{r4, pc}
   b84c4:	000bc98c 	.word	0x000bc98c

000b84c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b84c8:	4770      	bx	lr

000b84ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b84ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b84cc:	4606      	mov	r6, r0
   b84ce:	4615      	mov	r5, r2
   b84d0:	460c      	mov	r4, r1
   b84d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b84d4:	42bc      	cmp	r4, r7
   b84d6:	d006      	beq.n	b84e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b84d8:	6833      	ldr	r3, [r6, #0]
   b84da:	f814 1b01 	ldrb.w	r1, [r4], #1
   b84de:	689b      	ldr	r3, [r3, #8]
   b84e0:	4630      	mov	r0, r6
   b84e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b84e4:	e7f6      	b.n	b84d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b84e6:	4628      	mov	r0, r5
   b84e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b84ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b84ea:	7c00      	ldrb	r0, [r0, #16]
   b84ec:	2200      	movs	r2, #0
   b84ee:	f7ff b979 	b.w	b77e4 <hal_i2c_write>

000b84f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b84f2:	7c00      	ldrb	r0, [r0, #16]
   b84f4:	2100      	movs	r1, #0
   b84f6:	f7ff b97d 	b.w	b77f4 <hal_i2c_available>

000b84fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b84fa:	7c00      	ldrb	r0, [r0, #16]
   b84fc:	2100      	movs	r1, #0
   b84fe:	f7ff b981 	b.w	b7804 <hal_i2c_read>

000b8502 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8502:	7c00      	ldrb	r0, [r0, #16]
   b8504:	2100      	movs	r1, #0
   b8506:	f7ff b985 	b.w	b7814 <hal_i2c_peek>

000b850a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b850a:	7c00      	ldrb	r0, [r0, #16]
   b850c:	2100      	movs	r1, #0
   b850e:	f7ff b989 	b.w	b7824 <hal_i2c_flush>

000b8512 <_ZN7TwoWireD0Ev>:
   b8512:	b510      	push	{r4, lr}
   b8514:	2114      	movs	r1, #20
   b8516:	4604      	mov	r4, r0
   b8518:	f7fc fb27 	bl	b4b6a <_ZdlPvj>
   b851c:	4620      	mov	r0, r4
   b851e:	bd10      	pop	{r4, pc}

000b8520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8520:	b538      	push	{r3, r4, r5, lr}
   b8522:	4604      	mov	r4, r0
   b8524:	4615      	mov	r5, r2
   b8526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b852a:	2200      	movs	r2, #0
   b852c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8530:	4b09      	ldr	r3, [pc, #36]	; (b8558 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b8532:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8534:	4608      	mov	r0, r1
   b8536:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b8538:	4629      	mov	r1, r5
   b853a:	f7ff f983 	bl	b7844 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b853e:	30bf      	adds	r0, #191	; 0xbf
   b8540:	d108      	bne.n	b8554 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b8542:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b8544:	07db      	lsls	r3, r3, #31
   b8546:	d505      	bpl.n	b8554 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b8548:	6868      	ldr	r0, [r5, #4]
   b854a:	f7ff fae7 	bl	b7b1c <free>
    free(conf.tx_buffer);
   b854e:	68e8      	ldr	r0, [r5, #12]
   b8550:	f7ff fae4 	bl	b7b1c <free>
}
   b8554:	4620      	mov	r0, r4
   b8556:	bd38      	pop	{r3, r4, r5, pc}
   b8558:	000bc9bc 	.word	0x000bc9bc

000b855c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b855c:	7c00      	ldrb	r0, [r0, #16]
   b855e:	2200      	movs	r2, #0
   b8560:	f7ff b920 	b.w	b77a4 <hal_i2c_set_speed>

000b8564 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8564:	2300      	movs	r3, #0
   b8566:	7c00      	ldrb	r0, [r0, #16]
   b8568:	461a      	mov	r2, r3
   b856a:	4619      	mov	r1, r3
   b856c:	f7ff b922 	b.w	b77b4 <hal_i2c_begin>

000b8570 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8570:	7c00      	ldrb	r0, [r0, #16]
   b8572:	2200      	movs	r2, #0
   b8574:	f7ff b926 	b.w	b77c4 <hal_i2c_begin_transmission>

000b8578 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8578:	b2c9      	uxtb	r1, r1
   b857a:	f7ff bff9 	b.w	b8570 <_ZN7TwoWire17beginTransmissionEh>

000b857e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b857e:	7c00      	ldrb	r0, [r0, #16]
   b8580:	2200      	movs	r2, #0
   b8582:	f7ff b927 	b.w	b77d4 <hal_i2c_end_transmission>

000b8586 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b8586:	2101      	movs	r1, #1
   b8588:	f7ff bff9 	b.w	b857e <_ZN7TwoWire15endTransmissionEh>

000b858c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b858c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b858e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8590:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8594:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8596:	2201      	movs	r2, #1
   b8598:	f04f 33ff 	mov.w	r3, #4294967295
   b859c:	f10d 0107 	add.w	r1, sp, #7
   b85a0:	47a0      	blx	r4
}
   b85a2:	b002      	add	sp, #8
   b85a4:	bd10      	pop	{r4, pc}

000b85a6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b85a6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b85a8:	6803      	ldr	r3, [r0, #0]
   b85aa:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b85ac:	f04f 33ff 	mov.w	r3, #4294967295
   b85b0:	46a4      	mov	ip, r4
}
   b85b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b85b6:	4760      	bx	ip

000b85b8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b85b8:	b513      	push	{r0, r1, r4, lr}
   b85ba:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b85bc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b85be:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b85c2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b85c4:	f10d 0107 	add.w	r1, sp, #7
   b85c8:	2201      	movs	r2, #1
   b85ca:	47a0      	blx	r4
}
   b85cc:	b002      	add	sp, #8
   b85ce:	bd10      	pop	{r4, pc}

000b85d0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b85d0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b85d2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b85d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b85d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b85dc:	429a      	cmp	r2, r3
int TCPClient::read() {
   b85de:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b85e0:	d008      	beq.n	b85f4 <_ZN9TCPClient4readEv+0x24>
   b85e2:	6963      	ldr	r3, [r4, #20]
   b85e4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b85e8:	1c51      	adds	r1, r2, #1
   b85ea:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b85ee:	4413      	add	r3, r2
   b85f0:	7918      	ldrb	r0, [r3, #4]
}
   b85f2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b85f4:	6803      	ldr	r3, [r0, #0]
   b85f6:	691b      	ldr	r3, [r3, #16]
   b85f8:	4798      	blx	r3
   b85fa:	2800      	cmp	r0, #0
   b85fc:	d1f1      	bne.n	b85e2 <_ZN9TCPClient4readEv+0x12>
   b85fe:	f04f 30ff 	mov.w	r0, #4294967295
   b8602:	e7f6      	b.n	b85f2 <_ZN9TCPClient4readEv+0x22>

000b8604 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8604:	4770      	bx	lr

000b8606 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8606:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8608:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b860a:	43c0      	mvns	r0, r0
   b860c:	0fc0      	lsrs	r0, r0, #31
   b860e:	4770      	bx	lr

000b8610 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8610:	4770      	bx	lr
	...

000b8614 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8614:	4b06      	ldr	r3, [pc, #24]	; (b8630 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8616:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8618:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b861a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b861e:	d005      	beq.n	b862c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8620:	4608      	mov	r0, r1
   b8622:	f000 fcd5 	bl	b8fd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8626:	2800      	cmp	r0, #0
   b8628:	bf08      	it	eq
   b862a:	2400      	moveq	r4, #0
      }
   b862c:	4620      	mov	r0, r4
   b862e:	bd10      	pop	{r4, pc}
   b8630:	000bc918 	.word	0x000bc918

000b8634 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8634:	b510      	push	{r4, lr}
   b8636:	21ac      	movs	r1, #172	; 0xac
   b8638:	4604      	mov	r4, r0
   b863a:	f7fc fa96 	bl	b4b6a <_ZdlPvj>
   b863e:	4620      	mov	r0, r4
   b8640:	bd10      	pop	{r4, pc}

000b8642 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b8642:	21ac      	movs	r1, #172	; 0xac
   b8644:	f7fc ba91 	b.w	b4b6a <_ZdlPvj>

000b8648 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b864c:	f04f 0800 	mov.w	r8, #0
   b8650:	b086      	sub	sp, #24
   b8652:	461c      	mov	r4, r3
   b8654:	f8c0 8004 	str.w	r8, [r0, #4]
   b8658:	4605      	mov	r5, r0
   b865a:	460e      	mov	r6, r1
   b865c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b865e:	4641      	mov	r1, r8
   b8660:	2210      	movs	r2, #16
   b8662:	a802      	add	r0, sp, #8
   b8664:	f001 f8b9 	bl	b97da <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8668:	1c63      	adds	r3, r4, #1
   b866a:	d009      	beq.n	b8680 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b866c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8670:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8674:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8678:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b867c:	435c      	muls	r4, r3
   b867e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8680:	6968      	ldr	r0, [r5, #20]
   b8682:	2310      	movs	r3, #16
   b8684:	9300      	str	r3, [sp, #0]
   b8686:	6800      	ldr	r0, [r0, #0]
   b8688:	ab02      	add	r3, sp, #8
   b868a:	f241 0205 	movw	r2, #4101	; 0x1005
   b868e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8692:	f7ff f8df 	bl	b7854 <sock_setsockopt>
    if (ret < 0) {
   b8696:	2800      	cmp	r0, #0
   b8698:	da07      	bge.n	b86aa <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b869a:	f7ff fa6f 	bl	b7b7c <__errno>
   b869e:	6803      	ldr	r3, [r0, #0]
   b86a0:	606b      	str	r3, [r5, #4]
        return 0;
   b86a2:	2000      	movs	r0, #0
}
   b86a4:	b006      	add	sp, #24
   b86a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b86aa:	6968      	ldr	r0, [r5, #20]
   b86ac:	2300      	movs	r3, #0
   b86ae:	6800      	ldr	r0, [r0, #0]
   b86b0:	463a      	mov	r2, r7
   b86b2:	4631      	mov	r1, r6
   b86b4:	f7ff f8ee 	bl	b7894 <sock_send>
    if (ret < 0) {
   b86b8:	1e03      	subs	r3, r0, #0
   b86ba:	dbee      	blt.n	b869a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b86bc:	4618      	mov	r0, r3
   b86be:	e7f1      	b.n	b86a4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b86c0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b86c0:	b530      	push	{r4, r5, lr}
   b86c2:	b087      	sub	sp, #28
   b86c4:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b86c6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b86c8:	4668      	mov	r0, sp
   b86ca:	f7ff fe17 	bl	b82fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b86ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86d0:	3404      	adds	r4, #4
   b86d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86d4:	682b      	ldr	r3, [r5, #0]
   b86d6:	7023      	strb	r3, [r4, #0]
    }
   b86d8:	b007      	add	sp, #28
   b86da:	bd30      	pop	{r4, r5, pc}

000b86dc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b86dc:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b86de:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b86e0:	4b05      	ldr	r3, [pc, #20]	; (b86f8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b86e2:	4604      	mov	r4, r0
   b86e4:	358c      	adds	r5, #140	; 0x8c
   b86e6:	f844 3b04 	str.w	r3, [r4], #4
   b86ea:	4606      	mov	r6, r0
   b86ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b86ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b86f0:	682b      	ldr	r3, [r5, #0]
   b86f2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b86f4:	4630      	mov	r0, r6
   b86f6:	bd70      	pop	{r4, r5, r6, pc}
   b86f8:	000bc948 	.word	0x000bc948

000b86fc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b86fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8700:	4698      	mov	r8, r3
    stop();
   b8702:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8704:	b093      	sub	sp, #76	; 0x4c
   b8706:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8708:	2400      	movs	r4, #0
    stop();
   b870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b870c:	4606      	mov	r6, r0
   b870e:	4617      	mov	r7, r2
    stop();
   b8710:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8712:	4628      	mov	r0, r5
   b8714:	466b      	mov	r3, sp
   b8716:	4622      	mov	r2, r4
   b8718:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b871a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b871c:	f7fe ff52 	bl	b75c4 <netdb_getaddrinfo>
   b8720:	4605      	mov	r5, r0
   b8722:	2800      	cmp	r0, #0
   b8724:	d163      	bne.n	b87ee <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8726:	9b00      	ldr	r3, [sp, #0]
   b8728:	2b00      	cmp	r3, #0
   b872a:	d04b      	beq.n	b87c4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b872c:	695b      	ldr	r3, [r3, #20]
   b872e:	2b00      	cmp	r3, #0
   b8730:	d048      	beq.n	b87c4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8732:	a806      	add	r0, sp, #24
   b8734:	f7ff fd9e 	bl	b8274 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8738:	9b00      	ldr	r3, [sp, #0]
   b873a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b873c:	7863      	ldrb	r3, [r4, #1]
   b873e:	2b02      	cmp	r3, #2
   b8740:	d104      	bne.n	b874c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8742:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8744:	a806      	add	r0, sp, #24
   b8746:	f7ff ffbb 	bl	b86c0 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b874a:	e026      	b.n	b879a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b874c:	2b0a      	cmp	r3, #10
   b874e:	d124      	bne.n	b879a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8750:	2211      	movs	r2, #17
   b8752:	4629      	mov	r1, r5
   b8754:	a801      	add	r0, sp, #4
   b8756:	f001 f840 	bl	b97da <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b875a:	68a3      	ldr	r3, [r4, #8]
   b875c:	2b00      	cmp	r3, #0
   b875e:	d038      	beq.n	b87d2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8760:	f104 0308 	add.w	r3, r4, #8
   b8764:	f10d 0c04 	add.w	ip, sp, #4
   b8768:	3418      	adds	r4, #24
   b876a:	6818      	ldr	r0, [r3, #0]
   b876c:	6859      	ldr	r1, [r3, #4]
   b876e:	4662      	mov	r2, ip
   b8770:	c203      	stmia	r2!, {r0, r1}
   b8772:	3308      	adds	r3, #8
   b8774:	42a3      	cmp	r3, r4
   b8776:	4694      	mov	ip, r2
   b8778:	d1f7      	bne.n	b876a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b877a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b877c:	a901      	add	r1, sp, #4
   b877e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8780:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b8784:	f7ff fd84 	bl	b8290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8788:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b878c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8790:	ac07      	add	r4, sp, #28
   b8792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8794:	f8dc 3000 	ldr.w	r3, [ip]
   b8798:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b879a:	a806      	add	r0, sp, #24
   b879c:	f7ff fd8a 	bl	b82b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b87a0:	b180      	cbz	r0, b87c4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b87a2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b87a4:	ad07      	add	r5, sp, #28
   b87a6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b87aa:	4b12      	ldr	r3, [pc, #72]	; (b87f4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b87ac:	930c      	str	r3, [sp, #48]	; 0x30
   b87ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87b0:	ac0d      	add	r4, sp, #52	; 0x34
   b87b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87b4:	682b      	ldr	r3, [r5, #0]
   b87b6:	7023      	strb	r3, [r4, #0]
   b87b8:	463a      	mov	r2, r7
   b87ba:	4643      	mov	r3, r8
   b87bc:	a90c      	add	r1, sp, #48	; 0x30
   b87be:	4630      	mov	r0, r6
   b87c0:	47c8      	blx	r9
   b87c2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b87c4:	9800      	ldr	r0, [sp, #0]
   b87c6:	f7fe fef5 	bl	b75b4 <netdb_freeaddrinfo>
}
   b87ca:	4628      	mov	r0, r5
   b87cc:	b013      	add	sp, #76	; 0x4c
   b87ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b87d2:	68e3      	ldr	r3, [r4, #12]
   b87d4:	2b00      	cmp	r3, #0
   b87d6:	d1c3      	bne.n	b8760 <_ZN9TCPClient7connectEPKctm+0x64>
   b87d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b87dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b87e0:	f7fe ff88 	bl	b76f4 <inet_htonl>
   b87e4:	4581      	cmp	r9, r0
   b87e6:	d1bb      	bne.n	b8760 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b87e8:	f104 0114 	add.w	r1, r4, #20
   b87ec:	e7aa      	b.n	b8744 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b87ee:	4625      	mov	r5, r4
   b87f0:	e7e8      	b.n	b87c4 <_ZN9TCPClient7connectEPKctm+0xc8>
   b87f2:	bf00      	nop
   b87f4:	000bc948 	.word	0x000bc948

000b87f8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b87f8:	b538      	push	{r3, r4, r5, lr}
   b87fa:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b87fc:	681a      	ldr	r2, [r3, #0]
   b87fe:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b8800:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b8802:	da10      	bge.n	b8826 <_ZN9TCPClient9connectedEv+0x2e>
   b8804:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8808:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b880c:	429a      	cmp	r2, r3
   b880e:	d10a      	bne.n	b8826 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b8810:	6803      	ldr	r3, [r0, #0]
   b8812:	691b      	ldr	r3, [r3, #16]
   b8814:	4798      	blx	r3
        if (!rv) {
   b8816:	4604      	mov	r4, r0
   b8818:	b928      	cbnz	r0, b8826 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b881a:	682b      	ldr	r3, [r5, #0]
   b881c:	4628      	mov	r0, r5
   b881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8820:	4798      	blx	r3
        rv = available();
   b8822:	4620      	mov	r0, r4
}
   b8824:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8826:	2001      	movs	r0, #1
   b8828:	e7fc      	b.n	b8824 <_ZN9TCPClient9connectedEv+0x2c>

000b882a <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b882a:	b510      	push	{r4, lr}
   b882c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b882e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8832:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8836:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8838:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b883a:	d005      	beq.n	b8848 <_ZN9TCPClient4peekEv+0x1e>
   b883c:	6963      	ldr	r3, [r4, #20]
   b883e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8842:	4413      	add	r3, r2
   b8844:	7918      	ldrb	r0, [r3, #4]
}
   b8846:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8848:	6803      	ldr	r3, [r0, #0]
   b884a:	691b      	ldr	r3, [r3, #16]
   b884c:	4798      	blx	r3
   b884e:	2800      	cmp	r0, #0
   b8850:	d1f4      	bne.n	b883c <_ZN9TCPClient4peekEv+0x12>
   b8852:	f04f 30ff 	mov.w	r0, #4294967295
   b8856:	e7f6      	b.n	b8846 <_ZN9TCPClient4peekEv+0x1c>

000b8858 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b885a:	6943      	ldr	r3, [r0, #20]
   b885c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b885e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8862:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8866:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b8868:	4605      	mov	r5, r0
   b886a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b886c:	d016      	beq.n	b889c <_ZN9TCPClient4readEPhj+0x44>
   b886e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b8870:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b8874:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b8878:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b887a:	42bc      	cmp	r4, r7
   b887c:	bf28      	it	cs
   b887e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b8880:	3304      	adds	r3, #4
   b8882:	4622      	mov	r2, r4
   b8884:	4419      	add	r1, r3
   b8886:	4630      	mov	r0, r6
   b8888:	f000 ff7f 	bl	b978a <memcpy>
   b888c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b888e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b8892:	4423      	add	r3, r4
   b8894:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b8898:	4620      	mov	r0, r4
   b889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b889c:	6803      	ldr	r3, [r0, #0]
   b889e:	691b      	ldr	r3, [r3, #16]
   b88a0:	4798      	blx	r3
   b88a2:	2800      	cmp	r0, #0
   b88a4:	d1e3      	bne.n	b886e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b88a6:	f04f 34ff 	mov.w	r4, #4294967295
   b88aa:	e7f5      	b.n	b8898 <_ZN9TCPClient4readEPhj+0x40>

000b88ac <_ZN9TCPClient12flush_bufferEv>:
   b88ac:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b88ae:	2300      	movs	r3, #0
   b88b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b88b4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b88b6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b88ba:	4770      	bx	lr

000b88bc <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88c0:	461f      	mov	r7, r3
    stop();
   b88c2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88c4:	460c      	mov	r4, r1
    stop();
   b88c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b88c8:	b08a      	sub	sp, #40	; 0x28
   b88ca:	4605      	mov	r5, r0
   b88cc:	4616      	mov	r6, r2
    stop();
   b88ce:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b88d0:	7d23      	ldrb	r3, [r4, #20]
   b88d2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b88d6:	2b04      	cmp	r3, #4
   b88d8:	bf0c      	ite	eq
   b88da:	2002      	moveq	r0, #2
   b88dc:	200a      	movne	r0, #10
   b88de:	2206      	movs	r2, #6
   b88e0:	2101      	movs	r1, #1
   b88e2:	f7fe ffdf 	bl	b78a4 <sock_socket>
   b88e6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b88ea:	696b      	ldr	r3, [r5, #20]
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	2b00      	cmp	r3, #0
   b88f0:	da08      	bge.n	b8904 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b88f2:	682b      	ldr	r3, [r5, #0]
   b88f4:	4628      	mov	r0, r5
   b88f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b88f8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b88fa:	4798      	blx	r3
}
   b88fc:	4620      	mov	r0, r4
   b88fe:	b00a      	add	sp, #40	; 0x28
   b8900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8904:	4628      	mov	r0, r5
   b8906:	f7ff ffd1 	bl	b88ac <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b890a:	b1b7      	cbz	r7, b893a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b890c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b890e:	a903      	add	r1, sp, #12
   b8910:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8912:	9303      	str	r3, [sp, #12]
   b8914:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8918:	f7fe fe9c 	bl	b7654 <if_index_to_name>
   b891c:	2800      	cmp	r0, #0
   b891e:	d1e8      	bne.n	b88f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8920:	6968      	ldr	r0, [r5, #20]
   b8922:	2306      	movs	r3, #6
   b8924:	9300      	str	r3, [sp, #0]
   b8926:	6800      	ldr	r0, [r0, #0]
   b8928:	ab03      	add	r3, sp, #12
   b892a:	f241 020b 	movw	r2, #4107	; 0x100b
   b892e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8932:	f7fe ff8f 	bl	b7854 <sock_setsockopt>
   b8936:	2800      	cmp	r0, #0
   b8938:	d1db      	bne.n	b88f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b893a:	221c      	movs	r2, #28
   b893c:	2100      	movs	r1, #0
   b893e:	a803      	add	r0, sp, #12
   b8940:	f000 ff4b 	bl	b97da <memset>
    if (ip.version() == 4) {
   b8944:	7d23      	ldrb	r3, [r4, #20]
   b8946:	2b04      	cmp	r3, #4
   b8948:	d11d      	bne.n	b8986 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b894a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b894e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8950:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8954:	f7fe fede 	bl	b7714 <inet_htons>
   b8958:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b895c:	6860      	ldr	r0, [r4, #4]
   b895e:	f7fe fec9 	bl	b76f4 <inet_htonl>
   b8962:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8964:	696b      	ldr	r3, [r5, #20]
   b8966:	221c      	movs	r2, #28
   b8968:	6818      	ldr	r0, [r3, #0]
   b896a:	a903      	add	r1, sp, #12
   b896c:	f7fe ff82 	bl	b7874 <sock_connect>
   b8970:	2800      	cmp	r0, #0
   b8972:	d1be      	bne.n	b88f2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8974:	3404      	adds	r4, #4
   b8976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8978:	696d      	ldr	r5, [r5, #20]
   b897a:	358c      	adds	r5, #140	; 0x8c
   b897c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b897e:	6823      	ldr	r3, [r4, #0]
   b8980:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8982:	2401      	movs	r4, #1
   b8984:	e7ba      	b.n	b88fc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8986:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b898a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b898c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8990:	f7fe fec0 	bl	b7714 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8994:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8996:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b899a:	1d23      	adds	r3, r4, #4
   b899c:	f104 0714 	add.w	r7, r4, #20
   b89a0:	6818      	ldr	r0, [r3, #0]
   b89a2:	6859      	ldr	r1, [r3, #4]
   b89a4:	4632      	mov	r2, r6
   b89a6:	c203      	stmia	r2!, {r0, r1}
   b89a8:	3308      	adds	r3, #8
   b89aa:	42bb      	cmp	r3, r7
   b89ac:	4616      	mov	r6, r2
   b89ae:	d1f7      	bne.n	b89a0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b89b0:	e7d8      	b.n	b8964 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b89b4 <_ZN9TCPClient9availableEv>:
{
   b89b4:	b530      	push	{r4, r5, lr}
   b89b6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b89b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b89bc:	b08b      	sub	sp, #44	; 0x2c
   b89be:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b89c0:	b12b      	cbz	r3, b89ce <_ZN9TCPClient9availableEv+0x1a>
   b89c2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b89c6:	429a      	cmp	r2, r3
   b89c8:	d101      	bne.n	b89ce <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b89ca:	f7ff ff6f 	bl	b88ac <_ZN9TCPClient12flush_bufferEv>
   b89ce:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b89d0:	6808      	ldr	r0, [r1, #0]
   b89d2:	2800      	cmp	r0, #0
   b89d4:	db18      	blt.n	b8a08 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b89d6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b89da:	2d7f      	cmp	r5, #127	; 0x7f
   b89dc:	d814      	bhi.n	b8a08 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b89de:	3104      	adds	r1, #4
   b89e0:	2308      	movs	r3, #8
   b89e2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b89e6:	4429      	add	r1, r5
   b89e8:	f7fe ff4c 	bl	b7884 <sock_recv>
            if (ret > 0) {
   b89ec:	2800      	cmp	r0, #0
   b89ee:	dd13      	ble.n	b8a18 <_ZN9TCPClient9availableEv+0x64>
   b89f0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b89f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b89f6:	b90a      	cbnz	r2, b89fc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b89f8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b89fc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b89fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8a02:	4410      	add	r0, r2
   b8a04:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8a08:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8a0a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8a0e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8a12:	1ac0      	subs	r0, r0, r3
   b8a14:	b00b      	add	sp, #44	; 0x2c
   b8a16:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8a18:	f7ff f8b0 	bl	b7b7c <__errno>
   b8a1c:	6803      	ldr	r3, [r0, #0]
   b8a1e:	2b0b      	cmp	r3, #11
   b8a20:	d0f2      	beq.n	b8a08 <_ZN9TCPClient9availableEv+0x54>
   b8a22:	f7ff f8ab 	bl	b7b7c <__errno>
   b8a26:	6803      	ldr	r3, [r0, #0]
   b8a28:	2b0b      	cmp	r3, #11
   b8a2a:	d0ed      	beq.n	b8a08 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8a2c:	2320      	movs	r3, #32
   b8a2e:	2500      	movs	r5, #0
   b8a30:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8a34:	f7ff f8a2 	bl	b7b7c <__errno>
   b8a38:	6803      	ldr	r3, [r0, #0]
   b8a3a:	9301      	str	r3, [sp, #4]
   b8a3c:	4b08      	ldr	r3, [pc, #32]	; (b8a60 <_ZN9TCPClient9availableEv+0xac>)
   b8a3e:	4909      	ldr	r1, [pc, #36]	; (b8a64 <_ZN9TCPClient9availableEv+0xb0>)
   b8a40:	9300      	str	r3, [sp, #0]
   b8a42:	aa02      	add	r2, sp, #8
   b8a44:	462b      	mov	r3, r5
   b8a46:	2032      	movs	r0, #50	; 0x32
   b8a48:	f7fe ffb4 	bl	b79b4 <log_message>
                    sock_close(d_->sock);
   b8a4c:	6963      	ldr	r3, [r4, #20]
   b8a4e:	6818      	ldr	r0, [r3, #0]
   b8a50:	f7fe ff08 	bl	b7864 <sock_close>
   b8a54:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8a56:	f04f 32ff 	mov.w	r2, #4294967295
   b8a5a:	601a      	str	r2, [r3, #0]
   b8a5c:	e7d4      	b.n	b8a08 <_ZN9TCPClient9availableEv+0x54>
   b8a5e:	bf00      	nop
   b8a60:	000bc9e3 	.word	0x000bc9e3
   b8a64:	000bc9dc 	.word	0x000bc9dc

000b8a68 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8a68:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b8a6a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8a6c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8a6e:	6818      	ldr	r0, [r3, #0]
   b8a70:	2800      	cmp	r0, #0
   b8a72:	db01      	blt.n	b8a78 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8a74:	f7fe fef6 	bl	b7864 <sock_close>
   b8a78:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b8a7a:	f04f 32ff 	mov.w	r2, #4294967295
   b8a7e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8a80:	6960      	ldr	r0, [r4, #20]
   b8a82:	2211      	movs	r2, #17
   b8a84:	2100      	movs	r1, #0
   b8a86:	308c      	adds	r0, #140	; 0x8c
   b8a88:	f000 fea7 	bl	b97da <memset>
    flush_buffer();
   b8a8c:	4620      	mov	r0, r4
}
   b8a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8a92:	f7ff bf0b 	b.w	b88ac <_ZN9TCPClient12flush_bufferEv>

000b8a96 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8a96:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8a98:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b8a9a:	4604      	mov	r4, r0
          total(0) {
   b8a9c:	6001      	str	r1, [r0, #0]
   b8a9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8aa2:	3088      	adds	r0, #136	; 0x88
   b8aa4:	f7ff fbe6 	bl	b8274 <_ZN9IPAddressC1Ev>
}
   b8aa8:	4620      	mov	r0, r4
   b8aaa:	bd10      	pop	{r4, pc}

000b8aac <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8aae:	2300      	movs	r3, #0
   b8ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8ab4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8ab8:	4a0e      	ldr	r2, [pc, #56]	; (b8af4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8aba:	6103      	str	r3, [r0, #16]
   b8abc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8abe:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8ac0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8ac2:	20ac      	movs	r0, #172	; 0xac
   b8ac4:	9101      	str	r1, [sp, #4]
   b8ac6:	f7fc f848 	bl	b4b5a <_Znwj>
	  auto __pi = ::new (__mem)
   b8aca:	1e05      	subs	r5, r0, #0
   b8acc:	f105 060c 	add.w	r6, r5, #12
   b8ad0:	d008      	beq.n	b8ae4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8ad2:	2301      	movs	r3, #1
   b8ad4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8ad8:	4b07      	ldr	r3, [pc, #28]	; (b8af8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8ada:	9901      	ldr	r1, [sp, #4]
   b8adc:	602b      	str	r3, [r5, #0]
   b8ade:	4630      	mov	r0, r6
   b8ae0:	f7ff ffd9 	bl	b8a96 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8ae4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8ae6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8aea:	f7ff fedf 	bl	b88ac <_ZN9TCPClient12flush_bufferEv>
}
   b8aee:	b002      	add	sp, #8
   b8af0:	bd70      	pop	{r4, r5, r6, pc}
   b8af2:	bf00      	nop
   b8af4:	000bca18 	.word	0x000bca18
   b8af8:	000bc9fc 	.word	0x000bc9fc

000b8afc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8afc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8afe:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b8b02:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8b04:	f7ff ffd2 	bl	b8aac <_ZN9TCPClientC1Ei>
}
   b8b08:	4620      	mov	r0, r4
   b8b0a:	bd10      	pop	{r4, pc}

000b8b0c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8b0c:	b510      	push	{r4, lr}
   b8b0e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8b10:	6800      	ldr	r0, [r0, #0]
   b8b12:	2800      	cmp	r0, #0
   b8b14:	db01      	blt.n	b8b1a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8b16:	f7fe fea5 	bl	b7864 <sock_close>
    }
}
   b8b1a:	4620      	mov	r0, r4
   b8b1c:	bd10      	pop	{r4, pc}

000b8b1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8b1e:	300c      	adds	r0, #12
   b8b20:	f7ff bff4 	b.w	b8b0c <_ZN9TCPClient4DataD1Ev>

000b8b24 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8b24:	2200      	movs	r2, #0
   b8b26:	6840      	ldr	r0, [r0, #4]
   b8b28:	4611      	mov	r1, r2
   b8b2a:	f7fe bf8f 	b.w	b7a4c <network_ready>

000b8b2e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8b2e:	2200      	movs	r2, #0
   b8b30:	6840      	ldr	r0, [r0, #4]
   b8b32:	4611      	mov	r1, r2
   b8b34:	f7fe bfaa 	b.w	b7a8c <network_listening>

000b8b38 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8b38:	2200      	movs	r2, #0
   b8b3a:	6840      	ldr	r0, [r0, #4]
   b8b3c:	4611      	mov	r1, r2
   b8b3e:	f7fe bfb5 	b.w	b7aac <network_get_listen_timeout>

000b8b42 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8b42:	6840      	ldr	r0, [r0, #4]
   b8b44:	2200      	movs	r2, #0
   b8b46:	f7fe bfa9 	b.w	b7a9c <network_set_listen_timeout>

000b8b4a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8b4a:	6840      	ldr	r0, [r0, #4]
   b8b4c:	2200      	movs	r2, #0
   b8b4e:	f081 0101 	eor.w	r1, r1, #1
   b8b52:	f7fe bf93 	b.w	b7a7c <network_listen>

000b8b56 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8b56:	2300      	movs	r3, #0
   b8b58:	6840      	ldr	r0, [r0, #4]
   b8b5a:	461a      	mov	r2, r3
   b8b5c:	4619      	mov	r1, r3
   b8b5e:	f7fe bf85 	b.w	b7a6c <network_off>

000b8b62 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8b62:	2300      	movs	r3, #0
   b8b64:	6840      	ldr	r0, [r0, #4]
   b8b66:	461a      	mov	r2, r3
   b8b68:	4619      	mov	r1, r3
   b8b6a:	f7fe bf77 	b.w	b7a5c <network_on>

000b8b6e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8b6e:	2200      	movs	r2, #0
   b8b70:	6840      	ldr	r0, [r0, #4]
   b8b72:	4611      	mov	r1, r2
   b8b74:	f7fe bf5a 	b.w	b7a2c <network_connecting>

000b8b78 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8b78:	6840      	ldr	r0, [r0, #4]
   b8b7a:	2200      	movs	r2, #0
   b8b7c:	2102      	movs	r1, #2
   b8b7e:	f7fe bf5d 	b.w	b7a3c <network_disconnect>

000b8b82 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8b82:	2300      	movs	r3, #0
   b8b84:	6840      	ldr	r0, [r0, #4]
   b8b86:	461a      	mov	r2, r3
   b8b88:	f7fe bf48 	b.w	b7a1c <network_connect>

000b8b8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8b8c:	4b02      	ldr	r3, [pc, #8]	; (b8b98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b8b8e:	2204      	movs	r2, #4
   b8b90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8b92:	4a02      	ldr	r2, [pc, #8]	; (b8b9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8b94:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8b96:	4770      	bx	lr
   b8b98:	2003e718 	.word	0x2003e718
   b8b9c:	000bca64 	.word	0x000bca64

000b8ba0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8ba0:	2300      	movs	r3, #0
   b8ba2:	6840      	ldr	r0, [r0, #4]
   b8ba4:	461a      	mov	r2, r3
   b8ba6:	f7fe bf39 	b.w	b7a1c <network_connect>

000b8baa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b8baa:	6840      	ldr	r0, [r0, #4]
   b8bac:	2200      	movs	r2, #0
   b8bae:	2102      	movs	r1, #2
   b8bb0:	f7fe bf44 	b.w	b7a3c <network_disconnect>

000b8bb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8bb4:	2200      	movs	r2, #0
   b8bb6:	6840      	ldr	r0, [r0, #4]
   b8bb8:	4611      	mov	r1, r2
   b8bba:	f7fe bf37 	b.w	b7a2c <network_connecting>

000b8bbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8bbe:	2200      	movs	r2, #0
   b8bc0:	6840      	ldr	r0, [r0, #4]
   b8bc2:	4611      	mov	r1, r2
   b8bc4:	f7fe bf42 	b.w	b7a4c <network_ready>

000b8bc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8bc8:	2300      	movs	r3, #0
   b8bca:	6840      	ldr	r0, [r0, #4]
   b8bcc:	461a      	mov	r2, r3
   b8bce:	4619      	mov	r1, r3
   b8bd0:	f7fe bf44 	b.w	b7a5c <network_on>

000b8bd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8bd4:	2300      	movs	r3, #0
   b8bd6:	6840      	ldr	r0, [r0, #4]
   b8bd8:	461a      	mov	r2, r3
   b8bda:	4619      	mov	r1, r3
   b8bdc:	f7fe bf46 	b.w	b7a6c <network_off>

000b8be0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8be0:	6840      	ldr	r0, [r0, #4]
   b8be2:	2100      	movs	r1, #0
   b8be4:	f7fe bf6a 	b.w	b7abc <network_is_on>

000b8be8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8be8:	6840      	ldr	r0, [r0, #4]
   b8bea:	2100      	movs	r1, #0
   b8bec:	f7fe bf6e 	b.w	b7acc <network_is_off>

000b8bf0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8bf0:	6840      	ldr	r0, [r0, #4]
   b8bf2:	2200      	movs	r2, #0
   b8bf4:	f081 0101 	eor.w	r1, r1, #1
   b8bf8:	f7fe bf40 	b.w	b7a7c <network_listen>

000b8bfc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8bfc:	6840      	ldr	r0, [r0, #4]
   b8bfe:	2200      	movs	r2, #0
   b8c00:	f7fe bf4c 	b.w	b7a9c <network_set_listen_timeout>

000b8c04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8c04:	2200      	movs	r2, #0
   b8c06:	6840      	ldr	r0, [r0, #4]
   b8c08:	4611      	mov	r1, r2
   b8c0a:	f7fe bf4f 	b.w	b7aac <network_get_listen_timeout>

000b8c0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8c0e:	2200      	movs	r2, #0
   b8c10:	6840      	ldr	r0, [r0, #4]
   b8c12:	4611      	mov	r1, r2
   b8c14:	f7fe bf3a 	b.w	b7a8c <network_listening>

000b8c18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8c1c:	b095      	sub	sp, #84	; 0x54
   b8c1e:	4614      	mov	r4, r2
   b8c20:	460d      	mov	r5, r1
   b8c22:	4607      	mov	r7, r0
    IPAddress addr;
   b8c24:	f7ff fb26 	bl	b8274 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8c28:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8c2a:	221c      	movs	r2, #28
   b8c2c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8c2e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8c30:	f000 fdd3 	bl	b97da <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8c34:	2340      	movs	r3, #64	; 0x40
   b8c36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8c38:	4620      	mov	r0, r4
   b8c3a:	466b      	mov	r3, sp
   b8c3c:	aa0c      	add	r2, sp, #48	; 0x30
   b8c3e:	2100      	movs	r1, #0
   b8c40:	f7fe fcc0 	bl	b75c4 <netdb_getaddrinfo>
    if (!r) {
   b8c44:	4604      	mov	r4, r0
   b8c46:	2800      	cmp	r0, #0
   b8c48:	d14b      	bne.n	b8ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8c4a:	4602      	mov	r2, r0
   b8c4c:	2101      	movs	r1, #1
   b8c4e:	6868      	ldr	r0, [r5, #4]
   b8c50:	f7fe fefc 	bl	b7a4c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8c54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8c56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8c58:	4622      	mov	r2, r4
   b8c5a:	6868      	ldr	r0, [r5, #4]
   b8c5c:	f7fe fef6 	bl	b7a4c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8c60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8c62:	4681      	mov	r9, r0
        bool ok = false;
   b8c64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8c66:	2e00      	cmp	r6, #0
   b8c68:	d03b      	beq.n	b8ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8c6a:	2900      	cmp	r1, #0
   b8c6c:	d139      	bne.n	b8ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8c6e:	6873      	ldr	r3, [r6, #4]
   b8c70:	2b02      	cmp	r3, #2
   b8c72:	d003      	beq.n	b8c7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8c74:	2b0a      	cmp	r3, #10
   b8c76:	d011      	beq.n	b8c9c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8c78:	69f6      	ldr	r6, [r6, #28]
   b8c7a:	e7f4      	b.n	b8c66 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8c7c:	f1b8 0f00 	cmp.w	r8, #0
   b8c80:	d0fa      	beq.n	b8c78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8c82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8c84:	a806      	add	r0, sp, #24
   b8c86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b8c88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b8c8a:	f7ff fb37 	bl	b82fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8c90:	1d3c      	adds	r4, r7, #4
   b8c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c94:	682b      	ldr	r3, [r5, #0]
   b8c96:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8c98:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b8c9a:	e7ed      	b.n	b8c78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8c9c:	f1b9 0f00 	cmp.w	r9, #0
   b8ca0:	d0ea      	beq.n	b8c78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8ca2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8ca4:	2210      	movs	r2, #16
   b8ca6:	a801      	add	r0, sp, #4
   b8ca8:	f000 fd97 	bl	b97da <memset>
                    a.v = 6;
   b8cac:	2306      	movs	r3, #6
   b8cae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8cb2:	ad01      	add	r5, sp, #4
   b8cb4:	f104 0308 	add.w	r3, r4, #8
   b8cb8:	3418      	adds	r4, #24
   b8cba:	6818      	ldr	r0, [r3, #0]
   b8cbc:	6859      	ldr	r1, [r3, #4]
   b8cbe:	462a      	mov	r2, r5
   b8cc0:	c203      	stmia	r2!, {r0, r1}
   b8cc2:	3308      	adds	r3, #8
   b8cc4:	42a3      	cmp	r3, r4
   b8cc6:	4615      	mov	r5, r2
   b8cc8:	d1f7      	bne.n	b8cba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8cca:	a901      	add	r1, sp, #4
   b8ccc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8cce:	ad07      	add	r5, sp, #28
   b8cd0:	f7ff fade 	bl	b8290 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8cd6:	1d3c      	adds	r4, r7, #4
   b8cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8cda:	682b      	ldr	r3, [r5, #0]
   b8cdc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8cde:	4649      	mov	r1, r9
   b8ce0:	e7ca      	b.n	b8c78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8ce2:	9800      	ldr	r0, [sp, #0]
   b8ce4:	f7fe fc66 	bl	b75b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8ce8:	4638      	mov	r0, r7
   b8cea:	b015      	add	sp, #84	; 0x54
   b8cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8cf0:	4b02      	ldr	r3, [pc, #8]	; (b8cfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8cf2:	4a03      	ldr	r2, [pc, #12]	; (b8d00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8cf4:	601a      	str	r2, [r3, #0]
   b8cf6:	2200      	movs	r2, #0
   b8cf8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b8cfa:	4770      	bx	lr
   b8cfc:	2003e720 	.word	0x2003e720
   b8d00:	000bcaa0 	.word	0x000bcaa0

000b8d04 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8d04:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8d06:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8d08:	d902      	bls.n	b8d10 <pinAvailable+0xc>
    return false;
   b8d0a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8d0c:	b002      	add	sp, #8
   b8d0e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8d10:	f1a0 030b 	sub.w	r3, r0, #11
   b8d14:	2b02      	cmp	r3, #2
   b8d16:	d81a      	bhi.n	b8d4e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8d18:	4c17      	ldr	r4, [pc, #92]	; (b8d78 <pinAvailable+0x74>)
   b8d1a:	7821      	ldrb	r1, [r4, #0]
   b8d1c:	f3bf 8f5b 	dmb	ish
   b8d20:	f011 0101 	ands.w	r1, r1, #1
   b8d24:	d10b      	bne.n	b8d3e <pinAvailable+0x3a>
   b8d26:	4620      	mov	r0, r4
   b8d28:	9101      	str	r1, [sp, #4]
   b8d2a:	f7fb ff2d 	bl	b4b88 <__cxa_guard_acquire>
   b8d2e:	9901      	ldr	r1, [sp, #4]
   b8d30:	b128      	cbz	r0, b8d3e <pinAvailable+0x3a>
   b8d32:	4812      	ldr	r0, [pc, #72]	; (b8d7c <pinAvailable+0x78>)
   b8d34:	f7fe ff7e 	bl	b7c34 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8d38:	4620      	mov	r0, r4
   b8d3a:	f7fb ff2a 	bl	b4b92 <__cxa_guard_release>
   b8d3e:	4b0f      	ldr	r3, [pc, #60]	; (b8d7c <pinAvailable+0x78>)
   b8d40:	7818      	ldrb	r0, [r3, #0]
   b8d42:	f7fe fdcf 	bl	b78e4 <hal_spi_is_enabled>
   b8d46:	2800      	cmp	r0, #0
   b8d48:	d1df      	bne.n	b8d0a <pinAvailable+0x6>
  return true; // 'pin' is available
   b8d4a:	2001      	movs	r0, #1
   b8d4c:	e7de      	b.n	b8d0c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8d4e:	2801      	cmp	r0, #1
   b8d50:	d809      	bhi.n	b8d66 <pinAvailable+0x62>
   b8d52:	f000 f8eb 	bl	b8f2c <_Z19__fetch_global_Wirev>
   b8d56:	2100      	movs	r1, #0
   b8d58:	7c00      	ldrb	r0, [r0, #16]
   b8d5a:	f7fe fd6b 	bl	b7834 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8d5e:	f080 0001 	eor.w	r0, r0, #1
   b8d62:	b2c0      	uxtb	r0, r0
   b8d64:	e7d2      	b.n	b8d0c <pinAvailable+0x8>
   b8d66:	3809      	subs	r0, #9
   b8d68:	2801      	cmp	r0, #1
   b8d6a:	d8ee      	bhi.n	b8d4a <pinAvailable+0x46>
   b8d6c:	f000 f89e 	bl	b8eac <_Z22__fetch_global_Serial1v>
   b8d70:	7c00      	ldrb	r0, [r0, #16]
   b8d72:	f7fe fcff 	bl	b7774 <hal_usart_is_enabled>
   b8d76:	e7f2      	b.n	b8d5e <pinAvailable+0x5a>
   b8d78:	2003e6b8 	.word	0x2003e6b8
   b8d7c:	2003e6bc 	.word	0x2003e6bc

000b8d80 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d80:	2823      	cmp	r0, #35	; 0x23
{
   b8d82:	b538      	push	{r3, r4, r5, lr}
   b8d84:	4604      	mov	r4, r0
   b8d86:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8d88:	d80a      	bhi.n	b8da0 <pinMode+0x20>
   b8d8a:	29ff      	cmp	r1, #255	; 0xff
   b8d8c:	d008      	beq.n	b8da0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8d8e:	f7ff ffb9 	bl	b8d04 <pinAvailable>
   b8d92:	b128      	cbz	r0, b8da0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8d94:	4629      	mov	r1, r5
   b8d96:	4620      	mov	r0, r4
}
   b8d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8d9c:	f7fe bc22 	b.w	b75e4 <hal_gpio_mode>
}
   b8da0:	bd38      	pop	{r3, r4, r5, pc}

000b8da2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b8da2:	b538      	push	{r3, r4, r5, lr}
   b8da4:	4604      	mov	r4, r0
   b8da6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8da8:	f7fe fc24 	bl	b75f4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8dac:	28ff      	cmp	r0, #255	; 0xff
   b8dae:	d010      	beq.n	b8dd2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8db0:	2806      	cmp	r0, #6
   b8db2:	d804      	bhi.n	b8dbe <digitalWrite+0x1c>
   b8db4:	234d      	movs	r3, #77	; 0x4d
   b8db6:	fa23 f000 	lsr.w	r0, r3, r0
   b8dba:	07c3      	lsls	r3, r0, #31
   b8dbc:	d409      	bmi.n	b8dd2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8dbe:	4620      	mov	r0, r4
   b8dc0:	f7ff ffa0 	bl	b8d04 <pinAvailable>
   b8dc4:	b128      	cbz	r0, b8dd2 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8dc6:	4629      	mov	r1, r5
   b8dc8:	4620      	mov	r0, r4
}
   b8dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8dce:	f7fe bc19 	b.w	b7604 <hal_gpio_write>
}
   b8dd2:	bd38      	pop	{r3, r4, r5, pc}

000b8dd4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8dd4:	b510      	push	{r4, lr}
   b8dd6:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8dd8:	f7fe fc0c 	bl	b75f4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8ddc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8dde:	b2db      	uxtb	r3, r3
   b8de0:	2b01      	cmp	r3, #1
   b8de2:	d908      	bls.n	b8df6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8de4:	4620      	mov	r0, r4
   b8de6:	f7ff ff8d 	bl	b8d04 <pinAvailable>
   b8dea:	b120      	cbz	r0, b8df6 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8dec:	4620      	mov	r0, r4
}
   b8dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b8df2:	f7fe bc0f 	b.w	b7614 <hal_gpio_read>
}
   b8df6:	2000      	movs	r0, #0
   b8df8:	bd10      	pop	{r4, pc}

000b8dfa <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8dfa:	280d      	cmp	r0, #13
{
   b8dfc:	b510      	push	{r4, lr}
   b8dfe:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b8e00:	bf9c      	itt	ls
   b8e02:	340e      	addls	r4, #14
   b8e04:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b8e06:	4620      	mov	r0, r4
   b8e08:	f7ff ff7c 	bl	b8d04 <pinAvailable>
   b8e0c:	b150      	cbz	r0, b8e24 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b8e0e:	2103      	movs	r1, #3
   b8e10:	4620      	mov	r0, r4
   b8e12:	f7fe fbdf 	bl	b75d4 <hal_pin_validate_function>
   b8e16:	2803      	cmp	r0, #3
   b8e18:	d104      	bne.n	b8e24 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8e1a:	4620      	mov	r0, r4
}
   b8e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b8e20:	f7fe bc08 	b.w	b7634 <hal_adc_read>
}
   b8e24:	2000      	movs	r0, #0
   b8e26:	bd10      	pop	{r4, pc}

000b8e28 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b8e28:	b538      	push	{r3, r4, r5, lr}
   b8e2a:	4604      	mov	r4, r0
   b8e2c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b8e2e:	f7ff ff69 	bl	b8d04 <pinAvailable>
   b8e32:	b1f0      	cbz	r0, b8e72 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b8e34:	2104      	movs	r1, #4
   b8e36:	4620      	mov	r0, r4
   b8e38:	f7fe fbcc 	bl	b75d4 <hal_pin_validate_function>
   b8e3c:	2804      	cmp	r0, #4
   b8e3e:	d105      	bne.n	b8e4c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b8e40:	b2a9      	uxth	r1, r5
   b8e42:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8e48:	f7fe bbec 	b.w	b7624 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b8e4c:	2102      	movs	r1, #2
   b8e4e:	4620      	mov	r0, r4
   b8e50:	f7fe fbc0 	bl	b75d4 <hal_pin_validate_function>
   b8e54:	2802      	cmp	r0, #2
   b8e56:	d10c      	bne.n	b8e72 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b8e58:	4620      	mov	r0, r4
   b8e5a:	f7fe fbcb 	bl	b75f4 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b8e5e:	2801      	cmp	r0, #1
   b8e60:	d001      	beq.n	b8e66 <_Z11analogWritetm+0x3e>
   b8e62:	2804      	cmp	r0, #4
   b8e64:	d105      	bne.n	b8e72 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8e66:	4629      	mov	r1, r5
   b8e68:	4620      	mov	r0, r4
}
   b8e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b8e6e:	f7fe bbe9 	b.w	b7644 <hal_pwm_write_ext>
}
   b8e72:	bd38      	pop	{r3, r4, r5, pc}

000b8e74 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8e74:	4770      	bx	lr
	...

000b8e78 <_Z20acquireSerial1Bufferv>:
{
   b8e78:	b538      	push	{r3, r4, r5, lr}
   b8e7a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8e7c:	2514      	movs	r5, #20
   b8e7e:	462a      	mov	r2, r5
   b8e80:	2100      	movs	r1, #0
   b8e82:	f000 fcaa 	bl	b97da <memset>
   b8e86:	8025      	strh	r5, [r4, #0]
   b8e88:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e8a:	4907      	ldr	r1, [pc, #28]	; (b8ea8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8e8c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e8e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8e90:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e92:	f000 f86f 	bl	b8f74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e96:	4904      	ldr	r1, [pc, #16]	; (b8ea8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8e98:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e9a:	4628      	mov	r0, r5
   b8e9c:	f000 f86a 	bl	b8f74 <_ZnajRKSt9nothrow_t>
    };
   b8ea0:	60e0      	str	r0, [r4, #12]
}
   b8ea2:	4620      	mov	r0, r4
   b8ea4:	bd38      	pop	{r3, r4, r5, pc}
   b8ea6:	bf00      	nop
   b8ea8:	000bcad4 	.word	0x000bcad4

000b8eac <_Z22__fetch_global_Serial1v>:
{
   b8eac:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8eae:	4d0e      	ldr	r5, [pc, #56]	; (b8ee8 <_Z22__fetch_global_Serial1v+0x3c>)
   b8eb0:	7829      	ldrb	r1, [r5, #0]
   b8eb2:	f3bf 8f5b 	dmb	ish
   b8eb6:	f011 0401 	ands.w	r4, r1, #1
{
   b8eba:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8ebc:	d111      	bne.n	b8ee2 <_Z22__fetch_global_Serial1v+0x36>
   b8ebe:	4628      	mov	r0, r5
   b8ec0:	f7fb fe62 	bl	b4b88 <__cxa_guard_acquire>
   b8ec4:	b168      	cbz	r0, b8ee2 <_Z22__fetch_global_Serial1v+0x36>
   b8ec6:	a801      	add	r0, sp, #4
   b8ec8:	f7ff ffd6 	bl	b8e78 <_Z20acquireSerial1Bufferv>
   b8ecc:	aa01      	add	r2, sp, #4
   b8ece:	4621      	mov	r1, r4
   b8ed0:	4806      	ldr	r0, [pc, #24]	; (b8eec <_Z22__fetch_global_Serial1v+0x40>)
   b8ed2:	f7ff fae5 	bl	b84a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8ed6:	4628      	mov	r0, r5
   b8ed8:	f7fb fe5b 	bl	b4b92 <__cxa_guard_release>
   b8edc:	4804      	ldr	r0, [pc, #16]	; (b8ef0 <_Z22__fetch_global_Serial1v+0x44>)
   b8ede:	f000 fc33 	bl	b9748 <atexit>
    return serial1;
}
   b8ee2:	4802      	ldr	r0, [pc, #8]	; (b8eec <_Z22__fetch_global_Serial1v+0x40>)
   b8ee4:	b007      	add	sp, #28
   b8ee6:	bd30      	pop	{r4, r5, pc}
   b8ee8:	2003e728 	.word	0x2003e728
   b8eec:	2003e72c 	.word	0x2003e72c
   b8ef0:	000b8e75 	.word	0x000b8e75

000b8ef4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8ef4:	4770      	bx	lr
	...

000b8ef8 <_Z17acquireWireBufferv>:
{
   b8ef8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8efa:	4b0a      	ldr	r3, [pc, #40]	; (b8f24 <_Z17acquireWireBufferv+0x2c>)
   b8efc:	6003      	str	r3, [r0, #0]
   b8efe:	2301      	movs	r3, #1
{
   b8f00:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8f02:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8f04:	4908      	ldr	r1, [pc, #32]	; (b8f28 <_Z17acquireWireBufferv+0x30>)
   b8f06:	2020      	movs	r0, #32
   b8f08:	f000 f834 	bl	b8f74 <_ZnajRKSt9nothrow_t>
	};
   b8f0c:	2520      	movs	r5, #32
   b8f0e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8f10:	4905      	ldr	r1, [pc, #20]	; (b8f28 <_Z17acquireWireBufferv+0x30>)
	};
   b8f12:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8f14:	4628      	mov	r0, r5
   b8f16:	f000 f82d 	bl	b8f74 <_ZnajRKSt9nothrow_t>
	};
   b8f1a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8f1e:	4620      	mov	r0, r4
   b8f20:	bd38      	pop	{r3, r4, r5, pc}
   b8f22:	bf00      	nop
   b8f24:	00010018 	.word	0x00010018
   b8f28:	000bcad4 	.word	0x000bcad4

000b8f2c <_Z19__fetch_global_Wirev>:
{
   b8f2c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8f2e:	4d0e      	ldr	r5, [pc, #56]	; (b8f68 <_Z19__fetch_global_Wirev+0x3c>)
   b8f30:	7829      	ldrb	r1, [r5, #0]
   b8f32:	f3bf 8f5b 	dmb	ish
   b8f36:	f011 0401 	ands.w	r4, r1, #1
{
   b8f3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8f3c:	d111      	bne.n	b8f62 <_Z19__fetch_global_Wirev+0x36>
   b8f3e:	4628      	mov	r0, r5
   b8f40:	f7fb fe22 	bl	b4b88 <__cxa_guard_acquire>
   b8f44:	b168      	cbz	r0, b8f62 <_Z19__fetch_global_Wirev+0x36>
   b8f46:	4668      	mov	r0, sp
   b8f48:	f7ff ffd6 	bl	b8ef8 <_Z17acquireWireBufferv>
   b8f4c:	466a      	mov	r2, sp
   b8f4e:	4621      	mov	r1, r4
   b8f50:	4806      	ldr	r0, [pc, #24]	; (b8f6c <_Z19__fetch_global_Wirev+0x40>)
   b8f52:	f7ff fae5 	bl	b8520 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8f56:	4628      	mov	r0, r5
   b8f58:	f7fb fe1b 	bl	b4b92 <__cxa_guard_release>
   b8f5c:	4804      	ldr	r0, [pc, #16]	; (b8f70 <_Z19__fetch_global_Wirev+0x44>)
   b8f5e:	f000 fbf3 	bl	b9748 <atexit>
	return wire;
}
   b8f62:	4802      	ldr	r0, [pc, #8]	; (b8f6c <_Z19__fetch_global_Wirev+0x40>)
   b8f64:	b007      	add	sp, #28
   b8f66:	bd30      	pop	{r4, r5, pc}
   b8f68:	2003e744 	.word	0x2003e744
   b8f6c:	2003e748 	.word	0x2003e748
   b8f70:	000b8ef5 	.word	0x000b8ef5

000b8f74 <_ZnajRKSt9nothrow_t>:
   b8f74:	f7fb bdf3 	b.w	b4b5e <_Znaj>

000b8f78 <_ZSt17__throw_bad_allocv>:
   b8f78:	b508      	push	{r3, lr}
   b8f7a:	f7fe fdef 	bl	b7b5c <abort>

000b8f7e <_ZSt19__throw_logic_errorPKc>:
   b8f7e:	b508      	push	{r3, lr}
   b8f80:	f7fe fdec 	bl	b7b5c <abort>

000b8f84 <_ZSt24__throw_invalid_argumentPKc>:
   b8f84:	b508      	push	{r3, lr}
   b8f86:	f7fe fde9 	bl	b7b5c <abort>

000b8f8a <_ZSt20__throw_length_errorPKc>:
   b8f8a:	b508      	push	{r3, lr}
   b8f8c:	f7fe fde6 	bl	b7b5c <abort>

000b8f90 <_ZSt20__throw_out_of_rangePKc>:
   b8f90:	b508      	push	{r3, lr}
   b8f92:	f7fe fde3 	bl	b7b5c <abort>

000b8f96 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b8f96:	b40f      	push	{r0, r1, r2, r3}
   b8f98:	b580      	push	{r7, lr}
   b8f9a:	b084      	sub	sp, #16
   b8f9c:	af00      	add	r7, sp, #0
   b8f9e:	f107 0418 	add.w	r4, r7, #24
   b8fa2:	f854 2b04 	ldr.w	r2, [r4], #4
   b8fa6:	607a      	str	r2, [r7, #4]
   b8fa8:	4610      	mov	r0, r2
   b8faa:	f7fb fd7b 	bl	b4aa4 <strlen>
   b8fae:	f200 2307 	addw	r3, r0, #519	; 0x207
   b8fb2:	f023 0307 	bic.w	r3, r3, #7
   b8fb6:	ebad 0d03 	sub.w	sp, sp, r3
   b8fba:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b8fbe:	687a      	ldr	r2, [r7, #4]
   b8fc0:	60fc      	str	r4, [r7, #12]
   b8fc2:	4623      	mov	r3, r4
   b8fc4:	4668      	mov	r0, sp
   b8fc6:	f000 f85b 	bl	b9080 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b8fca:	f7fe fdc7 	bl	b7b5c <abort>
	...

000b8fd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8fd0:	4901      	ldr	r1, [pc, #4]	; (b8fd8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8fd2:	f000 bba3 	b.w	b971c <_ZNKSt9type_infoeqERKS_>
   b8fd6:	bf00      	nop
   b8fd8:	000bcaf0 	.word	0x000bcaf0

000b8fdc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b8fdc:	b580      	push	{r7, lr}
   b8fde:	b09c      	sub	sp, #112	; 0x70
   b8fe0:	4606      	mov	r6, r0
   b8fe2:	af00      	add	r7, sp, #0
   b8fe4:	460c      	mov	r4, r1
   b8fe6:	1ba4      	subs	r4, r4, r6
   b8fe8:	490e      	ldr	r1, [pc, #56]	; (b9024 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b8fea:	2269      	movs	r2, #105	; 0x69
   b8fec:	1d38      	adds	r0, r7, #4
   b8fee:	f000 fbcc 	bl	b978a <memcpy>
   b8ff2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b8ff6:	f023 0307 	bic.w	r3, r3, #7
   b8ffa:	ebad 0d03 	sub.w	sp, sp, r3
   b8ffe:	466d      	mov	r5, sp
   b9000:	2268      	movs	r2, #104	; 0x68
   b9002:	1d39      	adds	r1, r7, #4
   b9004:	4628      	mov	r0, r5
   b9006:	f000 fbc0 	bl	b978a <memcpy>
   b900a:	4622      	mov	r2, r4
   b900c:	4631      	mov	r1, r6
   b900e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b9012:	442c      	add	r4, r5
   b9014:	f000 fbb9 	bl	b978a <memcpy>
   b9018:	2300      	movs	r3, #0
   b901a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b901e:	4628      	mov	r0, r5
   b9020:	f7ff ffad 	bl	b8f7e <_ZSt19__throw_logic_errorPKc>
   b9024:	000bcaf8 	.word	0x000bcaf8

000b9028 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b9028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b902c:	af00      	add	r7, sp, #0
   b902e:	b084      	sub	sp, #16
   b9030:	466d      	mov	r5, sp
   b9032:	f105 040c 	add.w	r4, r5, #12
   b9036:	f8df 8044 	ldr.w	r8, [pc, #68]	; b907c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b903a:	4623      	mov	r3, r4
   b903c:	f04f 0c0a 	mov.w	ip, #10
   b9040:	fbb2 f6fc 	udiv	r6, r2, ip
   b9044:	fb0c 2e16 	mls	lr, ip, r6, r2
   b9048:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b904c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b9050:	4696      	mov	lr, r2
   b9052:	f1be 0f09 	cmp.w	lr, #9
   b9056:	4632      	mov	r2, r6
   b9058:	d8f2      	bhi.n	b9040 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b905a:	1ae4      	subs	r4, r4, r3
   b905c:	428c      	cmp	r4, r1
   b905e:	d809      	bhi.n	b9074 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b9060:	f1c4 030c 	rsb	r3, r4, #12
   b9064:	4622      	mov	r2, r4
   b9066:	18e9      	adds	r1, r5, r3
   b9068:	f000 fb8f 	bl	b978a <memcpy>
   b906c:	4620      	mov	r0, r4
   b906e:	46bd      	mov	sp, r7
   b9070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9074:	f04f 34ff 	mov.w	r4, #4294967295
   b9078:	e7f8      	b.n	b906c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b907a:	bf00      	nop
   b907c:	000bcb61 	.word	0x000bcb61

000b9080 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b9080:	3901      	subs	r1, #1
   b9082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9086:	4607      	mov	r7, r0
   b9088:	4615      	mov	r5, r2
   b908a:	eb00 0801 	add.w	r8, r0, r1
   b908e:	4604      	mov	r4, r0
   b9090:	782a      	ldrb	r2, [r5, #0]
   b9092:	b392      	cbz	r2, b90fa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b9094:	4544      	cmp	r4, r8
   b9096:	d22a      	bcs.n	b90ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b9098:	2a25      	cmp	r2, #37	; 0x25
   b909a:	d107      	bne.n	b90ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b909c:	786a      	ldrb	r2, [r5, #1]
   b909e:	2a73      	cmp	r2, #115	; 0x73
   b90a0:	d009      	beq.n	b90b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b90a2:	2a7a      	cmp	r2, #122	; 0x7a
   b90a4:	d012      	beq.n	b90cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b90a6:	2a25      	cmp	r2, #37	; 0x25
   b90a8:	d100      	bne.n	b90ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b90aa:	3501      	adds	r5, #1
   b90ac:	f815 2b01 	ldrb.w	r2, [r5], #1
   b90b0:	f804 2b01 	strb.w	r2, [r4], #1
   b90b4:	e7ec      	b.n	b9090 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b90b6:	f853 2b04 	ldr.w	r2, [r3], #4
   b90ba:	3a01      	subs	r2, #1
   b90bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b90c0:	b1c9      	cbz	r1, b90f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b90c2:	4544      	cmp	r4, r8
   b90c4:	d013      	beq.n	b90ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b90c6:	f804 1b01 	strb.w	r1, [r4], #1
   b90ca:	e7f7      	b.n	b90bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b90cc:	78aa      	ldrb	r2, [r5, #2]
   b90ce:	2a75      	cmp	r2, #117	; 0x75
   b90d0:	d1ec      	bne.n	b90ac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b90d2:	461e      	mov	r6, r3
   b90d4:	eba8 0104 	sub.w	r1, r8, r4
   b90d8:	f856 2b04 	ldr.w	r2, [r6], #4
   b90dc:	4620      	mov	r0, r4
   b90de:	f7ff ffa3 	bl	b9028 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b90e2:	2800      	cmp	r0, #0
   b90e4:	dd03      	ble.n	b90ee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b90e6:	4404      	add	r4, r0
   b90e8:	3503      	adds	r5, #3
   b90ea:	4633      	mov	r3, r6
   b90ec:	e7d0      	b.n	b9090 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b90ee:	4621      	mov	r1, r4
   b90f0:	4638      	mov	r0, r7
   b90f2:	f7ff ff73 	bl	b8fdc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b90f6:	3502      	adds	r5, #2
   b90f8:	e7ca      	b.n	b9090 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b90fa:	7022      	strb	r2, [r4, #0]
   b90fc:	1be0      	subs	r0, r4, r7
   b90fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9102 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b9102:	b10a      	cbz	r2, b9108 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b9104:	f000 bb41 	b.w	b978a <memcpy>
   b9108:	4770      	bx	lr

000b910a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b910a:	b10a      	cbz	r2, b9110 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b910c:	f000 bb2d 	b.w	b976a <memcmp>
   b9110:	4610      	mov	r0, r2
   b9112:	4770      	bx	lr

000b9114 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b9114:	4613      	mov	r3, r2
   b9116:	460a      	mov	r2, r1
   b9118:	b111      	cbz	r1, b9120 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b911a:	7819      	ldrb	r1, [r3, #0]
   b911c:	f7fb bc68 	b.w	b49f0 <memchr>
   b9120:	4608      	mov	r0, r1
   b9122:	4770      	bx	lr

000b9124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b9124:	b508      	push	{r3, lr}
   b9126:	680b      	ldr	r3, [r1, #0]
   b9128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b912c:	d302      	bcc.n	b9134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b912e:	480d      	ldr	r0, [pc, #52]	; (b9164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b9130:	f7ff ff2b 	bl	b8f8a <_ZSt20__throw_length_errorPKc>
   b9134:	4293      	cmp	r3, r2
   b9136:	d90b      	bls.n	b9150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9138:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b913c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b9140:	d206      	bcs.n	b9150 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b9142:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b9146:	bf2a      	itet	cs
   b9148:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b914c:	6008      	strcc	r0, [r1, #0]
   b914e:	600b      	strcs	r3, [r1, #0]
   b9150:	6808      	ldr	r0, [r1, #0]
   b9152:	3001      	adds	r0, #1
   b9154:	d501      	bpl.n	b915a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b9156:	f7ff ff0f 	bl	b8f78 <_ZSt17__throw_bad_allocv>
   b915a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b915e:	f7fb bcfc 	b.w	b4b5a <_Znwj>
   b9162:	bf00      	nop
   b9164:	000bcb6c 	.word	0x000bcb6c

000b9168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b9168:	f850 3b08 	ldr.w	r3, [r0], #8
   b916c:	4283      	cmp	r3, r0
   b916e:	d002      	beq.n	b9176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b9170:	4618      	mov	r0, r3
   b9172:	f7fb bcf6 	b.w	b4b62 <_ZdlPv>
   b9176:	4770      	bx	lr

000b9178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   b9178:	b508      	push	{r3, lr}
   b917a:	4603      	mov	r3, r0
   b917c:	4608      	mov	r0, r1
   b917e:	685b      	ldr	r3, [r3, #4]
   b9180:	4298      	cmp	r0, r3
   b9182:	4611      	mov	r1, r2
   b9184:	d903      	bls.n	b918e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   b9186:	4602      	mov	r2, r0
   b9188:	4801      	ldr	r0, [pc, #4]	; (b9190 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   b918a:	f7ff ff04 	bl	b8f96 <_ZSt24__throw_out_of_range_fmtPKcz>
   b918e:	bd08      	pop	{r3, pc}
   b9190:	000bcb84 	.word	0x000bcb84

000b9194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
   b9194:	6840      	ldr	r0, [r0, #4]
   b9196:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   b919a:	3901      	subs	r1, #1
   b919c:	1a09      	subs	r1, r1, r0
   b919e:	4291      	cmp	r1, r2
   b91a0:	b508      	push	{r3, lr}
   b91a2:	d202      	bcs.n	b91aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
   b91a4:	4618      	mov	r0, r3
   b91a6:	f7ff fef0 	bl	b8f8a <_ZSt20__throw_length_errorPKc>
   b91aa:	bd08      	pop	{r3, pc}

000b91ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
   b91ac:	6803      	ldr	r3, [r0, #0]
   b91ae:	428b      	cmp	r3, r1
   b91b0:	d806      	bhi.n	b91c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
   b91b2:	6840      	ldr	r0, [r0, #4]
   b91b4:	4418      	add	r0, r3
   b91b6:	4281      	cmp	r1, r0
   b91b8:	bf94      	ite	ls
   b91ba:	2000      	movls	r0, #0
   b91bc:	2001      	movhi	r0, #1
   b91be:	4770      	bx	lr
   b91c0:	2001      	movs	r0, #1
   b91c2:	4770      	bx	lr

000b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b91c4:	2a01      	cmp	r2, #1
   b91c6:	b410      	push	{r4}
   b91c8:	d104      	bne.n	b91d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b91ca:	780a      	ldrb	r2, [r1, #0]
   b91cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   b91d0:	7002      	strb	r2, [r0, #0]
   b91d2:	4770      	bx	lr
   b91d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   b91d8:	f7ff bf93 	b.w	b9102 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b91dc:	2a01      	cmp	r2, #1
   b91de:	b430      	push	{r4, r5}
   b91e0:	d103      	bne.n	b91ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b91e2:	780b      	ldrb	r3, [r1, #0]
   b91e4:	7003      	strb	r3, [r0, #0]
   b91e6:	bc30      	pop	{r4, r5}
   b91e8:	4770      	bx	lr
   b91ea:	2a00      	cmp	r2, #0
   b91ec:	d0fb      	beq.n	b91e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b91ee:	bc30      	pop	{r4, r5}
   b91f0:	f000 bad9 	b.w	b97a6 <memmove>

000b91f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b91f4:	b508      	push	{r3, lr}
   b91f6:	1a52      	subs	r2, r2, r1
   b91f8:	f7ff ffe4 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b91fc:	bd08      	pop	{r3, pc}

000b91fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
   b91fe:	4288      	cmp	r0, r1
   b9200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9202:	4604      	mov	r4, r0
   b9204:	460e      	mov	r6, r1
   b9206:	d01e      	beq.n	b9246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
   b9208:	4603      	mov	r3, r0
   b920a:	684d      	ldr	r5, [r1, #4]
   b920c:	f853 2b08 	ldr.w	r2, [r3], #8
   b9210:	429a      	cmp	r2, r3
   b9212:	bf14      	ite	ne
   b9214:	6882      	ldrne	r2, [r0, #8]
   b9216:	220f      	moveq	r2, #15
   b9218:	42aa      	cmp	r2, r5
   b921a:	d20a      	bcs.n	b9232 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
   b921c:	a901      	add	r1, sp, #4
   b921e:	9501      	str	r5, [sp, #4]
   b9220:	f7ff ff80 	bl	b9124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9224:	4607      	mov	r7, r0
   b9226:	4620      	mov	r0, r4
   b9228:	f7ff ff9e 	bl	b9168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b922c:	9b01      	ldr	r3, [sp, #4]
   b922e:	6027      	str	r7, [r4, #0]
   b9230:	60a3      	str	r3, [r4, #8]
   b9232:	b125      	cbz	r5, b923e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
   b9234:	6831      	ldr	r1, [r6, #0]
   b9236:	6820      	ldr	r0, [r4, #0]
   b9238:	462a      	mov	r2, r5
   b923a:	f7ff ffc3 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b923e:	6823      	ldr	r3, [r4, #0]
   b9240:	6065      	str	r5, [r4, #4]
   b9242:	2200      	movs	r2, #0
   b9244:	555a      	strb	r2, [r3, r5]
   b9246:	b003      	add	sp, #12
   b9248:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b924a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b924a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b924e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b9250:	461f      	mov	r7, r3
   b9252:	6843      	ldr	r3, [r0, #4]
   b9254:	eb01 0802 	add.w	r8, r1, r2
   b9258:	1ab2      	subs	r2, r6, r2
   b925a:	441a      	add	r2, r3
   b925c:	eba3 0908 	sub.w	r9, r3, r8
   b9260:	4603      	mov	r3, r0
   b9262:	9201      	str	r2, [sp, #4]
   b9264:	f853 2b08 	ldr.w	r2, [r3], #8
   b9268:	429a      	cmp	r2, r3
   b926a:	bf18      	it	ne
   b926c:	6882      	ldrne	r2, [r0, #8]
   b926e:	460d      	mov	r5, r1
   b9270:	bf08      	it	eq
   b9272:	220f      	moveq	r2, #15
   b9274:	a901      	add	r1, sp, #4
   b9276:	4604      	mov	r4, r0
   b9278:	f7ff ff54 	bl	b9124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b927c:	4682      	mov	sl, r0
   b927e:	b11d      	cbz	r5, b9288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b9280:	6821      	ldr	r1, [r4, #0]
   b9282:	462a      	mov	r2, r5
   b9284:	f7ff ff9e 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9288:	b137      	cbz	r7, b9298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b928a:	b12e      	cbz	r6, b9298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b928c:	4632      	mov	r2, r6
   b928e:	4639      	mov	r1, r7
   b9290:	eb0a 0005 	add.w	r0, sl, r5
   b9294:	f7ff ff96 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9298:	f1b9 0f00 	cmp.w	r9, #0
   b929c:	d007      	beq.n	b92ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b929e:	6821      	ldr	r1, [r4, #0]
   b92a0:	4435      	add	r5, r6
   b92a2:	464a      	mov	r2, r9
   b92a4:	4441      	add	r1, r8
   b92a6:	eb0a 0005 	add.w	r0, sl, r5
   b92aa:	f7ff ff8b 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b92ae:	4620      	mov	r0, r4
   b92b0:	f7ff ff5a 	bl	b9168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b92b4:	9b01      	ldr	r3, [sp, #4]
   b92b6:	f8c4 a000 	str.w	sl, [r4]
   b92ba:	60a3      	str	r3, [r4, #8]
   b92bc:	b002      	add	sp, #8
   b92be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000b92c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
   b92c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b92c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b92ca:	4614      	mov	r4, r2
   b92cc:	4680      	mov	r8, r0
   b92ce:	462a      	mov	r2, r5
   b92d0:	4689      	mov	r9, r1
   b92d2:	461f      	mov	r7, r3
   b92d4:	4621      	mov	r1, r4
   b92d6:	4b39      	ldr	r3, [pc, #228]	; (b93bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
   b92d8:	f7ff ff5c 	bl	b9194 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
   b92dc:	4642      	mov	r2, r8
   b92de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b92e2:	f852 6b08 	ldr.w	r6, [r2], #8
   b92e6:	4296      	cmp	r6, r2
   b92e8:	bf18      	it	ne
   b92ea:	f8d8 2008 	ldrne.w	r2, [r8, #8]
   b92ee:	eba5 0b04 	sub.w	fp, r5, r4
   b92f2:	eb03 0a0b 	add.w	sl, r3, fp
   b92f6:	bf08      	it	eq
   b92f8:	220f      	moveq	r2, #15
   b92fa:	4552      	cmp	r2, sl
   b92fc:	d351      	bcc.n	b93a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
   b92fe:	444e      	add	r6, r9
   b9300:	4639      	mov	r1, r7
   b9302:	44a1      	add	r9, r4
   b9304:	4640      	mov	r0, r8
   b9306:	eba3 0909 	sub.w	r9, r3, r9
   b930a:	f7ff ff4f 	bl	b91ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
   b930e:	b180      	cbz	r0, b9332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
   b9310:	f1b9 0f00 	cmp.w	r9, #0
   b9314:	d006      	beq.n	b9324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b9316:	42ac      	cmp	r4, r5
   b9318:	d004      	beq.n	b9324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
   b931a:	464a      	mov	r2, r9
   b931c:	1931      	adds	r1, r6, r4
   b931e:	1970      	adds	r0, r6, r5
   b9320:	f7ff ff5c 	bl	b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9324:	b315      	cbz	r5, b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9326:	462a      	mov	r2, r5
   b9328:	4639      	mov	r1, r7
   b932a:	4630      	mov	r0, r6
   b932c:	f7ff ff4a 	bl	b91c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b9330:	e01c      	b.n	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9332:	b135      	cbz	r5, b9342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
   b9334:	42ac      	cmp	r4, r5
   b9336:	d33c      	bcc.n	b93b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
   b9338:	462a      	mov	r2, r5
   b933a:	4639      	mov	r1, r7
   b933c:	4630      	mov	r0, r6
   b933e:	f7ff ff4d 	bl	b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9342:	f1b9 0f00 	cmp.w	r9, #0
   b9346:	d011      	beq.n	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b9348:	42ac      	cmp	r4, r5
   b934a:	d00f      	beq.n	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b934c:	464a      	mov	r2, r9
   b934e:	1931      	adds	r1, r6, r4
   b9350:	1970      	adds	r0, r6, r5
   b9352:	f7ff ff43 	bl	b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b9356:	42ac      	cmp	r4, r5
   b9358:	d208      	bcs.n	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b935a:	4434      	add	r4, r6
   b935c:	197b      	adds	r3, r7, r5
   b935e:	429c      	cmp	r4, r3
   b9360:	d30f      	bcc.n	b9382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
   b9362:	462a      	mov	r2, r5
   b9364:	4639      	mov	r1, r7
   b9366:	4630      	mov	r0, r6
   b9368:	f7ff ff38 	bl	b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b936c:	f8d8 3000 	ldr.w	r3, [r8]
   b9370:	f8c8 a004 	str.w	sl, [r8, #4]
   b9374:	2200      	movs	r2, #0
   b9376:	4640      	mov	r0, r8
   b9378:	f803 200a 	strb.w	r2, [r3, sl]
   b937c:	b003      	add	sp, #12
   b937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9382:	42bc      	cmp	r4, r7
   b9384:	d803      	bhi.n	b938e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
   b9386:	462a      	mov	r2, r5
   b9388:	eb07 010b 	add.w	r1, r7, fp
   b938c:	e7cd      	b.n	b932a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
   b938e:	1be4      	subs	r4, r4, r7
   b9390:	4622      	mov	r2, r4
   b9392:	4639      	mov	r1, r7
   b9394:	4630      	mov	r0, r6
   b9396:	f7ff ff21 	bl	b91dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b939a:	1b2a      	subs	r2, r5, r4
   b939c:	1971      	adds	r1, r6, r5
   b939e:	1930      	adds	r0, r6, r4
   b93a0:	e7c4      	b.n	b932c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
   b93a2:	9500      	str	r5, [sp, #0]
   b93a4:	463b      	mov	r3, r7
   b93a6:	4622      	mov	r2, r4
   b93a8:	4649      	mov	r1, r9
   b93aa:	4640      	mov	r0, r8
   b93ac:	f7ff ff4d 	bl	b924a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b93b0:	e7dc      	b.n	b936c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
   b93b2:	f1b9 0f00 	cmp.w	r9, #0
   b93b6:	d0d0      	beq.n	b935a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
   b93b8:	e7c8      	b.n	b934c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
   b93ba:	bf00      	nop
   b93bc:	000bcbbb 	.word	0x000bcbbb

000b93c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b93c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b93c4:	460e      	mov	r6, r1
   b93c6:	461d      	mov	r5, r3
   b93c8:	6841      	ldr	r1, [r0, #4]
   b93ca:	b923      	cbnz	r3, b93d6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b93cc:	4291      	cmp	r1, r2
   b93ce:	d221      	bcs.n	b9414 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b93d0:	f04f 32ff 	mov.w	r2, #4294967295
   b93d4:	e01e      	b.n	b9414 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b93d6:	4291      	cmp	r1, r2
   b93d8:	d9fa      	bls.n	b93d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b93da:	f8d0 8000 	ldr.w	r8, [r0]
   b93de:	7833      	ldrb	r3, [r6, #0]
   b93e0:	f88d 3007 	strb.w	r3, [sp, #7]
   b93e4:	eb08 0701 	add.w	r7, r8, r1
   b93e8:	eb08 0002 	add.w	r0, r8, r2
   b93ec:	1a89      	subs	r1, r1, r2
   b93ee:	f1c5 0901 	rsb	r9, r5, #1
   b93f2:	42a9      	cmp	r1, r5
   b93f4:	d3ec      	bcc.n	b93d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b93f6:	f10d 0207 	add.w	r2, sp, #7
   b93fa:	4449      	add	r1, r9
   b93fc:	f7ff fe8a 	bl	b9114 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b9400:	4604      	mov	r4, r0
   b9402:	2800      	cmp	r0, #0
   b9404:	d0e4      	beq.n	b93d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b9406:	462a      	mov	r2, r5
   b9408:	4631      	mov	r1, r6
   b940a:	f7ff fe7e 	bl	b910a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b940e:	b928      	cbnz	r0, b941c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b9410:	eba4 0208 	sub.w	r2, r4, r8
   b9414:	4610      	mov	r0, r2
   b9416:	b003      	add	sp, #12
   b9418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b941c:	1c60      	adds	r0, r4, #1
   b941e:	1a39      	subs	r1, r7, r0
   b9420:	e7e7      	b.n	b93f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b9422 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
   b9422:	b508      	push	{r3, lr}
   b9424:	e9d1 1300 	ldrd	r1, r3, [r1]
   b9428:	f7ff ffca 	bl	b93c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b942c:	bd08      	pop	{r3, pc}

000b942e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b942e:	b513      	push	{r0, r1, r4, lr}
   b9430:	4604      	mov	r4, r0
   b9432:	4608      	mov	r0, r1
   b9434:	9201      	str	r2, [sp, #4]
   b9436:	9100      	str	r1, [sp, #0]
   b9438:	f7fb fb34 	bl	b4aa4 <strlen>
   b943c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b9440:	4603      	mov	r3, r0
   b9442:	4620      	mov	r0, r4
   b9444:	f7ff ffbc 	bl	b93c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b9448:	b002      	add	sp, #8
   b944a:	bd10      	pop	{r4, pc}

000b944c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
   b944c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b944e:	6846      	ldr	r6, [r0, #4]
   b9450:	9101      	str	r1, [sp, #4]
   b9452:	4605      	mov	r5, r0
   b9454:	4608      	mov	r0, r1
   b9456:	f7fb fb25 	bl	b4aa4 <strlen>
   b945a:	4286      	cmp	r6, r0
   b945c:	4604      	mov	r4, r0
   b945e:	4632      	mov	r2, r6
   b9460:	9901      	ldr	r1, [sp, #4]
   b9462:	bf28      	it	cs
   b9464:	4602      	movcs	r2, r0
   b9466:	6828      	ldr	r0, [r5, #0]
   b9468:	f7ff fe4f 	bl	b910a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b946c:	b900      	cbnz	r0, b9470 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
   b946e:	1b30      	subs	r0, r6, r4
   b9470:	b002      	add	sp, #8
   b9472:	bd70      	pop	{r4, r5, r6, pc}

000b9474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   b9474:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9476:	4604      	mov	r4, r0
   b9478:	4616      	mov	r6, r2
   b947a:	460d      	mov	r5, r1
   b947c:	b919      	cbnz	r1, b9486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b947e:	b112      	cbz	r2, b9486 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   b9480:	480d      	ldr	r0, [pc, #52]	; (b94b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   b9482:	f7ff fd7c 	bl	b8f7e <_ZSt19__throw_logic_errorPKc>
   b9486:	1b73      	subs	r3, r6, r5
   b9488:	2b0f      	cmp	r3, #15
   b948a:	9301      	str	r3, [sp, #4]
   b948c:	d907      	bls.n	b949e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   b948e:	2200      	movs	r2, #0
   b9490:	a901      	add	r1, sp, #4
   b9492:	4620      	mov	r0, r4
   b9494:	f7ff fe46 	bl	b9124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b9498:	9b01      	ldr	r3, [sp, #4]
   b949a:	6020      	str	r0, [r4, #0]
   b949c:	60a3      	str	r3, [r4, #8]
   b949e:	4632      	mov	r2, r6
   b94a0:	4629      	mov	r1, r5
   b94a2:	6820      	ldr	r0, [r4, #0]
   b94a4:	f7ff fea6 	bl	b91f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   b94a8:	9b01      	ldr	r3, [sp, #4]
   b94aa:	6822      	ldr	r2, [r4, #0]
   b94ac:	6063      	str	r3, [r4, #4]
   b94ae:	2100      	movs	r1, #0
   b94b0:	54d1      	strb	r1, [r2, r3]
   b94b2:	b002      	add	sp, #8
   b94b4:	bd70      	pop	{r4, r5, r6, pc}
   b94b6:	bf00      	nop
   b94b8:	000bcbd4 	.word	0x000bcbd4

000b94bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
   b94bc:	b508      	push	{r3, lr}
   b94be:	f04f 0300 	mov.w	r3, #0
   b94c2:	f7ff ffd7 	bl	b9474 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   b94c6:	bd08      	pop	{r3, pc}

000b94c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   b94c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b94cc:	460d      	mov	r5, r1
   b94ce:	4617      	mov	r7, r2
   b94d0:	4698      	mov	r8, r3
   b94d2:	f100 0308 	add.w	r3, r0, #8
   b94d6:	4604      	mov	r4, r0
   b94d8:	6003      	str	r3, [r0, #0]
   b94da:	4639      	mov	r1, r7
   b94dc:	4a09      	ldr	r2, [pc, #36]	; (b9504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x3c>)
   b94de:	4628      	mov	r0, r5
   b94e0:	f7ff fe4a 	bl	b9178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b94e4:	682e      	ldr	r6, [r5, #0]
   b94e6:	686a      	ldr	r2, [r5, #4]
   b94e8:	1831      	adds	r1, r6, r0
   b94ea:	1bd2      	subs	r2, r2, r7
   b94ec:	4620      	mov	r0, r4
   b94ee:	4542      	cmp	r2, r8
   b94f0:	bf94      	ite	ls
   b94f2:	188a      	addls	r2, r1, r2
   b94f4:	eb01 0208 	addhi.w	r2, r1, r8
   b94f8:	f7ff ffe0 	bl	b94bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
   b94fc:	4620      	mov	r0, r4
   b94fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9502:	bf00      	nop
   b9504:	000bcbfe 	.word	0x000bcbfe

000b9508 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   b9508:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b950a:	460d      	mov	r5, r1
   b950c:	4604      	mov	r4, r0
   b950e:	4611      	mov	r1, r2
   b9510:	4628      	mov	r0, r5
   b9512:	4a06      	ldr	r2, [pc, #24]	; (b952c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   b9514:	9301      	str	r3, [sp, #4]
   b9516:	f7ff fe2f 	bl	b9178 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   b951a:	9b01      	ldr	r3, [sp, #4]
   b951c:	4602      	mov	r2, r0
   b951e:	4629      	mov	r1, r5
   b9520:	4620      	mov	r0, r4
   b9522:	f7ff ffd1 	bl	b94c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   b9526:	4620      	mov	r0, r4
   b9528:	b003      	add	sp, #12
   b952a:	bd30      	pop	{r4, r5, pc}
   b952c:	000bcc19 	.word	0x000bcc19

000b9530 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9530:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9532:	2400      	movs	r4, #0
   b9534:	2310      	movs	r3, #16
   b9536:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b953a:	6803      	ldr	r3, [r0, #0]
   b953c:	4615      	mov	r5, r2
   b953e:	699e      	ldr	r6, [r3, #24]
   b9540:	6812      	ldr	r2, [r2, #0]
   b9542:	466b      	mov	r3, sp
   b9544:	e9cd 4400 	strd	r4, r4, [sp]
   b9548:	47b0      	blx	r6
   b954a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b954e:	f003 0306 	and.w	r3, r3, #6
   b9552:	2b06      	cmp	r3, #6
   b9554:	bf03      	ittte	eq
   b9556:	9b00      	ldreq	r3, [sp, #0]
   b9558:	602b      	streq	r3, [r5, #0]
   b955a:	2001      	moveq	r0, #1
   b955c:	4620      	movne	r0, r4
   b955e:	b004      	add	sp, #16
   b9560:	bd70      	pop	{r4, r5, r6, pc}

000b9562 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9562:	9800      	ldr	r0, [sp, #0]
   b9564:	4290      	cmp	r0, r2
   b9566:	bf14      	ite	ne
   b9568:	2001      	movne	r0, #1
   b956a:	2006      	moveq	r0, #6
   b956c:	4770      	bx	lr
	...

000b9570 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9570:	b510      	push	{r4, lr}
   b9572:	4b03      	ldr	r3, [pc, #12]	; (b9580 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9574:	6003      	str	r3, [r0, #0]
   b9576:	4604      	mov	r4, r0
   b9578:	f000 f8cd 	bl	b9716 <_ZNSt9type_infoD1Ev>
   b957c:	4620      	mov	r0, r4
   b957e:	bd10      	pop	{r4, pc}
   b9580:	000bcc68 	.word	0x000bcc68

000b9584 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9584:	b510      	push	{r4, lr}
   b9586:	4604      	mov	r4, r0
   b9588:	f7ff fff2 	bl	b9570 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b958c:	4620      	mov	r0, r4
   b958e:	2108      	movs	r1, #8
   b9590:	f7fb faeb 	bl	b4b6a <_ZdlPvj>
   b9594:	4620      	mov	r0, r4
   b9596:	bd10      	pop	{r4, pc}

000b9598 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b959c:	461f      	mov	r7, r3
   b959e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b95a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b95a6:	4598      	cmp	r8, r3
   b95a8:	4606      	mov	r6, r0
   b95aa:	4615      	mov	r5, r2
   b95ac:	d107      	bne.n	b95be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b95ae:	9907      	ldr	r1, [sp, #28]
   b95b0:	f000 f8b4 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b95b4:	b118      	cbz	r0, b95be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b95b6:	7165      	strb	r5, [r4, #5]
   b95b8:	2000      	movs	r0, #0
   b95ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b95be:	4639      	mov	r1, r7
   b95c0:	4630      	mov	r0, r6
   b95c2:	f000 f8ab 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b95c6:	2800      	cmp	r0, #0
   b95c8:	d0f6      	beq.n	b95b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b95ca:	2301      	movs	r3, #1
   b95cc:	f8c4 8000 	str.w	r8, [r4]
   b95d0:	7125      	strb	r5, [r4, #4]
   b95d2:	71a3      	strb	r3, [r4, #6]
   b95d4:	e7f0      	b.n	b95b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b95d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b95d6:	b538      	push	{r3, r4, r5, lr}
   b95d8:	4615      	mov	r5, r2
   b95da:	461c      	mov	r4, r3
   b95dc:	f000 f89e 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b95e0:	b120      	cbz	r0, b95ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b95e2:	2308      	movs	r3, #8
   b95e4:	60e3      	str	r3, [r4, #12]
   b95e6:	2306      	movs	r3, #6
   b95e8:	6025      	str	r5, [r4, #0]
   b95ea:	7123      	strb	r3, [r4, #4]
   b95ec:	bd38      	pop	{r3, r4, r5, pc}

000b95ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b95ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b95f0:	4605      	mov	r5, r0
   b95f2:	460c      	mov	r4, r1
   b95f4:	9201      	str	r2, [sp, #4]
   b95f6:	461e      	mov	r6, r3
   b95f8:	f000 f890 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b95fc:	b950      	cbnz	r0, b9614 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b95fe:	2e03      	cmp	r6, #3
   b9600:	d808      	bhi.n	b9614 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9602:	6823      	ldr	r3, [r4, #0]
   b9604:	9a01      	ldr	r2, [sp, #4]
   b9606:	695b      	ldr	r3, [r3, #20]
   b9608:	4629      	mov	r1, r5
   b960a:	4620      	mov	r0, r4
   b960c:	b002      	add	sp, #8
   b960e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9612:	4718      	bx	r3
   b9614:	b002      	add	sp, #8
   b9616:	bd70      	pop	{r4, r5, r6, pc}

000b9618 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9618:	b510      	push	{r4, lr}
   b961a:	4b03      	ldr	r3, [pc, #12]	; (b9628 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b961c:	6003      	str	r3, [r0, #0]
   b961e:	4604      	mov	r4, r0
   b9620:	f7ff ffa6 	bl	b9570 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9624:	4620      	mov	r0, r4
   b9626:	bd10      	pop	{r4, pc}
   b9628:	000bccc8 	.word	0x000bccc8

000b962c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b962c:	b510      	push	{r4, lr}
   b962e:	4604      	mov	r4, r0
   b9630:	f7ff fff2 	bl	b9618 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9634:	4620      	mov	r0, r4
   b9636:	210c      	movs	r1, #12
   b9638:	f7fb fa97 	bl	b4b6a <_ZdlPvj>
   b963c:	4620      	mov	r0, r4
   b963e:	bd10      	pop	{r4, pc}

000b9640 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9642:	9f08      	ldr	r7, [sp, #32]
   b9644:	4297      	cmp	r7, r2
   b9646:	4605      	mov	r5, r0
   b9648:	460e      	mov	r6, r1
   b964a:	4614      	mov	r4, r2
   b964c:	d00a      	beq.n	b9664 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b964e:	68a8      	ldr	r0, [r5, #8]
   b9650:	6802      	ldr	r2, [r0, #0]
   b9652:	9708      	str	r7, [sp, #32]
   b9654:	6a15      	ldr	r5, [r2, #32]
   b9656:	4631      	mov	r1, r6
   b9658:	4622      	mov	r2, r4
   b965a:	46ac      	mov	ip, r5
   b965c:	b003      	add	sp, #12
   b965e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9662:	4760      	bx	ip
   b9664:	4619      	mov	r1, r3
   b9666:	9301      	str	r3, [sp, #4]
   b9668:	f000 f858 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b966c:	9b01      	ldr	r3, [sp, #4]
   b966e:	2800      	cmp	r0, #0
   b9670:	d0ed      	beq.n	b964e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9672:	2006      	movs	r0, #6
   b9674:	b003      	add	sp, #12
   b9676:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9678 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9678:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b967c:	460d      	mov	r5, r1
   b967e:	4619      	mov	r1, r3
   b9680:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9684:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9688:	4681      	mov	r9, r0
   b968a:	4617      	mov	r7, r2
   b968c:	4698      	mov	r8, r3
   b968e:	f000 f845 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b9692:	b190      	cbz	r0, b96ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9694:	2d00      	cmp	r5, #0
   b9696:	6034      	str	r4, [r6, #0]
   b9698:	7137      	strb	r7, [r6, #4]
   b969a:	db09      	blt.n	b96b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b969c:	1961      	adds	r1, r4, r5
   b969e:	458a      	cmp	sl, r1
   b96a0:	bf0c      	ite	eq
   b96a2:	2106      	moveq	r1, #6
   b96a4:	2101      	movne	r1, #1
   b96a6:	71b1      	strb	r1, [r6, #6]
   b96a8:	2000      	movs	r0, #0
   b96aa:	b001      	add	sp, #4
   b96ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96b0:	3502      	adds	r5, #2
   b96b2:	d1f9      	bne.n	b96a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b96b4:	2301      	movs	r3, #1
   b96b6:	71b3      	strb	r3, [r6, #6]
   b96b8:	e7f6      	b.n	b96a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b96ba:	4554      	cmp	r4, sl
   b96bc:	d106      	bne.n	b96cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b96be:	4659      	mov	r1, fp
   b96c0:	4648      	mov	r0, r9
   b96c2:	f000 f82b 	bl	b971c <_ZNKSt9type_infoeqERKS_>
   b96c6:	b108      	cbz	r0, b96cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b96c8:	7177      	strb	r7, [r6, #5]
   b96ca:	e7ed      	b.n	b96a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b96cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b96d0:	6803      	ldr	r3, [r0, #0]
   b96d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b96d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b96da:	69dc      	ldr	r4, [r3, #28]
   b96dc:	463a      	mov	r2, r7
   b96de:	4643      	mov	r3, r8
   b96e0:	4629      	mov	r1, r5
   b96e2:	46a4      	mov	ip, r4
   b96e4:	b001      	add	sp, #4
   b96e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96ea:	4760      	bx	ip

000b96ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b96ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b96f0:	4607      	mov	r7, r0
   b96f2:	460c      	mov	r4, r1
   b96f4:	4615      	mov	r5, r2
   b96f6:	461e      	mov	r6, r3
   b96f8:	f7ff ff6d 	bl	b95d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b96fc:	b948      	cbnz	r0, b9712 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b96fe:	68b8      	ldr	r0, [r7, #8]
   b9700:	6803      	ldr	r3, [r0, #0]
   b9702:	699f      	ldr	r7, [r3, #24]
   b9704:	462a      	mov	r2, r5
   b9706:	4633      	mov	r3, r6
   b9708:	4621      	mov	r1, r4
   b970a:	46bc      	mov	ip, r7
   b970c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9710:	4760      	bx	ip
   b9712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9716 <_ZNSt9type_infoD1Ev>:
   b9716:	4770      	bx	lr

000b9718 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9718:	2000      	movs	r0, #0
   b971a:	4770      	bx	lr

000b971c <_ZNKSt9type_infoeqERKS_>:
   b971c:	4281      	cmp	r1, r0
   b971e:	b508      	push	{r3, lr}
   b9720:	d00e      	beq.n	b9740 <_ZNKSt9type_infoeqERKS_+0x24>
   b9722:	6840      	ldr	r0, [r0, #4]
   b9724:	7803      	ldrb	r3, [r0, #0]
   b9726:	2b2a      	cmp	r3, #42	; 0x2a
   b9728:	d00c      	beq.n	b9744 <_ZNKSt9type_infoeqERKS_+0x28>
   b972a:	6849      	ldr	r1, [r1, #4]
   b972c:	780b      	ldrb	r3, [r1, #0]
   b972e:	2b2a      	cmp	r3, #42	; 0x2a
   b9730:	bf08      	it	eq
   b9732:	3101      	addeq	r1, #1
   b9734:	f7fb f9ac 	bl	b4a90 <strcmp>
   b9738:	fab0 f080 	clz	r0, r0
   b973c:	0940      	lsrs	r0, r0, #5
   b973e:	bd08      	pop	{r3, pc}
   b9740:	2001      	movs	r0, #1
   b9742:	e7fc      	b.n	b973e <_ZNKSt9type_infoeqERKS_+0x22>
   b9744:	2000      	movs	r0, #0
   b9746:	e7fa      	b.n	b973e <_ZNKSt9type_infoeqERKS_+0x22>

000b9748 <atexit>:
   b9748:	2300      	movs	r3, #0
   b974a:	4601      	mov	r1, r0
   b974c:	461a      	mov	r2, r3
   b974e:	4618      	mov	r0, r3
   b9750:	f000 bf5c 	b.w	ba60c <__register_exitproc>

000b9754 <atof>:
   b9754:	2100      	movs	r1, #0
   b9756:	f000 bec1 	b.w	ba4dc <strtod>

000b975a <atoi>:
   b975a:	220a      	movs	r2, #10
   b975c:	2100      	movs	r1, #0
   b975e:	f000 bf4b 	b.w	ba5f8 <strtol>

000b9762 <atol>:
   b9762:	220a      	movs	r2, #10
   b9764:	2100      	movs	r1, #0
   b9766:	f000 bf47 	b.w	ba5f8 <strtol>

000b976a <memcmp>:
   b976a:	b510      	push	{r4, lr}
   b976c:	3901      	subs	r1, #1
   b976e:	4402      	add	r2, r0
   b9770:	4290      	cmp	r0, r2
   b9772:	d101      	bne.n	b9778 <memcmp+0xe>
   b9774:	2000      	movs	r0, #0
   b9776:	e005      	b.n	b9784 <memcmp+0x1a>
   b9778:	7803      	ldrb	r3, [r0, #0]
   b977a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b977e:	42a3      	cmp	r3, r4
   b9780:	d001      	beq.n	b9786 <memcmp+0x1c>
   b9782:	1b18      	subs	r0, r3, r4
   b9784:	bd10      	pop	{r4, pc}
   b9786:	3001      	adds	r0, #1
   b9788:	e7f2      	b.n	b9770 <memcmp+0x6>

000b978a <memcpy>:
   b978a:	440a      	add	r2, r1
   b978c:	4291      	cmp	r1, r2
   b978e:	f100 33ff 	add.w	r3, r0, #4294967295
   b9792:	d100      	bne.n	b9796 <memcpy+0xc>
   b9794:	4770      	bx	lr
   b9796:	b510      	push	{r4, lr}
   b9798:	f811 4b01 	ldrb.w	r4, [r1], #1
   b979c:	f803 4f01 	strb.w	r4, [r3, #1]!
   b97a0:	4291      	cmp	r1, r2
   b97a2:	d1f9      	bne.n	b9798 <memcpy+0xe>
   b97a4:	bd10      	pop	{r4, pc}

000b97a6 <memmove>:
   b97a6:	4288      	cmp	r0, r1
   b97a8:	b510      	push	{r4, lr}
   b97aa:	eb01 0402 	add.w	r4, r1, r2
   b97ae:	d902      	bls.n	b97b6 <memmove+0x10>
   b97b0:	4284      	cmp	r4, r0
   b97b2:	4623      	mov	r3, r4
   b97b4:	d807      	bhi.n	b97c6 <memmove+0x20>
   b97b6:	1e43      	subs	r3, r0, #1
   b97b8:	42a1      	cmp	r1, r4
   b97ba:	d008      	beq.n	b97ce <memmove+0x28>
   b97bc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b97c0:	f803 2f01 	strb.w	r2, [r3, #1]!
   b97c4:	e7f8      	b.n	b97b8 <memmove+0x12>
   b97c6:	4402      	add	r2, r0
   b97c8:	4601      	mov	r1, r0
   b97ca:	428a      	cmp	r2, r1
   b97cc:	d100      	bne.n	b97d0 <memmove+0x2a>
   b97ce:	bd10      	pop	{r4, pc}
   b97d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b97d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b97d8:	e7f7      	b.n	b97ca <memmove+0x24>

000b97da <memset>:
   b97da:	4402      	add	r2, r0
   b97dc:	4603      	mov	r3, r0
   b97de:	4293      	cmp	r3, r2
   b97e0:	d100      	bne.n	b97e4 <memset+0xa>
   b97e2:	4770      	bx	lr
   b97e4:	f803 1b01 	strb.w	r1, [r3], #1
   b97e8:	e7f9      	b.n	b97de <memset+0x4>
	...

000b97ec <srand>:
   b97ec:	b538      	push	{r3, r4, r5, lr}
   b97ee:	4b10      	ldr	r3, [pc, #64]	; (b9830 <srand+0x44>)
   b97f0:	681d      	ldr	r5, [r3, #0]
   b97f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b97f4:	4604      	mov	r4, r0
   b97f6:	b9b3      	cbnz	r3, b9826 <srand+0x3a>
   b97f8:	2018      	movs	r0, #24
   b97fa:	f7fe f987 	bl	b7b0c <malloc>
   b97fe:	4602      	mov	r2, r0
   b9800:	63a8      	str	r0, [r5, #56]	; 0x38
   b9802:	b920      	cbnz	r0, b980e <srand+0x22>
   b9804:	4b0b      	ldr	r3, [pc, #44]	; (b9834 <srand+0x48>)
   b9806:	480c      	ldr	r0, [pc, #48]	; (b9838 <srand+0x4c>)
   b9808:	2142      	movs	r1, #66	; 0x42
   b980a:	f7fe f9bf 	bl	b7b8c <__assert_func>
   b980e:	490b      	ldr	r1, [pc, #44]	; (b983c <srand+0x50>)
   b9810:	4b0b      	ldr	r3, [pc, #44]	; (b9840 <srand+0x54>)
   b9812:	e9c0 1300 	strd	r1, r3, [r0]
   b9816:	4b0b      	ldr	r3, [pc, #44]	; (b9844 <srand+0x58>)
   b9818:	6083      	str	r3, [r0, #8]
   b981a:	230b      	movs	r3, #11
   b981c:	8183      	strh	r3, [r0, #12]
   b981e:	2100      	movs	r1, #0
   b9820:	2001      	movs	r0, #1
   b9822:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9826:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9828:	2200      	movs	r2, #0
   b982a:	611c      	str	r4, [r3, #16]
   b982c:	615a      	str	r2, [r3, #20]
   b982e:	bd38      	pop	{r3, r4, r5, pc}
   b9830:	2003e0d8 	.word	0x2003e0d8
   b9834:	000bcd01 	.word	0x000bcd01
   b9838:	000bcd18 	.word	0x000bcd18
   b983c:	abcd330e 	.word	0xabcd330e
   b9840:	e66d1234 	.word	0xe66d1234
   b9844:	0005deec 	.word	0x0005deec

000b9848 <strncmp>:
   b9848:	b510      	push	{r4, lr}
   b984a:	b17a      	cbz	r2, b986c <strncmp+0x24>
   b984c:	4603      	mov	r3, r0
   b984e:	3901      	subs	r1, #1
   b9850:	1884      	adds	r4, r0, r2
   b9852:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9856:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b985a:	4290      	cmp	r0, r2
   b985c:	d101      	bne.n	b9862 <strncmp+0x1a>
   b985e:	42a3      	cmp	r3, r4
   b9860:	d101      	bne.n	b9866 <strncmp+0x1e>
   b9862:	1a80      	subs	r0, r0, r2
   b9864:	bd10      	pop	{r4, pc}
   b9866:	2800      	cmp	r0, #0
   b9868:	d1f3      	bne.n	b9852 <strncmp+0xa>
   b986a:	e7fa      	b.n	b9862 <strncmp+0x1a>
   b986c:	4610      	mov	r0, r2
   b986e:	e7f9      	b.n	b9864 <strncmp+0x1c>

000b9870 <strncpy>:
   b9870:	b510      	push	{r4, lr}
   b9872:	3901      	subs	r1, #1
   b9874:	4603      	mov	r3, r0
   b9876:	b132      	cbz	r2, b9886 <strncpy+0x16>
   b9878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b987c:	f803 4b01 	strb.w	r4, [r3], #1
   b9880:	3a01      	subs	r2, #1
   b9882:	2c00      	cmp	r4, #0
   b9884:	d1f7      	bne.n	b9876 <strncpy+0x6>
   b9886:	441a      	add	r2, r3
   b9888:	2100      	movs	r1, #0
   b988a:	4293      	cmp	r3, r2
   b988c:	d100      	bne.n	b9890 <strncpy+0x20>
   b988e:	bd10      	pop	{r4, pc}
   b9890:	f803 1b01 	strb.w	r1, [r3], #1
   b9894:	e7f9      	b.n	b988a <strncpy+0x1a>

000b9896 <sulp>:
   b9896:	b570      	push	{r4, r5, r6, lr}
   b9898:	4604      	mov	r4, r0
   b989a:	460d      	mov	r5, r1
   b989c:	ec45 4b10 	vmov	d0, r4, r5
   b98a0:	4616      	mov	r6, r2
   b98a2:	f001 fe0d 	bl	bb4c0 <__ulp>
   b98a6:	ec51 0b10 	vmov	r0, r1, d0
   b98aa:	b17e      	cbz	r6, b98cc <sulp+0x36>
   b98ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b98b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b98b4:	2b00      	cmp	r3, #0
   b98b6:	dd09      	ble.n	b98cc <sulp+0x36>
   b98b8:	051b      	lsls	r3, r3, #20
   b98ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b98be:	2400      	movs	r4, #0
   b98c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b98c4:	4622      	mov	r2, r4
   b98c6:	462b      	mov	r3, r5
   b98c8:	f7fa fd66 	bl	b4398 <__aeabi_dmul>
   b98cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b98d0 <_strtod_l>:
   b98d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98d4:	ed2d 8b02 	vpush	{d8}
   b98d8:	b09d      	sub	sp, #116	; 0x74
   b98da:	461f      	mov	r7, r3
   b98dc:	2300      	movs	r3, #0
   b98de:	9318      	str	r3, [sp, #96]	; 0x60
   b98e0:	4ba2      	ldr	r3, [pc, #648]	; (b9b6c <_strtod_l+0x29c>)
   b98e2:	9213      	str	r2, [sp, #76]	; 0x4c
   b98e4:	681b      	ldr	r3, [r3, #0]
   b98e6:	9305      	str	r3, [sp, #20]
   b98e8:	4604      	mov	r4, r0
   b98ea:	4618      	mov	r0, r3
   b98ec:	4688      	mov	r8, r1
   b98ee:	f7fb f8d9 	bl	b4aa4 <strlen>
   b98f2:	f04f 0a00 	mov.w	sl, #0
   b98f6:	4605      	mov	r5, r0
   b98f8:	f04f 0b00 	mov.w	fp, #0
   b98fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9902:	781a      	ldrb	r2, [r3, #0]
   b9904:	2a2b      	cmp	r2, #43	; 0x2b
   b9906:	d04e      	beq.n	b99a6 <_strtod_l+0xd6>
   b9908:	d83b      	bhi.n	b9982 <_strtod_l+0xb2>
   b990a:	2a0d      	cmp	r2, #13
   b990c:	d834      	bhi.n	b9978 <_strtod_l+0xa8>
   b990e:	2a08      	cmp	r2, #8
   b9910:	d834      	bhi.n	b997c <_strtod_l+0xac>
   b9912:	2a00      	cmp	r2, #0
   b9914:	d03e      	beq.n	b9994 <_strtod_l+0xc4>
   b9916:	2300      	movs	r3, #0
   b9918:	930a      	str	r3, [sp, #40]	; 0x28
   b991a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b991c:	7833      	ldrb	r3, [r6, #0]
   b991e:	2b30      	cmp	r3, #48	; 0x30
   b9920:	f040 80b0 	bne.w	b9a84 <_strtod_l+0x1b4>
   b9924:	7873      	ldrb	r3, [r6, #1]
   b9926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b992a:	2b58      	cmp	r3, #88	; 0x58
   b992c:	d168      	bne.n	b9a00 <_strtod_l+0x130>
   b992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9930:	9301      	str	r3, [sp, #4]
   b9932:	ab18      	add	r3, sp, #96	; 0x60
   b9934:	9702      	str	r7, [sp, #8]
   b9936:	9300      	str	r3, [sp, #0]
   b9938:	4a8d      	ldr	r2, [pc, #564]	; (b9b70 <_strtod_l+0x2a0>)
   b993a:	ab19      	add	r3, sp, #100	; 0x64
   b993c:	a917      	add	r1, sp, #92	; 0x5c
   b993e:	4620      	mov	r0, r4
   b9940:	f000 ff2e 	bl	ba7a0 <__gethex>
   b9944:	f010 0707 	ands.w	r7, r0, #7
   b9948:	4605      	mov	r5, r0
   b994a:	d005      	beq.n	b9958 <_strtod_l+0x88>
   b994c:	2f06      	cmp	r7, #6
   b994e:	d12c      	bne.n	b99aa <_strtod_l+0xda>
   b9950:	3601      	adds	r6, #1
   b9952:	2300      	movs	r3, #0
   b9954:	9617      	str	r6, [sp, #92]	; 0x5c
   b9956:	930a      	str	r3, [sp, #40]	; 0x28
   b9958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b995a:	2b00      	cmp	r3, #0
   b995c:	f040 8590 	bne.w	ba480 <_strtod_l+0xbb0>
   b9960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b9962:	b1eb      	cbz	r3, b99a0 <_strtod_l+0xd0>
   b9964:	4652      	mov	r2, sl
   b9966:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b996a:	ec43 2b10 	vmov	d0, r2, r3
   b996e:	b01d      	add	sp, #116	; 0x74
   b9970:	ecbd 8b02 	vpop	{d8}
   b9974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9978:	2a20      	cmp	r2, #32
   b997a:	d1cc      	bne.n	b9916 <_strtod_l+0x46>
   b997c:	3301      	adds	r3, #1
   b997e:	9317      	str	r3, [sp, #92]	; 0x5c
   b9980:	e7be      	b.n	b9900 <_strtod_l+0x30>
   b9982:	2a2d      	cmp	r2, #45	; 0x2d
   b9984:	d1c7      	bne.n	b9916 <_strtod_l+0x46>
   b9986:	2201      	movs	r2, #1
   b9988:	920a      	str	r2, [sp, #40]	; 0x28
   b998a:	1c5a      	adds	r2, r3, #1
   b998c:	9217      	str	r2, [sp, #92]	; 0x5c
   b998e:	785b      	ldrb	r3, [r3, #1]
   b9990:	2b00      	cmp	r3, #0
   b9992:	d1c2      	bne.n	b991a <_strtod_l+0x4a>
   b9994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b9996:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b999a:	2b00      	cmp	r3, #0
   b999c:	f040 856e 	bne.w	ba47c <_strtod_l+0xbac>
   b99a0:	4652      	mov	r2, sl
   b99a2:	465b      	mov	r3, fp
   b99a4:	e7e1      	b.n	b996a <_strtod_l+0x9a>
   b99a6:	2200      	movs	r2, #0
   b99a8:	e7ee      	b.n	b9988 <_strtod_l+0xb8>
   b99aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b99ac:	b13a      	cbz	r2, b99be <_strtod_l+0xee>
   b99ae:	2135      	movs	r1, #53	; 0x35
   b99b0:	a81a      	add	r0, sp, #104	; 0x68
   b99b2:	f001 fe90 	bl	bb6d6 <__copybits>
   b99b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b99b8:	4620      	mov	r0, r4
   b99ba:	f001 fa4f 	bl	bae5c <_Bfree>
   b99be:	3f01      	subs	r7, #1
   b99c0:	2f04      	cmp	r7, #4
   b99c2:	d806      	bhi.n	b99d2 <_strtod_l+0x102>
   b99c4:	e8df f007 	tbb	[pc, r7]
   b99c8:	1714030a 	.word	0x1714030a
   b99cc:	0a          	.byte	0x0a
   b99cd:	00          	.byte	0x00
   b99ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b99d2:	0728      	lsls	r0, r5, #28
   b99d4:	d5c0      	bpl.n	b9958 <_strtod_l+0x88>
   b99d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b99da:	e7bd      	b.n	b9958 <_strtod_l+0x88>
   b99dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b99e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b99e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b99e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b99ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b99ee:	e7f0      	b.n	b99d2 <_strtod_l+0x102>
   b99f0:	f8df b180 	ldr.w	fp, [pc, #384]	; b9b74 <_strtod_l+0x2a4>
   b99f4:	e7ed      	b.n	b99d2 <_strtod_l+0x102>
   b99f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b99fa:	f04f 3aff 	mov.w	sl, #4294967295
   b99fe:	e7e8      	b.n	b99d2 <_strtod_l+0x102>
   b9a00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a02:	1c5a      	adds	r2, r3, #1
   b9a04:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a06:	785b      	ldrb	r3, [r3, #1]
   b9a08:	2b30      	cmp	r3, #48	; 0x30
   b9a0a:	d0f9      	beq.n	b9a00 <_strtod_l+0x130>
   b9a0c:	2b00      	cmp	r3, #0
   b9a0e:	d0a3      	beq.n	b9958 <_strtod_l+0x88>
   b9a10:	2301      	movs	r3, #1
   b9a12:	f04f 0900 	mov.w	r9, #0
   b9a16:	9304      	str	r3, [sp, #16]
   b9a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9a1a:	9308      	str	r3, [sp, #32]
   b9a1c:	f8cd 901c 	str.w	r9, [sp, #28]
   b9a20:	464f      	mov	r7, r9
   b9a22:	220a      	movs	r2, #10
   b9a24:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b9a26:	7806      	ldrb	r6, [r0, #0]
   b9a28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b9a2c:	b2d9      	uxtb	r1, r3
   b9a2e:	2909      	cmp	r1, #9
   b9a30:	d92a      	bls.n	b9a88 <_strtod_l+0x1b8>
   b9a32:	9905      	ldr	r1, [sp, #20]
   b9a34:	462a      	mov	r2, r5
   b9a36:	f7ff ff07 	bl	b9848 <strncmp>
   b9a3a:	b398      	cbz	r0, b9aa4 <_strtod_l+0x1d4>
   b9a3c:	2000      	movs	r0, #0
   b9a3e:	4632      	mov	r2, r6
   b9a40:	463d      	mov	r5, r7
   b9a42:	9005      	str	r0, [sp, #20]
   b9a44:	4603      	mov	r3, r0
   b9a46:	2a65      	cmp	r2, #101	; 0x65
   b9a48:	d001      	beq.n	b9a4e <_strtod_l+0x17e>
   b9a4a:	2a45      	cmp	r2, #69	; 0x45
   b9a4c:	d118      	bne.n	b9a80 <_strtod_l+0x1b0>
   b9a4e:	b91d      	cbnz	r5, b9a58 <_strtod_l+0x188>
   b9a50:	9a04      	ldr	r2, [sp, #16]
   b9a52:	4302      	orrs	r2, r0
   b9a54:	d09e      	beq.n	b9994 <_strtod_l+0xc4>
   b9a56:	2500      	movs	r5, #0
   b9a58:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b9a5c:	f108 0201 	add.w	r2, r8, #1
   b9a60:	9217      	str	r2, [sp, #92]	; 0x5c
   b9a62:	f898 2001 	ldrb.w	r2, [r8, #1]
   b9a66:	2a2b      	cmp	r2, #43	; 0x2b
   b9a68:	d075      	beq.n	b9b56 <_strtod_l+0x286>
   b9a6a:	2a2d      	cmp	r2, #45	; 0x2d
   b9a6c:	d07b      	beq.n	b9b66 <_strtod_l+0x296>
   b9a6e:	f04f 0c00 	mov.w	ip, #0
   b9a72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b9a76:	2909      	cmp	r1, #9
   b9a78:	f240 8082 	bls.w	b9b80 <_strtod_l+0x2b0>
   b9a7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b9a80:	2600      	movs	r6, #0
   b9a82:	e09d      	b.n	b9bc0 <_strtod_l+0x2f0>
   b9a84:	2300      	movs	r3, #0
   b9a86:	e7c4      	b.n	b9a12 <_strtod_l+0x142>
   b9a88:	2f08      	cmp	r7, #8
   b9a8a:	bfd8      	it	le
   b9a8c:	9907      	ldrle	r1, [sp, #28]
   b9a8e:	f100 0001 	add.w	r0, r0, #1
   b9a92:	bfda      	itte	le
   b9a94:	fb02 3301 	mlale	r3, r2, r1, r3
   b9a98:	9307      	strle	r3, [sp, #28]
   b9a9a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b9a9e:	3701      	adds	r7, #1
   b9aa0:	9017      	str	r0, [sp, #92]	; 0x5c
   b9aa2:	e7bf      	b.n	b9a24 <_strtod_l+0x154>
   b9aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9aa6:	195a      	adds	r2, r3, r5
   b9aa8:	9217      	str	r2, [sp, #92]	; 0x5c
   b9aaa:	5d5a      	ldrb	r2, [r3, r5]
   b9aac:	2f00      	cmp	r7, #0
   b9aae:	d037      	beq.n	b9b20 <_strtod_l+0x250>
   b9ab0:	9005      	str	r0, [sp, #20]
   b9ab2:	463d      	mov	r5, r7
   b9ab4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b9ab8:	2b09      	cmp	r3, #9
   b9aba:	d912      	bls.n	b9ae2 <_strtod_l+0x212>
   b9abc:	2301      	movs	r3, #1
   b9abe:	e7c2      	b.n	b9a46 <_strtod_l+0x176>
   b9ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ac2:	1c5a      	adds	r2, r3, #1
   b9ac4:	9217      	str	r2, [sp, #92]	; 0x5c
   b9ac6:	785a      	ldrb	r2, [r3, #1]
   b9ac8:	3001      	adds	r0, #1
   b9aca:	2a30      	cmp	r2, #48	; 0x30
   b9acc:	d0f8      	beq.n	b9ac0 <_strtod_l+0x1f0>
   b9ace:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b9ad2:	2b08      	cmp	r3, #8
   b9ad4:	f200 84d9 	bhi.w	ba48a <_strtod_l+0xbba>
   b9ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9ada:	9005      	str	r0, [sp, #20]
   b9adc:	2000      	movs	r0, #0
   b9ade:	9308      	str	r3, [sp, #32]
   b9ae0:	4605      	mov	r5, r0
   b9ae2:	3a30      	subs	r2, #48	; 0x30
   b9ae4:	f100 0301 	add.w	r3, r0, #1
   b9ae8:	d014      	beq.n	b9b14 <_strtod_l+0x244>
   b9aea:	9905      	ldr	r1, [sp, #20]
   b9aec:	4419      	add	r1, r3
   b9aee:	9105      	str	r1, [sp, #20]
   b9af0:	462b      	mov	r3, r5
   b9af2:	eb00 0e05 	add.w	lr, r0, r5
   b9af6:	210a      	movs	r1, #10
   b9af8:	4573      	cmp	r3, lr
   b9afa:	d113      	bne.n	b9b24 <_strtod_l+0x254>
   b9afc:	182b      	adds	r3, r5, r0
   b9afe:	2b08      	cmp	r3, #8
   b9b00:	f105 0501 	add.w	r5, r5, #1
   b9b04:	4405      	add	r5, r0
   b9b06:	dc1c      	bgt.n	b9b42 <_strtod_l+0x272>
   b9b08:	9907      	ldr	r1, [sp, #28]
   b9b0a:	230a      	movs	r3, #10
   b9b0c:	fb03 2301 	mla	r3, r3, r1, r2
   b9b10:	9307      	str	r3, [sp, #28]
   b9b12:	2300      	movs	r3, #0
   b9b14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b16:	1c51      	adds	r1, r2, #1
   b9b18:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b1a:	7852      	ldrb	r2, [r2, #1]
   b9b1c:	4618      	mov	r0, r3
   b9b1e:	e7c9      	b.n	b9ab4 <_strtod_l+0x1e4>
   b9b20:	4638      	mov	r0, r7
   b9b22:	e7d2      	b.n	b9aca <_strtod_l+0x1fa>
   b9b24:	2b08      	cmp	r3, #8
   b9b26:	dc04      	bgt.n	b9b32 <_strtod_l+0x262>
   b9b28:	9e07      	ldr	r6, [sp, #28]
   b9b2a:	434e      	muls	r6, r1
   b9b2c:	9607      	str	r6, [sp, #28]
   b9b2e:	3301      	adds	r3, #1
   b9b30:	e7e2      	b.n	b9af8 <_strtod_l+0x228>
   b9b32:	f103 0c01 	add.w	ip, r3, #1
   b9b36:	f1bc 0f10 	cmp.w	ip, #16
   b9b3a:	bfd8      	it	le
   b9b3c:	fb01 f909 	mulle.w	r9, r1, r9
   b9b40:	e7f5      	b.n	b9b2e <_strtod_l+0x25e>
   b9b42:	2d10      	cmp	r5, #16
   b9b44:	bfdc      	itt	le
   b9b46:	230a      	movle	r3, #10
   b9b48:	fb03 2909 	mlale	r9, r3, r9, r2
   b9b4c:	e7e1      	b.n	b9b12 <_strtod_l+0x242>
   b9b4e:	2300      	movs	r3, #0
   b9b50:	9305      	str	r3, [sp, #20]
   b9b52:	2301      	movs	r3, #1
   b9b54:	e77c      	b.n	b9a50 <_strtod_l+0x180>
   b9b56:	f04f 0c00 	mov.w	ip, #0
   b9b5a:	f108 0202 	add.w	r2, r8, #2
   b9b5e:	9217      	str	r2, [sp, #92]	; 0x5c
   b9b60:	f898 2002 	ldrb.w	r2, [r8, #2]
   b9b64:	e785      	b.n	b9a72 <_strtod_l+0x1a2>
   b9b66:	f04f 0c01 	mov.w	ip, #1
   b9b6a:	e7f6      	b.n	b9b5a <_strtod_l+0x28a>
   b9b6c:	000bcf94 	.word	0x000bcf94
   b9b70:	000bcda4 	.word	0x000bcda4
   b9b74:	7ff00000 	.word	0x7ff00000
   b9b78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b7a:	1c51      	adds	r1, r2, #1
   b9b7c:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b7e:	7852      	ldrb	r2, [r2, #1]
   b9b80:	2a30      	cmp	r2, #48	; 0x30
   b9b82:	d0f9      	beq.n	b9b78 <_strtod_l+0x2a8>
   b9b84:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b9b88:	2908      	cmp	r1, #8
   b9b8a:	f63f af79 	bhi.w	b9a80 <_strtod_l+0x1b0>
   b9b8e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b9b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b94:	9206      	str	r2, [sp, #24]
   b9b96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b9b98:	1c51      	adds	r1, r2, #1
   b9b9a:	9117      	str	r1, [sp, #92]	; 0x5c
   b9b9c:	7852      	ldrb	r2, [r2, #1]
   b9b9e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b9ba2:	2e09      	cmp	r6, #9
   b9ba4:	d937      	bls.n	b9c16 <_strtod_l+0x346>
   b9ba6:	9e06      	ldr	r6, [sp, #24]
   b9ba8:	1b89      	subs	r1, r1, r6
   b9baa:	2908      	cmp	r1, #8
   b9bac:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b9bb0:	dc02      	bgt.n	b9bb8 <_strtod_l+0x2e8>
   b9bb2:	4576      	cmp	r6, lr
   b9bb4:	bfa8      	it	ge
   b9bb6:	4676      	movge	r6, lr
   b9bb8:	f1bc 0f00 	cmp.w	ip, #0
   b9bbc:	d000      	beq.n	b9bc0 <_strtod_l+0x2f0>
   b9bbe:	4276      	negs	r6, r6
   b9bc0:	2d00      	cmp	r5, #0
   b9bc2:	d14d      	bne.n	b9c60 <_strtod_l+0x390>
   b9bc4:	9904      	ldr	r1, [sp, #16]
   b9bc6:	4301      	orrs	r1, r0
   b9bc8:	f47f aec6 	bne.w	b9958 <_strtod_l+0x88>
   b9bcc:	2b00      	cmp	r3, #0
   b9bce:	f47f aee1 	bne.w	b9994 <_strtod_l+0xc4>
   b9bd2:	2a69      	cmp	r2, #105	; 0x69
   b9bd4:	d027      	beq.n	b9c26 <_strtod_l+0x356>
   b9bd6:	dc24      	bgt.n	b9c22 <_strtod_l+0x352>
   b9bd8:	2a49      	cmp	r2, #73	; 0x49
   b9bda:	d024      	beq.n	b9c26 <_strtod_l+0x356>
   b9bdc:	2a4e      	cmp	r2, #78	; 0x4e
   b9bde:	f47f aed9 	bne.w	b9994 <_strtod_l+0xc4>
   b9be2:	499f      	ldr	r1, [pc, #636]	; (b9e60 <_strtod_l+0x590>)
   b9be4:	a817      	add	r0, sp, #92	; 0x5c
   b9be6:	f001 f833 	bl	bac50 <__match>
   b9bea:	2800      	cmp	r0, #0
   b9bec:	f43f aed2 	beq.w	b9994 <_strtod_l+0xc4>
   b9bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9bf2:	781b      	ldrb	r3, [r3, #0]
   b9bf4:	2b28      	cmp	r3, #40	; 0x28
   b9bf6:	d12d      	bne.n	b9c54 <_strtod_l+0x384>
   b9bf8:	499a      	ldr	r1, [pc, #616]	; (b9e64 <_strtod_l+0x594>)
   b9bfa:	aa1a      	add	r2, sp, #104	; 0x68
   b9bfc:	a817      	add	r0, sp, #92	; 0x5c
   b9bfe:	f001 f83b 	bl	bac78 <__hexnan>
   b9c02:	2805      	cmp	r0, #5
   b9c04:	d126      	bne.n	b9c54 <_strtod_l+0x384>
   b9c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b9c08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b9c0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b9c10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b9c14:	e6a0      	b.n	b9958 <_strtod_l+0x88>
   b9c16:	210a      	movs	r1, #10
   b9c18:	fb01 2e0e 	mla	lr, r1, lr, r2
   b9c1c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b9c20:	e7b9      	b.n	b9b96 <_strtod_l+0x2c6>
   b9c22:	2a6e      	cmp	r2, #110	; 0x6e
   b9c24:	e7db      	b.n	b9bde <_strtod_l+0x30e>
   b9c26:	4990      	ldr	r1, [pc, #576]	; (b9e68 <_strtod_l+0x598>)
   b9c28:	a817      	add	r0, sp, #92	; 0x5c
   b9c2a:	f001 f811 	bl	bac50 <__match>
   b9c2e:	2800      	cmp	r0, #0
   b9c30:	f43f aeb0 	beq.w	b9994 <_strtod_l+0xc4>
   b9c34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c36:	498d      	ldr	r1, [pc, #564]	; (b9e6c <_strtod_l+0x59c>)
   b9c38:	3b01      	subs	r3, #1
   b9c3a:	a817      	add	r0, sp, #92	; 0x5c
   b9c3c:	9317      	str	r3, [sp, #92]	; 0x5c
   b9c3e:	f001 f807 	bl	bac50 <__match>
   b9c42:	b910      	cbnz	r0, b9c4a <_strtod_l+0x37a>
   b9c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b9c46:	3301      	adds	r3, #1
   b9c48:	9317      	str	r3, [sp, #92]	; 0x5c
   b9c4a:	f8df b230 	ldr.w	fp, [pc, #560]	; b9e7c <_strtod_l+0x5ac>
   b9c4e:	f04f 0a00 	mov.w	sl, #0
   b9c52:	e681      	b.n	b9958 <_strtod_l+0x88>
   b9c54:	4886      	ldr	r0, [pc, #536]	; (b9e70 <_strtod_l+0x5a0>)
   b9c56:	f001 fd93 	bl	bb780 <nan>
   b9c5a:	ec5b ab10 	vmov	sl, fp, d0
   b9c5e:	e67b      	b.n	b9958 <_strtod_l+0x88>
   b9c60:	9b05      	ldr	r3, [sp, #20]
   b9c62:	9807      	ldr	r0, [sp, #28]
   b9c64:	1af3      	subs	r3, r6, r3
   b9c66:	2f00      	cmp	r7, #0
   b9c68:	bf08      	it	eq
   b9c6a:	462f      	moveq	r7, r5
   b9c6c:	2d10      	cmp	r5, #16
   b9c6e:	9306      	str	r3, [sp, #24]
   b9c70:	46a8      	mov	r8, r5
   b9c72:	bfa8      	it	ge
   b9c74:	f04f 0810 	movge.w	r8, #16
   b9c78:	f7fa fb14 	bl	b42a4 <__aeabi_ui2d>
   b9c7c:	2d09      	cmp	r5, #9
   b9c7e:	4682      	mov	sl, r0
   b9c80:	468b      	mov	fp, r1
   b9c82:	dd13      	ble.n	b9cac <_strtod_l+0x3dc>
   b9c84:	4b7b      	ldr	r3, [pc, #492]	; (b9e74 <_strtod_l+0x5a4>)
   b9c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b9c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b9c8e:	f7fa fb83 	bl	b4398 <__aeabi_dmul>
   b9c92:	4682      	mov	sl, r0
   b9c94:	4648      	mov	r0, r9
   b9c96:	468b      	mov	fp, r1
   b9c98:	f7fa fb04 	bl	b42a4 <__aeabi_ui2d>
   b9c9c:	4602      	mov	r2, r0
   b9c9e:	460b      	mov	r3, r1
   b9ca0:	4650      	mov	r0, sl
   b9ca2:	4659      	mov	r1, fp
   b9ca4:	f7fa f9c2 	bl	b402c <__adddf3>
   b9ca8:	4682      	mov	sl, r0
   b9caa:	468b      	mov	fp, r1
   b9cac:	2d0f      	cmp	r5, #15
   b9cae:	dc38      	bgt.n	b9d22 <_strtod_l+0x452>
   b9cb0:	9b06      	ldr	r3, [sp, #24]
   b9cb2:	2b00      	cmp	r3, #0
   b9cb4:	f43f ae50 	beq.w	b9958 <_strtod_l+0x88>
   b9cb8:	dd24      	ble.n	b9d04 <_strtod_l+0x434>
   b9cba:	2b16      	cmp	r3, #22
   b9cbc:	dc0b      	bgt.n	b9cd6 <_strtod_l+0x406>
   b9cbe:	496d      	ldr	r1, [pc, #436]	; (b9e74 <_strtod_l+0x5a4>)
   b9cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cc8:	4652      	mov	r2, sl
   b9cca:	465b      	mov	r3, fp
   b9ccc:	f7fa fb64 	bl	b4398 <__aeabi_dmul>
   b9cd0:	4682      	mov	sl, r0
   b9cd2:	468b      	mov	fp, r1
   b9cd4:	e640      	b.n	b9958 <_strtod_l+0x88>
   b9cd6:	9a06      	ldr	r2, [sp, #24]
   b9cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b9cdc:	4293      	cmp	r3, r2
   b9cde:	db20      	blt.n	b9d22 <_strtod_l+0x452>
   b9ce0:	4c64      	ldr	r4, [pc, #400]	; (b9e74 <_strtod_l+0x5a4>)
   b9ce2:	f1c5 050f 	rsb	r5, r5, #15
   b9ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b9cea:	4652      	mov	r2, sl
   b9cec:	465b      	mov	r3, fp
   b9cee:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9cf2:	f7fa fb51 	bl	b4398 <__aeabi_dmul>
   b9cf6:	9b06      	ldr	r3, [sp, #24]
   b9cf8:	1b5d      	subs	r5, r3, r5
   b9cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b9cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   b9d02:	e7e3      	b.n	b9ccc <_strtod_l+0x3fc>
   b9d04:	9b06      	ldr	r3, [sp, #24]
   b9d06:	3316      	adds	r3, #22
   b9d08:	db0b      	blt.n	b9d22 <_strtod_l+0x452>
   b9d0a:	9b05      	ldr	r3, [sp, #20]
   b9d0c:	1b9e      	subs	r6, r3, r6
   b9d0e:	4b59      	ldr	r3, [pc, #356]	; (b9e74 <_strtod_l+0x5a4>)
   b9d10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b9d14:	e9d6 2300 	ldrd	r2, r3, [r6]
   b9d18:	4650      	mov	r0, sl
   b9d1a:	4659      	mov	r1, fp
   b9d1c:	f7fa fc66 	bl	b45ec <__aeabi_ddiv>
   b9d20:	e7d6      	b.n	b9cd0 <_strtod_l+0x400>
   b9d22:	9b06      	ldr	r3, [sp, #24]
   b9d24:	eba5 0808 	sub.w	r8, r5, r8
   b9d28:	4498      	add	r8, r3
   b9d2a:	f1b8 0f00 	cmp.w	r8, #0
   b9d2e:	dd74      	ble.n	b9e1a <_strtod_l+0x54a>
   b9d30:	f018 030f 	ands.w	r3, r8, #15
   b9d34:	d00a      	beq.n	b9d4c <_strtod_l+0x47c>
   b9d36:	494f      	ldr	r1, [pc, #316]	; (b9e74 <_strtod_l+0x5a4>)
   b9d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b9d3c:	4652      	mov	r2, sl
   b9d3e:	465b      	mov	r3, fp
   b9d40:	e9d1 0100 	ldrd	r0, r1, [r1]
   b9d44:	f7fa fb28 	bl	b4398 <__aeabi_dmul>
   b9d48:	4682      	mov	sl, r0
   b9d4a:	468b      	mov	fp, r1
   b9d4c:	f038 080f 	bics.w	r8, r8, #15
   b9d50:	d04f      	beq.n	b9df2 <_strtod_l+0x522>
   b9d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b9d56:	dd22      	ble.n	b9d9e <_strtod_l+0x4ce>
   b9d58:	2500      	movs	r5, #0
   b9d5a:	462e      	mov	r6, r5
   b9d5c:	9507      	str	r5, [sp, #28]
   b9d5e:	9505      	str	r5, [sp, #20]
   b9d60:	2322      	movs	r3, #34	; 0x22
   b9d62:	f8df b118 	ldr.w	fp, [pc, #280]	; b9e7c <_strtod_l+0x5ac>
   b9d66:	6023      	str	r3, [r4, #0]
   b9d68:	f04f 0a00 	mov.w	sl, #0
   b9d6c:	9b07      	ldr	r3, [sp, #28]
   b9d6e:	2b00      	cmp	r3, #0
   b9d70:	f43f adf2 	beq.w	b9958 <_strtod_l+0x88>
   b9d74:	9918      	ldr	r1, [sp, #96]	; 0x60
   b9d76:	4620      	mov	r0, r4
   b9d78:	f001 f870 	bl	bae5c <_Bfree>
   b9d7c:	9905      	ldr	r1, [sp, #20]
   b9d7e:	4620      	mov	r0, r4
   b9d80:	f001 f86c 	bl	bae5c <_Bfree>
   b9d84:	4631      	mov	r1, r6
   b9d86:	4620      	mov	r0, r4
   b9d88:	f001 f868 	bl	bae5c <_Bfree>
   b9d8c:	9907      	ldr	r1, [sp, #28]
   b9d8e:	4620      	mov	r0, r4
   b9d90:	f001 f864 	bl	bae5c <_Bfree>
   b9d94:	4629      	mov	r1, r5
   b9d96:	4620      	mov	r0, r4
   b9d98:	f001 f860 	bl	bae5c <_Bfree>
   b9d9c:	e5dc      	b.n	b9958 <_strtod_l+0x88>
   b9d9e:	4b36      	ldr	r3, [pc, #216]	; (b9e78 <_strtod_l+0x5a8>)
   b9da0:	9304      	str	r3, [sp, #16]
   b9da2:	2300      	movs	r3, #0
   b9da4:	ea4f 1828 	mov.w	r8, r8, asr #4
   b9da8:	4650      	mov	r0, sl
   b9daa:	4659      	mov	r1, fp
   b9dac:	4699      	mov	r9, r3
   b9dae:	f1b8 0f01 	cmp.w	r8, #1
   b9db2:	dc21      	bgt.n	b9df8 <_strtod_l+0x528>
   b9db4:	b10b      	cbz	r3, b9dba <_strtod_l+0x4ea>
   b9db6:	4682      	mov	sl, r0
   b9db8:	468b      	mov	fp, r1
   b9dba:	4b2f      	ldr	r3, [pc, #188]	; (b9e78 <_strtod_l+0x5a8>)
   b9dbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b9dc0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b9dc4:	4652      	mov	r2, sl
   b9dc6:	465b      	mov	r3, fp
   b9dc8:	e9d9 0100 	ldrd	r0, r1, [r9]
   b9dcc:	f7fa fae4 	bl	b4398 <__aeabi_dmul>
   b9dd0:	4b2a      	ldr	r3, [pc, #168]	; (b9e7c <_strtod_l+0x5ac>)
   b9dd2:	460a      	mov	r2, r1
   b9dd4:	400b      	ands	r3, r1
   b9dd6:	492a      	ldr	r1, [pc, #168]	; (b9e80 <_strtod_l+0x5b0>)
   b9dd8:	428b      	cmp	r3, r1
   b9dda:	4682      	mov	sl, r0
   b9ddc:	d8bc      	bhi.n	b9d58 <_strtod_l+0x488>
   b9dde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b9de2:	428b      	cmp	r3, r1
   b9de4:	bf86      	itte	hi
   b9de6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b9e84 <_strtod_l+0x5b4>
   b9dea:	f04f 3aff 	movhi.w	sl, #4294967295
   b9dee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b9df2:	2300      	movs	r3, #0
   b9df4:	9304      	str	r3, [sp, #16]
   b9df6:	e084      	b.n	b9f02 <_strtod_l+0x632>
   b9df8:	f018 0f01 	tst.w	r8, #1
   b9dfc:	d005      	beq.n	b9e0a <_strtod_l+0x53a>
   b9dfe:	9b04      	ldr	r3, [sp, #16]
   b9e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e04:	f7fa fac8 	bl	b4398 <__aeabi_dmul>
   b9e08:	2301      	movs	r3, #1
   b9e0a:	9a04      	ldr	r2, [sp, #16]
   b9e0c:	3208      	adds	r2, #8
   b9e0e:	f109 0901 	add.w	r9, r9, #1
   b9e12:	ea4f 0868 	mov.w	r8, r8, asr #1
   b9e16:	9204      	str	r2, [sp, #16]
   b9e18:	e7c9      	b.n	b9dae <_strtod_l+0x4de>
   b9e1a:	d0ea      	beq.n	b9df2 <_strtod_l+0x522>
   b9e1c:	f1c8 0800 	rsb	r8, r8, #0
   b9e20:	f018 020f 	ands.w	r2, r8, #15
   b9e24:	d00a      	beq.n	b9e3c <_strtod_l+0x56c>
   b9e26:	4b13      	ldr	r3, [pc, #76]	; (b9e74 <_strtod_l+0x5a4>)
   b9e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b9e2c:	4650      	mov	r0, sl
   b9e2e:	4659      	mov	r1, fp
   b9e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   b9e34:	f7fa fbda 	bl	b45ec <__aeabi_ddiv>
   b9e38:	4682      	mov	sl, r0
   b9e3a:	468b      	mov	fp, r1
   b9e3c:	ea5f 1828 	movs.w	r8, r8, asr #4
   b9e40:	d0d7      	beq.n	b9df2 <_strtod_l+0x522>
   b9e42:	f1b8 0f1f 	cmp.w	r8, #31
   b9e46:	dd1f      	ble.n	b9e88 <_strtod_l+0x5b8>
   b9e48:	2500      	movs	r5, #0
   b9e4a:	462e      	mov	r6, r5
   b9e4c:	9507      	str	r5, [sp, #28]
   b9e4e:	9505      	str	r5, [sp, #20]
   b9e50:	2322      	movs	r3, #34	; 0x22
   b9e52:	f04f 0a00 	mov.w	sl, #0
   b9e56:	f04f 0b00 	mov.w	fp, #0
   b9e5a:	6023      	str	r3, [r4, #0]
   b9e5c:	e786      	b.n	b9d6c <_strtod_l+0x49c>
   b9e5e:	bf00      	nop
   b9e60:	000bcd9e 	.word	0x000bcd9e
   b9e64:	000bcdb8 	.word	0x000bcdb8
   b9e68:	000bcd95 	.word	0x000bcd95
   b9e6c:	000bcd98 	.word	0x000bcd98
   b9e70:	000bcb60 	.word	0x000bcb60
   b9e74:	000bd050 	.word	0x000bd050
   b9e78:	000bd028 	.word	0x000bd028
   b9e7c:	7ff00000 	.word	0x7ff00000
   b9e80:	7ca00000 	.word	0x7ca00000
   b9e84:	7fefffff 	.word	0x7fefffff
   b9e88:	f018 0310 	ands.w	r3, r8, #16
   b9e8c:	bf18      	it	ne
   b9e8e:	236a      	movne	r3, #106	; 0x6a
   b9e90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; ba240 <_strtod_l+0x970>
   b9e94:	9304      	str	r3, [sp, #16]
   b9e96:	4650      	mov	r0, sl
   b9e98:	4659      	mov	r1, fp
   b9e9a:	2300      	movs	r3, #0
   b9e9c:	f018 0f01 	tst.w	r8, #1
   b9ea0:	d004      	beq.n	b9eac <_strtod_l+0x5dc>
   b9ea2:	e9d9 2300 	ldrd	r2, r3, [r9]
   b9ea6:	f7fa fa77 	bl	b4398 <__aeabi_dmul>
   b9eaa:	2301      	movs	r3, #1
   b9eac:	ea5f 0868 	movs.w	r8, r8, asr #1
   b9eb0:	f109 0908 	add.w	r9, r9, #8
   b9eb4:	d1f2      	bne.n	b9e9c <_strtod_l+0x5cc>
   b9eb6:	b10b      	cbz	r3, b9ebc <_strtod_l+0x5ec>
   b9eb8:	4682      	mov	sl, r0
   b9eba:	468b      	mov	fp, r1
   b9ebc:	9b04      	ldr	r3, [sp, #16]
   b9ebe:	b1c3      	cbz	r3, b9ef2 <_strtod_l+0x622>
   b9ec0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b9ec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b9ec8:	2b00      	cmp	r3, #0
   b9eca:	4659      	mov	r1, fp
   b9ecc:	dd11      	ble.n	b9ef2 <_strtod_l+0x622>
   b9ece:	2b1f      	cmp	r3, #31
   b9ed0:	f340 8124 	ble.w	ba11c <_strtod_l+0x84c>
   b9ed4:	2b34      	cmp	r3, #52	; 0x34
   b9ed6:	bfde      	ittt	le
   b9ed8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b9edc:	f04f 33ff 	movle.w	r3, #4294967295
   b9ee0:	fa03 f202 	lslle.w	r2, r3, r2
   b9ee4:	f04f 0a00 	mov.w	sl, #0
   b9ee8:	bfcc      	ite	gt
   b9eea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b9eee:	ea02 0b01 	andle.w	fp, r2, r1
   b9ef2:	2200      	movs	r2, #0
   b9ef4:	2300      	movs	r3, #0
   b9ef6:	4650      	mov	r0, sl
   b9ef8:	4659      	mov	r1, fp
   b9efa:	f7fa fcb5 	bl	b4868 <__aeabi_dcmpeq>
   b9efe:	2800      	cmp	r0, #0
   b9f00:	d1a2      	bne.n	b9e48 <_strtod_l+0x578>
   b9f02:	9b07      	ldr	r3, [sp, #28]
   b9f04:	9300      	str	r3, [sp, #0]
   b9f06:	9908      	ldr	r1, [sp, #32]
   b9f08:	462b      	mov	r3, r5
   b9f0a:	463a      	mov	r2, r7
   b9f0c:	4620      	mov	r0, r4
   b9f0e:	f001 f80d 	bl	baf2c <__s2b>
   b9f12:	9007      	str	r0, [sp, #28]
   b9f14:	2800      	cmp	r0, #0
   b9f16:	f43f af1f 	beq.w	b9d58 <_strtod_l+0x488>
   b9f1a:	9b05      	ldr	r3, [sp, #20]
   b9f1c:	1b9e      	subs	r6, r3, r6
   b9f1e:	9b06      	ldr	r3, [sp, #24]
   b9f20:	2b00      	cmp	r3, #0
   b9f22:	bfb4      	ite	lt
   b9f24:	4633      	movlt	r3, r6
   b9f26:	2300      	movge	r3, #0
   b9f28:	930c      	str	r3, [sp, #48]	; 0x30
   b9f2a:	9b06      	ldr	r3, [sp, #24]
   b9f2c:	2500      	movs	r5, #0
   b9f2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b9f32:	9312      	str	r3, [sp, #72]	; 0x48
   b9f34:	462e      	mov	r6, r5
   b9f36:	9b07      	ldr	r3, [sp, #28]
   b9f38:	4620      	mov	r0, r4
   b9f3a:	6859      	ldr	r1, [r3, #4]
   b9f3c:	f000 ff4e 	bl	baddc <_Balloc>
   b9f40:	9005      	str	r0, [sp, #20]
   b9f42:	2800      	cmp	r0, #0
   b9f44:	f43f af0c 	beq.w	b9d60 <_strtod_l+0x490>
   b9f48:	9b07      	ldr	r3, [sp, #28]
   b9f4a:	691a      	ldr	r2, [r3, #16]
   b9f4c:	3202      	adds	r2, #2
   b9f4e:	f103 010c 	add.w	r1, r3, #12
   b9f52:	0092      	lsls	r2, r2, #2
   b9f54:	300c      	adds	r0, #12
   b9f56:	f7ff fc18 	bl	b978a <memcpy>
   b9f5a:	ec4b ab10 	vmov	d0, sl, fp
   b9f5e:	aa1a      	add	r2, sp, #104	; 0x68
   b9f60:	a919      	add	r1, sp, #100	; 0x64
   b9f62:	4620      	mov	r0, r4
   b9f64:	f001 fb28 	bl	bb5b8 <__d2b>
   b9f68:	ec4b ab18 	vmov	d8, sl, fp
   b9f6c:	9018      	str	r0, [sp, #96]	; 0x60
   b9f6e:	2800      	cmp	r0, #0
   b9f70:	f43f aef6 	beq.w	b9d60 <_strtod_l+0x490>
   b9f74:	2101      	movs	r1, #1
   b9f76:	4620      	mov	r0, r4
   b9f78:	f001 f872 	bl	bb060 <__i2b>
   b9f7c:	4606      	mov	r6, r0
   b9f7e:	2800      	cmp	r0, #0
   b9f80:	f43f aeee 	beq.w	b9d60 <_strtod_l+0x490>
   b9f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b9f86:	9904      	ldr	r1, [sp, #16]
   b9f88:	2b00      	cmp	r3, #0
   b9f8a:	bfab      	itete	ge
   b9f8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b9f8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b9f90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b9f92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b9f96:	bfac      	ite	ge
   b9f98:	eb03 0902 	addge.w	r9, r3, r2
   b9f9c:	1ad7      	sublt	r7, r2, r3
   b9f9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b9fa0:	eba3 0801 	sub.w	r8, r3, r1
   b9fa4:	4490      	add	r8, r2
   b9fa6:	4ba1      	ldr	r3, [pc, #644]	; (ba22c <_strtod_l+0x95c>)
   b9fa8:	f108 38ff 	add.w	r8, r8, #4294967295
   b9fac:	4598      	cmp	r8, r3
   b9fae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b9fb2:	f280 80c7 	bge.w	ba144 <_strtod_l+0x874>
   b9fb6:	eba3 0308 	sub.w	r3, r3, r8
   b9fba:	2b1f      	cmp	r3, #31
   b9fbc:	eba2 0203 	sub.w	r2, r2, r3
   b9fc0:	f04f 0101 	mov.w	r1, #1
   b9fc4:	f300 80b1 	bgt.w	ba12a <_strtod_l+0x85a>
   b9fc8:	fa01 f303 	lsl.w	r3, r1, r3
   b9fcc:	930d      	str	r3, [sp, #52]	; 0x34
   b9fce:	2300      	movs	r3, #0
   b9fd0:	9308      	str	r3, [sp, #32]
   b9fd2:	eb09 0802 	add.w	r8, r9, r2
   b9fd6:	9b04      	ldr	r3, [sp, #16]
   b9fd8:	45c1      	cmp	r9, r8
   b9fda:	4417      	add	r7, r2
   b9fdc:	441f      	add	r7, r3
   b9fde:	464b      	mov	r3, r9
   b9fe0:	bfa8      	it	ge
   b9fe2:	4643      	movge	r3, r8
   b9fe4:	42bb      	cmp	r3, r7
   b9fe6:	bfa8      	it	ge
   b9fe8:	463b      	movge	r3, r7
   b9fea:	2b00      	cmp	r3, #0
   b9fec:	bfc2      	ittt	gt
   b9fee:	eba8 0803 	subgt.w	r8, r8, r3
   b9ff2:	1aff      	subgt	r7, r7, r3
   b9ff4:	eba9 0903 	subgt.w	r9, r9, r3
   b9ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b9ffa:	2b00      	cmp	r3, #0
   b9ffc:	dd17      	ble.n	ba02e <_strtod_l+0x75e>
   b9ffe:	4631      	mov	r1, r6
   ba000:	461a      	mov	r2, r3
   ba002:	4620      	mov	r0, r4
   ba004:	f001 f8ec 	bl	bb1e0 <__pow5mult>
   ba008:	4606      	mov	r6, r0
   ba00a:	2800      	cmp	r0, #0
   ba00c:	f43f aea8 	beq.w	b9d60 <_strtod_l+0x490>
   ba010:	4601      	mov	r1, r0
   ba012:	9a18      	ldr	r2, [sp, #96]	; 0x60
   ba014:	4620      	mov	r0, r4
   ba016:	f001 f839 	bl	bb08c <__multiply>
   ba01a:	900b      	str	r0, [sp, #44]	; 0x2c
   ba01c:	2800      	cmp	r0, #0
   ba01e:	f43f ae9f 	beq.w	b9d60 <_strtod_l+0x490>
   ba022:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba024:	4620      	mov	r0, r4
   ba026:	f000 ff19 	bl	bae5c <_Bfree>
   ba02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba02c:	9318      	str	r3, [sp, #96]	; 0x60
   ba02e:	f1b8 0f00 	cmp.w	r8, #0
   ba032:	f300 808c 	bgt.w	ba14e <_strtod_l+0x87e>
   ba036:	9b06      	ldr	r3, [sp, #24]
   ba038:	2b00      	cmp	r3, #0
   ba03a:	dd08      	ble.n	ba04e <_strtod_l+0x77e>
   ba03c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   ba03e:	9905      	ldr	r1, [sp, #20]
   ba040:	4620      	mov	r0, r4
   ba042:	f001 f8cd 	bl	bb1e0 <__pow5mult>
   ba046:	9005      	str	r0, [sp, #20]
   ba048:	2800      	cmp	r0, #0
   ba04a:	f43f ae89 	beq.w	b9d60 <_strtod_l+0x490>
   ba04e:	2f00      	cmp	r7, #0
   ba050:	dd08      	ble.n	ba064 <_strtod_l+0x794>
   ba052:	9905      	ldr	r1, [sp, #20]
   ba054:	463a      	mov	r2, r7
   ba056:	4620      	mov	r0, r4
   ba058:	f001 f91c 	bl	bb294 <__lshift>
   ba05c:	9005      	str	r0, [sp, #20]
   ba05e:	2800      	cmp	r0, #0
   ba060:	f43f ae7e 	beq.w	b9d60 <_strtod_l+0x490>
   ba064:	f1b9 0f00 	cmp.w	r9, #0
   ba068:	dd08      	ble.n	ba07c <_strtod_l+0x7ac>
   ba06a:	4631      	mov	r1, r6
   ba06c:	464a      	mov	r2, r9
   ba06e:	4620      	mov	r0, r4
   ba070:	f001 f910 	bl	bb294 <__lshift>
   ba074:	4606      	mov	r6, r0
   ba076:	2800      	cmp	r0, #0
   ba078:	f43f ae72 	beq.w	b9d60 <_strtod_l+0x490>
   ba07c:	9a05      	ldr	r2, [sp, #20]
   ba07e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba080:	4620      	mov	r0, r4
   ba082:	f001 f993 	bl	bb3ac <__mdiff>
   ba086:	4605      	mov	r5, r0
   ba088:	2800      	cmp	r0, #0
   ba08a:	f43f ae69 	beq.w	b9d60 <_strtod_l+0x490>
   ba08e:	68c3      	ldr	r3, [r0, #12]
   ba090:	930b      	str	r3, [sp, #44]	; 0x2c
   ba092:	2300      	movs	r3, #0
   ba094:	60c3      	str	r3, [r0, #12]
   ba096:	4631      	mov	r1, r6
   ba098:	f001 f96c 	bl	bb374 <__mcmp>
   ba09c:	2800      	cmp	r0, #0
   ba09e:	da60      	bge.n	ba162 <_strtod_l+0x892>
   ba0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba0a2:	ea53 030a 	orrs.w	r3, r3, sl
   ba0a6:	f040 8082 	bne.w	ba1ae <_strtod_l+0x8de>
   ba0aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba0ae:	2b00      	cmp	r3, #0
   ba0b0:	d17d      	bne.n	ba1ae <_strtod_l+0x8de>
   ba0b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba0b6:	0d1b      	lsrs	r3, r3, #20
   ba0b8:	051b      	lsls	r3, r3, #20
   ba0ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   ba0be:	d976      	bls.n	ba1ae <_strtod_l+0x8de>
   ba0c0:	696b      	ldr	r3, [r5, #20]
   ba0c2:	b913      	cbnz	r3, ba0ca <_strtod_l+0x7fa>
   ba0c4:	692b      	ldr	r3, [r5, #16]
   ba0c6:	2b01      	cmp	r3, #1
   ba0c8:	dd71      	ble.n	ba1ae <_strtod_l+0x8de>
   ba0ca:	4629      	mov	r1, r5
   ba0cc:	2201      	movs	r2, #1
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	f001 f8e0 	bl	bb294 <__lshift>
   ba0d4:	4631      	mov	r1, r6
   ba0d6:	4605      	mov	r5, r0
   ba0d8:	f001 f94c 	bl	bb374 <__mcmp>
   ba0dc:	2800      	cmp	r0, #0
   ba0de:	dd66      	ble.n	ba1ae <_strtod_l+0x8de>
   ba0e0:	9904      	ldr	r1, [sp, #16]
   ba0e2:	4a53      	ldr	r2, [pc, #332]	; (ba230 <_strtod_l+0x960>)
   ba0e4:	465b      	mov	r3, fp
   ba0e6:	2900      	cmp	r1, #0
   ba0e8:	f000 8081 	beq.w	ba1ee <_strtod_l+0x91e>
   ba0ec:	ea02 010b 	and.w	r1, r2, fp
   ba0f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   ba0f4:	dc7b      	bgt.n	ba1ee <_strtod_l+0x91e>
   ba0f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   ba0fa:	f77f aea9 	ble.w	b9e50 <_strtod_l+0x580>
   ba0fe:	4b4d      	ldr	r3, [pc, #308]	; (ba234 <_strtod_l+0x964>)
   ba100:	4650      	mov	r0, sl
   ba102:	4659      	mov	r1, fp
   ba104:	2200      	movs	r2, #0
   ba106:	f7fa f947 	bl	b4398 <__aeabi_dmul>
   ba10a:	460b      	mov	r3, r1
   ba10c:	4303      	orrs	r3, r0
   ba10e:	bf08      	it	eq
   ba110:	2322      	moveq	r3, #34	; 0x22
   ba112:	4682      	mov	sl, r0
   ba114:	468b      	mov	fp, r1
   ba116:	bf08      	it	eq
   ba118:	6023      	streq	r3, [r4, #0]
   ba11a:	e62b      	b.n	b9d74 <_strtod_l+0x4a4>
   ba11c:	f04f 32ff 	mov.w	r2, #4294967295
   ba120:	fa02 f303 	lsl.w	r3, r2, r3
   ba124:	ea03 0a0a 	and.w	sl, r3, sl
   ba128:	e6e3      	b.n	b9ef2 <_strtod_l+0x622>
   ba12a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   ba12e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   ba132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   ba136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   ba13a:	fa01 f308 	lsl.w	r3, r1, r8
   ba13e:	9308      	str	r3, [sp, #32]
   ba140:	910d      	str	r1, [sp, #52]	; 0x34
   ba142:	e746      	b.n	b9fd2 <_strtod_l+0x702>
   ba144:	2300      	movs	r3, #0
   ba146:	9308      	str	r3, [sp, #32]
   ba148:	2301      	movs	r3, #1
   ba14a:	930d      	str	r3, [sp, #52]	; 0x34
   ba14c:	e741      	b.n	b9fd2 <_strtod_l+0x702>
   ba14e:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba150:	4642      	mov	r2, r8
   ba152:	4620      	mov	r0, r4
   ba154:	f001 f89e 	bl	bb294 <__lshift>
   ba158:	9018      	str	r0, [sp, #96]	; 0x60
   ba15a:	2800      	cmp	r0, #0
   ba15c:	f47f af6b 	bne.w	ba036 <_strtod_l+0x766>
   ba160:	e5fe      	b.n	b9d60 <_strtod_l+0x490>
   ba162:	465f      	mov	r7, fp
   ba164:	d16e      	bne.n	ba244 <_strtod_l+0x974>
   ba166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba168:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba16c:	b342      	cbz	r2, ba1c0 <_strtod_l+0x8f0>
   ba16e:	4a32      	ldr	r2, [pc, #200]	; (ba238 <_strtod_l+0x968>)
   ba170:	4293      	cmp	r3, r2
   ba172:	d128      	bne.n	ba1c6 <_strtod_l+0x8f6>
   ba174:	9b04      	ldr	r3, [sp, #16]
   ba176:	4651      	mov	r1, sl
   ba178:	b1eb      	cbz	r3, ba1b6 <_strtod_l+0x8e6>
   ba17a:	4b2d      	ldr	r3, [pc, #180]	; (ba230 <_strtod_l+0x960>)
   ba17c:	403b      	ands	r3, r7
   ba17e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba182:	f04f 32ff 	mov.w	r2, #4294967295
   ba186:	d819      	bhi.n	ba1bc <_strtod_l+0x8ec>
   ba188:	0d1b      	lsrs	r3, r3, #20
   ba18a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba18e:	fa02 f303 	lsl.w	r3, r2, r3
   ba192:	4299      	cmp	r1, r3
   ba194:	d117      	bne.n	ba1c6 <_strtod_l+0x8f6>
   ba196:	4b29      	ldr	r3, [pc, #164]	; (ba23c <_strtod_l+0x96c>)
   ba198:	429f      	cmp	r7, r3
   ba19a:	d102      	bne.n	ba1a2 <_strtod_l+0x8d2>
   ba19c:	3101      	adds	r1, #1
   ba19e:	f43f addf 	beq.w	b9d60 <_strtod_l+0x490>
   ba1a2:	4b23      	ldr	r3, [pc, #140]	; (ba230 <_strtod_l+0x960>)
   ba1a4:	403b      	ands	r3, r7
   ba1a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   ba1aa:	f04f 0a00 	mov.w	sl, #0
   ba1ae:	9b04      	ldr	r3, [sp, #16]
   ba1b0:	2b00      	cmp	r3, #0
   ba1b2:	d1a4      	bne.n	ba0fe <_strtod_l+0x82e>
   ba1b4:	e5de      	b.n	b9d74 <_strtod_l+0x4a4>
   ba1b6:	f04f 33ff 	mov.w	r3, #4294967295
   ba1ba:	e7ea      	b.n	ba192 <_strtod_l+0x8c2>
   ba1bc:	4613      	mov	r3, r2
   ba1be:	e7e8      	b.n	ba192 <_strtod_l+0x8c2>
   ba1c0:	ea53 030a 	orrs.w	r3, r3, sl
   ba1c4:	d08c      	beq.n	ba0e0 <_strtod_l+0x810>
   ba1c6:	9b08      	ldr	r3, [sp, #32]
   ba1c8:	b1db      	cbz	r3, ba202 <_strtod_l+0x932>
   ba1ca:	423b      	tst	r3, r7
   ba1cc:	d0ef      	beq.n	ba1ae <_strtod_l+0x8de>
   ba1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba1d0:	9a04      	ldr	r2, [sp, #16]
   ba1d2:	4650      	mov	r0, sl
   ba1d4:	4659      	mov	r1, fp
   ba1d6:	b1c3      	cbz	r3, ba20a <_strtod_l+0x93a>
   ba1d8:	f7ff fb5d 	bl	b9896 <sulp>
   ba1dc:	4602      	mov	r2, r0
   ba1de:	460b      	mov	r3, r1
   ba1e0:	ec51 0b18 	vmov	r0, r1, d8
   ba1e4:	f7f9 ff22 	bl	b402c <__adddf3>
   ba1e8:	4682      	mov	sl, r0
   ba1ea:	468b      	mov	fp, r1
   ba1ec:	e7df      	b.n	ba1ae <_strtod_l+0x8de>
   ba1ee:	4013      	ands	r3, r2
   ba1f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   ba1f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   ba1f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   ba1fc:	f04f 3aff 	mov.w	sl, #4294967295
   ba200:	e7d5      	b.n	ba1ae <_strtod_l+0x8de>
   ba202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba204:	ea13 0f0a 	tst.w	r3, sl
   ba208:	e7e0      	b.n	ba1cc <_strtod_l+0x8fc>
   ba20a:	f7ff fb44 	bl	b9896 <sulp>
   ba20e:	4602      	mov	r2, r0
   ba210:	460b      	mov	r3, r1
   ba212:	ec51 0b18 	vmov	r0, r1, d8
   ba216:	f7f9 ff07 	bl	b4028 <__aeabi_dsub>
   ba21a:	2200      	movs	r2, #0
   ba21c:	2300      	movs	r3, #0
   ba21e:	4682      	mov	sl, r0
   ba220:	468b      	mov	fp, r1
   ba222:	f7fa fb21 	bl	b4868 <__aeabi_dcmpeq>
   ba226:	2800      	cmp	r0, #0
   ba228:	d0c1      	beq.n	ba1ae <_strtod_l+0x8de>
   ba22a:	e611      	b.n	b9e50 <_strtod_l+0x580>
   ba22c:	fffffc02 	.word	0xfffffc02
   ba230:	7ff00000 	.word	0x7ff00000
   ba234:	39500000 	.word	0x39500000
   ba238:	000fffff 	.word	0x000fffff
   ba23c:	7fefffff 	.word	0x7fefffff
   ba240:	000bcdd0 	.word	0x000bcdd0
   ba244:	4631      	mov	r1, r6
   ba246:	4628      	mov	r0, r5
   ba248:	f001 fa12 	bl	bb670 <__ratio>
   ba24c:	ec59 8b10 	vmov	r8, r9, d0
   ba250:	ee10 0a10 	vmov	r0, s0
   ba254:	2200      	movs	r2, #0
   ba256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   ba25a:	4649      	mov	r1, r9
   ba25c:	f7fa fb18 	bl	b4890 <__aeabi_dcmple>
   ba260:	2800      	cmp	r0, #0
   ba262:	d07a      	beq.n	ba35a <_strtod_l+0xa8a>
   ba264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba266:	2b00      	cmp	r3, #0
   ba268:	d04a      	beq.n	ba300 <_strtod_l+0xa30>
   ba26a:	4b95      	ldr	r3, [pc, #596]	; (ba4c0 <_strtod_l+0xbf0>)
   ba26c:	2200      	movs	r2, #0
   ba26e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba272:	f8df 924c 	ldr.w	r9, [pc, #588]	; ba4c0 <_strtod_l+0xbf0>
   ba276:	f04f 0800 	mov.w	r8, #0
   ba27a:	4b92      	ldr	r3, [pc, #584]	; (ba4c4 <_strtod_l+0xbf4>)
   ba27c:	403b      	ands	r3, r7
   ba27e:	930d      	str	r3, [sp, #52]	; 0x34
   ba280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba282:	4b91      	ldr	r3, [pc, #580]	; (ba4c8 <_strtod_l+0xbf8>)
   ba284:	429a      	cmp	r2, r3
   ba286:	f040 80b0 	bne.w	ba3ea <_strtod_l+0xb1a>
   ba28a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba28e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   ba292:	ec4b ab10 	vmov	d0, sl, fp
   ba296:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba29a:	f001 f911 	bl	bb4c0 <__ulp>
   ba29e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba2a2:	ec53 2b10 	vmov	r2, r3, d0
   ba2a6:	f7fa f877 	bl	b4398 <__aeabi_dmul>
   ba2aa:	4652      	mov	r2, sl
   ba2ac:	465b      	mov	r3, fp
   ba2ae:	f7f9 febd 	bl	b402c <__adddf3>
   ba2b2:	460b      	mov	r3, r1
   ba2b4:	4983      	ldr	r1, [pc, #524]	; (ba4c4 <_strtod_l+0xbf4>)
   ba2b6:	4a85      	ldr	r2, [pc, #532]	; (ba4cc <_strtod_l+0xbfc>)
   ba2b8:	4019      	ands	r1, r3
   ba2ba:	4291      	cmp	r1, r2
   ba2bc:	4682      	mov	sl, r0
   ba2be:	d960      	bls.n	ba382 <_strtod_l+0xab2>
   ba2c0:	ee18 3a90 	vmov	r3, s17
   ba2c4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   ba2c8:	4293      	cmp	r3, r2
   ba2ca:	d104      	bne.n	ba2d6 <_strtod_l+0xa06>
   ba2cc:	ee18 3a10 	vmov	r3, s16
   ba2d0:	3301      	adds	r3, #1
   ba2d2:	f43f ad45 	beq.w	b9d60 <_strtod_l+0x490>
   ba2d6:	f8df b200 	ldr.w	fp, [pc, #512]	; ba4d8 <_strtod_l+0xc08>
   ba2da:	f04f 3aff 	mov.w	sl, #4294967295
   ba2de:	9918      	ldr	r1, [sp, #96]	; 0x60
   ba2e0:	4620      	mov	r0, r4
   ba2e2:	f000 fdbb 	bl	bae5c <_Bfree>
   ba2e6:	9905      	ldr	r1, [sp, #20]
   ba2e8:	4620      	mov	r0, r4
   ba2ea:	f000 fdb7 	bl	bae5c <_Bfree>
   ba2ee:	4631      	mov	r1, r6
   ba2f0:	4620      	mov	r0, r4
   ba2f2:	f000 fdb3 	bl	bae5c <_Bfree>
   ba2f6:	4629      	mov	r1, r5
   ba2f8:	4620      	mov	r0, r4
   ba2fa:	f000 fdaf 	bl	bae5c <_Bfree>
   ba2fe:	e61a      	b.n	b9f36 <_strtod_l+0x666>
   ba300:	f1ba 0f00 	cmp.w	sl, #0
   ba304:	d11b      	bne.n	ba33e <_strtod_l+0xa6e>
   ba306:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba30a:	b9f3      	cbnz	r3, ba34a <_strtod_l+0xa7a>
   ba30c:	4b6c      	ldr	r3, [pc, #432]	; (ba4c0 <_strtod_l+0xbf0>)
   ba30e:	2200      	movs	r2, #0
   ba310:	4640      	mov	r0, r8
   ba312:	4649      	mov	r1, r9
   ba314:	f7fa fab2 	bl	b487c <__aeabi_dcmplt>
   ba318:	b9d0      	cbnz	r0, ba350 <_strtod_l+0xa80>
   ba31a:	4640      	mov	r0, r8
   ba31c:	4649      	mov	r1, r9
   ba31e:	4b6c      	ldr	r3, [pc, #432]	; (ba4d0 <_strtod_l+0xc00>)
   ba320:	2200      	movs	r2, #0
   ba322:	f7fa f839 	bl	b4398 <__aeabi_dmul>
   ba326:	4680      	mov	r8, r0
   ba328:	4689      	mov	r9, r1
   ba32a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   ba32e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   ba332:	9315      	str	r3, [sp, #84]	; 0x54
   ba334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   ba338:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba33c:	e79d      	b.n	ba27a <_strtod_l+0x9aa>
   ba33e:	f1ba 0f01 	cmp.w	sl, #1
   ba342:	d102      	bne.n	ba34a <_strtod_l+0xa7a>
   ba344:	2f00      	cmp	r7, #0
   ba346:	f43f ad83 	beq.w	b9e50 <_strtod_l+0x580>
   ba34a:	4b62      	ldr	r3, [pc, #392]	; (ba4d4 <_strtod_l+0xc04>)
   ba34c:	2200      	movs	r2, #0
   ba34e:	e78e      	b.n	ba26e <_strtod_l+0x99e>
   ba350:	f8df 917c 	ldr.w	r9, [pc, #380]	; ba4d0 <_strtod_l+0xc00>
   ba354:	f04f 0800 	mov.w	r8, #0
   ba358:	e7e7      	b.n	ba32a <_strtod_l+0xa5a>
   ba35a:	4b5d      	ldr	r3, [pc, #372]	; (ba4d0 <_strtod_l+0xc00>)
   ba35c:	4640      	mov	r0, r8
   ba35e:	4649      	mov	r1, r9
   ba360:	2200      	movs	r2, #0
   ba362:	f7fa f819 	bl	b4398 <__aeabi_dmul>
   ba366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba368:	4680      	mov	r8, r0
   ba36a:	4689      	mov	r9, r1
   ba36c:	b933      	cbnz	r3, ba37c <_strtod_l+0xaac>
   ba36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba372:	900e      	str	r0, [sp, #56]	; 0x38
   ba374:	930f      	str	r3, [sp, #60]	; 0x3c
   ba376:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   ba37a:	e7dd      	b.n	ba338 <_strtod_l+0xa68>
   ba37c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   ba380:	e7f9      	b.n	ba376 <_strtod_l+0xaa6>
   ba382:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   ba386:	9b04      	ldr	r3, [sp, #16]
   ba388:	2b00      	cmp	r3, #0
   ba38a:	d1a8      	bne.n	ba2de <_strtod_l+0xa0e>
   ba38c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   ba390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba392:	0d1b      	lsrs	r3, r3, #20
   ba394:	051b      	lsls	r3, r3, #20
   ba396:	429a      	cmp	r2, r3
   ba398:	d1a1      	bne.n	ba2de <_strtod_l+0xa0e>
   ba39a:	4640      	mov	r0, r8
   ba39c:	4649      	mov	r1, r9
   ba39e:	f7fa fb89 	bl	b4ab4 <__aeabi_d2lz>
   ba3a2:	f7f9 ffcb 	bl	b433c <__aeabi_l2d>
   ba3a6:	4602      	mov	r2, r0
   ba3a8:	460b      	mov	r3, r1
   ba3aa:	4640      	mov	r0, r8
   ba3ac:	4649      	mov	r1, r9
   ba3ae:	f7f9 fe3b 	bl	b4028 <__aeabi_dsub>
   ba3b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   ba3b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   ba3b8:	ea43 030a 	orr.w	r3, r3, sl
   ba3bc:	4313      	orrs	r3, r2
   ba3be:	4680      	mov	r8, r0
   ba3c0:	4689      	mov	r9, r1
   ba3c2:	d055      	beq.n	ba470 <_strtod_l+0xba0>
   ba3c4:	a336      	add	r3, pc, #216	; (adr r3, ba4a0 <_strtod_l+0xbd0>)
   ba3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3ca:	f7fa fa57 	bl	b487c <__aeabi_dcmplt>
   ba3ce:	2800      	cmp	r0, #0
   ba3d0:	f47f acd0 	bne.w	b9d74 <_strtod_l+0x4a4>
   ba3d4:	a334      	add	r3, pc, #208	; (adr r3, ba4a8 <_strtod_l+0xbd8>)
   ba3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3da:	4640      	mov	r0, r8
   ba3dc:	4649      	mov	r1, r9
   ba3de:	f7fa fa6b 	bl	b48b8 <__aeabi_dcmpgt>
   ba3e2:	2800      	cmp	r0, #0
   ba3e4:	f43f af7b 	beq.w	ba2de <_strtod_l+0xa0e>
   ba3e8:	e4c4      	b.n	b9d74 <_strtod_l+0x4a4>
   ba3ea:	9b04      	ldr	r3, [sp, #16]
   ba3ec:	b333      	cbz	r3, ba43c <_strtod_l+0xb6c>
   ba3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   ba3f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   ba3f4:	d822      	bhi.n	ba43c <_strtod_l+0xb6c>
   ba3f6:	a32e      	add	r3, pc, #184	; (adr r3, ba4b0 <_strtod_l+0xbe0>)
   ba3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba3fc:	4640      	mov	r0, r8
   ba3fe:	4649      	mov	r1, r9
   ba400:	f7fa fa46 	bl	b4890 <__aeabi_dcmple>
   ba404:	b1a0      	cbz	r0, ba430 <_strtod_l+0xb60>
   ba406:	4649      	mov	r1, r9
   ba408:	4640      	mov	r0, r8
   ba40a:	f7fa fa5f 	bl	b48cc <__aeabi_d2uiz>
   ba40e:	2801      	cmp	r0, #1
   ba410:	bf38      	it	cc
   ba412:	2001      	movcc	r0, #1
   ba414:	f7f9 ff46 	bl	b42a4 <__aeabi_ui2d>
   ba418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   ba41a:	4680      	mov	r8, r0
   ba41c:	4689      	mov	r9, r1
   ba41e:	bb23      	cbnz	r3, ba46a <_strtod_l+0xb9a>
   ba420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   ba424:	9010      	str	r0, [sp, #64]	; 0x40
   ba426:	9311      	str	r3, [sp, #68]	; 0x44
   ba428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   ba42c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   ba430:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba432:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   ba434:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   ba438:	1a9b      	subs	r3, r3, r2
   ba43a:	9309      	str	r3, [sp, #36]	; 0x24
   ba43c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba440:	eeb0 0a48 	vmov.f32	s0, s16
   ba444:	eef0 0a68 	vmov.f32	s1, s17
   ba448:	e9cd 0108 	strd	r0, r1, [sp, #32]
   ba44c:	f001 f838 	bl	bb4c0 <__ulp>
   ba450:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   ba454:	ec53 2b10 	vmov	r2, r3, d0
   ba458:	f7f9 ff9e 	bl	b4398 <__aeabi_dmul>
   ba45c:	ec53 2b18 	vmov	r2, r3, d8
   ba460:	f7f9 fde4 	bl	b402c <__adddf3>
   ba464:	4682      	mov	sl, r0
   ba466:	468b      	mov	fp, r1
   ba468:	e78d      	b.n	ba386 <_strtod_l+0xab6>
   ba46a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   ba46e:	e7db      	b.n	ba428 <_strtod_l+0xb58>
   ba470:	a311      	add	r3, pc, #68	; (adr r3, ba4b8 <_strtod_l+0xbe8>)
   ba472:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba476:	f7fa fa01 	bl	b487c <__aeabi_dcmplt>
   ba47a:	e7b2      	b.n	ba3e2 <_strtod_l+0xb12>
   ba47c:	2300      	movs	r3, #0
   ba47e:	930a      	str	r3, [sp, #40]	; 0x28
   ba480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   ba482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba484:	6013      	str	r3, [r2, #0]
   ba486:	f7ff ba6b 	b.w	b9960 <_strtod_l+0x90>
   ba48a:	2a65      	cmp	r2, #101	; 0x65
   ba48c:	f43f ab5f 	beq.w	b9b4e <_strtod_l+0x27e>
   ba490:	2a45      	cmp	r2, #69	; 0x45
   ba492:	f43f ab5c 	beq.w	b9b4e <_strtod_l+0x27e>
   ba496:	2301      	movs	r3, #1
   ba498:	f7ff bb94 	b.w	b9bc4 <_strtod_l+0x2f4>
   ba49c:	f3af 8000 	nop.w
   ba4a0:	94a03595 	.word	0x94a03595
   ba4a4:	3fdfffff 	.word	0x3fdfffff
   ba4a8:	35afe535 	.word	0x35afe535
   ba4ac:	3fe00000 	.word	0x3fe00000
   ba4b0:	ffc00000 	.word	0xffc00000
   ba4b4:	41dfffff 	.word	0x41dfffff
   ba4b8:	94a03595 	.word	0x94a03595
   ba4bc:	3fcfffff 	.word	0x3fcfffff
   ba4c0:	3ff00000 	.word	0x3ff00000
   ba4c4:	7ff00000 	.word	0x7ff00000
   ba4c8:	7fe00000 	.word	0x7fe00000
   ba4cc:	7c9fffff 	.word	0x7c9fffff
   ba4d0:	3fe00000 	.word	0x3fe00000
   ba4d4:	bff00000 	.word	0xbff00000
   ba4d8:	7fefffff 	.word	0x7fefffff

000ba4dc <strtod>:
   ba4dc:	460a      	mov	r2, r1
   ba4de:	4601      	mov	r1, r0
   ba4e0:	4802      	ldr	r0, [pc, #8]	; (ba4ec <strtod+0x10>)
   ba4e2:	4b03      	ldr	r3, [pc, #12]	; (ba4f0 <strtod+0x14>)
   ba4e4:	6800      	ldr	r0, [r0, #0]
   ba4e6:	f7ff b9f3 	b.w	b98d0 <_strtod_l>
   ba4ea:	bf00      	nop
   ba4ec:	2003e0d8 	.word	0x2003e0d8
   ba4f0:	2003e144 	.word	0x2003e144

000ba4f4 <_strtol_l.constprop.0>:
   ba4f4:	2b01      	cmp	r3, #1
   ba4f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba4fa:	d001      	beq.n	ba500 <_strtol_l.constprop.0+0xc>
   ba4fc:	2b24      	cmp	r3, #36	; 0x24
   ba4fe:	d906      	bls.n	ba50e <_strtol_l.constprop.0+0x1a>
   ba500:	f7fd fb3c 	bl	b7b7c <__errno>
   ba504:	2316      	movs	r3, #22
   ba506:	6003      	str	r3, [r0, #0]
   ba508:	2000      	movs	r0, #0
   ba50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ba50e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ba5f4 <_strtol_l.constprop.0+0x100>
   ba512:	460d      	mov	r5, r1
   ba514:	462e      	mov	r6, r5
   ba516:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba51a:	f814 700c 	ldrb.w	r7, [r4, ip]
   ba51e:	f017 0708 	ands.w	r7, r7, #8
   ba522:	d1f7      	bne.n	ba514 <_strtol_l.constprop.0+0x20>
   ba524:	2c2d      	cmp	r4, #45	; 0x2d
   ba526:	d132      	bne.n	ba58e <_strtol_l.constprop.0+0x9a>
   ba528:	782c      	ldrb	r4, [r5, #0]
   ba52a:	2701      	movs	r7, #1
   ba52c:	1cb5      	adds	r5, r6, #2
   ba52e:	2b00      	cmp	r3, #0
   ba530:	d05b      	beq.n	ba5ea <_strtol_l.constprop.0+0xf6>
   ba532:	2b10      	cmp	r3, #16
   ba534:	d109      	bne.n	ba54a <_strtol_l.constprop.0+0x56>
   ba536:	2c30      	cmp	r4, #48	; 0x30
   ba538:	d107      	bne.n	ba54a <_strtol_l.constprop.0+0x56>
   ba53a:	782c      	ldrb	r4, [r5, #0]
   ba53c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ba540:	2c58      	cmp	r4, #88	; 0x58
   ba542:	d14d      	bne.n	ba5e0 <_strtol_l.constprop.0+0xec>
   ba544:	786c      	ldrb	r4, [r5, #1]
   ba546:	2310      	movs	r3, #16
   ba548:	3502      	adds	r5, #2
   ba54a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ba54e:	f108 38ff 	add.w	r8, r8, #4294967295
   ba552:	f04f 0c00 	mov.w	ip, #0
   ba556:	fbb8 f9f3 	udiv	r9, r8, r3
   ba55a:	4666      	mov	r6, ip
   ba55c:	fb03 8a19 	mls	sl, r3, r9, r8
   ba560:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ba564:	f1be 0f09 	cmp.w	lr, #9
   ba568:	d816      	bhi.n	ba598 <_strtol_l.constprop.0+0xa4>
   ba56a:	4674      	mov	r4, lr
   ba56c:	42a3      	cmp	r3, r4
   ba56e:	dd24      	ble.n	ba5ba <_strtol_l.constprop.0+0xc6>
   ba570:	f1bc 0f00 	cmp.w	ip, #0
   ba574:	db1e      	blt.n	ba5b4 <_strtol_l.constprop.0+0xc0>
   ba576:	45b1      	cmp	r9, r6
   ba578:	d31c      	bcc.n	ba5b4 <_strtol_l.constprop.0+0xc0>
   ba57a:	d101      	bne.n	ba580 <_strtol_l.constprop.0+0x8c>
   ba57c:	45a2      	cmp	sl, r4
   ba57e:	db19      	blt.n	ba5b4 <_strtol_l.constprop.0+0xc0>
   ba580:	fb06 4603 	mla	r6, r6, r3, r4
   ba584:	f04f 0c01 	mov.w	ip, #1
   ba588:	f815 4b01 	ldrb.w	r4, [r5], #1
   ba58c:	e7e8      	b.n	ba560 <_strtol_l.constprop.0+0x6c>
   ba58e:	2c2b      	cmp	r4, #43	; 0x2b
   ba590:	bf04      	itt	eq
   ba592:	782c      	ldrbeq	r4, [r5, #0]
   ba594:	1cb5      	addeq	r5, r6, #2
   ba596:	e7ca      	b.n	ba52e <_strtol_l.constprop.0+0x3a>
   ba598:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ba59c:	f1be 0f19 	cmp.w	lr, #25
   ba5a0:	d801      	bhi.n	ba5a6 <_strtol_l.constprop.0+0xb2>
   ba5a2:	3c37      	subs	r4, #55	; 0x37
   ba5a4:	e7e2      	b.n	ba56c <_strtol_l.constprop.0+0x78>
   ba5a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ba5aa:	f1be 0f19 	cmp.w	lr, #25
   ba5ae:	d804      	bhi.n	ba5ba <_strtol_l.constprop.0+0xc6>
   ba5b0:	3c57      	subs	r4, #87	; 0x57
   ba5b2:	e7db      	b.n	ba56c <_strtol_l.constprop.0+0x78>
   ba5b4:	f04f 3cff 	mov.w	ip, #4294967295
   ba5b8:	e7e6      	b.n	ba588 <_strtol_l.constprop.0+0x94>
   ba5ba:	f1bc 0f00 	cmp.w	ip, #0
   ba5be:	da05      	bge.n	ba5cc <_strtol_l.constprop.0+0xd8>
   ba5c0:	2322      	movs	r3, #34	; 0x22
   ba5c2:	6003      	str	r3, [r0, #0]
   ba5c4:	4646      	mov	r6, r8
   ba5c6:	b942      	cbnz	r2, ba5da <_strtol_l.constprop.0+0xe6>
   ba5c8:	4630      	mov	r0, r6
   ba5ca:	e79e      	b.n	ba50a <_strtol_l.constprop.0+0x16>
   ba5cc:	b107      	cbz	r7, ba5d0 <_strtol_l.constprop.0+0xdc>
   ba5ce:	4276      	negs	r6, r6
   ba5d0:	2a00      	cmp	r2, #0
   ba5d2:	d0f9      	beq.n	ba5c8 <_strtol_l.constprop.0+0xd4>
   ba5d4:	f1bc 0f00 	cmp.w	ip, #0
   ba5d8:	d000      	beq.n	ba5dc <_strtol_l.constprop.0+0xe8>
   ba5da:	1e69      	subs	r1, r5, #1
   ba5dc:	6011      	str	r1, [r2, #0]
   ba5de:	e7f3      	b.n	ba5c8 <_strtol_l.constprop.0+0xd4>
   ba5e0:	2430      	movs	r4, #48	; 0x30
   ba5e2:	2b00      	cmp	r3, #0
   ba5e4:	d1b1      	bne.n	ba54a <_strtol_l.constprop.0+0x56>
   ba5e6:	2308      	movs	r3, #8
   ba5e8:	e7af      	b.n	ba54a <_strtol_l.constprop.0+0x56>
   ba5ea:	2c30      	cmp	r4, #48	; 0x30
   ba5ec:	d0a5      	beq.n	ba53a <_strtol_l.constprop.0+0x46>
   ba5ee:	230a      	movs	r3, #10
   ba5f0:	e7ab      	b.n	ba54a <_strtol_l.constprop.0+0x56>
   ba5f2:	bf00      	nop
   ba5f4:	000bcdf9 	.word	0x000bcdf9

000ba5f8 <strtol>:
   ba5f8:	4613      	mov	r3, r2
   ba5fa:	460a      	mov	r2, r1
   ba5fc:	4601      	mov	r1, r0
   ba5fe:	4802      	ldr	r0, [pc, #8]	; (ba608 <strtol+0x10>)
   ba600:	6800      	ldr	r0, [r0, #0]
   ba602:	f7ff bf77 	b.w	ba4f4 <_strtol_l.constprop.0>
   ba606:	bf00      	nop
   ba608:	2003e0d8 	.word	0x2003e0d8

000ba60c <__register_exitproc>:
   ba60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba610:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba6cc <__register_exitproc+0xc0>
   ba614:	4606      	mov	r6, r0
   ba616:	f8d8 0000 	ldr.w	r0, [r8]
   ba61a:	461f      	mov	r7, r3
   ba61c:	460d      	mov	r5, r1
   ba61e:	4691      	mov	r9, r2
   ba620:	f000 fbc6 	bl	badb0 <__retarget_lock_acquire_recursive>
   ba624:	4b25      	ldr	r3, [pc, #148]	; (ba6bc <__register_exitproc+0xb0>)
   ba626:	681c      	ldr	r4, [r3, #0]
   ba628:	b934      	cbnz	r4, ba638 <__register_exitproc+0x2c>
   ba62a:	4c25      	ldr	r4, [pc, #148]	; (ba6c0 <__register_exitproc+0xb4>)
   ba62c:	601c      	str	r4, [r3, #0]
   ba62e:	4b25      	ldr	r3, [pc, #148]	; (ba6c4 <__register_exitproc+0xb8>)
   ba630:	b113      	cbz	r3, ba638 <__register_exitproc+0x2c>
   ba632:	681b      	ldr	r3, [r3, #0]
   ba634:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba638:	6863      	ldr	r3, [r4, #4]
   ba63a:	2b1f      	cmp	r3, #31
   ba63c:	dd07      	ble.n	ba64e <__register_exitproc+0x42>
   ba63e:	f8d8 0000 	ldr.w	r0, [r8]
   ba642:	f000 fbb7 	bl	badb4 <__retarget_lock_release_recursive>
   ba646:	f04f 30ff 	mov.w	r0, #4294967295
   ba64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba64e:	b34e      	cbz	r6, ba6a4 <__register_exitproc+0x98>
   ba650:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba654:	b988      	cbnz	r0, ba67a <__register_exitproc+0x6e>
   ba656:	4b1c      	ldr	r3, [pc, #112]	; (ba6c8 <__register_exitproc+0xbc>)
   ba658:	b923      	cbnz	r3, ba664 <__register_exitproc+0x58>
   ba65a:	f8d8 0000 	ldr.w	r0, [r8]
   ba65e:	f000 fba8 	bl	badb2 <__retarget_lock_release>
   ba662:	e7f0      	b.n	ba646 <__register_exitproc+0x3a>
   ba664:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba668:	f7fd fa50 	bl	b7b0c <malloc>
   ba66c:	2800      	cmp	r0, #0
   ba66e:	d0f4      	beq.n	ba65a <__register_exitproc+0x4e>
   ba670:	2300      	movs	r3, #0
   ba672:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba676:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba67a:	6863      	ldr	r3, [r4, #4]
   ba67c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba680:	2201      	movs	r2, #1
   ba682:	409a      	lsls	r2, r3
   ba684:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba688:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba68c:	4313      	orrs	r3, r2
   ba68e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba692:	2e02      	cmp	r6, #2
   ba694:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba698:	bf02      	ittt	eq
   ba69a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba69e:	4313      	orreq	r3, r2
   ba6a0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba6a4:	6863      	ldr	r3, [r4, #4]
   ba6a6:	f8d8 0000 	ldr.w	r0, [r8]
   ba6aa:	1c5a      	adds	r2, r3, #1
   ba6ac:	3302      	adds	r3, #2
   ba6ae:	6062      	str	r2, [r4, #4]
   ba6b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba6b4:	f000 fb7e 	bl	badb4 <__retarget_lock_release_recursive>
   ba6b8:	2000      	movs	r0, #0
   ba6ba:	e7c6      	b.n	ba64a <__register_exitproc+0x3e>
   ba6bc:	2003e7e8 	.word	0x2003e7e8
   ba6c0:	2003e75c 	.word	0x2003e75c
   ba6c4:	00000000 	.word	0x00000000
   ba6c8:	000b7b0d 	.word	0x000b7b0d
   ba6cc:	2003e13c 	.word	0x2003e13c

000ba6d0 <rshift>:
   ba6d0:	6903      	ldr	r3, [r0, #16]
   ba6d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   ba6d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba6da:	ea4f 1261 	mov.w	r2, r1, asr #5
   ba6de:	f100 0414 	add.w	r4, r0, #20
   ba6e2:	dd45      	ble.n	ba770 <rshift+0xa0>
   ba6e4:	f011 011f 	ands.w	r1, r1, #31
   ba6e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   ba6ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   ba6f0:	d10c      	bne.n	ba70c <rshift+0x3c>
   ba6f2:	f100 0710 	add.w	r7, r0, #16
   ba6f6:	4629      	mov	r1, r5
   ba6f8:	42b1      	cmp	r1, r6
   ba6fa:	d334      	bcc.n	ba766 <rshift+0x96>
   ba6fc:	1a9b      	subs	r3, r3, r2
   ba6fe:	009b      	lsls	r3, r3, #2
   ba700:	1eea      	subs	r2, r5, #3
   ba702:	4296      	cmp	r6, r2
   ba704:	bf38      	it	cc
   ba706:	2300      	movcc	r3, #0
   ba708:	4423      	add	r3, r4
   ba70a:	e015      	b.n	ba738 <rshift+0x68>
   ba70c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   ba710:	f1c1 0820 	rsb	r8, r1, #32
   ba714:	40cf      	lsrs	r7, r1
   ba716:	f105 0e04 	add.w	lr, r5, #4
   ba71a:	46a1      	mov	r9, r4
   ba71c:	4576      	cmp	r6, lr
   ba71e:	46f4      	mov	ip, lr
   ba720:	d815      	bhi.n	ba74e <rshift+0x7e>
   ba722:	1a9a      	subs	r2, r3, r2
   ba724:	0092      	lsls	r2, r2, #2
   ba726:	3a04      	subs	r2, #4
   ba728:	3501      	adds	r5, #1
   ba72a:	42ae      	cmp	r6, r5
   ba72c:	bf38      	it	cc
   ba72e:	2200      	movcc	r2, #0
   ba730:	18a3      	adds	r3, r4, r2
   ba732:	50a7      	str	r7, [r4, r2]
   ba734:	b107      	cbz	r7, ba738 <rshift+0x68>
   ba736:	3304      	adds	r3, #4
   ba738:	1b1a      	subs	r2, r3, r4
   ba73a:	42a3      	cmp	r3, r4
   ba73c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   ba740:	bf08      	it	eq
   ba742:	2300      	moveq	r3, #0
   ba744:	6102      	str	r2, [r0, #16]
   ba746:	bf08      	it	eq
   ba748:	6143      	streq	r3, [r0, #20]
   ba74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba74e:	f8dc c000 	ldr.w	ip, [ip]
   ba752:	fa0c fc08 	lsl.w	ip, ip, r8
   ba756:	ea4c 0707 	orr.w	r7, ip, r7
   ba75a:	f849 7b04 	str.w	r7, [r9], #4
   ba75e:	f85e 7b04 	ldr.w	r7, [lr], #4
   ba762:	40cf      	lsrs	r7, r1
   ba764:	e7da      	b.n	ba71c <rshift+0x4c>
   ba766:	f851 cb04 	ldr.w	ip, [r1], #4
   ba76a:	f847 cf04 	str.w	ip, [r7, #4]!
   ba76e:	e7c3      	b.n	ba6f8 <rshift+0x28>
   ba770:	4623      	mov	r3, r4
   ba772:	e7e1      	b.n	ba738 <rshift+0x68>

000ba774 <__hexdig_fun>:
   ba774:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   ba778:	2b09      	cmp	r3, #9
   ba77a:	d802      	bhi.n	ba782 <__hexdig_fun+0xe>
   ba77c:	3820      	subs	r0, #32
   ba77e:	b2c0      	uxtb	r0, r0
   ba780:	4770      	bx	lr
   ba782:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   ba786:	2b05      	cmp	r3, #5
   ba788:	d801      	bhi.n	ba78e <__hexdig_fun+0x1a>
   ba78a:	3847      	subs	r0, #71	; 0x47
   ba78c:	e7f7      	b.n	ba77e <__hexdig_fun+0xa>
   ba78e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   ba792:	2b05      	cmp	r3, #5
   ba794:	d801      	bhi.n	ba79a <__hexdig_fun+0x26>
   ba796:	3827      	subs	r0, #39	; 0x27
   ba798:	e7f1      	b.n	ba77e <__hexdig_fun+0xa>
   ba79a:	2000      	movs	r0, #0
   ba79c:	4770      	bx	lr
	...

000ba7a0 <__gethex>:
   ba7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba7a4:	ed2d 8b02 	vpush	{d8}
   ba7a8:	b089      	sub	sp, #36	; 0x24
   ba7aa:	ee08 0a10 	vmov	s16, r0
   ba7ae:	9304      	str	r3, [sp, #16]
   ba7b0:	4bb4      	ldr	r3, [pc, #720]	; (baa84 <__gethex+0x2e4>)
   ba7b2:	681b      	ldr	r3, [r3, #0]
   ba7b4:	9301      	str	r3, [sp, #4]
   ba7b6:	4618      	mov	r0, r3
   ba7b8:	468b      	mov	fp, r1
   ba7ba:	4690      	mov	r8, r2
   ba7bc:	f7fa f972 	bl	b4aa4 <strlen>
   ba7c0:	9b01      	ldr	r3, [sp, #4]
   ba7c2:	f8db 2000 	ldr.w	r2, [fp]
   ba7c6:	4403      	add	r3, r0
   ba7c8:	4682      	mov	sl, r0
   ba7ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ba7ce:	9305      	str	r3, [sp, #20]
   ba7d0:	1c93      	adds	r3, r2, #2
   ba7d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ba7d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ba7da:	32fe      	adds	r2, #254	; 0xfe
   ba7dc:	18d1      	adds	r1, r2, r3
   ba7de:	461f      	mov	r7, r3
   ba7e0:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba7e4:	9100      	str	r1, [sp, #0]
   ba7e6:	2830      	cmp	r0, #48	; 0x30
   ba7e8:	d0f8      	beq.n	ba7dc <__gethex+0x3c>
   ba7ea:	f7ff ffc3 	bl	ba774 <__hexdig_fun>
   ba7ee:	4604      	mov	r4, r0
   ba7f0:	2800      	cmp	r0, #0
   ba7f2:	d13a      	bne.n	ba86a <__gethex+0xca>
   ba7f4:	9901      	ldr	r1, [sp, #4]
   ba7f6:	4652      	mov	r2, sl
   ba7f8:	4638      	mov	r0, r7
   ba7fa:	f7ff f825 	bl	b9848 <strncmp>
   ba7fe:	4605      	mov	r5, r0
   ba800:	2800      	cmp	r0, #0
   ba802:	d168      	bne.n	ba8d6 <__gethex+0x136>
   ba804:	f817 000a 	ldrb.w	r0, [r7, sl]
   ba808:	eb07 060a 	add.w	r6, r7, sl
   ba80c:	f7ff ffb2 	bl	ba774 <__hexdig_fun>
   ba810:	2800      	cmp	r0, #0
   ba812:	d062      	beq.n	ba8da <__gethex+0x13a>
   ba814:	4633      	mov	r3, r6
   ba816:	7818      	ldrb	r0, [r3, #0]
   ba818:	2830      	cmp	r0, #48	; 0x30
   ba81a:	461f      	mov	r7, r3
   ba81c:	f103 0301 	add.w	r3, r3, #1
   ba820:	d0f9      	beq.n	ba816 <__gethex+0x76>
   ba822:	f7ff ffa7 	bl	ba774 <__hexdig_fun>
   ba826:	2301      	movs	r3, #1
   ba828:	fab0 f480 	clz	r4, r0
   ba82c:	0964      	lsrs	r4, r4, #5
   ba82e:	4635      	mov	r5, r6
   ba830:	9300      	str	r3, [sp, #0]
   ba832:	463a      	mov	r2, r7
   ba834:	4616      	mov	r6, r2
   ba836:	3201      	adds	r2, #1
   ba838:	7830      	ldrb	r0, [r6, #0]
   ba83a:	f7ff ff9b 	bl	ba774 <__hexdig_fun>
   ba83e:	2800      	cmp	r0, #0
   ba840:	d1f8      	bne.n	ba834 <__gethex+0x94>
   ba842:	9901      	ldr	r1, [sp, #4]
   ba844:	4652      	mov	r2, sl
   ba846:	4630      	mov	r0, r6
   ba848:	f7fe fffe 	bl	b9848 <strncmp>
   ba84c:	b980      	cbnz	r0, ba870 <__gethex+0xd0>
   ba84e:	b94d      	cbnz	r5, ba864 <__gethex+0xc4>
   ba850:	eb06 050a 	add.w	r5, r6, sl
   ba854:	462a      	mov	r2, r5
   ba856:	4616      	mov	r6, r2
   ba858:	3201      	adds	r2, #1
   ba85a:	7830      	ldrb	r0, [r6, #0]
   ba85c:	f7ff ff8a 	bl	ba774 <__hexdig_fun>
   ba860:	2800      	cmp	r0, #0
   ba862:	d1f8      	bne.n	ba856 <__gethex+0xb6>
   ba864:	1bad      	subs	r5, r5, r6
   ba866:	00ad      	lsls	r5, r5, #2
   ba868:	e004      	b.n	ba874 <__gethex+0xd4>
   ba86a:	2400      	movs	r4, #0
   ba86c:	4625      	mov	r5, r4
   ba86e:	e7e0      	b.n	ba832 <__gethex+0x92>
   ba870:	2d00      	cmp	r5, #0
   ba872:	d1f7      	bne.n	ba864 <__gethex+0xc4>
   ba874:	7833      	ldrb	r3, [r6, #0]
   ba876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ba87a:	2b50      	cmp	r3, #80	; 0x50
   ba87c:	d13b      	bne.n	ba8f6 <__gethex+0x156>
   ba87e:	7873      	ldrb	r3, [r6, #1]
   ba880:	2b2b      	cmp	r3, #43	; 0x2b
   ba882:	d02c      	beq.n	ba8de <__gethex+0x13e>
   ba884:	2b2d      	cmp	r3, #45	; 0x2d
   ba886:	d02e      	beq.n	ba8e6 <__gethex+0x146>
   ba888:	1c71      	adds	r1, r6, #1
   ba88a:	f04f 0900 	mov.w	r9, #0
   ba88e:	7808      	ldrb	r0, [r1, #0]
   ba890:	f7ff ff70 	bl	ba774 <__hexdig_fun>
   ba894:	1e43      	subs	r3, r0, #1
   ba896:	b2db      	uxtb	r3, r3
   ba898:	2b18      	cmp	r3, #24
   ba89a:	d82c      	bhi.n	ba8f6 <__gethex+0x156>
   ba89c:	f1a0 0210 	sub.w	r2, r0, #16
   ba8a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ba8a4:	f7ff ff66 	bl	ba774 <__hexdig_fun>
   ba8a8:	1e43      	subs	r3, r0, #1
   ba8aa:	b2db      	uxtb	r3, r3
   ba8ac:	2b18      	cmp	r3, #24
   ba8ae:	d91d      	bls.n	ba8ec <__gethex+0x14c>
   ba8b0:	f1b9 0f00 	cmp.w	r9, #0
   ba8b4:	d000      	beq.n	ba8b8 <__gethex+0x118>
   ba8b6:	4252      	negs	r2, r2
   ba8b8:	4415      	add	r5, r2
   ba8ba:	f8cb 1000 	str.w	r1, [fp]
   ba8be:	b1e4      	cbz	r4, ba8fa <__gethex+0x15a>
   ba8c0:	9b00      	ldr	r3, [sp, #0]
   ba8c2:	2b00      	cmp	r3, #0
   ba8c4:	bf14      	ite	ne
   ba8c6:	2700      	movne	r7, #0
   ba8c8:	2706      	moveq	r7, #6
   ba8ca:	4638      	mov	r0, r7
   ba8cc:	b009      	add	sp, #36	; 0x24
   ba8ce:	ecbd 8b02 	vpop	{d8}
   ba8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba8d6:	463e      	mov	r6, r7
   ba8d8:	4625      	mov	r5, r4
   ba8da:	2401      	movs	r4, #1
   ba8dc:	e7ca      	b.n	ba874 <__gethex+0xd4>
   ba8de:	f04f 0900 	mov.w	r9, #0
   ba8e2:	1cb1      	adds	r1, r6, #2
   ba8e4:	e7d3      	b.n	ba88e <__gethex+0xee>
   ba8e6:	f04f 0901 	mov.w	r9, #1
   ba8ea:	e7fa      	b.n	ba8e2 <__gethex+0x142>
   ba8ec:	230a      	movs	r3, #10
   ba8ee:	fb03 0202 	mla	r2, r3, r2, r0
   ba8f2:	3a10      	subs	r2, #16
   ba8f4:	e7d4      	b.n	ba8a0 <__gethex+0x100>
   ba8f6:	4631      	mov	r1, r6
   ba8f8:	e7df      	b.n	ba8ba <__gethex+0x11a>
   ba8fa:	1bf3      	subs	r3, r6, r7
   ba8fc:	3b01      	subs	r3, #1
   ba8fe:	4621      	mov	r1, r4
   ba900:	2b07      	cmp	r3, #7
   ba902:	dc0b      	bgt.n	ba91c <__gethex+0x17c>
   ba904:	ee18 0a10 	vmov	r0, s16
   ba908:	f000 fa68 	bl	baddc <_Balloc>
   ba90c:	4604      	mov	r4, r0
   ba90e:	b940      	cbnz	r0, ba922 <__gethex+0x182>
   ba910:	4b5d      	ldr	r3, [pc, #372]	; (baa88 <__gethex+0x2e8>)
   ba912:	4602      	mov	r2, r0
   ba914:	21de      	movs	r1, #222	; 0xde
   ba916:	485d      	ldr	r0, [pc, #372]	; (baa8c <__gethex+0x2ec>)
   ba918:	f7fd f938 	bl	b7b8c <__assert_func>
   ba91c:	3101      	adds	r1, #1
   ba91e:	105b      	asrs	r3, r3, #1
   ba920:	e7ee      	b.n	ba900 <__gethex+0x160>
   ba922:	f100 0914 	add.w	r9, r0, #20
   ba926:	f04f 0b00 	mov.w	fp, #0
   ba92a:	f1ca 0301 	rsb	r3, sl, #1
   ba92e:	f8cd 9008 	str.w	r9, [sp, #8]
   ba932:	f8cd b000 	str.w	fp, [sp]
   ba936:	9306      	str	r3, [sp, #24]
   ba938:	42b7      	cmp	r7, r6
   ba93a:	d340      	bcc.n	ba9be <__gethex+0x21e>
   ba93c:	9802      	ldr	r0, [sp, #8]
   ba93e:	9b00      	ldr	r3, [sp, #0]
   ba940:	f840 3b04 	str.w	r3, [r0], #4
   ba944:	eba0 0009 	sub.w	r0, r0, r9
   ba948:	1080      	asrs	r0, r0, #2
   ba94a:	0146      	lsls	r6, r0, #5
   ba94c:	6120      	str	r0, [r4, #16]
   ba94e:	4618      	mov	r0, r3
   ba950:	f000 fb36 	bl	bafc0 <__hi0bits>
   ba954:	1a30      	subs	r0, r6, r0
   ba956:	f8d8 6000 	ldr.w	r6, [r8]
   ba95a:	42b0      	cmp	r0, r6
   ba95c:	dd63      	ble.n	baa26 <__gethex+0x286>
   ba95e:	1b87      	subs	r7, r0, r6
   ba960:	4639      	mov	r1, r7
   ba962:	4620      	mov	r0, r4
   ba964:	f000 feda 	bl	bb71c <__any_on>
   ba968:	4682      	mov	sl, r0
   ba96a:	b1a8      	cbz	r0, ba998 <__gethex+0x1f8>
   ba96c:	1e7b      	subs	r3, r7, #1
   ba96e:	1159      	asrs	r1, r3, #5
   ba970:	f003 021f 	and.w	r2, r3, #31
   ba974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ba978:	f04f 0a01 	mov.w	sl, #1
   ba97c:	fa0a f202 	lsl.w	r2, sl, r2
   ba980:	420a      	tst	r2, r1
   ba982:	d009      	beq.n	ba998 <__gethex+0x1f8>
   ba984:	4553      	cmp	r3, sl
   ba986:	dd05      	ble.n	ba994 <__gethex+0x1f4>
   ba988:	1eb9      	subs	r1, r7, #2
   ba98a:	4620      	mov	r0, r4
   ba98c:	f000 fec6 	bl	bb71c <__any_on>
   ba990:	2800      	cmp	r0, #0
   ba992:	d145      	bne.n	baa20 <__gethex+0x280>
   ba994:	f04f 0a02 	mov.w	sl, #2
   ba998:	4639      	mov	r1, r7
   ba99a:	4620      	mov	r0, r4
   ba99c:	f7ff fe98 	bl	ba6d0 <rshift>
   ba9a0:	443d      	add	r5, r7
   ba9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ba9a6:	42ab      	cmp	r3, r5
   ba9a8:	da4c      	bge.n	baa44 <__gethex+0x2a4>
   ba9aa:	ee18 0a10 	vmov	r0, s16
   ba9ae:	4621      	mov	r1, r4
   ba9b0:	f000 fa54 	bl	bae5c <_Bfree>
   ba9b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ba9b6:	2300      	movs	r3, #0
   ba9b8:	6013      	str	r3, [r2, #0]
   ba9ba:	27a3      	movs	r7, #163	; 0xa3
   ba9bc:	e785      	b.n	ba8ca <__gethex+0x12a>
   ba9be:	1e73      	subs	r3, r6, #1
   ba9c0:	9a05      	ldr	r2, [sp, #20]
   ba9c2:	9303      	str	r3, [sp, #12]
   ba9c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ba9c8:	4293      	cmp	r3, r2
   ba9ca:	d019      	beq.n	baa00 <__gethex+0x260>
   ba9cc:	f1bb 0f20 	cmp.w	fp, #32
   ba9d0:	d107      	bne.n	ba9e2 <__gethex+0x242>
   ba9d2:	9b02      	ldr	r3, [sp, #8]
   ba9d4:	9a00      	ldr	r2, [sp, #0]
   ba9d6:	f843 2b04 	str.w	r2, [r3], #4
   ba9da:	9302      	str	r3, [sp, #8]
   ba9dc:	2300      	movs	r3, #0
   ba9de:	9300      	str	r3, [sp, #0]
   ba9e0:	469b      	mov	fp, r3
   ba9e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ba9e6:	f7ff fec5 	bl	ba774 <__hexdig_fun>
   ba9ea:	9b00      	ldr	r3, [sp, #0]
   ba9ec:	f000 000f 	and.w	r0, r0, #15
   ba9f0:	fa00 f00b 	lsl.w	r0, r0, fp
   ba9f4:	4303      	orrs	r3, r0
   ba9f6:	9300      	str	r3, [sp, #0]
   ba9f8:	f10b 0b04 	add.w	fp, fp, #4
   ba9fc:	9b03      	ldr	r3, [sp, #12]
   ba9fe:	e00d      	b.n	baa1c <__gethex+0x27c>
   baa00:	9b03      	ldr	r3, [sp, #12]
   baa02:	9a06      	ldr	r2, [sp, #24]
   baa04:	4413      	add	r3, r2
   baa06:	42bb      	cmp	r3, r7
   baa08:	d3e0      	bcc.n	ba9cc <__gethex+0x22c>
   baa0a:	4618      	mov	r0, r3
   baa0c:	9901      	ldr	r1, [sp, #4]
   baa0e:	9307      	str	r3, [sp, #28]
   baa10:	4652      	mov	r2, sl
   baa12:	f7fe ff19 	bl	b9848 <strncmp>
   baa16:	9b07      	ldr	r3, [sp, #28]
   baa18:	2800      	cmp	r0, #0
   baa1a:	d1d7      	bne.n	ba9cc <__gethex+0x22c>
   baa1c:	461e      	mov	r6, r3
   baa1e:	e78b      	b.n	ba938 <__gethex+0x198>
   baa20:	f04f 0a03 	mov.w	sl, #3
   baa24:	e7b8      	b.n	ba998 <__gethex+0x1f8>
   baa26:	da0a      	bge.n	baa3e <__gethex+0x29e>
   baa28:	1a37      	subs	r7, r6, r0
   baa2a:	4621      	mov	r1, r4
   baa2c:	ee18 0a10 	vmov	r0, s16
   baa30:	463a      	mov	r2, r7
   baa32:	f000 fc2f 	bl	bb294 <__lshift>
   baa36:	1bed      	subs	r5, r5, r7
   baa38:	4604      	mov	r4, r0
   baa3a:	f100 0914 	add.w	r9, r0, #20
   baa3e:	f04f 0a00 	mov.w	sl, #0
   baa42:	e7ae      	b.n	ba9a2 <__gethex+0x202>
   baa44:	f8d8 0004 	ldr.w	r0, [r8, #4]
   baa48:	42a8      	cmp	r0, r5
   baa4a:	dd72      	ble.n	bab32 <__gethex+0x392>
   baa4c:	1b45      	subs	r5, r0, r5
   baa4e:	42ae      	cmp	r6, r5
   baa50:	dc36      	bgt.n	baac0 <__gethex+0x320>
   baa52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   baa56:	2b02      	cmp	r3, #2
   baa58:	d02a      	beq.n	baab0 <__gethex+0x310>
   baa5a:	2b03      	cmp	r3, #3
   baa5c:	d02c      	beq.n	baab8 <__gethex+0x318>
   baa5e:	2b01      	cmp	r3, #1
   baa60:	d11c      	bne.n	baa9c <__gethex+0x2fc>
   baa62:	42ae      	cmp	r6, r5
   baa64:	d11a      	bne.n	baa9c <__gethex+0x2fc>
   baa66:	2e01      	cmp	r6, #1
   baa68:	d112      	bne.n	baa90 <__gethex+0x2f0>
   baa6a:	9a04      	ldr	r2, [sp, #16]
   baa6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   baa70:	6013      	str	r3, [r2, #0]
   baa72:	2301      	movs	r3, #1
   baa74:	6123      	str	r3, [r4, #16]
   baa76:	f8c9 3000 	str.w	r3, [r9]
   baa7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   baa7c:	2762      	movs	r7, #98	; 0x62
   baa7e:	601c      	str	r4, [r3, #0]
   baa80:	e723      	b.n	ba8ca <__gethex+0x12a>
   baa82:	bf00      	nop
   baa84:	000bcf94 	.word	0x000bcf94
   baa88:	000bcef9 	.word	0x000bcef9
   baa8c:	000bcf0a 	.word	0x000bcf0a
   baa90:	1e71      	subs	r1, r6, #1
   baa92:	4620      	mov	r0, r4
   baa94:	f000 fe42 	bl	bb71c <__any_on>
   baa98:	2800      	cmp	r0, #0
   baa9a:	d1e6      	bne.n	baa6a <__gethex+0x2ca>
   baa9c:	ee18 0a10 	vmov	r0, s16
   baaa0:	4621      	mov	r1, r4
   baaa2:	f000 f9db 	bl	bae5c <_Bfree>
   baaa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   baaa8:	2300      	movs	r3, #0
   baaaa:	6013      	str	r3, [r2, #0]
   baaac:	2750      	movs	r7, #80	; 0x50
   baaae:	e70c      	b.n	ba8ca <__gethex+0x12a>
   baab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baab2:	2b00      	cmp	r3, #0
   baab4:	d1f2      	bne.n	baa9c <__gethex+0x2fc>
   baab6:	e7d8      	b.n	baa6a <__gethex+0x2ca>
   baab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   baaba:	2b00      	cmp	r3, #0
   baabc:	d1d5      	bne.n	baa6a <__gethex+0x2ca>
   baabe:	e7ed      	b.n	baa9c <__gethex+0x2fc>
   baac0:	1e6f      	subs	r7, r5, #1
   baac2:	f1ba 0f00 	cmp.w	sl, #0
   baac6:	d131      	bne.n	bab2c <__gethex+0x38c>
   baac8:	b127      	cbz	r7, baad4 <__gethex+0x334>
   baaca:	4639      	mov	r1, r7
   baacc:	4620      	mov	r0, r4
   baace:	f000 fe25 	bl	bb71c <__any_on>
   baad2:	4682      	mov	sl, r0
   baad4:	117b      	asrs	r3, r7, #5
   baad6:	2101      	movs	r1, #1
   baad8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   baadc:	f007 071f 	and.w	r7, r7, #31
   baae0:	fa01 f707 	lsl.w	r7, r1, r7
   baae4:	421f      	tst	r7, r3
   baae6:	4629      	mov	r1, r5
   baae8:	4620      	mov	r0, r4
   baaea:	bf18      	it	ne
   baaec:	f04a 0a02 	orrne.w	sl, sl, #2
   baaf0:	1b76      	subs	r6, r6, r5
   baaf2:	f7ff fded 	bl	ba6d0 <rshift>
   baaf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   baafa:	2702      	movs	r7, #2
   baafc:	f1ba 0f00 	cmp.w	sl, #0
   bab00:	d048      	beq.n	bab94 <__gethex+0x3f4>
   bab02:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bab06:	2b02      	cmp	r3, #2
   bab08:	d015      	beq.n	bab36 <__gethex+0x396>
   bab0a:	2b03      	cmp	r3, #3
   bab0c:	d017      	beq.n	bab3e <__gethex+0x39e>
   bab0e:	2b01      	cmp	r3, #1
   bab10:	d109      	bne.n	bab26 <__gethex+0x386>
   bab12:	f01a 0f02 	tst.w	sl, #2
   bab16:	d006      	beq.n	bab26 <__gethex+0x386>
   bab18:	f8d9 0000 	ldr.w	r0, [r9]
   bab1c:	ea4a 0a00 	orr.w	sl, sl, r0
   bab20:	f01a 0f01 	tst.w	sl, #1
   bab24:	d10e      	bne.n	bab44 <__gethex+0x3a4>
   bab26:	f047 0710 	orr.w	r7, r7, #16
   bab2a:	e033      	b.n	bab94 <__gethex+0x3f4>
   bab2c:	f04f 0a01 	mov.w	sl, #1
   bab30:	e7d0      	b.n	baad4 <__gethex+0x334>
   bab32:	2701      	movs	r7, #1
   bab34:	e7e2      	b.n	baafc <__gethex+0x35c>
   bab36:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab38:	f1c3 0301 	rsb	r3, r3, #1
   bab3c:	9315      	str	r3, [sp, #84]	; 0x54
   bab3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bab40:	2b00      	cmp	r3, #0
   bab42:	d0f0      	beq.n	bab26 <__gethex+0x386>
   bab44:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bab48:	f104 0314 	add.w	r3, r4, #20
   bab4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bab50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bab54:	f04f 0c00 	mov.w	ip, #0
   bab58:	4618      	mov	r0, r3
   bab5a:	f853 2b04 	ldr.w	r2, [r3], #4
   bab5e:	f1b2 3fff 	cmp.w	r2, #4294967295
   bab62:	d01c      	beq.n	bab9e <__gethex+0x3fe>
   bab64:	3201      	adds	r2, #1
   bab66:	6002      	str	r2, [r0, #0]
   bab68:	2f02      	cmp	r7, #2
   bab6a:	f104 0314 	add.w	r3, r4, #20
   bab6e:	d13f      	bne.n	babf0 <__gethex+0x450>
   bab70:	f8d8 2000 	ldr.w	r2, [r8]
   bab74:	3a01      	subs	r2, #1
   bab76:	42b2      	cmp	r2, r6
   bab78:	d10a      	bne.n	bab90 <__gethex+0x3f0>
   bab7a:	1171      	asrs	r1, r6, #5
   bab7c:	2201      	movs	r2, #1
   bab7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bab82:	f006 061f 	and.w	r6, r6, #31
   bab86:	fa02 f606 	lsl.w	r6, r2, r6
   bab8a:	421e      	tst	r6, r3
   bab8c:	bf18      	it	ne
   bab8e:	4617      	movne	r7, r2
   bab90:	f047 0720 	orr.w	r7, r7, #32
   bab94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bab96:	601c      	str	r4, [r3, #0]
   bab98:	9b04      	ldr	r3, [sp, #16]
   bab9a:	601d      	str	r5, [r3, #0]
   bab9c:	e695      	b.n	ba8ca <__gethex+0x12a>
   bab9e:	4299      	cmp	r1, r3
   baba0:	f843 cc04 	str.w	ip, [r3, #-4]
   baba4:	d8d8      	bhi.n	bab58 <__gethex+0x3b8>
   baba6:	68a3      	ldr	r3, [r4, #8]
   baba8:	459b      	cmp	fp, r3
   babaa:	db19      	blt.n	babe0 <__gethex+0x440>
   babac:	6861      	ldr	r1, [r4, #4]
   babae:	ee18 0a10 	vmov	r0, s16
   babb2:	3101      	adds	r1, #1
   babb4:	f000 f912 	bl	baddc <_Balloc>
   babb8:	4681      	mov	r9, r0
   babba:	b918      	cbnz	r0, babc4 <__gethex+0x424>
   babbc:	4b1a      	ldr	r3, [pc, #104]	; (bac28 <__gethex+0x488>)
   babbe:	4602      	mov	r2, r0
   babc0:	2184      	movs	r1, #132	; 0x84
   babc2:	e6a8      	b.n	ba916 <__gethex+0x176>
   babc4:	6922      	ldr	r2, [r4, #16]
   babc6:	3202      	adds	r2, #2
   babc8:	f104 010c 	add.w	r1, r4, #12
   babcc:	0092      	lsls	r2, r2, #2
   babce:	300c      	adds	r0, #12
   babd0:	f7fe fddb 	bl	b978a <memcpy>
   babd4:	4621      	mov	r1, r4
   babd6:	ee18 0a10 	vmov	r0, s16
   babda:	f000 f93f 	bl	bae5c <_Bfree>
   babde:	464c      	mov	r4, r9
   babe0:	6923      	ldr	r3, [r4, #16]
   babe2:	1c5a      	adds	r2, r3, #1
   babe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   babe8:	6122      	str	r2, [r4, #16]
   babea:	2201      	movs	r2, #1
   babec:	615a      	str	r2, [r3, #20]
   babee:	e7bb      	b.n	bab68 <__gethex+0x3c8>
   babf0:	6922      	ldr	r2, [r4, #16]
   babf2:	455a      	cmp	r2, fp
   babf4:	dd0b      	ble.n	bac0e <__gethex+0x46e>
   babf6:	2101      	movs	r1, #1
   babf8:	4620      	mov	r0, r4
   babfa:	f7ff fd69 	bl	ba6d0 <rshift>
   babfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bac02:	3501      	adds	r5, #1
   bac04:	42ab      	cmp	r3, r5
   bac06:	f6ff aed0 	blt.w	ba9aa <__gethex+0x20a>
   bac0a:	2701      	movs	r7, #1
   bac0c:	e7c0      	b.n	bab90 <__gethex+0x3f0>
   bac0e:	f016 061f 	ands.w	r6, r6, #31
   bac12:	d0fa      	beq.n	bac0a <__gethex+0x46a>
   bac14:	4453      	add	r3, sl
   bac16:	f1c6 0620 	rsb	r6, r6, #32
   bac1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bac1e:	f000 f9cf 	bl	bafc0 <__hi0bits>
   bac22:	42b0      	cmp	r0, r6
   bac24:	dbe7      	blt.n	babf6 <__gethex+0x456>
   bac26:	e7f0      	b.n	bac0a <__gethex+0x46a>
   bac28:	000bcef9 	.word	0x000bcef9

000bac2c <L_shift>:
   bac2c:	f1c2 0208 	rsb	r2, r2, #8
   bac30:	0092      	lsls	r2, r2, #2
   bac32:	b570      	push	{r4, r5, r6, lr}
   bac34:	f1c2 0620 	rsb	r6, r2, #32
   bac38:	6843      	ldr	r3, [r0, #4]
   bac3a:	6804      	ldr	r4, [r0, #0]
   bac3c:	fa03 f506 	lsl.w	r5, r3, r6
   bac40:	432c      	orrs	r4, r5
   bac42:	40d3      	lsrs	r3, r2
   bac44:	6004      	str	r4, [r0, #0]
   bac46:	f840 3f04 	str.w	r3, [r0, #4]!
   bac4a:	4288      	cmp	r0, r1
   bac4c:	d3f4      	bcc.n	bac38 <L_shift+0xc>
   bac4e:	bd70      	pop	{r4, r5, r6, pc}

000bac50 <__match>:
   bac50:	b530      	push	{r4, r5, lr}
   bac52:	6803      	ldr	r3, [r0, #0]
   bac54:	3301      	adds	r3, #1
   bac56:	f811 4b01 	ldrb.w	r4, [r1], #1
   bac5a:	b914      	cbnz	r4, bac62 <__match+0x12>
   bac5c:	6003      	str	r3, [r0, #0]
   bac5e:	2001      	movs	r0, #1
   bac60:	bd30      	pop	{r4, r5, pc}
   bac62:	f813 2b01 	ldrb.w	r2, [r3], #1
   bac66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bac6a:	2d19      	cmp	r5, #25
   bac6c:	bf98      	it	ls
   bac6e:	3220      	addls	r2, #32
   bac70:	42a2      	cmp	r2, r4
   bac72:	d0f0      	beq.n	bac56 <__match+0x6>
   bac74:	2000      	movs	r0, #0
   bac76:	e7f3      	b.n	bac60 <__match+0x10>

000bac78 <__hexnan>:
   bac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bac7c:	680b      	ldr	r3, [r1, #0]
   bac7e:	115e      	asrs	r6, r3, #5
   bac80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bac84:	f013 031f 	ands.w	r3, r3, #31
   bac88:	b087      	sub	sp, #28
   bac8a:	bf18      	it	ne
   bac8c:	3604      	addne	r6, #4
   bac8e:	2500      	movs	r5, #0
   bac90:	1f37      	subs	r7, r6, #4
   bac92:	4690      	mov	r8, r2
   bac94:	6802      	ldr	r2, [r0, #0]
   bac96:	9301      	str	r3, [sp, #4]
   bac98:	4682      	mov	sl, r0
   bac9a:	f846 5c04 	str.w	r5, [r6, #-4]
   bac9e:	46b9      	mov	r9, r7
   baca0:	463c      	mov	r4, r7
   baca2:	9502      	str	r5, [sp, #8]
   baca4:	46ab      	mov	fp, r5
   baca6:	7851      	ldrb	r1, [r2, #1]
   baca8:	1c53      	adds	r3, r2, #1
   bacaa:	9303      	str	r3, [sp, #12]
   bacac:	b341      	cbz	r1, bad00 <__hexnan+0x88>
   bacae:	4608      	mov	r0, r1
   bacb0:	9205      	str	r2, [sp, #20]
   bacb2:	9104      	str	r1, [sp, #16]
   bacb4:	f7ff fd5e 	bl	ba774 <__hexdig_fun>
   bacb8:	2800      	cmp	r0, #0
   bacba:	d14f      	bne.n	bad5c <__hexnan+0xe4>
   bacbc:	9904      	ldr	r1, [sp, #16]
   bacbe:	9a05      	ldr	r2, [sp, #20]
   bacc0:	2920      	cmp	r1, #32
   bacc2:	d818      	bhi.n	bacf6 <__hexnan+0x7e>
   bacc4:	9b02      	ldr	r3, [sp, #8]
   bacc6:	459b      	cmp	fp, r3
   bacc8:	dd13      	ble.n	bacf2 <__hexnan+0x7a>
   bacca:	454c      	cmp	r4, r9
   baccc:	d206      	bcs.n	bacdc <__hexnan+0x64>
   bacce:	2d07      	cmp	r5, #7
   bacd0:	dc04      	bgt.n	bacdc <__hexnan+0x64>
   bacd2:	462a      	mov	r2, r5
   bacd4:	4649      	mov	r1, r9
   bacd6:	4620      	mov	r0, r4
   bacd8:	f7ff ffa8 	bl	bac2c <L_shift>
   bacdc:	4544      	cmp	r4, r8
   bacde:	d950      	bls.n	bad82 <__hexnan+0x10a>
   bace0:	2300      	movs	r3, #0
   bace2:	f1a4 0904 	sub.w	r9, r4, #4
   bace6:	f844 3c04 	str.w	r3, [r4, #-4]
   bacea:	f8cd b008 	str.w	fp, [sp, #8]
   bacee:	464c      	mov	r4, r9
   bacf0:	461d      	mov	r5, r3
   bacf2:	9a03      	ldr	r2, [sp, #12]
   bacf4:	e7d7      	b.n	baca6 <__hexnan+0x2e>
   bacf6:	2929      	cmp	r1, #41	; 0x29
   bacf8:	d156      	bne.n	bada8 <__hexnan+0x130>
   bacfa:	3202      	adds	r2, #2
   bacfc:	f8ca 2000 	str.w	r2, [sl]
   bad00:	f1bb 0f00 	cmp.w	fp, #0
   bad04:	d050      	beq.n	bada8 <__hexnan+0x130>
   bad06:	454c      	cmp	r4, r9
   bad08:	d206      	bcs.n	bad18 <__hexnan+0xa0>
   bad0a:	2d07      	cmp	r5, #7
   bad0c:	dc04      	bgt.n	bad18 <__hexnan+0xa0>
   bad0e:	462a      	mov	r2, r5
   bad10:	4649      	mov	r1, r9
   bad12:	4620      	mov	r0, r4
   bad14:	f7ff ff8a 	bl	bac2c <L_shift>
   bad18:	4544      	cmp	r4, r8
   bad1a:	d934      	bls.n	bad86 <__hexnan+0x10e>
   bad1c:	f1a8 0204 	sub.w	r2, r8, #4
   bad20:	4623      	mov	r3, r4
   bad22:	f853 1b04 	ldr.w	r1, [r3], #4
   bad26:	f842 1f04 	str.w	r1, [r2, #4]!
   bad2a:	429f      	cmp	r7, r3
   bad2c:	d2f9      	bcs.n	bad22 <__hexnan+0xaa>
   bad2e:	1b3b      	subs	r3, r7, r4
   bad30:	f023 0303 	bic.w	r3, r3, #3
   bad34:	3304      	adds	r3, #4
   bad36:	3401      	adds	r4, #1
   bad38:	3e03      	subs	r6, #3
   bad3a:	42b4      	cmp	r4, r6
   bad3c:	bf88      	it	hi
   bad3e:	2304      	movhi	r3, #4
   bad40:	4443      	add	r3, r8
   bad42:	2200      	movs	r2, #0
   bad44:	f843 2b04 	str.w	r2, [r3], #4
   bad48:	429f      	cmp	r7, r3
   bad4a:	d2fb      	bcs.n	bad44 <__hexnan+0xcc>
   bad4c:	683b      	ldr	r3, [r7, #0]
   bad4e:	b91b      	cbnz	r3, bad58 <__hexnan+0xe0>
   bad50:	4547      	cmp	r7, r8
   bad52:	d127      	bne.n	bada4 <__hexnan+0x12c>
   bad54:	2301      	movs	r3, #1
   bad56:	603b      	str	r3, [r7, #0]
   bad58:	2005      	movs	r0, #5
   bad5a:	e026      	b.n	badaa <__hexnan+0x132>
   bad5c:	3501      	adds	r5, #1
   bad5e:	2d08      	cmp	r5, #8
   bad60:	f10b 0b01 	add.w	fp, fp, #1
   bad64:	dd06      	ble.n	bad74 <__hexnan+0xfc>
   bad66:	4544      	cmp	r4, r8
   bad68:	d9c3      	bls.n	bacf2 <__hexnan+0x7a>
   bad6a:	2300      	movs	r3, #0
   bad6c:	f844 3c04 	str.w	r3, [r4, #-4]
   bad70:	2501      	movs	r5, #1
   bad72:	3c04      	subs	r4, #4
   bad74:	6822      	ldr	r2, [r4, #0]
   bad76:	f000 000f 	and.w	r0, r0, #15
   bad7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bad7e:	6022      	str	r2, [r4, #0]
   bad80:	e7b7      	b.n	bacf2 <__hexnan+0x7a>
   bad82:	2508      	movs	r5, #8
   bad84:	e7b5      	b.n	bacf2 <__hexnan+0x7a>
   bad86:	9b01      	ldr	r3, [sp, #4]
   bad88:	2b00      	cmp	r3, #0
   bad8a:	d0df      	beq.n	bad4c <__hexnan+0xd4>
   bad8c:	f04f 32ff 	mov.w	r2, #4294967295
   bad90:	f1c3 0320 	rsb	r3, r3, #32
   bad94:	fa22 f303 	lsr.w	r3, r2, r3
   bad98:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bad9c:	401a      	ands	r2, r3
   bad9e:	f846 2c04 	str.w	r2, [r6, #-4]
   bada2:	e7d3      	b.n	bad4c <__hexnan+0xd4>
   bada4:	3f04      	subs	r7, #4
   bada6:	e7d1      	b.n	bad4c <__hexnan+0xd4>
   bada8:	2004      	movs	r0, #4
   badaa:	b007      	add	sp, #28
   badac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000badb0 <__retarget_lock_acquire_recursive>:
   badb0:	4770      	bx	lr

000badb2 <__retarget_lock_release>:
   badb2:	4770      	bx	lr

000badb4 <__retarget_lock_release_recursive>:
   badb4:	4770      	bx	lr

000badb6 <__ascii_mbtowc>:
   badb6:	b082      	sub	sp, #8
   badb8:	b901      	cbnz	r1, badbc <__ascii_mbtowc+0x6>
   badba:	a901      	add	r1, sp, #4
   badbc:	b142      	cbz	r2, badd0 <__ascii_mbtowc+0x1a>
   badbe:	b14b      	cbz	r3, badd4 <__ascii_mbtowc+0x1e>
   badc0:	7813      	ldrb	r3, [r2, #0]
   badc2:	600b      	str	r3, [r1, #0]
   badc4:	7812      	ldrb	r2, [r2, #0]
   badc6:	1e10      	subs	r0, r2, #0
   badc8:	bf18      	it	ne
   badca:	2001      	movne	r0, #1
   badcc:	b002      	add	sp, #8
   badce:	4770      	bx	lr
   badd0:	4610      	mov	r0, r2
   badd2:	e7fb      	b.n	badcc <__ascii_mbtowc+0x16>
   badd4:	f06f 0001 	mvn.w	r0, #1
   badd8:	e7f8      	b.n	badcc <__ascii_mbtowc+0x16>
	...

000baddc <_Balloc>:
   baddc:	b570      	push	{r4, r5, r6, lr}
   badde:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bade0:	4604      	mov	r4, r0
   bade2:	460d      	mov	r5, r1
   bade4:	b976      	cbnz	r6, bae04 <_Balloc+0x28>
   bade6:	2010      	movs	r0, #16
   bade8:	f7fc fe90 	bl	b7b0c <malloc>
   badec:	4602      	mov	r2, r0
   badee:	6260      	str	r0, [r4, #36]	; 0x24
   badf0:	b920      	cbnz	r0, badfc <_Balloc+0x20>
   badf2:	4b18      	ldr	r3, [pc, #96]	; (bae54 <_Balloc+0x78>)
   badf4:	4818      	ldr	r0, [pc, #96]	; (bae58 <_Balloc+0x7c>)
   badf6:	2166      	movs	r1, #102	; 0x66
   badf8:	f7fc fec8 	bl	b7b8c <__assert_func>
   badfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bae00:	6006      	str	r6, [r0, #0]
   bae02:	60c6      	str	r6, [r0, #12]
   bae04:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bae06:	68f3      	ldr	r3, [r6, #12]
   bae08:	b183      	cbz	r3, bae2c <_Balloc+0x50>
   bae0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bae0c:	68db      	ldr	r3, [r3, #12]
   bae0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bae12:	b9b8      	cbnz	r0, bae44 <_Balloc+0x68>
   bae14:	2101      	movs	r1, #1
   bae16:	fa01 f605 	lsl.w	r6, r1, r5
   bae1a:	1d72      	adds	r2, r6, #5
   bae1c:	0092      	lsls	r2, r2, #2
   bae1e:	4620      	mov	r0, r4
   bae20:	f000 fc9d 	bl	bb75e <_calloc_r>
   bae24:	b160      	cbz	r0, bae40 <_Balloc+0x64>
   bae26:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bae2a:	e00e      	b.n	bae4a <_Balloc+0x6e>
   bae2c:	2221      	movs	r2, #33	; 0x21
   bae2e:	2104      	movs	r1, #4
   bae30:	4620      	mov	r0, r4
   bae32:	f000 fc94 	bl	bb75e <_calloc_r>
   bae36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bae38:	60f0      	str	r0, [r6, #12]
   bae3a:	68db      	ldr	r3, [r3, #12]
   bae3c:	2b00      	cmp	r3, #0
   bae3e:	d1e4      	bne.n	bae0a <_Balloc+0x2e>
   bae40:	2000      	movs	r0, #0
   bae42:	bd70      	pop	{r4, r5, r6, pc}
   bae44:	6802      	ldr	r2, [r0, #0]
   bae46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bae4a:	2300      	movs	r3, #0
   bae4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bae50:	e7f7      	b.n	bae42 <_Balloc+0x66>
   bae52:	bf00      	nop
   bae54:	000bcd01 	.word	0x000bcd01
   bae58:	000bcfa6 	.word	0x000bcfa6

000bae5c <_Bfree>:
   bae5c:	b570      	push	{r4, r5, r6, lr}
   bae5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bae60:	4605      	mov	r5, r0
   bae62:	460c      	mov	r4, r1
   bae64:	b976      	cbnz	r6, bae84 <_Bfree+0x28>
   bae66:	2010      	movs	r0, #16
   bae68:	f7fc fe50 	bl	b7b0c <malloc>
   bae6c:	4602      	mov	r2, r0
   bae6e:	6268      	str	r0, [r5, #36]	; 0x24
   bae70:	b920      	cbnz	r0, bae7c <_Bfree+0x20>
   bae72:	4b09      	ldr	r3, [pc, #36]	; (bae98 <_Bfree+0x3c>)
   bae74:	4809      	ldr	r0, [pc, #36]	; (bae9c <_Bfree+0x40>)
   bae76:	218a      	movs	r1, #138	; 0x8a
   bae78:	f7fc fe88 	bl	b7b8c <__assert_func>
   bae7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bae80:	6006      	str	r6, [r0, #0]
   bae82:	60c6      	str	r6, [r0, #12]
   bae84:	b13c      	cbz	r4, bae96 <_Bfree+0x3a>
   bae86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bae88:	6862      	ldr	r2, [r4, #4]
   bae8a:	68db      	ldr	r3, [r3, #12]
   bae8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bae90:	6021      	str	r1, [r4, #0]
   bae92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bae96:	bd70      	pop	{r4, r5, r6, pc}
   bae98:	000bcd01 	.word	0x000bcd01
   bae9c:	000bcfa6 	.word	0x000bcfa6

000baea0 <__multadd>:
   baea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   baea4:	690d      	ldr	r5, [r1, #16]
   baea6:	4607      	mov	r7, r0
   baea8:	460c      	mov	r4, r1
   baeaa:	461e      	mov	r6, r3
   baeac:	f101 0c14 	add.w	ip, r1, #20
   baeb0:	2000      	movs	r0, #0
   baeb2:	f8dc 3000 	ldr.w	r3, [ip]
   baeb6:	b299      	uxth	r1, r3
   baeb8:	fb02 6101 	mla	r1, r2, r1, r6
   baebc:	0c1e      	lsrs	r6, r3, #16
   baebe:	0c0b      	lsrs	r3, r1, #16
   baec0:	fb02 3306 	mla	r3, r2, r6, r3
   baec4:	b289      	uxth	r1, r1
   baec6:	3001      	adds	r0, #1
   baec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   baecc:	4285      	cmp	r5, r0
   baece:	f84c 1b04 	str.w	r1, [ip], #4
   baed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   baed6:	dcec      	bgt.n	baeb2 <__multadd+0x12>
   baed8:	b30e      	cbz	r6, baf1e <__multadd+0x7e>
   baeda:	68a3      	ldr	r3, [r4, #8]
   baedc:	42ab      	cmp	r3, r5
   baede:	dc19      	bgt.n	baf14 <__multadd+0x74>
   baee0:	6861      	ldr	r1, [r4, #4]
   baee2:	4638      	mov	r0, r7
   baee4:	3101      	adds	r1, #1
   baee6:	f7ff ff79 	bl	baddc <_Balloc>
   baeea:	4680      	mov	r8, r0
   baeec:	b928      	cbnz	r0, baefa <__multadd+0x5a>
   baeee:	4602      	mov	r2, r0
   baef0:	4b0c      	ldr	r3, [pc, #48]	; (baf24 <__multadd+0x84>)
   baef2:	480d      	ldr	r0, [pc, #52]	; (baf28 <__multadd+0x88>)
   baef4:	21b5      	movs	r1, #181	; 0xb5
   baef6:	f7fc fe49 	bl	b7b8c <__assert_func>
   baefa:	6922      	ldr	r2, [r4, #16]
   baefc:	3202      	adds	r2, #2
   baefe:	f104 010c 	add.w	r1, r4, #12
   baf02:	0092      	lsls	r2, r2, #2
   baf04:	300c      	adds	r0, #12
   baf06:	f7fe fc40 	bl	b978a <memcpy>
   baf0a:	4621      	mov	r1, r4
   baf0c:	4638      	mov	r0, r7
   baf0e:	f7ff ffa5 	bl	bae5c <_Bfree>
   baf12:	4644      	mov	r4, r8
   baf14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   baf18:	3501      	adds	r5, #1
   baf1a:	615e      	str	r6, [r3, #20]
   baf1c:	6125      	str	r5, [r4, #16]
   baf1e:	4620      	mov	r0, r4
   baf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baf24:	000bcef9 	.word	0x000bcef9
   baf28:	000bcfa6 	.word	0x000bcfa6

000baf2c <__s2b>:
   baf2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   baf30:	460c      	mov	r4, r1
   baf32:	4615      	mov	r5, r2
   baf34:	461f      	mov	r7, r3
   baf36:	2209      	movs	r2, #9
   baf38:	3308      	adds	r3, #8
   baf3a:	4606      	mov	r6, r0
   baf3c:	fb93 f3f2 	sdiv	r3, r3, r2
   baf40:	2100      	movs	r1, #0
   baf42:	2201      	movs	r2, #1
   baf44:	429a      	cmp	r2, r3
   baf46:	db09      	blt.n	baf5c <__s2b+0x30>
   baf48:	4630      	mov	r0, r6
   baf4a:	f7ff ff47 	bl	baddc <_Balloc>
   baf4e:	b940      	cbnz	r0, baf62 <__s2b+0x36>
   baf50:	4602      	mov	r2, r0
   baf52:	4b19      	ldr	r3, [pc, #100]	; (bafb8 <__s2b+0x8c>)
   baf54:	4819      	ldr	r0, [pc, #100]	; (bafbc <__s2b+0x90>)
   baf56:	21ce      	movs	r1, #206	; 0xce
   baf58:	f7fc fe18 	bl	b7b8c <__assert_func>
   baf5c:	0052      	lsls	r2, r2, #1
   baf5e:	3101      	adds	r1, #1
   baf60:	e7f0      	b.n	baf44 <__s2b+0x18>
   baf62:	9b08      	ldr	r3, [sp, #32]
   baf64:	6143      	str	r3, [r0, #20]
   baf66:	2d09      	cmp	r5, #9
   baf68:	f04f 0301 	mov.w	r3, #1
   baf6c:	6103      	str	r3, [r0, #16]
   baf6e:	dd16      	ble.n	baf9e <__s2b+0x72>
   baf70:	f104 0909 	add.w	r9, r4, #9
   baf74:	46c8      	mov	r8, r9
   baf76:	442c      	add	r4, r5
   baf78:	f818 3b01 	ldrb.w	r3, [r8], #1
   baf7c:	4601      	mov	r1, r0
   baf7e:	3b30      	subs	r3, #48	; 0x30
   baf80:	220a      	movs	r2, #10
   baf82:	4630      	mov	r0, r6
   baf84:	f7ff ff8c 	bl	baea0 <__multadd>
   baf88:	45a0      	cmp	r8, r4
   baf8a:	d1f5      	bne.n	baf78 <__s2b+0x4c>
   baf8c:	f1a5 0408 	sub.w	r4, r5, #8
   baf90:	444c      	add	r4, r9
   baf92:	1b2d      	subs	r5, r5, r4
   baf94:	1963      	adds	r3, r4, r5
   baf96:	42bb      	cmp	r3, r7
   baf98:	db04      	blt.n	bafa4 <__s2b+0x78>
   baf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   baf9e:	340a      	adds	r4, #10
   bafa0:	2509      	movs	r5, #9
   bafa2:	e7f6      	b.n	baf92 <__s2b+0x66>
   bafa4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bafa8:	4601      	mov	r1, r0
   bafaa:	3b30      	subs	r3, #48	; 0x30
   bafac:	220a      	movs	r2, #10
   bafae:	4630      	mov	r0, r6
   bafb0:	f7ff ff76 	bl	baea0 <__multadd>
   bafb4:	e7ee      	b.n	baf94 <__s2b+0x68>
   bafb6:	bf00      	nop
   bafb8:	000bcef9 	.word	0x000bcef9
   bafbc:	000bcfa6 	.word	0x000bcfa6

000bafc0 <__hi0bits>:
   bafc0:	0c03      	lsrs	r3, r0, #16
   bafc2:	041b      	lsls	r3, r3, #16
   bafc4:	b9d3      	cbnz	r3, baffc <__hi0bits+0x3c>
   bafc6:	0400      	lsls	r0, r0, #16
   bafc8:	2310      	movs	r3, #16
   bafca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bafce:	bf04      	itt	eq
   bafd0:	0200      	lsleq	r0, r0, #8
   bafd2:	3308      	addeq	r3, #8
   bafd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bafd8:	bf04      	itt	eq
   bafda:	0100      	lsleq	r0, r0, #4
   bafdc:	3304      	addeq	r3, #4
   bafde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bafe2:	bf04      	itt	eq
   bafe4:	0080      	lsleq	r0, r0, #2
   bafe6:	3302      	addeq	r3, #2
   bafe8:	2800      	cmp	r0, #0
   bafea:	db05      	blt.n	baff8 <__hi0bits+0x38>
   bafec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   baff0:	f103 0301 	add.w	r3, r3, #1
   baff4:	bf08      	it	eq
   baff6:	2320      	moveq	r3, #32
   baff8:	4618      	mov	r0, r3
   baffa:	4770      	bx	lr
   baffc:	2300      	movs	r3, #0
   baffe:	e7e4      	b.n	bafca <__hi0bits+0xa>

000bb000 <__lo0bits>:
   bb000:	6803      	ldr	r3, [r0, #0]
   bb002:	f013 0207 	ands.w	r2, r3, #7
   bb006:	4601      	mov	r1, r0
   bb008:	d00b      	beq.n	bb022 <__lo0bits+0x22>
   bb00a:	07da      	lsls	r2, r3, #31
   bb00c:	d423      	bmi.n	bb056 <__lo0bits+0x56>
   bb00e:	0798      	lsls	r0, r3, #30
   bb010:	bf49      	itett	mi
   bb012:	085b      	lsrmi	r3, r3, #1
   bb014:	089b      	lsrpl	r3, r3, #2
   bb016:	2001      	movmi	r0, #1
   bb018:	600b      	strmi	r3, [r1, #0]
   bb01a:	bf5c      	itt	pl
   bb01c:	600b      	strpl	r3, [r1, #0]
   bb01e:	2002      	movpl	r0, #2
   bb020:	4770      	bx	lr
   bb022:	b298      	uxth	r0, r3
   bb024:	b9a8      	cbnz	r0, bb052 <__lo0bits+0x52>
   bb026:	0c1b      	lsrs	r3, r3, #16
   bb028:	2010      	movs	r0, #16
   bb02a:	b2da      	uxtb	r2, r3
   bb02c:	b90a      	cbnz	r2, bb032 <__lo0bits+0x32>
   bb02e:	3008      	adds	r0, #8
   bb030:	0a1b      	lsrs	r3, r3, #8
   bb032:	071a      	lsls	r2, r3, #28
   bb034:	bf04      	itt	eq
   bb036:	091b      	lsreq	r3, r3, #4
   bb038:	3004      	addeq	r0, #4
   bb03a:	079a      	lsls	r2, r3, #30
   bb03c:	bf04      	itt	eq
   bb03e:	089b      	lsreq	r3, r3, #2
   bb040:	3002      	addeq	r0, #2
   bb042:	07da      	lsls	r2, r3, #31
   bb044:	d403      	bmi.n	bb04e <__lo0bits+0x4e>
   bb046:	085b      	lsrs	r3, r3, #1
   bb048:	f100 0001 	add.w	r0, r0, #1
   bb04c:	d005      	beq.n	bb05a <__lo0bits+0x5a>
   bb04e:	600b      	str	r3, [r1, #0]
   bb050:	4770      	bx	lr
   bb052:	4610      	mov	r0, r2
   bb054:	e7e9      	b.n	bb02a <__lo0bits+0x2a>
   bb056:	2000      	movs	r0, #0
   bb058:	4770      	bx	lr
   bb05a:	2020      	movs	r0, #32
   bb05c:	4770      	bx	lr
	...

000bb060 <__i2b>:
   bb060:	b510      	push	{r4, lr}
   bb062:	460c      	mov	r4, r1
   bb064:	2101      	movs	r1, #1
   bb066:	f7ff feb9 	bl	baddc <_Balloc>
   bb06a:	4602      	mov	r2, r0
   bb06c:	b928      	cbnz	r0, bb07a <__i2b+0x1a>
   bb06e:	4b05      	ldr	r3, [pc, #20]	; (bb084 <__i2b+0x24>)
   bb070:	4805      	ldr	r0, [pc, #20]	; (bb088 <__i2b+0x28>)
   bb072:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bb076:	f7fc fd89 	bl	b7b8c <__assert_func>
   bb07a:	2301      	movs	r3, #1
   bb07c:	6144      	str	r4, [r0, #20]
   bb07e:	6103      	str	r3, [r0, #16]
   bb080:	bd10      	pop	{r4, pc}
   bb082:	bf00      	nop
   bb084:	000bcef9 	.word	0x000bcef9
   bb088:	000bcfa6 	.word	0x000bcfa6

000bb08c <__multiply>:
   bb08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb090:	4691      	mov	r9, r2
   bb092:	690a      	ldr	r2, [r1, #16]
   bb094:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb098:	429a      	cmp	r2, r3
   bb09a:	bfb8      	it	lt
   bb09c:	460b      	movlt	r3, r1
   bb09e:	460c      	mov	r4, r1
   bb0a0:	bfbc      	itt	lt
   bb0a2:	464c      	movlt	r4, r9
   bb0a4:	4699      	movlt	r9, r3
   bb0a6:	6927      	ldr	r7, [r4, #16]
   bb0a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bb0ac:	68a3      	ldr	r3, [r4, #8]
   bb0ae:	6861      	ldr	r1, [r4, #4]
   bb0b0:	eb07 060a 	add.w	r6, r7, sl
   bb0b4:	42b3      	cmp	r3, r6
   bb0b6:	b085      	sub	sp, #20
   bb0b8:	bfb8      	it	lt
   bb0ba:	3101      	addlt	r1, #1
   bb0bc:	f7ff fe8e 	bl	baddc <_Balloc>
   bb0c0:	b930      	cbnz	r0, bb0d0 <__multiply+0x44>
   bb0c2:	4602      	mov	r2, r0
   bb0c4:	4b44      	ldr	r3, [pc, #272]	; (bb1d8 <__multiply+0x14c>)
   bb0c6:	4845      	ldr	r0, [pc, #276]	; (bb1dc <__multiply+0x150>)
   bb0c8:	f240 115d 	movw	r1, #349	; 0x15d
   bb0cc:	f7fc fd5e 	bl	b7b8c <__assert_func>
   bb0d0:	f100 0514 	add.w	r5, r0, #20
   bb0d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bb0d8:	462b      	mov	r3, r5
   bb0da:	2200      	movs	r2, #0
   bb0dc:	4543      	cmp	r3, r8
   bb0de:	d321      	bcc.n	bb124 <__multiply+0x98>
   bb0e0:	f104 0314 	add.w	r3, r4, #20
   bb0e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bb0e8:	f109 0314 	add.w	r3, r9, #20
   bb0ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bb0f0:	9202      	str	r2, [sp, #8]
   bb0f2:	1b3a      	subs	r2, r7, r4
   bb0f4:	3a15      	subs	r2, #21
   bb0f6:	f022 0203 	bic.w	r2, r2, #3
   bb0fa:	3204      	adds	r2, #4
   bb0fc:	f104 0115 	add.w	r1, r4, #21
   bb100:	428f      	cmp	r7, r1
   bb102:	bf38      	it	cc
   bb104:	2204      	movcc	r2, #4
   bb106:	9201      	str	r2, [sp, #4]
   bb108:	9a02      	ldr	r2, [sp, #8]
   bb10a:	9303      	str	r3, [sp, #12]
   bb10c:	429a      	cmp	r2, r3
   bb10e:	d80c      	bhi.n	bb12a <__multiply+0x9e>
   bb110:	2e00      	cmp	r6, #0
   bb112:	dd03      	ble.n	bb11c <__multiply+0x90>
   bb114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bb118:	2b00      	cmp	r3, #0
   bb11a:	d05a      	beq.n	bb1d2 <__multiply+0x146>
   bb11c:	6106      	str	r6, [r0, #16]
   bb11e:	b005      	add	sp, #20
   bb120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb124:	f843 2b04 	str.w	r2, [r3], #4
   bb128:	e7d8      	b.n	bb0dc <__multiply+0x50>
   bb12a:	f8b3 a000 	ldrh.w	sl, [r3]
   bb12e:	f1ba 0f00 	cmp.w	sl, #0
   bb132:	d024      	beq.n	bb17e <__multiply+0xf2>
   bb134:	f104 0e14 	add.w	lr, r4, #20
   bb138:	46a9      	mov	r9, r5
   bb13a:	f04f 0c00 	mov.w	ip, #0
   bb13e:	f85e 2b04 	ldr.w	r2, [lr], #4
   bb142:	f8d9 1000 	ldr.w	r1, [r9]
   bb146:	fa1f fb82 	uxth.w	fp, r2
   bb14a:	b289      	uxth	r1, r1
   bb14c:	fb0a 110b 	mla	r1, sl, fp, r1
   bb150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bb154:	f8d9 2000 	ldr.w	r2, [r9]
   bb158:	4461      	add	r1, ip
   bb15a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb15e:	fb0a c20b 	mla	r2, sl, fp, ip
   bb162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bb166:	b289      	uxth	r1, r1
   bb168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bb16c:	4577      	cmp	r7, lr
   bb16e:	f849 1b04 	str.w	r1, [r9], #4
   bb172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bb176:	d8e2      	bhi.n	bb13e <__multiply+0xb2>
   bb178:	9a01      	ldr	r2, [sp, #4]
   bb17a:	f845 c002 	str.w	ip, [r5, r2]
   bb17e:	9a03      	ldr	r2, [sp, #12]
   bb180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bb184:	3304      	adds	r3, #4
   bb186:	f1b9 0f00 	cmp.w	r9, #0
   bb18a:	d020      	beq.n	bb1ce <__multiply+0x142>
   bb18c:	6829      	ldr	r1, [r5, #0]
   bb18e:	f104 0c14 	add.w	ip, r4, #20
   bb192:	46ae      	mov	lr, r5
   bb194:	f04f 0a00 	mov.w	sl, #0
   bb198:	f8bc b000 	ldrh.w	fp, [ip]
   bb19c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bb1a0:	fb09 220b 	mla	r2, r9, fp, r2
   bb1a4:	4492      	add	sl, r2
   bb1a6:	b289      	uxth	r1, r1
   bb1a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bb1ac:	f84e 1b04 	str.w	r1, [lr], #4
   bb1b0:	f85c 2b04 	ldr.w	r2, [ip], #4
   bb1b4:	f8be 1000 	ldrh.w	r1, [lr]
   bb1b8:	0c12      	lsrs	r2, r2, #16
   bb1ba:	fb09 1102 	mla	r1, r9, r2, r1
   bb1be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bb1c2:	4567      	cmp	r7, ip
   bb1c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bb1c8:	d8e6      	bhi.n	bb198 <__multiply+0x10c>
   bb1ca:	9a01      	ldr	r2, [sp, #4]
   bb1cc:	50a9      	str	r1, [r5, r2]
   bb1ce:	3504      	adds	r5, #4
   bb1d0:	e79a      	b.n	bb108 <__multiply+0x7c>
   bb1d2:	3e01      	subs	r6, #1
   bb1d4:	e79c      	b.n	bb110 <__multiply+0x84>
   bb1d6:	bf00      	nop
   bb1d8:	000bcef9 	.word	0x000bcef9
   bb1dc:	000bcfa6 	.word	0x000bcfa6

000bb1e0 <__pow5mult>:
   bb1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb1e4:	4615      	mov	r5, r2
   bb1e6:	f012 0203 	ands.w	r2, r2, #3
   bb1ea:	4606      	mov	r6, r0
   bb1ec:	460f      	mov	r7, r1
   bb1ee:	d007      	beq.n	bb200 <__pow5mult+0x20>
   bb1f0:	4c25      	ldr	r4, [pc, #148]	; (bb288 <__pow5mult+0xa8>)
   bb1f2:	3a01      	subs	r2, #1
   bb1f4:	2300      	movs	r3, #0
   bb1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bb1fa:	f7ff fe51 	bl	baea0 <__multadd>
   bb1fe:	4607      	mov	r7, r0
   bb200:	10ad      	asrs	r5, r5, #2
   bb202:	d03d      	beq.n	bb280 <__pow5mult+0xa0>
   bb204:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bb206:	b97c      	cbnz	r4, bb228 <__pow5mult+0x48>
   bb208:	2010      	movs	r0, #16
   bb20a:	f7fc fc7f 	bl	b7b0c <malloc>
   bb20e:	4602      	mov	r2, r0
   bb210:	6270      	str	r0, [r6, #36]	; 0x24
   bb212:	b928      	cbnz	r0, bb220 <__pow5mult+0x40>
   bb214:	4b1d      	ldr	r3, [pc, #116]	; (bb28c <__pow5mult+0xac>)
   bb216:	481e      	ldr	r0, [pc, #120]	; (bb290 <__pow5mult+0xb0>)
   bb218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bb21c:	f7fc fcb6 	bl	b7b8c <__assert_func>
   bb220:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bb224:	6004      	str	r4, [r0, #0]
   bb226:	60c4      	str	r4, [r0, #12]
   bb228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bb22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bb230:	b94c      	cbnz	r4, bb246 <__pow5mult+0x66>
   bb232:	f240 2171 	movw	r1, #625	; 0x271
   bb236:	4630      	mov	r0, r6
   bb238:	f7ff ff12 	bl	bb060 <__i2b>
   bb23c:	2300      	movs	r3, #0
   bb23e:	f8c8 0008 	str.w	r0, [r8, #8]
   bb242:	4604      	mov	r4, r0
   bb244:	6003      	str	r3, [r0, #0]
   bb246:	f04f 0900 	mov.w	r9, #0
   bb24a:	07eb      	lsls	r3, r5, #31
   bb24c:	d50a      	bpl.n	bb264 <__pow5mult+0x84>
   bb24e:	4639      	mov	r1, r7
   bb250:	4622      	mov	r2, r4
   bb252:	4630      	mov	r0, r6
   bb254:	f7ff ff1a 	bl	bb08c <__multiply>
   bb258:	4639      	mov	r1, r7
   bb25a:	4680      	mov	r8, r0
   bb25c:	4630      	mov	r0, r6
   bb25e:	f7ff fdfd 	bl	bae5c <_Bfree>
   bb262:	4647      	mov	r7, r8
   bb264:	106d      	asrs	r5, r5, #1
   bb266:	d00b      	beq.n	bb280 <__pow5mult+0xa0>
   bb268:	6820      	ldr	r0, [r4, #0]
   bb26a:	b938      	cbnz	r0, bb27c <__pow5mult+0x9c>
   bb26c:	4622      	mov	r2, r4
   bb26e:	4621      	mov	r1, r4
   bb270:	4630      	mov	r0, r6
   bb272:	f7ff ff0b 	bl	bb08c <__multiply>
   bb276:	6020      	str	r0, [r4, #0]
   bb278:	f8c0 9000 	str.w	r9, [r0]
   bb27c:	4604      	mov	r4, r0
   bb27e:	e7e4      	b.n	bb24a <__pow5mult+0x6a>
   bb280:	4638      	mov	r0, r7
   bb282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb286:	bf00      	nop
   bb288:	000bd118 	.word	0x000bd118
   bb28c:	000bcd01 	.word	0x000bcd01
   bb290:	000bcfa6 	.word	0x000bcfa6

000bb294 <__lshift>:
   bb294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb298:	460c      	mov	r4, r1
   bb29a:	6849      	ldr	r1, [r1, #4]
   bb29c:	6923      	ldr	r3, [r4, #16]
   bb29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bb2a2:	68a3      	ldr	r3, [r4, #8]
   bb2a4:	4607      	mov	r7, r0
   bb2a6:	4691      	mov	r9, r2
   bb2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bb2ac:	f108 0601 	add.w	r6, r8, #1
   bb2b0:	42b3      	cmp	r3, r6
   bb2b2:	db0b      	blt.n	bb2cc <__lshift+0x38>
   bb2b4:	4638      	mov	r0, r7
   bb2b6:	f7ff fd91 	bl	baddc <_Balloc>
   bb2ba:	4605      	mov	r5, r0
   bb2bc:	b948      	cbnz	r0, bb2d2 <__lshift+0x3e>
   bb2be:	4602      	mov	r2, r0
   bb2c0:	4b2a      	ldr	r3, [pc, #168]	; (bb36c <__lshift+0xd8>)
   bb2c2:	482b      	ldr	r0, [pc, #172]	; (bb370 <__lshift+0xdc>)
   bb2c4:	f240 11d9 	movw	r1, #473	; 0x1d9
   bb2c8:	f7fc fc60 	bl	b7b8c <__assert_func>
   bb2cc:	3101      	adds	r1, #1
   bb2ce:	005b      	lsls	r3, r3, #1
   bb2d0:	e7ee      	b.n	bb2b0 <__lshift+0x1c>
   bb2d2:	2300      	movs	r3, #0
   bb2d4:	f100 0114 	add.w	r1, r0, #20
   bb2d8:	f100 0210 	add.w	r2, r0, #16
   bb2dc:	4618      	mov	r0, r3
   bb2de:	4553      	cmp	r3, sl
   bb2e0:	db37      	blt.n	bb352 <__lshift+0xbe>
   bb2e2:	6920      	ldr	r0, [r4, #16]
   bb2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bb2e8:	f104 0314 	add.w	r3, r4, #20
   bb2ec:	f019 091f 	ands.w	r9, r9, #31
   bb2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bb2f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bb2f8:	d02f      	beq.n	bb35a <__lshift+0xc6>
   bb2fa:	f1c9 0e20 	rsb	lr, r9, #32
   bb2fe:	468a      	mov	sl, r1
   bb300:	f04f 0c00 	mov.w	ip, #0
   bb304:	681a      	ldr	r2, [r3, #0]
   bb306:	fa02 f209 	lsl.w	r2, r2, r9
   bb30a:	ea42 020c 	orr.w	r2, r2, ip
   bb30e:	f84a 2b04 	str.w	r2, [sl], #4
   bb312:	f853 2b04 	ldr.w	r2, [r3], #4
   bb316:	4298      	cmp	r0, r3
   bb318:	fa22 fc0e 	lsr.w	ip, r2, lr
   bb31c:	d8f2      	bhi.n	bb304 <__lshift+0x70>
   bb31e:	1b03      	subs	r3, r0, r4
   bb320:	3b15      	subs	r3, #21
   bb322:	f023 0303 	bic.w	r3, r3, #3
   bb326:	3304      	adds	r3, #4
   bb328:	f104 0215 	add.w	r2, r4, #21
   bb32c:	4290      	cmp	r0, r2
   bb32e:	bf38      	it	cc
   bb330:	2304      	movcc	r3, #4
   bb332:	f841 c003 	str.w	ip, [r1, r3]
   bb336:	f1bc 0f00 	cmp.w	ip, #0
   bb33a:	d001      	beq.n	bb340 <__lshift+0xac>
   bb33c:	f108 0602 	add.w	r6, r8, #2
   bb340:	3e01      	subs	r6, #1
   bb342:	4638      	mov	r0, r7
   bb344:	612e      	str	r6, [r5, #16]
   bb346:	4621      	mov	r1, r4
   bb348:	f7ff fd88 	bl	bae5c <_Bfree>
   bb34c:	4628      	mov	r0, r5
   bb34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb352:	f842 0f04 	str.w	r0, [r2, #4]!
   bb356:	3301      	adds	r3, #1
   bb358:	e7c1      	b.n	bb2de <__lshift+0x4a>
   bb35a:	3904      	subs	r1, #4
   bb35c:	f853 2b04 	ldr.w	r2, [r3], #4
   bb360:	f841 2f04 	str.w	r2, [r1, #4]!
   bb364:	4298      	cmp	r0, r3
   bb366:	d8f9      	bhi.n	bb35c <__lshift+0xc8>
   bb368:	e7ea      	b.n	bb340 <__lshift+0xac>
   bb36a:	bf00      	nop
   bb36c:	000bcef9 	.word	0x000bcef9
   bb370:	000bcfa6 	.word	0x000bcfa6

000bb374 <__mcmp>:
   bb374:	b530      	push	{r4, r5, lr}
   bb376:	6902      	ldr	r2, [r0, #16]
   bb378:	690c      	ldr	r4, [r1, #16]
   bb37a:	1b12      	subs	r2, r2, r4
   bb37c:	d10e      	bne.n	bb39c <__mcmp+0x28>
   bb37e:	f100 0314 	add.w	r3, r0, #20
   bb382:	3114      	adds	r1, #20
   bb384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bb388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bb38c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bb390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bb394:	42a5      	cmp	r5, r4
   bb396:	d003      	beq.n	bb3a0 <__mcmp+0x2c>
   bb398:	d305      	bcc.n	bb3a6 <__mcmp+0x32>
   bb39a:	2201      	movs	r2, #1
   bb39c:	4610      	mov	r0, r2
   bb39e:	bd30      	pop	{r4, r5, pc}
   bb3a0:	4283      	cmp	r3, r0
   bb3a2:	d3f3      	bcc.n	bb38c <__mcmp+0x18>
   bb3a4:	e7fa      	b.n	bb39c <__mcmp+0x28>
   bb3a6:	f04f 32ff 	mov.w	r2, #4294967295
   bb3aa:	e7f7      	b.n	bb39c <__mcmp+0x28>

000bb3ac <__mdiff>:
   bb3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb3b0:	460c      	mov	r4, r1
   bb3b2:	4606      	mov	r6, r0
   bb3b4:	4611      	mov	r1, r2
   bb3b6:	4620      	mov	r0, r4
   bb3b8:	4690      	mov	r8, r2
   bb3ba:	f7ff ffdb 	bl	bb374 <__mcmp>
   bb3be:	1e05      	subs	r5, r0, #0
   bb3c0:	d110      	bne.n	bb3e4 <__mdiff+0x38>
   bb3c2:	4629      	mov	r1, r5
   bb3c4:	4630      	mov	r0, r6
   bb3c6:	f7ff fd09 	bl	baddc <_Balloc>
   bb3ca:	b930      	cbnz	r0, bb3da <__mdiff+0x2e>
   bb3cc:	4b3a      	ldr	r3, [pc, #232]	; (bb4b8 <__mdiff+0x10c>)
   bb3ce:	4602      	mov	r2, r0
   bb3d0:	f240 2132 	movw	r1, #562	; 0x232
   bb3d4:	4839      	ldr	r0, [pc, #228]	; (bb4bc <__mdiff+0x110>)
   bb3d6:	f7fc fbd9 	bl	b7b8c <__assert_func>
   bb3da:	2301      	movs	r3, #1
   bb3dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bb3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb3e4:	bfa4      	itt	ge
   bb3e6:	4643      	movge	r3, r8
   bb3e8:	46a0      	movge	r8, r4
   bb3ea:	4630      	mov	r0, r6
   bb3ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bb3f0:	bfa6      	itte	ge
   bb3f2:	461c      	movge	r4, r3
   bb3f4:	2500      	movge	r5, #0
   bb3f6:	2501      	movlt	r5, #1
   bb3f8:	f7ff fcf0 	bl	baddc <_Balloc>
   bb3fc:	b920      	cbnz	r0, bb408 <__mdiff+0x5c>
   bb3fe:	4b2e      	ldr	r3, [pc, #184]	; (bb4b8 <__mdiff+0x10c>)
   bb400:	4602      	mov	r2, r0
   bb402:	f44f 7110 	mov.w	r1, #576	; 0x240
   bb406:	e7e5      	b.n	bb3d4 <__mdiff+0x28>
   bb408:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bb40c:	6926      	ldr	r6, [r4, #16]
   bb40e:	60c5      	str	r5, [r0, #12]
   bb410:	f104 0914 	add.w	r9, r4, #20
   bb414:	f108 0514 	add.w	r5, r8, #20
   bb418:	f100 0e14 	add.w	lr, r0, #20
   bb41c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bb420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bb424:	f108 0210 	add.w	r2, r8, #16
   bb428:	46f2      	mov	sl, lr
   bb42a:	2100      	movs	r1, #0
   bb42c:	f859 3b04 	ldr.w	r3, [r9], #4
   bb430:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bb434:	fa1f f883 	uxth.w	r8, r3
   bb438:	fa11 f18b 	uxtah	r1, r1, fp
   bb43c:	0c1b      	lsrs	r3, r3, #16
   bb43e:	eba1 0808 	sub.w	r8, r1, r8
   bb442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bb446:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bb44a:	fa1f f888 	uxth.w	r8, r8
   bb44e:	1419      	asrs	r1, r3, #16
   bb450:	454e      	cmp	r6, r9
   bb452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bb456:	f84a 3b04 	str.w	r3, [sl], #4
   bb45a:	d8e7      	bhi.n	bb42c <__mdiff+0x80>
   bb45c:	1b33      	subs	r3, r6, r4
   bb45e:	3b15      	subs	r3, #21
   bb460:	f023 0303 	bic.w	r3, r3, #3
   bb464:	3304      	adds	r3, #4
   bb466:	3415      	adds	r4, #21
   bb468:	42a6      	cmp	r6, r4
   bb46a:	bf38      	it	cc
   bb46c:	2304      	movcc	r3, #4
   bb46e:	441d      	add	r5, r3
   bb470:	4473      	add	r3, lr
   bb472:	469e      	mov	lr, r3
   bb474:	462e      	mov	r6, r5
   bb476:	4566      	cmp	r6, ip
   bb478:	d30e      	bcc.n	bb498 <__mdiff+0xec>
   bb47a:	f10c 0203 	add.w	r2, ip, #3
   bb47e:	1b52      	subs	r2, r2, r5
   bb480:	f022 0203 	bic.w	r2, r2, #3
   bb484:	3d03      	subs	r5, #3
   bb486:	45ac      	cmp	ip, r5
   bb488:	bf38      	it	cc
   bb48a:	2200      	movcc	r2, #0
   bb48c:	441a      	add	r2, r3
   bb48e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bb492:	b17b      	cbz	r3, bb4b4 <__mdiff+0x108>
   bb494:	6107      	str	r7, [r0, #16]
   bb496:	e7a3      	b.n	bb3e0 <__mdiff+0x34>
   bb498:	f856 8b04 	ldr.w	r8, [r6], #4
   bb49c:	fa11 f288 	uxtah	r2, r1, r8
   bb4a0:	1414      	asrs	r4, r2, #16
   bb4a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bb4a6:	b292      	uxth	r2, r2
   bb4a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bb4ac:	f84e 2b04 	str.w	r2, [lr], #4
   bb4b0:	1421      	asrs	r1, r4, #16
   bb4b2:	e7e0      	b.n	bb476 <__mdiff+0xca>
   bb4b4:	3f01      	subs	r7, #1
   bb4b6:	e7ea      	b.n	bb48e <__mdiff+0xe2>
   bb4b8:	000bcef9 	.word	0x000bcef9
   bb4bc:	000bcfa6 	.word	0x000bcfa6

000bb4c0 <__ulp>:
   bb4c0:	b082      	sub	sp, #8
   bb4c2:	ed8d 0b00 	vstr	d0, [sp]
   bb4c6:	9b01      	ldr	r3, [sp, #4]
   bb4c8:	4912      	ldr	r1, [pc, #72]	; (bb514 <__ulp+0x54>)
   bb4ca:	4019      	ands	r1, r3
   bb4cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bb4d0:	2900      	cmp	r1, #0
   bb4d2:	dd05      	ble.n	bb4e0 <__ulp+0x20>
   bb4d4:	2200      	movs	r2, #0
   bb4d6:	460b      	mov	r3, r1
   bb4d8:	ec43 2b10 	vmov	d0, r2, r3
   bb4dc:	b002      	add	sp, #8
   bb4de:	4770      	bx	lr
   bb4e0:	4249      	negs	r1, r1
   bb4e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bb4e6:	ea4f 5021 	mov.w	r0, r1, asr #20
   bb4ea:	f04f 0200 	mov.w	r2, #0
   bb4ee:	f04f 0300 	mov.w	r3, #0
   bb4f2:	da04      	bge.n	bb4fe <__ulp+0x3e>
   bb4f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bb4f8:	fa41 f300 	asr.w	r3, r1, r0
   bb4fc:	e7ec      	b.n	bb4d8 <__ulp+0x18>
   bb4fe:	f1a0 0114 	sub.w	r1, r0, #20
   bb502:	291e      	cmp	r1, #30
   bb504:	bfda      	itte	le
   bb506:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bb50a:	fa20 f101 	lsrle.w	r1, r0, r1
   bb50e:	2101      	movgt	r1, #1
   bb510:	460a      	mov	r2, r1
   bb512:	e7e1      	b.n	bb4d8 <__ulp+0x18>
   bb514:	7ff00000 	.word	0x7ff00000

000bb518 <__b2d>:
   bb518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb51a:	6905      	ldr	r5, [r0, #16]
   bb51c:	f100 0714 	add.w	r7, r0, #20
   bb520:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bb524:	1f2e      	subs	r6, r5, #4
   bb526:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bb52a:	4620      	mov	r0, r4
   bb52c:	f7ff fd48 	bl	bafc0 <__hi0bits>
   bb530:	f1c0 0320 	rsb	r3, r0, #32
   bb534:	280a      	cmp	r0, #10
   bb536:	f8df c07c 	ldr.w	ip, [pc, #124]	; bb5b4 <__b2d+0x9c>
   bb53a:	600b      	str	r3, [r1, #0]
   bb53c:	dc14      	bgt.n	bb568 <__b2d+0x50>
   bb53e:	f1c0 0e0b 	rsb	lr, r0, #11
   bb542:	fa24 f10e 	lsr.w	r1, r4, lr
   bb546:	42b7      	cmp	r7, r6
   bb548:	ea41 030c 	orr.w	r3, r1, ip
   bb54c:	bf34      	ite	cc
   bb54e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb552:	2100      	movcs	r1, #0
   bb554:	3015      	adds	r0, #21
   bb556:	fa04 f000 	lsl.w	r0, r4, r0
   bb55a:	fa21 f10e 	lsr.w	r1, r1, lr
   bb55e:	ea40 0201 	orr.w	r2, r0, r1
   bb562:	ec43 2b10 	vmov	d0, r2, r3
   bb566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb568:	42b7      	cmp	r7, r6
   bb56a:	bf3a      	itte	cc
   bb56c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bb570:	f1a5 0608 	subcc.w	r6, r5, #8
   bb574:	2100      	movcs	r1, #0
   bb576:	380b      	subs	r0, #11
   bb578:	d017      	beq.n	bb5aa <__b2d+0x92>
   bb57a:	f1c0 0c20 	rsb	ip, r0, #32
   bb57e:	fa04 f500 	lsl.w	r5, r4, r0
   bb582:	42be      	cmp	r6, r7
   bb584:	fa21 f40c 	lsr.w	r4, r1, ip
   bb588:	ea45 0504 	orr.w	r5, r5, r4
   bb58c:	bf8c      	ite	hi
   bb58e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bb592:	2400      	movls	r4, #0
   bb594:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bb598:	fa01 f000 	lsl.w	r0, r1, r0
   bb59c:	fa24 f40c 	lsr.w	r4, r4, ip
   bb5a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bb5a4:	ea40 0204 	orr.w	r2, r0, r4
   bb5a8:	e7db      	b.n	bb562 <__b2d+0x4a>
   bb5aa:	ea44 030c 	orr.w	r3, r4, ip
   bb5ae:	460a      	mov	r2, r1
   bb5b0:	e7d7      	b.n	bb562 <__b2d+0x4a>
   bb5b2:	bf00      	nop
   bb5b4:	3ff00000 	.word	0x3ff00000

000bb5b8 <__d2b>:
   bb5b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bb5bc:	4689      	mov	r9, r1
   bb5be:	2101      	movs	r1, #1
   bb5c0:	ec57 6b10 	vmov	r6, r7, d0
   bb5c4:	4690      	mov	r8, r2
   bb5c6:	f7ff fc09 	bl	baddc <_Balloc>
   bb5ca:	4604      	mov	r4, r0
   bb5cc:	b930      	cbnz	r0, bb5dc <__d2b+0x24>
   bb5ce:	4602      	mov	r2, r0
   bb5d0:	4b25      	ldr	r3, [pc, #148]	; (bb668 <__d2b+0xb0>)
   bb5d2:	4826      	ldr	r0, [pc, #152]	; (bb66c <__d2b+0xb4>)
   bb5d4:	f240 310a 	movw	r1, #778	; 0x30a
   bb5d8:	f7fc fad8 	bl	b7b8c <__assert_func>
   bb5dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bb5e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bb5e4:	bb35      	cbnz	r5, bb634 <__d2b+0x7c>
   bb5e6:	2e00      	cmp	r6, #0
   bb5e8:	9301      	str	r3, [sp, #4]
   bb5ea:	d028      	beq.n	bb63e <__d2b+0x86>
   bb5ec:	4668      	mov	r0, sp
   bb5ee:	9600      	str	r6, [sp, #0]
   bb5f0:	f7ff fd06 	bl	bb000 <__lo0bits>
   bb5f4:	9900      	ldr	r1, [sp, #0]
   bb5f6:	b300      	cbz	r0, bb63a <__d2b+0x82>
   bb5f8:	9a01      	ldr	r2, [sp, #4]
   bb5fa:	f1c0 0320 	rsb	r3, r0, #32
   bb5fe:	fa02 f303 	lsl.w	r3, r2, r3
   bb602:	430b      	orrs	r3, r1
   bb604:	40c2      	lsrs	r2, r0
   bb606:	6163      	str	r3, [r4, #20]
   bb608:	9201      	str	r2, [sp, #4]
   bb60a:	9b01      	ldr	r3, [sp, #4]
   bb60c:	61a3      	str	r3, [r4, #24]
   bb60e:	2b00      	cmp	r3, #0
   bb610:	bf14      	ite	ne
   bb612:	2202      	movne	r2, #2
   bb614:	2201      	moveq	r2, #1
   bb616:	6122      	str	r2, [r4, #16]
   bb618:	b1d5      	cbz	r5, bb650 <__d2b+0x98>
   bb61a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bb61e:	4405      	add	r5, r0
   bb620:	f8c9 5000 	str.w	r5, [r9]
   bb624:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bb628:	f8c8 0000 	str.w	r0, [r8]
   bb62c:	4620      	mov	r0, r4
   bb62e:	b003      	add	sp, #12
   bb630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb638:	e7d5      	b.n	bb5e6 <__d2b+0x2e>
   bb63a:	6161      	str	r1, [r4, #20]
   bb63c:	e7e5      	b.n	bb60a <__d2b+0x52>
   bb63e:	a801      	add	r0, sp, #4
   bb640:	f7ff fcde 	bl	bb000 <__lo0bits>
   bb644:	9b01      	ldr	r3, [sp, #4]
   bb646:	6163      	str	r3, [r4, #20]
   bb648:	2201      	movs	r2, #1
   bb64a:	6122      	str	r2, [r4, #16]
   bb64c:	3020      	adds	r0, #32
   bb64e:	e7e3      	b.n	bb618 <__d2b+0x60>
   bb650:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bb654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bb658:	f8c9 0000 	str.w	r0, [r9]
   bb65c:	6918      	ldr	r0, [r3, #16]
   bb65e:	f7ff fcaf 	bl	bafc0 <__hi0bits>
   bb662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bb666:	e7df      	b.n	bb628 <__d2b+0x70>
   bb668:	000bcef9 	.word	0x000bcef9
   bb66c:	000bcfa6 	.word	0x000bcfa6

000bb670 <__ratio>:
   bb670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb674:	4688      	mov	r8, r1
   bb676:	4669      	mov	r1, sp
   bb678:	4681      	mov	r9, r0
   bb67a:	f7ff ff4d 	bl	bb518 <__b2d>
   bb67e:	a901      	add	r1, sp, #4
   bb680:	4640      	mov	r0, r8
   bb682:	ec55 4b10 	vmov	r4, r5, d0
   bb686:	f7ff ff47 	bl	bb518 <__b2d>
   bb68a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bb68e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bb692:	eba3 0c02 	sub.w	ip, r3, r2
   bb696:	e9dd 3200 	ldrd	r3, r2, [sp]
   bb69a:	1a9b      	subs	r3, r3, r2
   bb69c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bb6a0:	ec51 0b10 	vmov	r0, r1, d0
   bb6a4:	2b00      	cmp	r3, #0
   bb6a6:	bfd6      	itet	le
   bb6a8:	460a      	movle	r2, r1
   bb6aa:	462a      	movgt	r2, r5
   bb6ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bb6b0:	468b      	mov	fp, r1
   bb6b2:	462f      	mov	r7, r5
   bb6b4:	bfd4      	ite	le
   bb6b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bb6ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bb6be:	4620      	mov	r0, r4
   bb6c0:	ee10 2a10 	vmov	r2, s0
   bb6c4:	465b      	mov	r3, fp
   bb6c6:	4639      	mov	r1, r7
   bb6c8:	f7f8 ff90 	bl	b45ec <__aeabi_ddiv>
   bb6cc:	ec41 0b10 	vmov	d0, r0, r1
   bb6d0:	b003      	add	sp, #12
   bb6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb6d6 <__copybits>:
   bb6d6:	3901      	subs	r1, #1
   bb6d8:	b570      	push	{r4, r5, r6, lr}
   bb6da:	1149      	asrs	r1, r1, #5
   bb6dc:	6914      	ldr	r4, [r2, #16]
   bb6de:	3101      	adds	r1, #1
   bb6e0:	f102 0314 	add.w	r3, r2, #20
   bb6e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bb6e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bb6ec:	1f05      	subs	r5, r0, #4
   bb6ee:	42a3      	cmp	r3, r4
   bb6f0:	d30c      	bcc.n	bb70c <__copybits+0x36>
   bb6f2:	1aa3      	subs	r3, r4, r2
   bb6f4:	3b11      	subs	r3, #17
   bb6f6:	f023 0303 	bic.w	r3, r3, #3
   bb6fa:	3211      	adds	r2, #17
   bb6fc:	42a2      	cmp	r2, r4
   bb6fe:	bf88      	it	hi
   bb700:	2300      	movhi	r3, #0
   bb702:	4418      	add	r0, r3
   bb704:	2300      	movs	r3, #0
   bb706:	4288      	cmp	r0, r1
   bb708:	d305      	bcc.n	bb716 <__copybits+0x40>
   bb70a:	bd70      	pop	{r4, r5, r6, pc}
   bb70c:	f853 6b04 	ldr.w	r6, [r3], #4
   bb710:	f845 6f04 	str.w	r6, [r5, #4]!
   bb714:	e7eb      	b.n	bb6ee <__copybits+0x18>
   bb716:	f840 3b04 	str.w	r3, [r0], #4
   bb71a:	e7f4      	b.n	bb706 <__copybits+0x30>

000bb71c <__any_on>:
   bb71c:	f100 0214 	add.w	r2, r0, #20
   bb720:	6900      	ldr	r0, [r0, #16]
   bb722:	114b      	asrs	r3, r1, #5
   bb724:	4298      	cmp	r0, r3
   bb726:	b510      	push	{r4, lr}
   bb728:	db11      	blt.n	bb74e <__any_on+0x32>
   bb72a:	dd0a      	ble.n	bb742 <__any_on+0x26>
   bb72c:	f011 011f 	ands.w	r1, r1, #31
   bb730:	d007      	beq.n	bb742 <__any_on+0x26>
   bb732:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bb736:	fa24 f001 	lsr.w	r0, r4, r1
   bb73a:	fa00 f101 	lsl.w	r1, r0, r1
   bb73e:	428c      	cmp	r4, r1
   bb740:	d10b      	bne.n	bb75a <__any_on+0x3e>
   bb742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bb746:	4293      	cmp	r3, r2
   bb748:	d803      	bhi.n	bb752 <__any_on+0x36>
   bb74a:	2000      	movs	r0, #0
   bb74c:	bd10      	pop	{r4, pc}
   bb74e:	4603      	mov	r3, r0
   bb750:	e7f7      	b.n	bb742 <__any_on+0x26>
   bb752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bb756:	2900      	cmp	r1, #0
   bb758:	d0f5      	beq.n	bb746 <__any_on+0x2a>
   bb75a:	2001      	movs	r0, #1
   bb75c:	e7f6      	b.n	bb74c <__any_on+0x30>

000bb75e <_calloc_r>:
   bb75e:	b513      	push	{r0, r1, r4, lr}
   bb760:	434a      	muls	r2, r1
   bb762:	4611      	mov	r1, r2
   bb764:	9201      	str	r2, [sp, #4]
   bb766:	f7fc fa01 	bl	b7b6c <_malloc_r>
   bb76a:	4604      	mov	r4, r0
   bb76c:	b118      	cbz	r0, bb776 <_calloc_r+0x18>
   bb76e:	9a01      	ldr	r2, [sp, #4]
   bb770:	2100      	movs	r1, #0
   bb772:	f7fe f832 	bl	b97da <memset>
   bb776:	4620      	mov	r0, r4
   bb778:	b002      	add	sp, #8
   bb77a:	bd10      	pop	{r4, pc}
   bb77c:	0000      	movs	r0, r0
	...

000bb780 <nan>:
   bb780:	ed9f 0b01 	vldr	d0, [pc, #4]	; bb788 <nan+0x8>
   bb784:	4770      	bx	lr
   bb786:	bf00      	nop
   bb788:	00000000 	.word	0x00000000
   bb78c:	7ff80000 	.word	0x7ff80000

000bb790 <__ascii_wctomb>:
   bb790:	b149      	cbz	r1, bb7a6 <__ascii_wctomb+0x16>
   bb792:	2aff      	cmp	r2, #255	; 0xff
   bb794:	bf85      	ittet	hi
   bb796:	238a      	movhi	r3, #138	; 0x8a
   bb798:	6003      	strhi	r3, [r0, #0]
   bb79a:	700a      	strbls	r2, [r1, #0]
   bb79c:	f04f 30ff 	movhi.w	r0, #4294967295
   bb7a0:	bf98      	it	ls
   bb7a2:	2001      	movls	r0, #1
   bb7a4:	4770      	bx	lr
   bb7a6:	4608      	mov	r0, r1
   bb7a8:	4770      	bx	lr

000bb7aa <link_code_end>:
	...

000bb7ac <link_const_data_start>:
   bb7ac:	514d0400 	.word	0x514d0400
   bb7b0:	00045454 	.word	0x00045454
   bb7b4:	49514d06 	.word	0x49514d06
   bb7b8:	03706473 	.word	0x03706473

000bb7bc <dynalib_user>:
   bb7bc:	000b4ae5 000b4b21 000b4b49 000b4b4d     .J..!K..IK..MK..
   bb7cc:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bb7dc:	72697620 6c617574 54435300 434b5300      virtual.SCT.SKC
   bb7ec:	57454600 4e4b4200 43564f00 6f747300     .FEW.BKN.OVC.sto
   bb7fc:	534d0069 46494c00 564d0052 25005246     i.MS.LIFR.MVFR.%
   bb80c:	6c250069 6e690069 74756f00 6d777000     i.%li.in.out.pwm
   bb81c:	00776400 61007761 6f707269 722f7472     .dw.aw.airport/r
   bb82c:	65757165 25007473 00756c6c 6d740062     equest.%llu.b.tm
   bb83c:	54006c70 324c504d 68543733 454c4539     pl.TMPL237Th9ELE
   bb84c:	6e6f6300 7463656e 4e006465 7a5f306a     .connected.Nj0_z
   bb85c:	424c6473 4f624b6b 695f7573 46466279     sdLBkKbOsu_iybFF
   bb86c:	6344614e 72684472 00516633 6e796c62     NaDcrDhr3fQ.blyn
   bb87c:	6c632e6b 0064756f 70726961 2f74726f     k.cloud.airport/
   bb88c:	54410023 4f42004c 57420053 4c430049     #.ATL.BOS.BWI.CL
   bb89c:	4c430045 56430054 43440047 45440041     E.CLT.CVG.DCA.DE
   bb8ac:	4644004e 54440057 57450057 4c460052     N.DFW.DTW.EWR.FL
   bb8bc:	4149004c 41490044 464a0048 414c004b     L.IAD.IAH.JFK.LA
   bb8cc:	414c0053 474c0058 434d0041 444d004f     S.LAX.LGA.MCO.MD
   bb8dc:	454d0057 494d004d 534d0041 524f0050     W.MEM.MIA.MSP.OR
   bb8ec:	44500044 48500058 4850004c 49500058     D.PDX.PHL.PHX.PI
   bb8fc:	41530054 4553004e 46530041 4c53004f     T.SAN.SEA.SFO.SL
   bb90c:	54530043 5054004c 616c0041 68742e62     C.STL.TPA.lab.th
   bb91c:	6c637765 6d6f632e                        ewcl.com.

000bb925 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   bb925:	6b6e6c62 00666e69 0075636d 2e302e30     blnkinf.mcu.0.0.
   bb935:	77660030 7079742d 4d540065 33324c50     0.fw-type.TMPL23
   bb945:	39685437 00454c45 6c697562 634f0064     7Th9ELE.build.Oc
   bb955:	31202074 32303220 31322033 3a35313a     t  1 2023 21:15:
   bb965:	62003330 6b6e796c 332e3100 6800322e     03.blynk.1.3.2.h
   bb975:	6165622d 35340074 66756200 6e692d66     -beat.45.buff-in
   bb985:	32303100 65640034 61500076 63697472     .1024.dev.Partic
   bb995:	4120656c 6e6f6772 64000000 75616665     le Argon...defau
   bb9a5:	0020746c 0042534d 0042534c 4950533c     lt .MSB.LSB.<SPI
   bb9b5:	74746553 73676e69 66656420 746c7561     Settings default
   bb9c5:	533c003e 65534950 6e697474 25207367     >.<SPISettings %
   bb9d5:	20752573 4d207325 2545444f               s%u %s MODE%u>.

000bb9e4 <_ZL4font>:
   bb9e4:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bb9f4:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bba04:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bba14:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bba24:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bba34:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   bba44:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   bba54:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   bba64:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   bba74:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   bba84:	00000000 5f000000 07000000 14000700     ......._........
   bba94:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bbaa4:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bbab4:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bbac4:	08080800 00000808 20006060 02040810     ........``. ....
   bbad4:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bbae4:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bbaf4:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bbb04:	00001e29 00000014 00003440 22140800     ).......@4....."
   bbb14:	14141441 41001414 02081422 06095901     A......A"....Y..
   bbb24:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bbb34:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bbb44:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bbb54:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   bbb64:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bbb74:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bbb84:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bbb94:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bbba4:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bbbb4:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bbbc4:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bbbd4:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bbbe4:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bbbf4:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bbc04:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bbc14:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bbc24:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bbc34:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   bbc44:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   bbc54:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   bbc64:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   bbc74:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   bbc84:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   bbc94:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bbca4:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   bbcb4:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bbcc4:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   bbcd4:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   bbce4:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   bbcf4:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bbd04:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bbd14:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bbd24:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bbd34:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   bbd44:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   bbd54:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   bbd64:	00ff0000 ff101010 14141400 101000ff     ................
   bbd74:	10ff00ff f010f010 fc141414 f7141400     ................
   bbd84:	0000ff00 14ff00ff fc04f414 10171414     ................
   bbd94:	1f10101f 14141f10 10001f14 00f01010     ................
   bbda4:	1f000000 10101010 1010101f 0010f010     ................
   bbdb4:	10ff0000 10101010 10101010 000010ff     ................
   bbdc4:	0014ff00 ff00ff00 101f0000 fc000017     ................
   bbdd4:	1414f404 14171017 f404f414 00ff0000     ................
   bbde4:	141414f7 14141414 14f700f7 14171414     ................
   bbdf4:	101f1010 1414141f 101014f4 00f010f0     ................
   bbe04:	1f101f00 1f000000 00000014 000014fc     ................
   bbe14:	10f010f0 ff10ff10 ff141414 10101014     ................
   bbe24:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   bbe34:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   bbe44:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   bbe54:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   bbe64:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   bbe74:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   bbe84:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   bbe94:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   bbea4:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   bbeb4:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   bbec4:	00000018 30001010 0101ff40 01011f00     .......0@.......
   bbed4:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000bbee4 <_ZTV12Adafruit_GFX>:
	...
   bbef4:	000b63fd 000b7ee9 000b4b71 000b5e03     .c...~..qK...^..
   bbf04:	000b5e05 000b5e37 000b5e13 000b5e25     .^..7^...^..%^..
   bbf14:	000b5d45 000b5e03 000b602f 000b602d     E]...^../`..-`..
   bbf24:	000b5e4f 000b5e8d 000b5ec7 000b5f0d     O^...^...^..._..
   bbf34:	000b5f29 000b5fad                       )_..._..

000bbf3c <_ZTV16OledWingAdafruit>:
	...
   bbf44:	000b650d 000b652d 000b63fd 000b7ee9     .e..-e...c...~..
   bbf54:	000b6cb5 000b5e03 000b5e05 000b5e37     .l...^...^..7^..
   bbf64:	000b5e13 000b5e25 000b5d45 000b5e03     .^..%^..E]...^..
   bbf74:	000b602f 000b6e53 000b73fb 000b73ad     /`..Sn...s...s..
   bbf84:	000b5ec7 000b5f0d 000b5f29 000b5fad     .^..._..)_..._..

000bbf94 <_ZTVN8particle11SPISettingsE>:
	...
   bbf9c:	000b5cf1 000b5cc5 000b5cc7              .\...\...\..

000bbfa8 <_ZL12splash1_data>:
   bbfa8:	00000000 00800100 00000000 00000000     ................
   bbfb8:	00008003 00000000 07000000 000000c0     ................
   bbfc8:	00000000 c0070000 00000000 00000000     ................
   bbfd8:	00c00f00 00000000 00000000 0000e01f     ................
   bbfe8:	00000000 1f000000 000000e0 00000000     ................
   bbff8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   bc010:	0000f07f 00000000 7ff81f00 000000f0     ................
   bc020:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bc030:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bc040:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bc050:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bc060:	00000000 fc030000 80ffff73 00000000     ........s.......
   bc070:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bc080:	000000ff 00000000 fc1ffe7f 00000000     ................
   bc090:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bc0a0:	0000e0ff 00000000 ff191f00 000000c0     ................
   bc0b0:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bc0c0:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bc0d0:	00000000 fcffff00 00000000 00000000     ................
   bc0e0:	00feffff 00000000 ff000000 0000feff     ................
   bc0f0:	00000000 efff0100 000000fe 00000000     ................
   bc100:	fecfff01 00000000 03000000 00fe07ff     ................
   bc110:	00000000 fc030000 0000fe07 00000000     ................
   bc120:	03f00300 000000fe 00000000 fe008001     ................
	...
   bc138:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bc150:	0000000c 07000000 00fc0080 00c00300     ................
   bc160:	80070000 0000fc01 0000c003 01800700     ................
   bc170:	030000fc 000000c0 e0018007 1e000000     ................
   bc180:	07000000 00e00180 001e0000 9ff7e37f     ................
   bc190:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bc1a0:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bc1b0:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bc1c0:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bc1d0:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bc1e0:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   bc1f0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bc200:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bc210:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bc220:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bc230:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bc240:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bc250:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bc260:	5b6bfdff c0fd6adb                       ..k[.j..

000bc268 <_ZL12splash2_data>:
   bc268:	00600000 00000000 00000000 00000000     ..`.............
   bc278:	0000e000 00000000 00000000 01000000     ................
   bc288:	000000e0 00000000 00000000 f0010000     ................
	...
   bc2a4:	00f00300 00000000 00000000 00000000     ................
   bc2b4:	0000f007 00000000 00000000 07000000     ................
   bc2c4:	000000f8 00000000 00000000 f80f0000     ................
   bc2d4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bc2e4:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bc2f4:	00c00300 010000fe ffff00e0 000000f8     ................
   bc304:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bc314:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bc324:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bc334:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bc344:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bc354:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bc364:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bc374:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bc384:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bc394:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bc3a4:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bc3b4:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bc3c4:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bc3d4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bc3e4:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bc3fc:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bc40c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bc41c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bc42c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bc43c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bc448 <_ZTV16Adafruit_SSD1306>:
	...
   bc450:	000b6c89 000b6ca1 000b63fd 000b7ee9     .l...l...c...~..
   bc460:	000b6cb5 000b5e03 000b5e05 000b5e37     .l...^...^..7^..
   bc470:	000b5e13 000b5e25 000b5d45 000b5e03     .^..%^..E]...^..
   bc480:	000b602f 000b6e53 000b73fb 000b73ad     /`..Sn...s...s..
   bc490:	000b5ec7 000b5f0d 000b5f29 000b5fad     .^..._..)_..._..

000bc4a0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bc4a0:	e0c08000 fefcf8f0                       ........

000bc4a8 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bc4a8:	07030100 7f3f1f0f                       ......?.

000bc4b0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bc4b0:	a880d5ae                                ....

000bc4b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bc4b4:	8d4000d3                                ..@.

000bc4b8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bc4b8:	c8a10020                                 ...

000bc4bc <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bc4bc:	a6a440db                                 .@....

000bc4c2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bc4c2:	8f8102da                                ....

000bc4c6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bc4c6:	                                         ...

000bc4c9 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bc4c9:	                                         ...

000bc4cc <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bc4cc:	21ff0022 00000000                       "..!....

000bc4d4 <_ZL22BlynkReadHandlerVector>:
   bc4d4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc4e4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc4f4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc504:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc514:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc524:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc534:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc544:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc554:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc564:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc574:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc584:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc594:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5a4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5b4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5c4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5d4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5e4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc5f4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc604:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc614:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc624:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc634:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc644:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc654:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc664:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc674:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc684:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc694:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc6a4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc6b4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..
   bc6c4:	000b7585 000b7585 000b7585 000b7585     .u...u...u...u..

000bc6d4 <_ZL23BlynkWriteHandlerVector>:
   bc6d4:	000b7587 000b4fd5 000b7587 000b7587     .u...O...u...u..
   bc6e4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc6f4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc704:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc714:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc724:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc734:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc744:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc754:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc764:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc774:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc784:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc794:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7a4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7b4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7c4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7d4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7e4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc7f4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc804:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc814:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc824:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc834:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc844:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc854:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc864:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc874:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc884:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc894:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc8a4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc8b4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..
   bc8c4:	000b7587 000b7587 000b7587 000b7587     .u...u...u...u..

000bc8d4 <_ZTVN5spark13EthernetClassE>:
	...
   bc8dc:	000b7c0b 000b7c01 000b7bf7 000b7bed     .|...|...{...{..
   bc8ec:	000b7be1 000b7bd5 000b8be1 000b8be9     .{...{..........
   bc8fc:	000b7bc9 000b7bc1 000b7bb7 000b7bad     .{...{...{...{..
   bc90c:	000b8c19                                ....

000bc910 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bc910:	18100800 38302820                       .... (08

000bc918 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bc920:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   bc930:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bc940 <_ZTV9IPAddress>:
	...
   bc948:	000b8211 000b8201 000b8203              ............

000bc954 <_ZTV9USBSerial>:
	...
   bc95c:	000b8323 000b838b 000b8361 000b7ee9     #.......a....~..
   bc96c:	000b8353 000b8325 000b8335 000b8385     S...%...5.......
   bc97c:	000b8345 000b831d                       E.......

000bc984 <_ZTV11USARTSerial>:
	...
   bc98c:	000b8425 000b8491 000b8469 000b7ee9     %.......i....~..
   bc99c:	000b8439 000b8455 000b8447 000b8463     9...U...G...c...
   bc9ac:	000b8427 000b842b                       '...+...

000bc9b4 <_ZTV7TwoWire>:
	...
   bc9bc:	000b84c9 000b8513 000b84eb 000b84cb     ................
   bc9cc:	000b84f3 000b84fb 000b8503 000b850b     ................
   bc9dc:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   bc9ec:	203d2072 00006425                       r = %d..

000bc9f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bc9fc:	000b8611 000b8635 000b8b1f 000b8643     ....5.......C...
   bca0c:	000b8615                                ....

000bca10 <_ZTV9TCPClient>:
	...
   bca18:	000b8091 000b80a9 000b858d 000b85a7     ................
   bca28:	000b89b5 000b85d1 000b882b 000b8605     ........+.......
   bca38:	000b88bd 000b86fd 000b8859 000b8a69     ........Y...i...
   bca48:	000b87f9 000b8607 000b85b9 000b8649     ............I...
   bca58:	000b86dd                                ....

000bca5c <_ZTVN5spark9WiFiClassE>:
	...
   bca64:	000b8b83 000b8b79 000b8b6f 000b8b25     ....y...o...%...
   bca74:	000b8b63 000b8b57 000b8be1 000b8be9     c...W...........
   bca84:	000b8b4b 000b8b43 000b8b39 000b8b2f     K...C...9.../...
   bca94:	000b8c19                                ....

000bca98 <_ZTVN5spark12NetworkClassE>:
	...
   bcaa0:	000b8ba1 000b8bab 000b8bb5 000b8bbf     ................
   bcab0:	000b8bc9 000b8bd5 000b8be1 000b8be9     ................
   bcac0:	000b8bf1 000b8bfd 000b8c05 000b8c0f     ................
   bcad0:	000b8c19                                ....

000bcad4 <_ZSt7nothrow>:
	...

000bcad5 <_ZTSSt19_Sp_make_shared_tag>:
   bcad5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bcae5:	5f646572 00676174                        red_tag....

000bcaf0 <_ZTISt19_Sp_make_shared_tag>:
   bcaf0:	000bcc68 000bcad5 20746f6e 756f6e65     h.......not enou
   bcb00:	73206867 65636170 726f6620 726f6620     gh space for for
   bcb10:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   bcb20:	7361656c 75732065 74696d62 6c756620     lease submit ful
   bcb30:	7562206c 65722067 74726f70 20746120     l bug report at 
   bcb40:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   bcb50:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   bcb60:	32313000 36353433 00393837 69736162     .0123456789.basi
   bcb70:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   bcb80:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
   bcb90:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
   bcba0:	2d736968 7a69733e 20292865 69687728     his->size() (whi
   bcbb0:	69206863 7a252073 62002975 63697361     ch is %zu).basic
   bcbc0:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
   bcbd0:	00656361 69736162 74735f63 676e6972     ace.basic_string
   bcbe0:	4d5f3a3a 6e6f635f 75727473 6e207463     ::_M_construct n
   bcbf0:	206c6c75 20746f6e 696c6176 61620064     ull not valid.ba
   bcc00:	5f636973 69727473 3a3a676e 69736162     sic_string::basi
   bcc10:	74735f63 676e6972 73616200 735f6369     c_string.basic_s
   bcc20:	6e697274 733a3a67 74736275 00000072     tring::substr...

000bcc30 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bcc30:	000bccc8 000bcc3c 000bccec              ....<.......

000bcc3c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bcc3c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bcc4c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bcc5c:	00000045                                E...

000bcc60 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bcc60:	00000000 000bcc30 000b9571 000b9585     ....0...q.......
   bcc70:	000b9719 000b9719 000b95ef 000b9531     ............1...
   bcc80:	000b95d7 000b9599 000b9563              ........c...

000bcc8c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bcc8c:	000bccc8 000bcc98 000bcc30              ........0...

000bcc98 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bcc98:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bcca8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bccb8:	456f666e 00000000                       nfoE....

000bccc0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bccc0:	00000000 000bcc8c 000b9619 000b962d     ............-...
   bccd0:	000b9719 000b9719 000b95ef 000b9531     ............1...
   bcce0:	000b96ed 000b9679 000b9641              ....y...A...

000bccec <_ZTISt9type_info>:
   bccec:	000bcc68 000bccf4                       h.......

000bccf4 <_ZTSSt9type_info>:
   bccf4:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bcd04:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bcd14:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   bcd24:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bcd34:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bcd44:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   bcd54:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bcd64:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bcd74:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bcd84:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   bcd94:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000bcda4 <fpi.1>:
   bcda4:	00000035 fffffbce 000003cb 00000001     5...............
   bcdb4:	00000000                                ....

000bcdb8 <fpinan.0>:
   bcdb8:	00000034 fffffbce 000003cb 00000001     4...............
	...

000bcdd0 <tinytens>:
   bcdd0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bcde0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bcdf0:	64ac6f43 11680628                       Co.d(.h.

000bcdf8 <_ctype_>:
   bcdf8:	20202000 20202020 28282020 20282828     .         ((((( 
   bce08:	20202020 20202020 20202020 20202020                     
   bce18:	10108820 10101010 10101010 10101010      ...............
   bce28:	04040410 04040404 10040404 10101010     ................
   bce38:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bce48:	01010101 01010101 01010101 10101010     ................
   bce58:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bce68:	02020202 02020202 02020202 10101010     ................
   bce78:	00000020 00000000 00000000 00000000      ...............
	...
   bcef8:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bcf08:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   bcf18:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bcf28:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bcf38:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bcf48:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bcf58:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bcf68:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bcf78:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bcf88:	78656874 2e00632e 00000000              thex.c......

000bcf94 <_C_numeric_locale>:
   bcf94:	000bcf8f 000bcb60 2003e140 49534f50     ....`...@.. POSI
   bcfa4:	6d2f0058 772f746e 736b726f 65636170     X./mnt/workspace
   bcfb4:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   bcfc4:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   bcfd4:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bcfe4:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bcff4:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bd004:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bd014:	6474732f 2f62696c 6572706d 00632e63     /stdlib/mprec.c.
   bd024:	00000000                                ....

000bd028 <__mprec_bigtens>:
   bd028:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bd038:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bd048:	7f73bf3c 75154fdd                       <.s..O.u

000bd050 <__mprec_tens>:
   bd050:	00000000 3ff00000 00000000 40240000     .......?......$@
   bd060:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bd070:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bd080:	00000000 412e8480 00000000 416312d0     .......A......cA
   bd090:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bd0a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bd0b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bd0c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bd0d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bd0e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bd0f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bd100:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bd110:	79d99db4 44ea7843                       ...yCx.D

000bd118 <p05.0>:
   bd118:	00000005 00000019 0000007d              ........}...

000bd124 <link_const_data_end>:
   bd124:	000b59f9 	.word	0x000b59f9
   bd128:	000b7c15 	.word	0x000b7c15
   bd12c:	000b7d8d 	.word	0x000b7d8d
   bd130:	000b7ed9 	.word	0x000b7ed9
   bd134:	000b8065 	.word	0x000b8065
   bd138:	000b8075 	.word	0x000b8075
   bd13c:	000b80bd 	.word	0x000b80bd
   bd140:	000b8b8d 	.word	0x000b8b8d
   bd144:	000b8cf1 	.word	0x000b8cf1
